/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.BundleDTO
import org.openapitools.client.model.BurnDTO
import org.openapitools.client.model.LiquidityPositionDTO
import org.openapitools.client.model.LiquidityPositionSnapshotDTO
import org.openapitools.client.model.MintDTO
import org.openapitools.client.model.PairDTO
import org.openapitools.client.model.PairDayDataDTO
import org.openapitools.client.model.PairHourDataDTO
import org.openapitools.client.model.SwapDTO
import org.openapitools.client.model.TokenDTO
import org.openapitools.client.model.TokenDayDataDTO
import org.openapitools.client.model.TransactionDTO
import org.openapitools.client.model.UniswapDayDataDTO
import org.openapitools.client.model.UniswapFactoryDTO
import org.openapitools.client.model.UserDTO
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object UniswapV2Api {

  def apply(baseUrl: String = "https://onchain.coinapi.io") = new UniswapV2Api(baseUrl)
}

class UniswapV2Api(baseUrl: String) {

  /**
   * Gets bundles.
   * 
   * Expected answers:
   *   code 200 : Seq[BundleDTO] (successful operation)
   */
  def uniswapV2BundlesCurrent(): ApiRequest[Seq[BundleDTO]] =
    ApiRequest[Seq[BundleDTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv2/bundles/current", "application/json")
      .withSuccessResponse[Seq[BundleDTO]](200)
      

  /**
   * Gets burns.
   * 
   * Expected answers:
   *   code 200 : Seq[BurnDTO] (successful operation)
   */
  def uniswapV2BurnsCurrent(): ApiRequest[Seq[BurnDTO]] =
    ApiRequest[Seq[BurnDTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv2/burns/current", "application/json")
      .withSuccessResponse[Seq[BurnDTO]](200)
      

  /**
   * Gets liquidityPositionSnapshots.
   * 
   * Expected answers:
   *   code 200 : Seq[LiquidityPositionSnapshotDTO] (successful operation)
   */
  def uniswapV2LiquidityPositionSnapshotsCurrent(): ApiRequest[Seq[LiquidityPositionSnapshotDTO]] =
    ApiRequest[Seq[LiquidityPositionSnapshotDTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv2/liquidityPositionSnapshots/current", "application/json")
      .withSuccessResponse[Seq[LiquidityPositionSnapshotDTO]](200)
      

  /**
   * Gets liquidityPositions.
   * 
   * Expected answers:
   *   code 200 : Seq[LiquidityPositionDTO] (successful operation)
   */
  def uniswapV2LiquidityPositionsCurrent(): ApiRequest[Seq[LiquidityPositionDTO]] =
    ApiRequest[Seq[LiquidityPositionDTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv2/liquidityPositions/current", "application/json")
      .withSuccessResponse[Seq[LiquidityPositionDTO]](200)
      

  /**
   * Gets mints.
   * 
   * Expected answers:
   *   code 200 : Seq[MintDTO] (successful operation)
   */
  def uniswapV2MintsCurrent(): ApiRequest[Seq[MintDTO]] =
    ApiRequest[Seq[MintDTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv2/mints/current", "application/json")
      .withSuccessResponse[Seq[MintDTO]](200)
      

  /**
   * Gets pairDayData.
   * 
   * Expected answers:
   *   code 200 : Seq[PairDayDataDTO] (successful operation)
   */
  def uniswapV2PairDayDataCurrent(): ApiRequest[Seq[PairDayDataDTO]] =
    ApiRequest[Seq[PairDayDataDTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv2/pairDayData/current", "application/json")
      .withSuccessResponse[Seq[PairDayDataDTO]](200)
      

  /**
   * Gets pairHourData.
   * 
   * Expected answers:
   *   code 200 : Seq[PairHourDataDTO] (successful operation)
   */
  def uniswapV2PairHourDataCurrent(): ApiRequest[Seq[PairHourDataDTO]] =
    ApiRequest[Seq[PairHourDataDTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv2/pairHourData/current", "application/json")
      .withSuccessResponse[Seq[PairHourDataDTO]](200)
      

  /**
   * Gets pairs.
   * 
   * Expected answers:
   *   code 200 : Seq[PairDTO] (successful operation)
   * 
   * @param id Pair contract address.
   */
  def uniswapV2PairsCurrent(id: Option[String] = None): ApiRequest[Seq[PairDTO]] =
    ApiRequest[Seq[PairDTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv2/pairs/current", "application/json")
      .withQueryParam("id", id)
      .withSuccessResponse[Seq[PairDTO]](200)
      

  /**
   * Gets swaps.
   * 
   * Expected answers:
   *   code 200 : Seq[SwapDTO] (successful operation)
   * 
   * @param pair Reference to pair.
   */
  def uniswapV2SwapsCurrent(pair: Option[String] = None): ApiRequest[Seq[SwapDTO]] =
    ApiRequest[Seq[SwapDTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv2/swaps/current", "application/json")
      .withQueryParam("pair", pair)
      .withSuccessResponse[Seq[SwapDTO]](200)
      

  /**
   * Gets tokenDayData.
   * 
   * Expected answers:
   *   code 200 : Seq[TokenDayDataDTO] (successful operation)
   */
  def uniswapV2TokenDayDataCurrent(): ApiRequest[Seq[TokenDayDataDTO]] =
    ApiRequest[Seq[TokenDayDataDTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv2/tokenDayData/current", "application/json")
      .withSuccessResponse[Seq[TokenDayDataDTO]](200)
      

  /**
   * Gets tokens.
   * 
   * Expected answers:
   *   code 200 : Seq[TokenDTO] (successful operation)
   */
  def uniswapV2TokensCurrent(): ApiRequest[Seq[TokenDTO]] =
    ApiRequest[Seq[TokenDTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv2/tokens/current", "application/json")
      .withSuccessResponse[Seq[TokenDTO]](200)
      

  /**
   * Gets transactions.
   * 
   * Expected answers:
   *   code 200 : Seq[TransactionDTO] (successful operation)
   */
  def uniswapV2TransactionsCurrent(): ApiRequest[Seq[TransactionDTO]] =
    ApiRequest[Seq[TransactionDTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv2/transactions/current", "application/json")
      .withSuccessResponse[Seq[TransactionDTO]](200)
      

  /**
   * Gets uniswapDayData.
   * 
   * Expected answers:
   *   code 200 : Seq[UniswapDayDataDTO] (successful operation)
   */
  def uniswapV2UniswapDayDataCurrent(): ApiRequest[Seq[UniswapDayDataDTO]] =
    ApiRequest[Seq[UniswapDayDataDTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv2/uniswapDayData/current", "application/json")
      .withSuccessResponse[Seq[UniswapDayDataDTO]](200)
      

  /**
   * Gets uniswapFactories.
   * 
   * Expected answers:
   *   code 200 : Seq[UniswapFactoryDTO] (successful operation)
   */
  def uniswapV2UniswapFactoriesCurrent(): ApiRequest[Seq[UniswapFactoryDTO]] =
    ApiRequest[Seq[UniswapFactoryDTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv2/uniswapFactories/current", "application/json")
      .withSuccessResponse[Seq[UniswapFactoryDTO]](200)
      

  /**
   * Gets users.
   * 
   * Expected answers:
   *   code 200 : Seq[UserDTO] (successful operation)
   */
  def uniswapV2UsersCurrent(): ApiRequest[Seq[UserDTO]] =
    ApiRequest[Seq[UserDTO]](ApiMethods.GET, baseUrl, "/dapps/uniswapv2/users/current", "application/json")
      .withSuccessResponse[Seq[UserDTO]](200)
      



}

