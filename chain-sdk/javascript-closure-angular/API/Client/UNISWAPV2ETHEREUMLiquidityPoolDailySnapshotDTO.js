goog.provide('API.Client.UNISWAP_V2_ETHEREUM.LiquidityPoolDailySnapshotDTO');

/**
 * Represents a liquidity pool daily snapshot for Uniswap V2.
 * @record
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO = function() {}

/**
 * @type {!Date}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.entryTime;

/**
 * @type {!Date}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.recvTime;

/**
 * Number of block in which entity was recorded.
 * @type {!number}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.blockNumber;

/**
 * .
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.blockRange;

/**
 * (smart contract address of the pool)-(# of days since Unix epoch time)
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.id;

/**
 * The protocol this snapshot belongs to
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.protocol;

/**
 * The pool this snapshot belongs to
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.pool;

/**
 * Timestamp of this snapshot
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.timestamp;

/**
 * Current TVL (Total Value Locked) of this pool
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.totalValueLockedUsd;

/**
 * All revenue generated by the liquidity pool, accrued to the supply side.
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.cumulativeSupplySideRevenueUsd;

/**
 * Daily revenue generated by the liquidity pool, accrued to the supply side.
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.dailySupplySideRevenueUsd;

/**
 * All revenue generated by the liquidity pool, accrued to the protocol.
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.cumulativeProtocolSideRevenueUsd;

/**
 * Daily revenue generated by the liquidity pool, accrued to the protocol.
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.dailyProtocolSideRevenueUsd;

/**
 * All revenue generated by the liquidity pool.
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.cumulativeTotalRevenueUsd;

/**
 * Daily revenue generated by the liquidity pool.
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.dailyTotalRevenueUsd;

/**
 * All trade volume occurred in a given day, in USD.
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.dailyVolumeUsd;

/**
 * All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field.
 * @type {!Array<!string>}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.dailyVolumeByTokenAmount;

/**
 * All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field..
 * @type {!Array<!string>}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.dailyVolumeByTokenUsd;

/**
 * All historical trade volume occurred in this pool, in USD.
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.cumulativeVolumeUsd;

/**
 * Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.
 * @type {!Array<!string>}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.inputTokenBalances;

/**
 * Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
 * @type {!Array<!string>}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.inputTokenWeights;

/**
 * Total supply of output token. Note that certain DEXes don't have an output token (e.g. Bancor).
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.outputTokenSupply;

/**
 * Price per share of output token in USD.
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.outputTokenPriceUsd;

/**
 * Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY..
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.stakedOutputTokenAmount;

/**
 * Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
 * @type {!Array<!string>}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.rewardTokenEmissionsAmount;

/**
 * Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
 * @type {!Array<!string>}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.rewardTokenEmissionsUsd;

