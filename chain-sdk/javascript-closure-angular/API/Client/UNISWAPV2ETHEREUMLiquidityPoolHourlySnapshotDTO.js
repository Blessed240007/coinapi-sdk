goog.provide('API.Client.UNISWAP_V2_ETHEREUM.LiquidityPoolHourlySnapshotDTO');

/**
 * 
 * @record
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO = function() {}

/**
 * @type {!Date}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.entryTime;

/**
 * @type {!Date}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.recvTime;

/**
 * Number of block in which entity was recorded.
 * @type {!number}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.blockNumber;

/**
 * 
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.blockRange;

/**
 * (smart contract address of the pool)-(# of hours since Unix epoch time)
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.id;

/**
 * The protocol this snapshot belongs to
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.protocol;

/**
 * The pool this snapshot belongs to
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.pool;

/**
 * Timestamp of this snapshot
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.timestamp;

/**
 * Current TVL (Total Value Locked) of this pool
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.totalValueLockedUsd;

/**
 * All revenue generated by the liquidity pool, accrued to the supply side.
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.cumulativeSupplySideRevenueUsd;

/**
 * Hourly revenue generated by the liquidity pool, accrued to the supply side.
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.hourlySupplySideRevenueUsd;

/**
 * All revenue generated by the liquidity pool, accrued to the protocol.
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.cumulativeProtocolSideRevenueUsd;

/**
 * Hourly revenue generated by the liquidity pool, accrued to the protocol.
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.hourlyProtocolSideRevenueUsd;

/**
 * All revenue generated by the liquidity pool.
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.cumulativeTotalRevenueUsd;

/**
 * Hourly revenue generated by the liquidity pool.
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.hourlyTotalRevenueUsd;

/**
 * All trade volume occurred in a given hour, in USD
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.hourlyVolumeUsd;

/**
 * All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool's 'inputTokens' field.
 * @type {!Array<!string>}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.hourlyVolumeByTokenAmount;

/**
 * All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool's 'inputTokens' field.
 * @type {!Array<!string>}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.hourlyVolumeByTokenUsd;

/**
 * All historical trade volume occurred in this pool, in USD
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.cumulativeVolumeUsd;

/**
 * Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field
 * @type {!Array<!string>}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.inputTokenBalances;

/**
 * Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool
 * @type {!Array<!string>}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.inputTokenWeights;

/**
 * Total supply of output token. Note that certain DEXes don't have an output token (e.g. Bancor)
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.outputTokenSupply;

/**
 * Price per share of output token in USD
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.outputTokenPriceUsd;

/**
 * Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.stakedOutputTokenAmount;

/**
 * Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
 * @type {!Array<!string>}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.rewardTokenEmissionsAmount;

/**
 * Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
 * @type {!Array<!string>}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO.prototype.rewardTokenEmissionsUsd;

