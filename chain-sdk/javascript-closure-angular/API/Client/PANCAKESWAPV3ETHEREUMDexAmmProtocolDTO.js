goog.provide('API.Client.PANCAKESWAP_V3_ETHEREUM.DexAmmProtocolDTO');

/**
 *  Decentralized exchange (Dex) automated market maker (Amm) protocol. It's an entity that represents a protocol involving a smart contract that use automated market makers.
 * @record
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO = function() {}

/**
 * @type {!Date}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.entryTime;

/**
 * @type {!Date}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.recvTime;

/**
 * Number of block in which entity was recorded.
 * @type {!number}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.blockNumber;

/**
 * 
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.blockRange;

/**
 * Smart contract address of the protocol's main contract (Factory, Registry, etc).
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.id;

/**
 * Name of the protocol, including version. e.g. Uniswap v3.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.name;

/**
 * Slug of protocol, including version. e.g. uniswap-v3.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.slug;

/**
 * Version of the subgraph schema, in SemVer format (e.g. 1.0.0).
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.schemaVersion;

/**
 * Version of the subgraph implementation, in SemVer format (e.g. 1.0.0).
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.subgraphVersion;

/**
 * Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0).
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.methodologyVersion;

/**
 * Current TVL (Total Value Locked) of the entire protocol.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.totalValueLockedUsd;

/**
 * The sum of all active and non-active liquidity in USD for this pool.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.totalLiquidityUsd;

/**
 * All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.activeLiquidityUsd;

/**
 * All protocol-side value locking in USD that remains uncollected and unused in the protocol.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.uncollectedProtocolSideValueUsd;

/**
 * All supply-side value locking in USD that remains uncollected and unused in the protocol.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.uncollectedSupplySideValueUsd;

/**
 * Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.protocolControlledValueUsd;

/**
 * All historical volume in USD.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.cumulativeVolumeUsd;

/**
 * Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.cumulativeSupplySideRevenueUsd;

/**
 * Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushiâ€™s 0.05%). OpenSea 10% sell fee.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.cumulativeProtocolSideRevenueUsd;

/**
 * All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.cumulativeTotalRevenueUsd;

/**
 * Number of cumulative unique users.
 * @type {!number}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.cumulativeUniqueUsers;

/**
 * Number of cumulative liquidity providers.
 * @type {!number}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.cumulativeUniqueLPs;

/**
 * Number of cumulative traders
 * @type {!number}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.cumulativeUniqueTraders;

/**
 * Total number of pools.
 * @type {!number}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.totalPoolCount;

/**
 * Total number of open positions.
 * @type {!number}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.openPositionCount;

/**
 * Total number of positions (open and closed).
 * @type {!number}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.cumulativePositionCount;

/**
 * Day ID of the most recent daily snapshot.
 * @type {!number}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.lastSnapshotDayId;

/**
 * Timestamp of the last time this entity was updated
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.lastUpdateTimestamp;

/**
 * Block number of the last time this entity was updated.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.lastUpdateBlockNumber;

/**
 * This is a boolean to indicate whether or not the pools have been instantiated the were initialized before Optimism regenesis.
 * @type {!boolean}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO.prototype.regenesis;

