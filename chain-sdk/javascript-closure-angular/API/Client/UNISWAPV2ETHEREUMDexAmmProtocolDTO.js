goog.provide('API.Client.UNISWAP_V2_ETHEREUM.DexAmmProtocolDTO');

/**
 *  Decentralized exchange (Dex) automated market maker (Amm) protocol. It's an entity that represents a protocol involving a smart contract that use automated market makers.
 * @record
 */
API.Client.UNISWAPV2ETHEREUMDexAmmProtocolDTO = function() {}

/**
 * @type {!Date}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMDexAmmProtocolDTO.prototype.entryTime;

/**
 * @type {!Date}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMDexAmmProtocolDTO.prototype.recvTime;

/**
 * Number of block in which entity was recorded.
 * @type {!number}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMDexAmmProtocolDTO.prototype.blockNumber;

/**
 * 
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMDexAmmProtocolDTO.prototype.blockRange;

/**
 * Smart contract address of the protocol's main contract (Factory, Registry, etc)
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMDexAmmProtocolDTO.prototype.id;

/**
 * Name of the protocol, including version. e.g. Uniswap v3
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMDexAmmProtocolDTO.prototype.name;

/**
 * Slug of protocol, including version. e.g. uniswap-v3
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMDexAmmProtocolDTO.prototype.slug;

/**
 *  Version of the subgraph schema, in SemVer format (e.g. 1.0.0)
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMDexAmmProtocolDTO.prototype.schemaVersion;

/**
 * Version of the subgraph implementation, in SemVer format (e.g. 1.0.0)
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMDexAmmProtocolDTO.prototype.subgraphVersion;

/**
 * Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0)
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMDexAmmProtocolDTO.prototype.methodologyVersion;

/**
 * Current TVL (Total Value Locked) of the entire protocol
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMDexAmmProtocolDTO.prototype.totalValueLockedUsd;

/**
 * Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMDexAmmProtocolDTO.prototype.protocolControlledValueUsd;

/**
 * All historical volume in USD
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMDexAmmProtocolDTO.prototype.cumulativeVolumeUsd;

/**
 * Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMDexAmmProtocolDTO.prototype.cumulativeSupplySideRevenueUsd;

/**
 * Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushiâ€™s 0.05%). OpenSea 10% sell fee.
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMDexAmmProtocolDTO.prototype.cumulativeProtocolSideRevenueUsd;

/**
 * All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMDexAmmProtocolDTO.prototype.cumulativeTotalRevenueUsd;

/**
 * Number of cumulative unique users
 * @type {!number}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMDexAmmProtocolDTO.prototype.cumulativeUniqueUsers;

/**
 * Total number of pools
 * @type {!number}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMDexAmmProtocolDTO.prototype.totalPoolCount;

