goog.provide('API.Client.PANCAKESWAP_V3_ETHEREUM.LiquidityPoolDailySnapshotDTO');

/**
 * Represents a liquidity pool daily snapshot for PancakeSwap V3.
 * @record
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO = function() {}

/**
 * @type {!Date}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.entryTime;

/**
 * @type {!Date}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.recvTime;

/**
 * Number of block in which entity was recorded.
 * @type {!number}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.blockNumber;

/**
 * .
 * @type {!number}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.vid;

/**
 * The Ethereum block number associated with the liquidity pool daily snapshot.
 * @type {!number}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.block;

/**
 * Identifier, format: (smart contract address of the pool)-(# of days since Unix epoch time).
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.id;

/**
 * Number of days since Unix epoch time.
 * @type {!number}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.day;

/**
 * Protocol associated with the liquidity pool.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.protocol;

/**
 * Pool this snapshot belongs to.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.pool;

/**
 * Current tick representing the price of token0/token1.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.tick;

/**
 * Current TVL (Total Value Locked) of this pool.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.totalValueLockedUsd;

/**
 * The sum of all active and non-active liquidity for this pool.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.totalLiquidity;

/**
 * Sum of all active and non-active liquidity in USD for this pool.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.totalLiquidityUsd;

/**
 * All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.activeLiquidity;

/**
 * All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.activeLiquidityUsd;

/**
 * All protocol-side value locked in token amounts that remains uncollected and unused in the pool.
 * @type {!Array<!string>}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.uncollectedProtocolSideTokenAmounts;

/**
 * All protocol-side value locking in USD that remains uncollected and unused in the pool.
 * @type {!Array<!string>}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.uncollectedProtocolSideValuesUsd;

/**
 * All supply-side value locked in token amounts that remains uncollected and unused in the pool.
 * @type {!Array<!string>}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.uncollectedSupplySideTokenAmounts;

/**
 * All supply-side value locked in USD that remains uncollected and unused in the pool.
 * @type {!Array<!string>}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.uncollectedSupplySideValuesUsd;

/**
 * All revenue generated by the liquidity pool, accrued to the supply side.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.cumulativeSupplySideRevenueUsd;

/**
 * Daily revenue generated by the liquidity pool, accrued to the supply side.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.dailySupplySideRevenueUsd;

/**
 * All revenue generated by the liquidity pool, accrued to the protocol.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.cumulativeProtocolSideRevenueUsd;

/**
 * Daily revenue generated by the liquidity pool, accrued to the protocol.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.dailyProtocolSideRevenueUsd;

/**
 * All revenue generated by the liquidity pool.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.cumulativeTotalRevenueUsd;

/**
 * Daily revenue generated by the liquidity pool.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.dailyTotalRevenueUsd;

/**
 * All historical trade volume occurred in this pool, in USD.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.cumulativeVolumeUsd;

/**
 * All trade volume occurred in a given day, in USD.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.dailyVolumeUsd;

/**
 * All trade volume , in native amount. The ordering should be the same as the pool's `inputTokens` field.
 * @type {!Array<!string>}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.cumulativeVolumeByTokenAmount;

/**
 * All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field.
 * @type {!Array<!string>}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.dailyVolumeByTokenAmount;

/**
 * All trade volume, in USD. The ordering should be the same as the pool's `inputTokens` field.
 * @type {!Array<!string>}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.cumulativeVolumeByTokenUsd;

/**
 *  All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.
 * @type {!Array<!string>}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.dailyVolumeByTokenUsd;

/**
 * Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.
 * @type {!Array<!string>}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.inputTokenBalances;

/**
 * Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field.
 * @type {!Array<!string>}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.inputTokenBalancesUsd;

/**
 * Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
 * @type {!Array<!string>}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.inputTokenWeights;

/**
 * Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.stakedOutputTokenAmount;

/**
 * Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
 * @type {!Array<!string>}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.rewardTokenEmissionsAmount;

/**
 * Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
 * @type {!Array<!string>}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.rewardTokenEmissionsUsd;

/**
 * Total number of deposits (add liquidity).
 * @type {!number}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.cumulativeDepositCount;

/**
 * Total number of deposits (add liquidity) in a day.
 * @type {!number}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.dailyDepositCount;

/**
 * Total number of withdrawals (remove liquidity).
 * @type {!number}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.cumulativeWithdrawCount;

/**
 * Total number of withdrawals (remove liquidity) in a day.
 * @type {!number}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.dailyWithdrawCount;

/**
 * Total number of trades (swaps).
 * @type {!number}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.cumulativeSwapCount;

/**
 * Total number of trades (swaps) in a day.
 * @type {!number}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.dailySwapCount;

/**
 * Number of positions in this market.
 * @type {!number}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.positionCount;

/**
 * Number of open positions in this market.
 * @type {!number}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.openPositionCount;

/**
 * Number of closed positions in this market.
 * @type {!number}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.closedPositionCount;

/**
 * Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed).
 * @type {!string}
 * @export
 */
API.Client.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.prototype.timestamp;

