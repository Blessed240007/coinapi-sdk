goog.provide('API.Client.UNISWAP_V2_ETHEREUM.LiquidityPoolDTO');

/**
 * Pool-level metadata.
 * @record
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO = function() {}

/**
 * @type {!Date}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.entryTime;

/**
 * @type {!Date}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.recvTime;

/**
 * Number of block in which entity was recorded.
 * @type {!number}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.blockNumber;

/**
 * .
 * @type {!number}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.vid;

/**
 * Smart contract address of the pool
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.id;

/**
 * The protocol this pool belongs to
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.protocol;

/**
 * Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT)
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.name;

/**
 * Symbol of liquidity pool (e.g. 3CRV)
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.symbol;

/**
 * Tokens that need to be deposited to take a position in the protocol
 * @type {!Array<!string>}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.inputTokens;

/**
 * Token that is minted to track ownership of position in protocol
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.outputToken;

/**
 * Aditional tokens that are given as reward for position in a protocol
 * @type {!Array<!string>}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.rewardTokens;

/**
 * Fees per trade incurred to the user
 * @type {!Array<!string>}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.fees;

/**
 * Whether this pool is single-sided
 * @type {!boolean}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.isSingleSided;

/**
 * Creation timestamp
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.createdTimestamp;

/**
 * Creation block number
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.createdBlockNumber;

/**
 * Current TVL (Total Value Locked) of this pool in USD
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.totalValueLockedUsd;

/**
 * All revenue generated by the liquidity pool, accrued to the supply side
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.cumulativeSupplySideRevenueUsd;

/**
 * All revenue generated by the liquidity pool, accrued to the protocol
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.cumulativeProtocolSideRevenueUsd;

/**
 * All revenue generated by the liquidity pool
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.cumulativeTotalRevenueUsd;

/**
 * All historical trade volume occurred in this pool, in USD
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.cumulativeVolumeUsd;

/**
 * Amount of input tokens in the pool
 * @type {!Array<!string>}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.inputTokenBalances;

/**
 * Weights of input tokens in the liquidity pool in percentage values
 * @type {!Array<!string>}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.inputTokenWeights;

/**
 * Total supply of output token
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.outputTokenSupply;

/**
 * Price per share of output token in USD
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.outputTokenPriceUsd;

/**
 * Total supply of output tokens that are staked
 * @type {!string}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.stakedOutputTokenAmount;

/**
 * Per-block reward token emission as of the current block normalized to a day, in token's native amount
 * @type {!Array<!string>}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.rewardTokenEmissionsAmount;

/**
 * Per-block reward token emission as of the current block normalized to a day, in USD value
 * @type {!Array<!string>}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.rewardTokenEmissionsUsd;

/**
 * Evaluated ask value of the liquidity pool.
 * @type {!number}
 * @export
 */
API.Client.UNISWAPV2ETHEREUMLiquidityPoolDTO.prototype.evaluatedAsk;

