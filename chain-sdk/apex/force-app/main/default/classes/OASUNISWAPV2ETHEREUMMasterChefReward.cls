/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * 
 */
public class OASUNISWAPV2ETHEREUMMasterChefReward implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * 
     * @return blockRange
     */
    public String blockRange { get; set; }

    /**
     * Address of the rewarder contract associated to some staking pool
     * @return id
     */
    public String id { get; set; }

    /**
     * Staking pool to which this rewarder is associated
     * @return pool
     */
    public String pool { get; set; }

    /**
     * Address of the token given by this rewarder
     * @return rewardToken
     */
    public String rewardToken { get; set; }

    /**
     * Number of tokens rewarded per second per LP staked in pool by this rewarder
     * @return tokenPerSec
     */
    public String tokenPerSec { get; set; }

    /**
     * Timestamp from the last time tokenPerSec was calculated
     * @return rateCalculatedAt
     */
    public String rateCalculatedAt { get; set; }

    /**
     * A field to keep track if there are any funds to give away in the rewarder
     * @return hasFunds
     */
    public Boolean hasFunds { get; set; }

    /**
     * When it was last checked that there were funds in the rewarder
     * @return hasFundsAt
     */
    public String hasFundsAt { get; set; }

    /**
     * If true it means the rewardRate can be retrieved directly from the contract, without crazy math
     * @return canRetrieveRate
     */
    public Boolean canRetrieveRate { get; set; }

    /**
     * Utility field to calculate the rewarder reward rate
     * @return rewardRateCalculationInProgress
     */
    public Boolean rewardRateCalculationInProgress { get; set; }

    /**
     * 
     * @return probes
     */
    public List<String> probes { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'reward_token' => 'rewardToken',
        'token_per_sec' => 'tokenPerSec',
        'rate_calculated_at' => 'rateCalculatedAt',
        'has_funds' => 'hasFunds',
        'has_funds_at' => 'hasFundsAt',
        'can_retrieve_rate' => 'canRetrieveRate',
        'reward_rate_calculation_in_progress' => 'rewardRateCalculationInProgress'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'reward_token' => 'rewardToken',
        'token_per_sec' => 'tokenPerSec',
        'rate_calculated_at' => 'rateCalculatedAt',
        'has_funds' => 'hasFunds',
        'has_funds_at' => 'hasFundsAt',
        'can_retrieve_rate' => 'canRetrieveRate',
        'reward_rate_calculation_in_progress' => 'rewardRateCalculationInProgress'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'reward_token' => 'rewardToken',
        'token_per_sec' => 'tokenPerSec',
        'rate_calculated_at' => 'rateCalculatedAt',
        'has_funds' => 'hasFunds',
        'has_funds_at' => 'hasFundsAt',
        'can_retrieve_rate' => 'canRetrieveRate',
        'reward_rate_calculation_in_progress' => 'rewardRateCalculationInProgress'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'reward_token' => 'rewardToken',
        'token_per_sec' => 'tokenPerSec',
        'rate_calculated_at' => 'rateCalculatedAt',
        'has_funds' => 'hasFunds',
        'has_funds_at' => 'hasFundsAt',
        'can_retrieve_rate' => 'canRetrieveRate',
        'reward_rate_calculation_in_progress' => 'rewardRateCalculationInProgress'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'reward_token' => 'rewardToken',
        'token_per_sec' => 'tokenPerSec',
        'rate_calculated_at' => 'rateCalculatedAt',
        'has_funds' => 'hasFunds',
        'has_funds_at' => 'hasFundsAt',
        'can_retrieve_rate' => 'canRetrieveRate',
        'reward_rate_calculation_in_progress' => 'rewardRateCalculationInProgress'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'reward_token' => 'rewardToken',
        'token_per_sec' => 'tokenPerSec',
        'rate_calculated_at' => 'rateCalculatedAt',
        'has_funds' => 'hasFunds',
        'has_funds_at' => 'hasFundsAt',
        'can_retrieve_rate' => 'canRetrieveRate',
        'reward_rate_calculation_in_progress' => 'rewardRateCalculationInProgress'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'reward_token' => 'rewardToken',
        'token_per_sec' => 'tokenPerSec',
        'rate_calculated_at' => 'rateCalculatedAt',
        'has_funds' => 'hasFunds',
        'has_funds_at' => 'hasFundsAt',
        'can_retrieve_rate' => 'canRetrieveRate',
        'reward_rate_calculation_in_progress' => 'rewardRateCalculationInProgress'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'reward_token' => 'rewardToken',
        'token_per_sec' => 'tokenPerSec',
        'rate_calculated_at' => 'rateCalculatedAt',
        'has_funds' => 'hasFunds',
        'has_funds_at' => 'hasFundsAt',
        'can_retrieve_rate' => 'canRetrieveRate',
        'reward_rate_calculation_in_progress' => 'rewardRateCalculationInProgress'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'reward_token' => 'rewardToken',
        'token_per_sec' => 'tokenPerSec',
        'rate_calculated_at' => 'rateCalculatedAt',
        'has_funds' => 'hasFunds',
        'has_funds_at' => 'hasFundsAt',
        'can_retrieve_rate' => 'canRetrieveRate',
        'reward_rate_calculation_in_progress' => 'rewardRateCalculationInProgress'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'reward_token' => 'rewardToken',
        'token_per_sec' => 'tokenPerSec',
        'rate_calculated_at' => 'rateCalculatedAt',
        'has_funds' => 'hasFunds',
        'has_funds_at' => 'hasFundsAt',
        'can_retrieve_rate' => 'canRetrieveRate',
        'reward_rate_calculation_in_progress' => 'rewardRateCalculationInProgress'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'reward_token' => 'rewardToken',
        'token_per_sec' => 'tokenPerSec',
        'rate_calculated_at' => 'rateCalculatedAt',
        'has_funds' => 'hasFunds',
        'has_funds_at' => 'hasFundsAt',
        'can_retrieve_rate' => 'canRetrieveRate',
        'reward_rate_calculation_in_progress' => 'rewardRateCalculationInProgress'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASUNISWAPV2ETHEREUMMasterChefReward() {
        probes = new List<String>();
    }

    public static OASUNISWAPV2ETHEREUMMasterChefReward getExample() {
        OASUNISWAPV2ETHEREUMMasterChefReward unISWAPV2ETHEREUMMasterChefRewarderDTO = new OASUNISWAPV2ETHEREUMMasterChefReward();
          unISWAPV2ETHEREUMMasterChefRewarderDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          unISWAPV2ETHEREUMMasterChefRewarderDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          unISWAPV2ETHEREUMMasterChefRewarderDTO.blockNumber = 123456789L;
          unISWAPV2ETHEREUMMasterChefRewarderDTO.blockRange = '';
          unISWAPV2ETHEREUMMasterChefRewarderDTO.id = '';
          unISWAPV2ETHEREUMMasterChefRewarderDTO.pool = '';
          unISWAPV2ETHEREUMMasterChefRewarderDTO.rewardToken = '';
          unISWAPV2ETHEREUMMasterChefRewarderDTO.tokenPerSec = '';
          unISWAPV2ETHEREUMMasterChefRewarderDTO.rateCalculatedAt = '';
          unISWAPV2ETHEREUMMasterChefRewarderDTO.hasFunds = true;
          unISWAPV2ETHEREUMMasterChefRewarderDTO.hasFundsAt = '';
          unISWAPV2ETHEREUMMasterChefRewarderDTO.canRetrieveRate = true;
          unISWAPV2ETHEREUMMasterChefRewarderDTO.rewardRateCalculationInProgress = true;
          unISWAPV2ETHEREUMMasterChefRewarderDTO.probes = new List<String>{''};
        return unISWAPV2ETHEREUMMasterChefRewarderDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASUNISWAPV2ETHEREUMMasterChefReward) {           
            OASUNISWAPV2ETHEREUMMasterChefReward unISWAPV2ETHEREUMMasterChefRewarderDTO = (OASUNISWAPV2ETHEREUMMasterChefReward) obj;
            return this.entryTime == unISWAPV2ETHEREUMMasterChefRewarderDTO.entryTime
                && this.recvTime == unISWAPV2ETHEREUMMasterChefRewarderDTO.recvTime
                && this.blockNumber == unISWAPV2ETHEREUMMasterChefRewarderDTO.blockNumber
                && this.blockRange == unISWAPV2ETHEREUMMasterChefRewarderDTO.blockRange
                && this.id == unISWAPV2ETHEREUMMasterChefRewarderDTO.id
                && this.pool == unISWAPV2ETHEREUMMasterChefRewarderDTO.pool
                && this.rewardToken == unISWAPV2ETHEREUMMasterChefRewarderDTO.rewardToken
                && this.tokenPerSec == unISWAPV2ETHEREUMMasterChefRewarderDTO.tokenPerSec
                && this.rateCalculatedAt == unISWAPV2ETHEREUMMasterChefRewarderDTO.rateCalculatedAt
                && this.hasFunds == unISWAPV2ETHEREUMMasterChefRewarderDTO.hasFunds
                && this.hasFundsAt == unISWAPV2ETHEREUMMasterChefRewarderDTO.hasFundsAt
                && this.canRetrieveRate == unISWAPV2ETHEREUMMasterChefRewarderDTO.canRetrieveRate
                && this.rewardRateCalculationInProgress == unISWAPV2ETHEREUMMasterChefRewarderDTO.rewardRateCalculationInProgress
                && this.probes == unISWAPV2ETHEREUMMasterChefRewarderDTO.probes;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (blockRange == null ? 0 : System.hashCode(blockRange));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (pool == null ? 0 : System.hashCode(pool));
        hashCode = (17 * hashCode) + (rewardToken == null ? 0 : System.hashCode(rewardToken));
        hashCode = (17 * hashCode) + (tokenPerSec == null ? 0 : System.hashCode(tokenPerSec));
        hashCode = (17 * hashCode) + (rateCalculatedAt == null ? 0 : System.hashCode(rateCalculatedAt));
        hashCode = (17 * hashCode) + (hasFunds == null ? 0 : System.hashCode(hasFunds));
        hashCode = (17 * hashCode) + (hasFundsAt == null ? 0 : System.hashCode(hasFundsAt));
        hashCode = (17 * hashCode) + (canRetrieveRate == null ? 0 : System.hashCode(canRetrieveRate));
        hashCode = (17 * hashCode) + (rewardRateCalculationInProgress == null ? 0 : System.hashCode(rewardRateCalculationInProgress));
        hashCode = (17 * hashCode) + (probes == null ? 0 : System.hashCode(probes));
        return hashCode;
    }
}

