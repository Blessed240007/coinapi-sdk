/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * 
 */
public class OASCURVEFINANCEETHEREUMTokenDTO implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * 
     * @return vid
     */
    public Long vid { get; set; }

    /**
     * Smart contract address of the token
     * @return id
     */
    public String id { get; set; }

    /**
     * Name of the token, mirrored from the smart contract
     * @return name
     */
    public String name { get; set; }

    /**
     * Symbol of the token, mirrored from the smart contract
     * @return symbol
     */
    public String symbol { get; set; }

    /**
     * The number of decimal places this token uses, default to 18
     * @return decimals
     */
    public Integer decimals { get; set; }

    /**
     * Optional field to track the price of a token
     * @return lastPriceUsd
     */
    public String lastPriceUsd { get; set; }

    /**
     * Optional field to track the block number of the last token price 
     * @return lastPriceBlockNumber
     */
    public String lastPriceBlockNumber { get; set; }

    /**
     * Get tokenSymbol
     * @return tokenSymbol
     */
    public String tokenSymbol { get; private set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'last_price_usd' => 'lastPriceUsd',
        'last_price_block_number' => 'lastPriceBlockNumber',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'last_price_usd' => 'lastPriceUsd',
        'last_price_block_number' => 'lastPriceBlockNumber',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'last_price_usd' => 'lastPriceUsd',
        'last_price_block_number' => 'lastPriceBlockNumber',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'last_price_usd' => 'lastPriceUsd',
        'last_price_block_number' => 'lastPriceBlockNumber',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'last_price_usd' => 'lastPriceUsd',
        'last_price_block_number' => 'lastPriceBlockNumber',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'last_price_usd' => 'lastPriceUsd',
        'last_price_block_number' => 'lastPriceBlockNumber',
        'token_symbol' => 'tokenSymbol'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASCURVEFINANCEETHEREUMTokenDTO getExample() {
        OASCURVEFINANCEETHEREUMTokenDTO cuRVEFINANCEETHEREUMTokenDTO = new OASCURVEFINANCEETHEREUMTokenDTO();
          cuRVEFINANCEETHEREUMTokenDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          cuRVEFINANCEETHEREUMTokenDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          cuRVEFINANCEETHEREUMTokenDTO.blockNumber = 123456789L;
          cuRVEFINANCEETHEREUMTokenDTO.vid = 123456789L;
          cuRVEFINANCEETHEREUMTokenDTO.id = '';
          cuRVEFINANCEETHEREUMTokenDTO.name = '';
          cuRVEFINANCEETHEREUMTokenDTO.symbol = '';
          cuRVEFINANCEETHEREUMTokenDTO.decimals = 0;
          cuRVEFINANCEETHEREUMTokenDTO.lastPriceUsd = '';
          cuRVEFINANCEETHEREUMTokenDTO.lastPriceBlockNumber = '';
          cuRVEFINANCEETHEREUMTokenDTO.tokenSymbol = '';
        return cuRVEFINANCEETHEREUMTokenDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASCURVEFINANCEETHEREUMTokenDTO) {           
            OASCURVEFINANCEETHEREUMTokenDTO cuRVEFINANCEETHEREUMTokenDTO = (OASCURVEFINANCEETHEREUMTokenDTO) obj;
            return this.entryTime == cuRVEFINANCEETHEREUMTokenDTO.entryTime
                && this.recvTime == cuRVEFINANCEETHEREUMTokenDTO.recvTime
                && this.blockNumber == cuRVEFINANCEETHEREUMTokenDTO.blockNumber
                && this.vid == cuRVEFINANCEETHEREUMTokenDTO.vid
                && this.id == cuRVEFINANCEETHEREUMTokenDTO.id
                && this.name == cuRVEFINANCEETHEREUMTokenDTO.name
                && this.symbol == cuRVEFINANCEETHEREUMTokenDTO.symbol
                && this.decimals == cuRVEFINANCEETHEREUMTokenDTO.decimals
                && this.lastPriceUsd == cuRVEFINANCEETHEREUMTokenDTO.lastPriceUsd
                && this.lastPriceBlockNumber == cuRVEFINANCEETHEREUMTokenDTO.lastPriceBlockNumber
                && this.tokenSymbol == cuRVEFINANCEETHEREUMTokenDTO.tokenSymbol;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (vid == null ? 0 : System.hashCode(vid));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (name == null ? 0 : System.hashCode(name));
        hashCode = (17 * hashCode) + (symbol == null ? 0 : System.hashCode(symbol));
        hashCode = (17 * hashCode) + (decimals == null ? 0 : System.hashCode(decimals));
        hashCode = (17 * hashCode) + (lastPriceUsd == null ? 0 : System.hashCode(lastPriceUsd));
        hashCode = (17 * hashCode) + (lastPriceBlockNumber == null ? 0 : System.hashCode(lastPriceBlockNumber));
        hashCode = (17 * hashCode) + (tokenSymbol == null ? 0 : System.hashCode(tokenSymbol));
        return hashCode;
    }
}

