/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Entity represents a user action in the protocol involving the addition of funds to a liquidity pool.
 */
public class OASSUSHISWAPV3ETHEREUMDepositDTO implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * 
     * @return block
     */
    public Integer block { get; set; }

    /**
     * Identifier, format: (transaction hash)-(log index)
     * @return id
     */
    public String id { get; set; }

    /**
     * Transaction hash of the transaction that emitted this event.
     * @return hash
     */
    public String hash { get; set; }

    /**
     * Nonce of the transaction that emitted this event.
     * @return nonce
     */
    public String nonce { get; set; }

    /**
     * Event log index. For transactions that don\'t emit event, create arbitrary index starting from 0.
     * @return logIndex
     */
    public Integer logIndex { get; set; }

    /**
     * Gas limit of the transaction that emitted this event.
     * @return gasLimit
     */
    public String gasLimit { get; set; }

    /**
     * Gas used in this transaction. (Optional because not every chain will support this).
     * @return gasUsed
     */
    public String gasUsed { get; set; }

    /**
     * Gas price of the transaction that emitted this event.
     * @return gasPrice
     */
    public String gasPrice { get; set; }

    /**
     * The protocol this transaction belongs to.
     * @return protocol
     */
    public String protocol { get; set; }

    /**
     * Account that emitted this event.
     * @return account
     */
    public String account { get; set; }

    /**
     * The user position changed by this event.
     * @return position
     */
    public String position { get; set; }

    /**
     * The pool involving this event.
     * @return pool
     */
    public String pool { get; set; }

    /**
     * Lower tick of position.
     * @return tickLower
     */
    public String tickLower { get; set; }

    /**
     * Upper tick of position.
     * @return tickUpper
     */
    public String tickUpper { get; set; }

    /**
     * Timestamp of this event.
     * @return timestamp
     */
    public String timestamp { get; set; }

    /**
     * Amount of liquidity minted.
     * @return liquidity
     */
    public String liquidity { get; set; }

    /**
     * Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool.
     * @return inputTokens
     */
    public List<String> inputTokens { get; set; }

    /**
     * Amount of input tokens in the token\'s native unit.
     * @return inputTokenAmounts
     */
    public List<String> inputTokenAmounts { get; set; }

    /**
     * Amount of input tokens in the liquidity pool.
     * @return reserveAmounts
     */
    public List<String> reserveAmounts { get; set; }

    /**
     * USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool).
     * @return amountUsd
     */
    public String amountUsd { get; set; }

    /**
     * 
     * @return blockRange
     */
    public String blockRange { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'input_tokens' => 'inputTokens',
        'input_token_amounts' => 'inputTokenAmounts',
        'reserve_amounts' => 'reserveAmounts',
        'amount_usd' => 'amountUsd',
        'block_range' => 'blockRange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'input_tokens' => 'inputTokens',
        'input_token_amounts' => 'inputTokenAmounts',
        'reserve_amounts' => 'reserveAmounts',
        'amount_usd' => 'amountUsd',
        'block_range' => 'blockRange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'input_tokens' => 'inputTokens',
        'input_token_amounts' => 'inputTokenAmounts',
        'reserve_amounts' => 'reserveAmounts',
        'amount_usd' => 'amountUsd',
        'block_range' => 'blockRange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'input_tokens' => 'inputTokens',
        'input_token_amounts' => 'inputTokenAmounts',
        'reserve_amounts' => 'reserveAmounts',
        'amount_usd' => 'amountUsd',
        'block_range' => 'blockRange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'input_tokens' => 'inputTokens',
        'input_token_amounts' => 'inputTokenAmounts',
        'reserve_amounts' => 'reserveAmounts',
        'amount_usd' => 'amountUsd',
        'block_range' => 'blockRange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'input_tokens' => 'inputTokens',
        'input_token_amounts' => 'inputTokenAmounts',
        'reserve_amounts' => 'reserveAmounts',
        'amount_usd' => 'amountUsd',
        'block_range' => 'blockRange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'input_tokens' => 'inputTokens',
        'input_token_amounts' => 'inputTokenAmounts',
        'reserve_amounts' => 'reserveAmounts',
        'amount_usd' => 'amountUsd',
        'block_range' => 'blockRange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'input_tokens' => 'inputTokens',
        'input_token_amounts' => 'inputTokenAmounts',
        'reserve_amounts' => 'reserveAmounts',
        'amount_usd' => 'amountUsd',
        'block_range' => 'blockRange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'input_tokens' => 'inputTokens',
        'input_token_amounts' => 'inputTokenAmounts',
        'reserve_amounts' => 'reserveAmounts',
        'amount_usd' => 'amountUsd',
        'block_range' => 'blockRange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'input_tokens' => 'inputTokens',
        'input_token_amounts' => 'inputTokenAmounts',
        'reserve_amounts' => 'reserveAmounts',
        'amount_usd' => 'amountUsd',
        'block_range' => 'blockRange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'input_tokens' => 'inputTokens',
        'input_token_amounts' => 'inputTokenAmounts',
        'reserve_amounts' => 'reserveAmounts',
        'amount_usd' => 'amountUsd',
        'block_range' => 'blockRange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'input_tokens' => 'inputTokens',
        'input_token_amounts' => 'inputTokenAmounts',
        'reserve_amounts' => 'reserveAmounts',
        'amount_usd' => 'amountUsd',
        'block_range' => 'blockRange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'input_tokens' => 'inputTokens',
        'input_token_amounts' => 'inputTokenAmounts',
        'reserve_amounts' => 'reserveAmounts',
        'amount_usd' => 'amountUsd',
        'block_range' => 'blockRange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'input_tokens' => 'inputTokens',
        'input_token_amounts' => 'inputTokenAmounts',
        'reserve_amounts' => 'reserveAmounts',
        'amount_usd' => 'amountUsd',
        'block_range' => 'blockRange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'input_tokens' => 'inputTokens',
        'input_token_amounts' => 'inputTokenAmounts',
        'reserve_amounts' => 'reserveAmounts',
        'amount_usd' => 'amountUsd',
        'block_range' => 'blockRange'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASSUSHISWAPV3ETHEREUMDepositDTO() {
        inputTokens = new List<String>();
        inputTokenAmounts = new List<String>();
        reserveAmounts = new List<String>();
    }

    public static OASSUSHISWAPV3ETHEREUMDepositDTO getExample() {
        OASSUSHISWAPV3ETHEREUMDepositDTO suSHISWAPV3ETHEREUMDepositDTO = new OASSUSHISWAPV3ETHEREUMDepositDTO();
          suSHISWAPV3ETHEREUMDepositDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          suSHISWAPV3ETHEREUMDepositDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          suSHISWAPV3ETHEREUMDepositDTO.blockNumber = 123456789L;
          suSHISWAPV3ETHEREUMDepositDTO.block = 0;
          suSHISWAPV3ETHEREUMDepositDTO.id = '';
          suSHISWAPV3ETHEREUMDepositDTO.hash = '';
          suSHISWAPV3ETHEREUMDepositDTO.nonce = '';
          suSHISWAPV3ETHEREUMDepositDTO.logIndex = 0;
          suSHISWAPV3ETHEREUMDepositDTO.gasLimit = '';
          suSHISWAPV3ETHEREUMDepositDTO.gasUsed = '';
          suSHISWAPV3ETHEREUMDepositDTO.gasPrice = '';
          suSHISWAPV3ETHEREUMDepositDTO.protocol = '';
          suSHISWAPV3ETHEREUMDepositDTO.account = '';
          suSHISWAPV3ETHEREUMDepositDTO.position = '';
          suSHISWAPV3ETHEREUMDepositDTO.pool = '';
          suSHISWAPV3ETHEREUMDepositDTO.tickLower = '';
          suSHISWAPV3ETHEREUMDepositDTO.tickUpper = '';
          suSHISWAPV3ETHEREUMDepositDTO.timestamp = '';
          suSHISWAPV3ETHEREUMDepositDTO.liquidity = '';
          suSHISWAPV3ETHEREUMDepositDTO.inputTokens = new List<String>{''};
          suSHISWAPV3ETHEREUMDepositDTO.inputTokenAmounts = new List<String>{''};
          suSHISWAPV3ETHEREUMDepositDTO.reserveAmounts = new List<String>{''};
          suSHISWAPV3ETHEREUMDepositDTO.amountUsd = '';
          suSHISWAPV3ETHEREUMDepositDTO.blockRange = '';
        return suSHISWAPV3ETHEREUMDepositDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASSUSHISWAPV3ETHEREUMDepositDTO) {           
            OASSUSHISWAPV3ETHEREUMDepositDTO suSHISWAPV3ETHEREUMDepositDTO = (OASSUSHISWAPV3ETHEREUMDepositDTO) obj;
            return this.entryTime == suSHISWAPV3ETHEREUMDepositDTO.entryTime
                && this.recvTime == suSHISWAPV3ETHEREUMDepositDTO.recvTime
                && this.blockNumber == suSHISWAPV3ETHEREUMDepositDTO.blockNumber
                && this.block == suSHISWAPV3ETHEREUMDepositDTO.block
                && this.id == suSHISWAPV3ETHEREUMDepositDTO.id
                && this.hash == suSHISWAPV3ETHEREUMDepositDTO.hash
                && this.nonce == suSHISWAPV3ETHEREUMDepositDTO.nonce
                && this.logIndex == suSHISWAPV3ETHEREUMDepositDTO.logIndex
                && this.gasLimit == suSHISWAPV3ETHEREUMDepositDTO.gasLimit
                && this.gasUsed == suSHISWAPV3ETHEREUMDepositDTO.gasUsed
                && this.gasPrice == suSHISWAPV3ETHEREUMDepositDTO.gasPrice
                && this.protocol == suSHISWAPV3ETHEREUMDepositDTO.protocol
                && this.account == suSHISWAPV3ETHEREUMDepositDTO.account
                && this.position == suSHISWAPV3ETHEREUMDepositDTO.position
                && this.pool == suSHISWAPV3ETHEREUMDepositDTO.pool
                && this.tickLower == suSHISWAPV3ETHEREUMDepositDTO.tickLower
                && this.tickUpper == suSHISWAPV3ETHEREUMDepositDTO.tickUpper
                && this.timestamp == suSHISWAPV3ETHEREUMDepositDTO.timestamp
                && this.liquidity == suSHISWAPV3ETHEREUMDepositDTO.liquidity
                && this.inputTokens == suSHISWAPV3ETHEREUMDepositDTO.inputTokens
                && this.inputTokenAmounts == suSHISWAPV3ETHEREUMDepositDTO.inputTokenAmounts
                && this.reserveAmounts == suSHISWAPV3ETHEREUMDepositDTO.reserveAmounts
                && this.amountUsd == suSHISWAPV3ETHEREUMDepositDTO.amountUsd
                && this.blockRange == suSHISWAPV3ETHEREUMDepositDTO.blockRange;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (block == null ? 0 : System.hashCode(block));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (hash == null ? 0 : System.hashCode(hash));
        hashCode = (17 * hashCode) + (nonce == null ? 0 : System.hashCode(nonce));
        hashCode = (17 * hashCode) + (logIndex == null ? 0 : System.hashCode(logIndex));
        hashCode = (17 * hashCode) + (gasLimit == null ? 0 : System.hashCode(gasLimit));
        hashCode = (17 * hashCode) + (gasUsed == null ? 0 : System.hashCode(gasUsed));
        hashCode = (17 * hashCode) + (gasPrice == null ? 0 : System.hashCode(gasPrice));
        hashCode = (17 * hashCode) + (protocol == null ? 0 : System.hashCode(protocol));
        hashCode = (17 * hashCode) + (account == null ? 0 : System.hashCode(account));
        hashCode = (17 * hashCode) + (position == null ? 0 : System.hashCode(position));
        hashCode = (17 * hashCode) + (pool == null ? 0 : System.hashCode(pool));
        hashCode = (17 * hashCode) + (tickLower == null ? 0 : System.hashCode(tickLower));
        hashCode = (17 * hashCode) + (tickUpper == null ? 0 : System.hashCode(tickUpper));
        hashCode = (17 * hashCode) + (timestamp == null ? 0 : System.hashCode(timestamp));
        hashCode = (17 * hashCode) + (liquidity == null ? 0 : System.hashCode(liquidity));
        hashCode = (17 * hashCode) + (inputTokens == null ? 0 : System.hashCode(inputTokens));
        hashCode = (17 * hashCode) + (inputTokenAmounts == null ? 0 : System.hashCode(inputTokenAmounts));
        hashCode = (17 * hashCode) + (reserveAmounts == null ? 0 : System.hashCode(reserveAmounts));
        hashCode = (17 * hashCode) + (amountUsd == null ? 0 : System.hashCode(amountUsd));
        hashCode = (17 * hashCode) + (blockRange == null ? 0 : System.hashCode(blockRange));
        return hashCode;
    }
}

