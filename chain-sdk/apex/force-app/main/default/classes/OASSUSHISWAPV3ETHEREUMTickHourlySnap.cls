/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * 
 */
public class OASSUSHISWAPV3ETHEREUMTickHourlySnap implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * (pool address)-(tick index)-(hour ID)
     * @return id
     */
    public String id { get; set; }

    /**
     * Number of hours since Unix epoch time
     * @return hourId
     */
    public Integer hourId { get; set; }

    /**
     * tick index
     * @return tick
     */
    public String tick { get; set; }

    /**
     * liquidity pool this tick belongs to
     * @return pool
     */
    public String pool { get; set; }

    /**
     * total liquidity pool has as tick lower or upper
     * @return liquidityGross
     */
    public String liquidityGross { get; set; }

    /**
     * total liquidity in USD pool has as tick lower or upper
     * @return liquidityGrossUsd
     */
    public String liquidityGrossUsd { get; set; }

    /**
     * how much liquidity changes when tick crossed
     * @return liquidityNet
     */
    public String liquidityNet { get; set; }

    /**
     * how much liquidity in USD changes when tick crossed
     * @return liquidityNetUsd
     */
    public String liquidityNetUsd { get; set; }

    /**
     * Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)
     * @return timestamp
     */
    public String timestamp { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hour_id' => 'hourId',
        'liquidity_gross' => 'liquidityGross',
        'liquidity_gross_usd' => 'liquidityGrossUsd',
        'liquidity_net' => 'liquidityNet',
        'liquidity_net_usd' => 'liquidityNetUsd'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hour_id' => 'hourId',
        'liquidity_gross' => 'liquidityGross',
        'liquidity_gross_usd' => 'liquidityGrossUsd',
        'liquidity_net' => 'liquidityNet',
        'liquidity_net_usd' => 'liquidityNetUsd'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hour_id' => 'hourId',
        'liquidity_gross' => 'liquidityGross',
        'liquidity_gross_usd' => 'liquidityGrossUsd',
        'liquidity_net' => 'liquidityNet',
        'liquidity_net_usd' => 'liquidityNetUsd'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hour_id' => 'hourId',
        'liquidity_gross' => 'liquidityGross',
        'liquidity_gross_usd' => 'liquidityGrossUsd',
        'liquidity_net' => 'liquidityNet',
        'liquidity_net_usd' => 'liquidityNetUsd'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hour_id' => 'hourId',
        'liquidity_gross' => 'liquidityGross',
        'liquidity_gross_usd' => 'liquidityGrossUsd',
        'liquidity_net' => 'liquidityNet',
        'liquidity_net_usd' => 'liquidityNetUsd'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hour_id' => 'hourId',
        'liquidity_gross' => 'liquidityGross',
        'liquidity_gross_usd' => 'liquidityGrossUsd',
        'liquidity_net' => 'liquidityNet',
        'liquidity_net_usd' => 'liquidityNetUsd'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hour_id' => 'hourId',
        'liquidity_gross' => 'liquidityGross',
        'liquidity_gross_usd' => 'liquidityGrossUsd',
        'liquidity_net' => 'liquidityNet',
        'liquidity_net_usd' => 'liquidityNetUsd'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hour_id' => 'hourId',
        'liquidity_gross' => 'liquidityGross',
        'liquidity_gross_usd' => 'liquidityGrossUsd',
        'liquidity_net' => 'liquidityNet',
        'liquidity_net_usd' => 'liquidityNetUsd'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASSUSHISWAPV3ETHEREUMTickHourlySnap getExample() {
        OASSUSHISWAPV3ETHEREUMTickHourlySnap suSHISWAPV3ETHEREUMTickHourlySnapshotDTO = new OASSUSHISWAPV3ETHEREUMTickHourlySnap();
          suSHISWAPV3ETHEREUMTickHourlySnapshotDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          suSHISWAPV3ETHEREUMTickHourlySnapshotDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          suSHISWAPV3ETHEREUMTickHourlySnapshotDTO.blockNumber = 123456789L;
          suSHISWAPV3ETHEREUMTickHourlySnapshotDTO.id = '';
          suSHISWAPV3ETHEREUMTickHourlySnapshotDTO.hourId = 0;
          suSHISWAPV3ETHEREUMTickHourlySnapshotDTO.tick = '';
          suSHISWAPV3ETHEREUMTickHourlySnapshotDTO.pool = '';
          suSHISWAPV3ETHEREUMTickHourlySnapshotDTO.liquidityGross = '';
          suSHISWAPV3ETHEREUMTickHourlySnapshotDTO.liquidityGrossUsd = '';
          suSHISWAPV3ETHEREUMTickHourlySnapshotDTO.liquidityNet = '';
          suSHISWAPV3ETHEREUMTickHourlySnapshotDTO.liquidityNetUsd = '';
          suSHISWAPV3ETHEREUMTickHourlySnapshotDTO.timestamp = '';
        return suSHISWAPV3ETHEREUMTickHourlySnapshotDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASSUSHISWAPV3ETHEREUMTickHourlySnap) {           
            OASSUSHISWAPV3ETHEREUMTickHourlySnap suSHISWAPV3ETHEREUMTickHourlySnapshotDTO = (OASSUSHISWAPV3ETHEREUMTickHourlySnap) obj;
            return this.entryTime == suSHISWAPV3ETHEREUMTickHourlySnapshotDTO.entryTime
                && this.recvTime == suSHISWAPV3ETHEREUMTickHourlySnapshotDTO.recvTime
                && this.blockNumber == suSHISWAPV3ETHEREUMTickHourlySnapshotDTO.blockNumber
                && this.id == suSHISWAPV3ETHEREUMTickHourlySnapshotDTO.id
                && this.hourId == suSHISWAPV3ETHEREUMTickHourlySnapshotDTO.hourId
                && this.tick == suSHISWAPV3ETHEREUMTickHourlySnapshotDTO.tick
                && this.pool == suSHISWAPV3ETHEREUMTickHourlySnapshotDTO.pool
                && this.liquidityGross == suSHISWAPV3ETHEREUMTickHourlySnapshotDTO.liquidityGross
                && this.liquidityGrossUsd == suSHISWAPV3ETHEREUMTickHourlySnapshotDTO.liquidityGrossUsd
                && this.liquidityNet == suSHISWAPV3ETHEREUMTickHourlySnapshotDTO.liquidityNet
                && this.liquidityNetUsd == suSHISWAPV3ETHEREUMTickHourlySnapshotDTO.liquidityNetUsd
                && this.timestamp == suSHISWAPV3ETHEREUMTickHourlySnapshotDTO.timestamp;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (hourId == null ? 0 : System.hashCode(hourId));
        hashCode = (17 * hashCode) + (tick == null ? 0 : System.hashCode(tick));
        hashCode = (17 * hashCode) + (pool == null ? 0 : System.hashCode(pool));
        hashCode = (17 * hashCode) + (liquidityGross == null ? 0 : System.hashCode(liquidityGross));
        hashCode = (17 * hashCode) + (liquidityGrossUsd == null ? 0 : System.hashCode(liquidityGrossUsd));
        hashCode = (17 * hashCode) + (liquidityNet == null ? 0 : System.hashCode(liquidityNet));
        hashCode = (17 * hashCode) + (liquidityNetUsd == null ? 0 : System.hashCode(liquidityNetUsd));
        hashCode = (17 * hashCode) + (timestamp == null ? 0 : System.hashCode(timestamp));
        return hashCode;
    }
}

