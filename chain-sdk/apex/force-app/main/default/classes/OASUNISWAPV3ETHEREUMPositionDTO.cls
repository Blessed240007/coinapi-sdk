/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * 
 */
public class OASUNISWAPV3ETHEREUMPositionDTO implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * 
     * @return vid
     */
    public Long vid { get; set; }

    /**
     * (account address)-(market address)-(count)
     * @return id
     */
    public String id { get; set; }

    /**
     * Account that owns this position
     * @return account
     */
    public String account { get; set; }

    /**
     * The liquidity pool in which this position was opened
     * @return pool
     */
    public String pool { get; set; }

    /**
     * The hash of the transaction that opened this position
     * @return hashOpened
     */
    public String hashOpened { get; set; }

    /**
     * The hash of the transaction that closed this position
     * @return hashClosed
     */
    public String hashClosed { get; set; }

    /**
     * Block number of when the position was opened
     * @return blockNumberOpened
     */
    public String blockNumberOpened { get; set; }

    /**
     * Timestamp when the position was opened
     * @return timestampOpened
     */
    public String timestampOpened { get; set; }

    /**
     * Block number of when the position was closed (0 if still open)
     * @return blockNumberClosed
     */
    public String blockNumberClosed { get; set; }

    /**
     * Timestamp when the position was closed (0 if still open)
     * @return timestampClosed
     */
    public String timestampClosed { get; set; }

    /**
     * lower tick of the position
     * @return tickLower
     */
    public String tickLower { get; set; }

    /**
     * upper tick of the position
     * @return tickUpper
     */
    public String tickUpper { get; set; }

    /**
     * Token that is to represent ownership of liquidity
     * @return liquidityToken
     */
    public String liquidityToken { get; set; }

    /**
     * Type of token used to track liquidity
     * @return liquidityTokenType
     */
    public String liquidityTokenType { get; set; }

    /**
     * total position liquidity
     * @return liquidity
     */
    public String liquidity { get; set; }

    /**
     * total position liquidity in USD
     * @return liquidityUsd
     */
    public String liquidityUsd { get; set; }

    /**
     * amount of tokens ever deposited to position
     * @return cumulativeDepositTokenAmounts
     */
    public List<String> cumulativeDepositTokenAmounts { get; set; }

    /**
     * amount of tokens in USD deposited to position
     * @return cumulativeDepositUsd
     */
    public String cumulativeDepositUsd { get; set; }

    /**
     * amount of tokens ever withdrawn from position (without fees)
     * @return cumulativeWithdrawTokenAmounts
     */
    public List<String> cumulativeWithdrawTokenAmounts { get; set; }

    /**
     * amount of tokens in USD withdrawn from position (without fees)
     * @return cumulativeWithdrawUsd
     */
    public String cumulativeWithdrawUsd { get; set; }

    /**
     * Total reward token accumulated under this position, in USD
     * @return cumulativeRewardUsd
     */
    public List<String> cumulativeRewardUsd { get; set; }

    /**
     * Number of deposits related to this position
     * @return depositCount
     */
    public Integer depositCount { get; set; }

    /**
     * Number of withdrawals related to this position
     * @return withdrawCount
     */
    public Integer withdrawCount { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hash_opened' => 'hashOpened',
        'hash_closed' => 'hashClosed',
        'block_number_opened' => 'blockNumberOpened',
        'timestamp_opened' => 'timestampOpened',
        'block_number_closed' => 'blockNumberClosed',
        'timestamp_closed' => 'timestampClosed',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'liquidity_token' => 'liquidityToken',
        'liquidity_token_type' => 'liquidityTokenType',
        'liquidity_usd' => 'liquidityUsd',
        'cumulative_deposit_token_amounts' => 'cumulativeDepositTokenAmounts',
        'cumulative_deposit_usd' => 'cumulativeDepositUsd',
        'cumulative_withdraw_token_amounts' => 'cumulativeWithdrawTokenAmounts',
        'cumulative_withdraw_usd' => 'cumulativeWithdrawUsd',
        'cumulative_reward_usd' => 'cumulativeRewardUsd',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hash_opened' => 'hashOpened',
        'hash_closed' => 'hashClosed',
        'block_number_opened' => 'blockNumberOpened',
        'timestamp_opened' => 'timestampOpened',
        'block_number_closed' => 'blockNumberClosed',
        'timestamp_closed' => 'timestampClosed',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'liquidity_token' => 'liquidityToken',
        'liquidity_token_type' => 'liquidityTokenType',
        'liquidity_usd' => 'liquidityUsd',
        'cumulative_deposit_token_amounts' => 'cumulativeDepositTokenAmounts',
        'cumulative_deposit_usd' => 'cumulativeDepositUsd',
        'cumulative_withdraw_token_amounts' => 'cumulativeWithdrawTokenAmounts',
        'cumulative_withdraw_usd' => 'cumulativeWithdrawUsd',
        'cumulative_reward_usd' => 'cumulativeRewardUsd',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hash_opened' => 'hashOpened',
        'hash_closed' => 'hashClosed',
        'block_number_opened' => 'blockNumberOpened',
        'timestamp_opened' => 'timestampOpened',
        'block_number_closed' => 'blockNumberClosed',
        'timestamp_closed' => 'timestampClosed',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'liquidity_token' => 'liquidityToken',
        'liquidity_token_type' => 'liquidityTokenType',
        'liquidity_usd' => 'liquidityUsd',
        'cumulative_deposit_token_amounts' => 'cumulativeDepositTokenAmounts',
        'cumulative_deposit_usd' => 'cumulativeDepositUsd',
        'cumulative_withdraw_token_amounts' => 'cumulativeWithdrawTokenAmounts',
        'cumulative_withdraw_usd' => 'cumulativeWithdrawUsd',
        'cumulative_reward_usd' => 'cumulativeRewardUsd',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hash_opened' => 'hashOpened',
        'hash_closed' => 'hashClosed',
        'block_number_opened' => 'blockNumberOpened',
        'timestamp_opened' => 'timestampOpened',
        'block_number_closed' => 'blockNumberClosed',
        'timestamp_closed' => 'timestampClosed',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'liquidity_token' => 'liquidityToken',
        'liquidity_token_type' => 'liquidityTokenType',
        'liquidity_usd' => 'liquidityUsd',
        'cumulative_deposit_token_amounts' => 'cumulativeDepositTokenAmounts',
        'cumulative_deposit_usd' => 'cumulativeDepositUsd',
        'cumulative_withdraw_token_amounts' => 'cumulativeWithdrawTokenAmounts',
        'cumulative_withdraw_usd' => 'cumulativeWithdrawUsd',
        'cumulative_reward_usd' => 'cumulativeRewardUsd',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hash_opened' => 'hashOpened',
        'hash_closed' => 'hashClosed',
        'block_number_opened' => 'blockNumberOpened',
        'timestamp_opened' => 'timestampOpened',
        'block_number_closed' => 'blockNumberClosed',
        'timestamp_closed' => 'timestampClosed',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'liquidity_token' => 'liquidityToken',
        'liquidity_token_type' => 'liquidityTokenType',
        'liquidity_usd' => 'liquidityUsd',
        'cumulative_deposit_token_amounts' => 'cumulativeDepositTokenAmounts',
        'cumulative_deposit_usd' => 'cumulativeDepositUsd',
        'cumulative_withdraw_token_amounts' => 'cumulativeWithdrawTokenAmounts',
        'cumulative_withdraw_usd' => 'cumulativeWithdrawUsd',
        'cumulative_reward_usd' => 'cumulativeRewardUsd',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hash_opened' => 'hashOpened',
        'hash_closed' => 'hashClosed',
        'block_number_opened' => 'blockNumberOpened',
        'timestamp_opened' => 'timestampOpened',
        'block_number_closed' => 'blockNumberClosed',
        'timestamp_closed' => 'timestampClosed',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'liquidity_token' => 'liquidityToken',
        'liquidity_token_type' => 'liquidityTokenType',
        'liquidity_usd' => 'liquidityUsd',
        'cumulative_deposit_token_amounts' => 'cumulativeDepositTokenAmounts',
        'cumulative_deposit_usd' => 'cumulativeDepositUsd',
        'cumulative_withdraw_token_amounts' => 'cumulativeWithdrawTokenAmounts',
        'cumulative_withdraw_usd' => 'cumulativeWithdrawUsd',
        'cumulative_reward_usd' => 'cumulativeRewardUsd',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hash_opened' => 'hashOpened',
        'hash_closed' => 'hashClosed',
        'block_number_opened' => 'blockNumberOpened',
        'timestamp_opened' => 'timestampOpened',
        'block_number_closed' => 'blockNumberClosed',
        'timestamp_closed' => 'timestampClosed',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'liquidity_token' => 'liquidityToken',
        'liquidity_token_type' => 'liquidityTokenType',
        'liquidity_usd' => 'liquidityUsd',
        'cumulative_deposit_token_amounts' => 'cumulativeDepositTokenAmounts',
        'cumulative_deposit_usd' => 'cumulativeDepositUsd',
        'cumulative_withdraw_token_amounts' => 'cumulativeWithdrawTokenAmounts',
        'cumulative_withdraw_usd' => 'cumulativeWithdrawUsd',
        'cumulative_reward_usd' => 'cumulativeRewardUsd',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hash_opened' => 'hashOpened',
        'hash_closed' => 'hashClosed',
        'block_number_opened' => 'blockNumberOpened',
        'timestamp_opened' => 'timestampOpened',
        'block_number_closed' => 'blockNumberClosed',
        'timestamp_closed' => 'timestampClosed',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'liquidity_token' => 'liquidityToken',
        'liquidity_token_type' => 'liquidityTokenType',
        'liquidity_usd' => 'liquidityUsd',
        'cumulative_deposit_token_amounts' => 'cumulativeDepositTokenAmounts',
        'cumulative_deposit_usd' => 'cumulativeDepositUsd',
        'cumulative_withdraw_token_amounts' => 'cumulativeWithdrawTokenAmounts',
        'cumulative_withdraw_usd' => 'cumulativeWithdrawUsd',
        'cumulative_reward_usd' => 'cumulativeRewardUsd',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hash_opened' => 'hashOpened',
        'hash_closed' => 'hashClosed',
        'block_number_opened' => 'blockNumberOpened',
        'timestamp_opened' => 'timestampOpened',
        'block_number_closed' => 'blockNumberClosed',
        'timestamp_closed' => 'timestampClosed',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'liquidity_token' => 'liquidityToken',
        'liquidity_token_type' => 'liquidityTokenType',
        'liquidity_usd' => 'liquidityUsd',
        'cumulative_deposit_token_amounts' => 'cumulativeDepositTokenAmounts',
        'cumulative_deposit_usd' => 'cumulativeDepositUsd',
        'cumulative_withdraw_token_amounts' => 'cumulativeWithdrawTokenAmounts',
        'cumulative_withdraw_usd' => 'cumulativeWithdrawUsd',
        'cumulative_reward_usd' => 'cumulativeRewardUsd',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hash_opened' => 'hashOpened',
        'hash_closed' => 'hashClosed',
        'block_number_opened' => 'blockNumberOpened',
        'timestamp_opened' => 'timestampOpened',
        'block_number_closed' => 'blockNumberClosed',
        'timestamp_closed' => 'timestampClosed',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'liquidity_token' => 'liquidityToken',
        'liquidity_token_type' => 'liquidityTokenType',
        'liquidity_usd' => 'liquidityUsd',
        'cumulative_deposit_token_amounts' => 'cumulativeDepositTokenAmounts',
        'cumulative_deposit_usd' => 'cumulativeDepositUsd',
        'cumulative_withdraw_token_amounts' => 'cumulativeWithdrawTokenAmounts',
        'cumulative_withdraw_usd' => 'cumulativeWithdrawUsd',
        'cumulative_reward_usd' => 'cumulativeRewardUsd',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hash_opened' => 'hashOpened',
        'hash_closed' => 'hashClosed',
        'block_number_opened' => 'blockNumberOpened',
        'timestamp_opened' => 'timestampOpened',
        'block_number_closed' => 'blockNumberClosed',
        'timestamp_closed' => 'timestampClosed',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'liquidity_token' => 'liquidityToken',
        'liquidity_token_type' => 'liquidityTokenType',
        'liquidity_usd' => 'liquidityUsd',
        'cumulative_deposit_token_amounts' => 'cumulativeDepositTokenAmounts',
        'cumulative_deposit_usd' => 'cumulativeDepositUsd',
        'cumulative_withdraw_token_amounts' => 'cumulativeWithdrawTokenAmounts',
        'cumulative_withdraw_usd' => 'cumulativeWithdrawUsd',
        'cumulative_reward_usd' => 'cumulativeRewardUsd',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hash_opened' => 'hashOpened',
        'hash_closed' => 'hashClosed',
        'block_number_opened' => 'blockNumberOpened',
        'timestamp_opened' => 'timestampOpened',
        'block_number_closed' => 'blockNumberClosed',
        'timestamp_closed' => 'timestampClosed',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'liquidity_token' => 'liquidityToken',
        'liquidity_token_type' => 'liquidityTokenType',
        'liquidity_usd' => 'liquidityUsd',
        'cumulative_deposit_token_amounts' => 'cumulativeDepositTokenAmounts',
        'cumulative_deposit_usd' => 'cumulativeDepositUsd',
        'cumulative_withdraw_token_amounts' => 'cumulativeWithdrawTokenAmounts',
        'cumulative_withdraw_usd' => 'cumulativeWithdrawUsd',
        'cumulative_reward_usd' => 'cumulativeRewardUsd',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hash_opened' => 'hashOpened',
        'hash_closed' => 'hashClosed',
        'block_number_opened' => 'blockNumberOpened',
        'timestamp_opened' => 'timestampOpened',
        'block_number_closed' => 'blockNumberClosed',
        'timestamp_closed' => 'timestampClosed',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'liquidity_token' => 'liquidityToken',
        'liquidity_token_type' => 'liquidityTokenType',
        'liquidity_usd' => 'liquidityUsd',
        'cumulative_deposit_token_amounts' => 'cumulativeDepositTokenAmounts',
        'cumulative_deposit_usd' => 'cumulativeDepositUsd',
        'cumulative_withdraw_token_amounts' => 'cumulativeWithdrawTokenAmounts',
        'cumulative_withdraw_usd' => 'cumulativeWithdrawUsd',
        'cumulative_reward_usd' => 'cumulativeRewardUsd',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hash_opened' => 'hashOpened',
        'hash_closed' => 'hashClosed',
        'block_number_opened' => 'blockNumberOpened',
        'timestamp_opened' => 'timestampOpened',
        'block_number_closed' => 'blockNumberClosed',
        'timestamp_closed' => 'timestampClosed',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'liquidity_token' => 'liquidityToken',
        'liquidity_token_type' => 'liquidityTokenType',
        'liquidity_usd' => 'liquidityUsd',
        'cumulative_deposit_token_amounts' => 'cumulativeDepositTokenAmounts',
        'cumulative_deposit_usd' => 'cumulativeDepositUsd',
        'cumulative_withdraw_token_amounts' => 'cumulativeWithdrawTokenAmounts',
        'cumulative_withdraw_usd' => 'cumulativeWithdrawUsd',
        'cumulative_reward_usd' => 'cumulativeRewardUsd',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hash_opened' => 'hashOpened',
        'hash_closed' => 'hashClosed',
        'block_number_opened' => 'blockNumberOpened',
        'timestamp_opened' => 'timestampOpened',
        'block_number_closed' => 'blockNumberClosed',
        'timestamp_closed' => 'timestampClosed',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'liquidity_token' => 'liquidityToken',
        'liquidity_token_type' => 'liquidityTokenType',
        'liquidity_usd' => 'liquidityUsd',
        'cumulative_deposit_token_amounts' => 'cumulativeDepositTokenAmounts',
        'cumulative_deposit_usd' => 'cumulativeDepositUsd',
        'cumulative_withdraw_token_amounts' => 'cumulativeWithdrawTokenAmounts',
        'cumulative_withdraw_usd' => 'cumulativeWithdrawUsd',
        'cumulative_reward_usd' => 'cumulativeRewardUsd',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hash_opened' => 'hashOpened',
        'hash_closed' => 'hashClosed',
        'block_number_opened' => 'blockNumberOpened',
        'timestamp_opened' => 'timestampOpened',
        'block_number_closed' => 'blockNumberClosed',
        'timestamp_closed' => 'timestampClosed',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'liquidity_token' => 'liquidityToken',
        'liquidity_token_type' => 'liquidityTokenType',
        'liquidity_usd' => 'liquidityUsd',
        'cumulative_deposit_token_amounts' => 'cumulativeDepositTokenAmounts',
        'cumulative_deposit_usd' => 'cumulativeDepositUsd',
        'cumulative_withdraw_token_amounts' => 'cumulativeWithdrawTokenAmounts',
        'cumulative_withdraw_usd' => 'cumulativeWithdrawUsd',
        'cumulative_reward_usd' => 'cumulativeRewardUsd',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hash_opened' => 'hashOpened',
        'hash_closed' => 'hashClosed',
        'block_number_opened' => 'blockNumberOpened',
        'timestamp_opened' => 'timestampOpened',
        'block_number_closed' => 'blockNumberClosed',
        'timestamp_closed' => 'timestampClosed',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'liquidity_token' => 'liquidityToken',
        'liquidity_token_type' => 'liquidityTokenType',
        'liquidity_usd' => 'liquidityUsd',
        'cumulative_deposit_token_amounts' => 'cumulativeDepositTokenAmounts',
        'cumulative_deposit_usd' => 'cumulativeDepositUsd',
        'cumulative_withdraw_token_amounts' => 'cumulativeWithdrawTokenAmounts',
        'cumulative_withdraw_usd' => 'cumulativeWithdrawUsd',
        'cumulative_reward_usd' => 'cumulativeRewardUsd',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hash_opened' => 'hashOpened',
        'hash_closed' => 'hashClosed',
        'block_number_opened' => 'blockNumberOpened',
        'timestamp_opened' => 'timestampOpened',
        'block_number_closed' => 'blockNumberClosed',
        'timestamp_closed' => 'timestampClosed',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'liquidity_token' => 'liquidityToken',
        'liquidity_token_type' => 'liquidityTokenType',
        'liquidity_usd' => 'liquidityUsd',
        'cumulative_deposit_token_amounts' => 'cumulativeDepositTokenAmounts',
        'cumulative_deposit_usd' => 'cumulativeDepositUsd',
        'cumulative_withdraw_token_amounts' => 'cumulativeWithdrawTokenAmounts',
        'cumulative_withdraw_usd' => 'cumulativeWithdrawUsd',
        'cumulative_reward_usd' => 'cumulativeRewardUsd',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hash_opened' => 'hashOpened',
        'hash_closed' => 'hashClosed',
        'block_number_opened' => 'blockNumberOpened',
        'timestamp_opened' => 'timestampOpened',
        'block_number_closed' => 'blockNumberClosed',
        'timestamp_closed' => 'timestampClosed',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'liquidity_token' => 'liquidityToken',
        'liquidity_token_type' => 'liquidityTokenType',
        'liquidity_usd' => 'liquidityUsd',
        'cumulative_deposit_token_amounts' => 'cumulativeDepositTokenAmounts',
        'cumulative_deposit_usd' => 'cumulativeDepositUsd',
        'cumulative_withdraw_token_amounts' => 'cumulativeWithdrawTokenAmounts',
        'cumulative_withdraw_usd' => 'cumulativeWithdrawUsd',
        'cumulative_reward_usd' => 'cumulativeRewardUsd',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hash_opened' => 'hashOpened',
        'hash_closed' => 'hashClosed',
        'block_number_opened' => 'blockNumberOpened',
        'timestamp_opened' => 'timestampOpened',
        'block_number_closed' => 'blockNumberClosed',
        'timestamp_closed' => 'timestampClosed',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'liquidity_token' => 'liquidityToken',
        'liquidity_token_type' => 'liquidityTokenType',
        'liquidity_usd' => 'liquidityUsd',
        'cumulative_deposit_token_amounts' => 'cumulativeDepositTokenAmounts',
        'cumulative_deposit_usd' => 'cumulativeDepositUsd',
        'cumulative_withdraw_token_amounts' => 'cumulativeWithdrawTokenAmounts',
        'cumulative_withdraw_usd' => 'cumulativeWithdrawUsd',
        'cumulative_reward_usd' => 'cumulativeRewardUsd',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hash_opened' => 'hashOpened',
        'hash_closed' => 'hashClosed',
        'block_number_opened' => 'blockNumberOpened',
        'timestamp_opened' => 'timestampOpened',
        'block_number_closed' => 'blockNumberClosed',
        'timestamp_closed' => 'timestampClosed',
        'tick_lower' => 'tickLower',
        'tick_upper' => 'tickUpper',
        'liquidity_token' => 'liquidityToken',
        'liquidity_token_type' => 'liquidityTokenType',
        'liquidity_usd' => 'liquidityUsd',
        'cumulative_deposit_token_amounts' => 'cumulativeDepositTokenAmounts',
        'cumulative_deposit_usd' => 'cumulativeDepositUsd',
        'cumulative_withdraw_token_amounts' => 'cumulativeWithdrawTokenAmounts',
        'cumulative_withdraw_usd' => 'cumulativeWithdrawUsd',
        'cumulative_reward_usd' => 'cumulativeRewardUsd',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASUNISWAPV3ETHEREUMPositionDTO() {
        cumulativeDepositTokenAmounts = new List<String>();
        cumulativeWithdrawTokenAmounts = new List<String>();
        cumulativeRewardUsd = new List<String>();
    }

    public static OASUNISWAPV3ETHEREUMPositionDTO getExample() {
        OASUNISWAPV3ETHEREUMPositionDTO unISWAPV3ETHEREUMPositionDTO = new OASUNISWAPV3ETHEREUMPositionDTO();
          unISWAPV3ETHEREUMPositionDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          unISWAPV3ETHEREUMPositionDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          unISWAPV3ETHEREUMPositionDTO.blockNumber = 123456789L;
          unISWAPV3ETHEREUMPositionDTO.vid = 123456789L;
          unISWAPV3ETHEREUMPositionDTO.id = '';
          unISWAPV3ETHEREUMPositionDTO.account = '';
          unISWAPV3ETHEREUMPositionDTO.pool = '';
          unISWAPV3ETHEREUMPositionDTO.hashOpened = '';
          unISWAPV3ETHEREUMPositionDTO.hashClosed = '';
          unISWAPV3ETHEREUMPositionDTO.blockNumberOpened = '';
          unISWAPV3ETHEREUMPositionDTO.timestampOpened = '';
          unISWAPV3ETHEREUMPositionDTO.blockNumberClosed = '';
          unISWAPV3ETHEREUMPositionDTO.timestampClosed = '';
          unISWAPV3ETHEREUMPositionDTO.tickLower = '';
          unISWAPV3ETHEREUMPositionDTO.tickUpper = '';
          unISWAPV3ETHEREUMPositionDTO.liquidityToken = '';
          unISWAPV3ETHEREUMPositionDTO.liquidityTokenType = '';
          unISWAPV3ETHEREUMPositionDTO.liquidity = '';
          unISWAPV3ETHEREUMPositionDTO.liquidityUsd = '';
          unISWAPV3ETHEREUMPositionDTO.cumulativeDepositTokenAmounts = new List<String>{''};
          unISWAPV3ETHEREUMPositionDTO.cumulativeDepositUsd = '';
          unISWAPV3ETHEREUMPositionDTO.cumulativeWithdrawTokenAmounts = new List<String>{''};
          unISWAPV3ETHEREUMPositionDTO.cumulativeWithdrawUsd = '';
          unISWAPV3ETHEREUMPositionDTO.cumulativeRewardUsd = new List<String>{''};
          unISWAPV3ETHEREUMPositionDTO.depositCount = 0;
          unISWAPV3ETHEREUMPositionDTO.withdrawCount = 0;
        return unISWAPV3ETHEREUMPositionDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASUNISWAPV3ETHEREUMPositionDTO) {           
            OASUNISWAPV3ETHEREUMPositionDTO unISWAPV3ETHEREUMPositionDTO = (OASUNISWAPV3ETHEREUMPositionDTO) obj;
            return this.entryTime == unISWAPV3ETHEREUMPositionDTO.entryTime
                && this.recvTime == unISWAPV3ETHEREUMPositionDTO.recvTime
                && this.blockNumber == unISWAPV3ETHEREUMPositionDTO.blockNumber
                && this.vid == unISWAPV3ETHEREUMPositionDTO.vid
                && this.id == unISWAPV3ETHEREUMPositionDTO.id
                && this.account == unISWAPV3ETHEREUMPositionDTO.account
                && this.pool == unISWAPV3ETHEREUMPositionDTO.pool
                && this.hashOpened == unISWAPV3ETHEREUMPositionDTO.hashOpened
                && this.hashClosed == unISWAPV3ETHEREUMPositionDTO.hashClosed
                && this.blockNumberOpened == unISWAPV3ETHEREUMPositionDTO.blockNumberOpened
                && this.timestampOpened == unISWAPV3ETHEREUMPositionDTO.timestampOpened
                && this.blockNumberClosed == unISWAPV3ETHEREUMPositionDTO.blockNumberClosed
                && this.timestampClosed == unISWAPV3ETHEREUMPositionDTO.timestampClosed
                && this.tickLower == unISWAPV3ETHEREUMPositionDTO.tickLower
                && this.tickUpper == unISWAPV3ETHEREUMPositionDTO.tickUpper
                && this.liquidityToken == unISWAPV3ETHEREUMPositionDTO.liquidityToken
                && this.liquidityTokenType == unISWAPV3ETHEREUMPositionDTO.liquidityTokenType
                && this.liquidity == unISWAPV3ETHEREUMPositionDTO.liquidity
                && this.liquidityUsd == unISWAPV3ETHEREUMPositionDTO.liquidityUsd
                && this.cumulativeDepositTokenAmounts == unISWAPV3ETHEREUMPositionDTO.cumulativeDepositTokenAmounts
                && this.cumulativeDepositUsd == unISWAPV3ETHEREUMPositionDTO.cumulativeDepositUsd
                && this.cumulativeWithdrawTokenAmounts == unISWAPV3ETHEREUMPositionDTO.cumulativeWithdrawTokenAmounts
                && this.cumulativeWithdrawUsd == unISWAPV3ETHEREUMPositionDTO.cumulativeWithdrawUsd
                && this.cumulativeRewardUsd == unISWAPV3ETHEREUMPositionDTO.cumulativeRewardUsd
                && this.depositCount == unISWAPV3ETHEREUMPositionDTO.depositCount
                && this.withdrawCount == unISWAPV3ETHEREUMPositionDTO.withdrawCount;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (vid == null ? 0 : System.hashCode(vid));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (account == null ? 0 : System.hashCode(account));
        hashCode = (17 * hashCode) + (pool == null ? 0 : System.hashCode(pool));
        hashCode = (17 * hashCode) + (hashOpened == null ? 0 : System.hashCode(hashOpened));
        hashCode = (17 * hashCode) + (hashClosed == null ? 0 : System.hashCode(hashClosed));
        hashCode = (17 * hashCode) + (blockNumberOpened == null ? 0 : System.hashCode(blockNumberOpened));
        hashCode = (17 * hashCode) + (timestampOpened == null ? 0 : System.hashCode(timestampOpened));
        hashCode = (17 * hashCode) + (blockNumberClosed == null ? 0 : System.hashCode(blockNumberClosed));
        hashCode = (17 * hashCode) + (timestampClosed == null ? 0 : System.hashCode(timestampClosed));
        hashCode = (17 * hashCode) + (tickLower == null ? 0 : System.hashCode(tickLower));
        hashCode = (17 * hashCode) + (tickUpper == null ? 0 : System.hashCode(tickUpper));
        hashCode = (17 * hashCode) + (liquidityToken == null ? 0 : System.hashCode(liquidityToken));
        hashCode = (17 * hashCode) + (liquidityTokenType == null ? 0 : System.hashCode(liquidityTokenType));
        hashCode = (17 * hashCode) + (liquidity == null ? 0 : System.hashCode(liquidity));
        hashCode = (17 * hashCode) + (liquidityUsd == null ? 0 : System.hashCode(liquidityUsd));
        hashCode = (17 * hashCode) + (cumulativeDepositTokenAmounts == null ? 0 : System.hashCode(cumulativeDepositTokenAmounts));
        hashCode = (17 * hashCode) + (cumulativeDepositUsd == null ? 0 : System.hashCode(cumulativeDepositUsd));
        hashCode = (17 * hashCode) + (cumulativeWithdrawTokenAmounts == null ? 0 : System.hashCode(cumulativeWithdrawTokenAmounts));
        hashCode = (17 * hashCode) + (cumulativeWithdrawUsd == null ? 0 : System.hashCode(cumulativeWithdrawUsd));
        hashCode = (17 * hashCode) + (cumulativeRewardUsd == null ? 0 : System.hashCode(cumulativeRewardUsd));
        hashCode = (17 * hashCode) + (depositCount == null ? 0 : System.hashCode(depositCount));
        hashCode = (17 * hashCode) + (withdrawCount == null ? 0 : System.hashCode(withdrawCount));
        return hashCode;
    }
}

