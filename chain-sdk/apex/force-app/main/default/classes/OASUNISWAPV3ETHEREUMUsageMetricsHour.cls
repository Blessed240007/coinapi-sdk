/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * 
 */
public class OASUNISWAPV3ETHEREUMUsageMetricsHour implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * (# of hours since Unix epoch time)
     * @return id
     */
    public String id { get; set; }

    /**
     * Number of hours since Unix epoch time
     * @return hour
     */
    public Integer hour { get; set; }

    /**
     * Protocol this snapshot is associated with
     * @return protocol
     */
    public String protocol { get; set; }

    /**
     * Number of unique hourly active users
     * @return hourlyActiveUsers
     */
    public Integer hourlyActiveUsers { get; set; }

    /**
     * Number of cumulative unique users
     * @return cumulativeUniqueUsers
     */
    public Integer cumulativeUniqueUsers { get; set; }

    /**
     * Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface.
     * @return hourlyTransactionCount
     */
    public Integer hourlyTransactionCount { get; set; }

    /**
     * Total number of deposits (add liquidity) in an hour
     * @return hourlyDepositCount
     */
    public Integer hourlyDepositCount { get; set; }

    /**
     * Total number of withdrawals (remove liquidity) in an hour
     * @return hourlyWithdrawCount
     */
    public Integer hourlyWithdrawCount { get; set; }

    /**
     * Total number of trades (swaps) in an hour
     * @return hourlySwapCount
     */
    public Integer hourlySwapCount { get; set; }

    /**
     * Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)
     * @return timestamp
     */
    public String timestamp { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hourly_active_users' => 'hourlyActiveUsers',
        'cumulative_unique_users' => 'cumulativeUniqueUsers',
        'hourly_transaction_count' => 'hourlyTransactionCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'hourly_swap_count' => 'hourlySwapCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hourly_active_users' => 'hourlyActiveUsers',
        'cumulative_unique_users' => 'cumulativeUniqueUsers',
        'hourly_transaction_count' => 'hourlyTransactionCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'hourly_swap_count' => 'hourlySwapCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hourly_active_users' => 'hourlyActiveUsers',
        'cumulative_unique_users' => 'cumulativeUniqueUsers',
        'hourly_transaction_count' => 'hourlyTransactionCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'hourly_swap_count' => 'hourlySwapCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hourly_active_users' => 'hourlyActiveUsers',
        'cumulative_unique_users' => 'cumulativeUniqueUsers',
        'hourly_transaction_count' => 'hourlyTransactionCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'hourly_swap_count' => 'hourlySwapCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hourly_active_users' => 'hourlyActiveUsers',
        'cumulative_unique_users' => 'cumulativeUniqueUsers',
        'hourly_transaction_count' => 'hourlyTransactionCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'hourly_swap_count' => 'hourlySwapCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hourly_active_users' => 'hourlyActiveUsers',
        'cumulative_unique_users' => 'cumulativeUniqueUsers',
        'hourly_transaction_count' => 'hourlyTransactionCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'hourly_swap_count' => 'hourlySwapCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hourly_active_users' => 'hourlyActiveUsers',
        'cumulative_unique_users' => 'cumulativeUniqueUsers',
        'hourly_transaction_count' => 'hourlyTransactionCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'hourly_swap_count' => 'hourlySwapCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hourly_active_users' => 'hourlyActiveUsers',
        'cumulative_unique_users' => 'cumulativeUniqueUsers',
        'hourly_transaction_count' => 'hourlyTransactionCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'hourly_swap_count' => 'hourlySwapCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'hourly_active_users' => 'hourlyActiveUsers',
        'cumulative_unique_users' => 'cumulativeUniqueUsers',
        'hourly_transaction_count' => 'hourlyTransactionCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'hourly_swap_count' => 'hourlySwapCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASUNISWAPV3ETHEREUMUsageMetricsHour getExample() {
        OASUNISWAPV3ETHEREUMUsageMetricsHour unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO = new OASUNISWAPV3ETHEREUMUsageMetricsHour();
          unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.blockNumber = 123456789L;
          unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.id = '';
          unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.hour = 0;
          unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.protocol = '';
          unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.hourlyActiveUsers = 0;
          unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.cumulativeUniqueUsers = 0;
          unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.hourlyTransactionCount = 0;
          unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.hourlyDepositCount = 0;
          unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.hourlyWithdrawCount = 0;
          unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.hourlySwapCount = 0;
          unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.timestamp = '';
        return unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASUNISWAPV3ETHEREUMUsageMetricsHour) {           
            OASUNISWAPV3ETHEREUMUsageMetricsHour unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO = (OASUNISWAPV3ETHEREUMUsageMetricsHour) obj;
            return this.entryTime == unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.entryTime
                && this.recvTime == unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.recvTime
                && this.blockNumber == unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.blockNumber
                && this.id == unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.id
                && this.hour == unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.hour
                && this.protocol == unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.protocol
                && this.hourlyActiveUsers == unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.hourlyActiveUsers
                && this.cumulativeUniqueUsers == unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.cumulativeUniqueUsers
                && this.hourlyTransactionCount == unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.hourlyTransactionCount
                && this.hourlyDepositCount == unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.hourlyDepositCount
                && this.hourlyWithdrawCount == unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.hourlyWithdrawCount
                && this.hourlySwapCount == unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.hourlySwapCount
                && this.timestamp == unISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO.timestamp;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (hour == null ? 0 : System.hashCode(hour));
        hashCode = (17 * hashCode) + (protocol == null ? 0 : System.hashCode(protocol));
        hashCode = (17 * hashCode) + (hourlyActiveUsers == null ? 0 : System.hashCode(hourlyActiveUsers));
        hashCode = (17 * hashCode) + (cumulativeUniqueUsers == null ? 0 : System.hashCode(cumulativeUniqueUsers));
        hashCode = (17 * hashCode) + (hourlyTransactionCount == null ? 0 : System.hashCode(hourlyTransactionCount));
        hashCode = (17 * hashCode) + (hourlyDepositCount == null ? 0 : System.hashCode(hourlyDepositCount));
        hashCode = (17 * hashCode) + (hourlyWithdrawCount == null ? 0 : System.hashCode(hourlyWithdrawCount));
        hashCode = (17 * hashCode) + (hourlySwapCount == null ? 0 : System.hashCode(hourlySwapCount));
        hashCode = (17 * hashCode) + (timestamp == null ? 0 : System.hashCode(timestamp));
        return hashCode;
    }
}

