/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Trade (swap) event which occurred in a pool.
 */
public class OASPANCAKESWAPV3ETHEREUMSwapDTO implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * Block number in which the swap operation was recorded.
     * @return block
     */
    public Integer block { get; set; }

    /**
     * Unique string identifier of the swap operation, format: (transaction hash)-(log index).
     * @return id
     */
    public String id { get; set; }

    /**
     * Transaction hash of the transaction that emitted this event.
     * @return hash
     */
    public String hash { get; set; }

    /**
     * Nonce of the transaction that emitted this event.
     * @return nonce
     */
    public String nonce { get; set; }

    /**
     * Event log index. For transactions that don\'t emit event, create arbitrary index starting from 0.
     * @return logIndex
     */
    public Integer logIndex { get; set; }

    /**
     * Gas limit of the transaction that emitted this event.
     * @return gasLimit
     */
    public String gasLimit { get; set; }

    /**
     * Gas used in this transaction.
     * @return gasUsed
     */
    public String gasUsed { get; set; }

    /**
     * Gas price of the transaction that emitted this event.
     * @return gasPrice
     */
    public String gasPrice { get; set; }

    /**
     * The protocol this transaction belongs to.
     * @return protocol
     */
    public String protocol { get; set; }

    /**
     * Account that emitted this event.
     * @return account
     */
    public String account { get; set; }

    /**
     * The pool involving this event.
     * @return pool
     */
    public String pool { get; set; }

    /**
     * Timestamp of this event.
     * @return timestamp
     */
    public String timestamp { get; set; }

    /**
     * Tick of the swap operation.
     * @return tick
     */
    public String tick { get; set; }

    /**
     * Token deposited into pool.
     * @return tokenIn
     */
    public String tokenIn { get; set; }

    /**
     * Amount of token deposited into pool in native units.
     * @return amountIn
     */
    public String amountIn { get; set; }

    /**
     * Amount of token deposited into pool in USD.
     * @return amountInUsd
     */
    public String amountInUsd { get; set; }

    /**
     * Token withdrawn from pool.
     * @return tokenOut
     */
    public String tokenOut { get; set; }

    /**
     * Amount of token withdrawn from pool in native units.
     * @return amountOut
     */
    public String amountOut { get; set; }

    /**
     * Amount of token withdrawn from pool in USD.
     * @return amountOutUsd
     */
    public String amountOutUsd { get; set; }

    /**
     * Amount of input tokens in the liquidity pool.
     * @return reserveAmounts
     */
    public List<String> reserveAmounts { get; set; }

    /**
     * Get poolId
     * @return poolId
     */
    public String poolId { get; private set; }

    /**
     * Get transactionId
     * @return transactionId
     */
    public String transactionId { get; private set; }

    /**
     * Get evaluatedPrice
     * @return evaluatedPrice
     */
    public Double evaluatedPrice { get; private set; }

    /**
     * Get evaluatedAmount
     * @return evaluatedAmount
     */
    public Double evaluatedAmount { get; private set; }

    /**
     * Get evaluatedAggressor
     * @return evaluatedAggressor
     */
    public OASTransactionsETradeAggressiveSide evaluatedAggressor { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'token_in' => 'tokenIn',
        'amount_in' => 'amountIn',
        'amount_in_usd' => 'amountInUsd',
        'token_out' => 'tokenOut',
        'amount_out' => 'amountOut',
        'amount_out_usd' => 'amountOutUsd',
        'reserve_amounts' => 'reserveAmounts',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'token_in' => 'tokenIn',
        'amount_in' => 'amountIn',
        'amount_in_usd' => 'amountInUsd',
        'token_out' => 'tokenOut',
        'amount_out' => 'amountOut',
        'amount_out_usd' => 'amountOutUsd',
        'reserve_amounts' => 'reserveAmounts',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'token_in' => 'tokenIn',
        'amount_in' => 'amountIn',
        'amount_in_usd' => 'amountInUsd',
        'token_out' => 'tokenOut',
        'amount_out' => 'amountOut',
        'amount_out_usd' => 'amountOutUsd',
        'reserve_amounts' => 'reserveAmounts',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'token_in' => 'tokenIn',
        'amount_in' => 'amountIn',
        'amount_in_usd' => 'amountInUsd',
        'token_out' => 'tokenOut',
        'amount_out' => 'amountOut',
        'amount_out_usd' => 'amountOutUsd',
        'reserve_amounts' => 'reserveAmounts',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'token_in' => 'tokenIn',
        'amount_in' => 'amountIn',
        'amount_in_usd' => 'amountInUsd',
        'token_out' => 'tokenOut',
        'amount_out' => 'amountOut',
        'amount_out_usd' => 'amountOutUsd',
        'reserve_amounts' => 'reserveAmounts',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'token_in' => 'tokenIn',
        'amount_in' => 'amountIn',
        'amount_in_usd' => 'amountInUsd',
        'token_out' => 'tokenOut',
        'amount_out' => 'amountOut',
        'amount_out_usd' => 'amountOutUsd',
        'reserve_amounts' => 'reserveAmounts',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'token_in' => 'tokenIn',
        'amount_in' => 'amountIn',
        'amount_in_usd' => 'amountInUsd',
        'token_out' => 'tokenOut',
        'amount_out' => 'amountOut',
        'amount_out_usd' => 'amountOutUsd',
        'reserve_amounts' => 'reserveAmounts',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'token_in' => 'tokenIn',
        'amount_in' => 'amountIn',
        'amount_in_usd' => 'amountInUsd',
        'token_out' => 'tokenOut',
        'amount_out' => 'amountOut',
        'amount_out_usd' => 'amountOutUsd',
        'reserve_amounts' => 'reserveAmounts',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'token_in' => 'tokenIn',
        'amount_in' => 'amountIn',
        'amount_in_usd' => 'amountInUsd',
        'token_out' => 'tokenOut',
        'amount_out' => 'amountOut',
        'amount_out_usd' => 'amountOutUsd',
        'reserve_amounts' => 'reserveAmounts',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'token_in' => 'tokenIn',
        'amount_in' => 'amountIn',
        'amount_in_usd' => 'amountInUsd',
        'token_out' => 'tokenOut',
        'amount_out' => 'amountOut',
        'amount_out_usd' => 'amountOutUsd',
        'reserve_amounts' => 'reserveAmounts',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'token_in' => 'tokenIn',
        'amount_in' => 'amountIn',
        'amount_in_usd' => 'amountInUsd',
        'token_out' => 'tokenOut',
        'amount_out' => 'amountOut',
        'amount_out_usd' => 'amountOutUsd',
        'reserve_amounts' => 'reserveAmounts',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'token_in' => 'tokenIn',
        'amount_in' => 'amountIn',
        'amount_in_usd' => 'amountInUsd',
        'token_out' => 'tokenOut',
        'amount_out' => 'amountOut',
        'amount_out_usd' => 'amountOutUsd',
        'reserve_amounts' => 'reserveAmounts',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'token_in' => 'tokenIn',
        'amount_in' => 'amountIn',
        'amount_in_usd' => 'amountInUsd',
        'token_out' => 'tokenOut',
        'amount_out' => 'amountOut',
        'amount_out_usd' => 'amountOutUsd',
        'reserve_amounts' => 'reserveAmounts',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'token_in' => 'tokenIn',
        'amount_in' => 'amountIn',
        'amount_in_usd' => 'amountInUsd',
        'token_out' => 'tokenOut',
        'amount_out' => 'amountOut',
        'amount_out_usd' => 'amountOutUsd',
        'reserve_amounts' => 'reserveAmounts',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'token_in' => 'tokenIn',
        'amount_in' => 'amountIn',
        'amount_in_usd' => 'amountInUsd',
        'token_out' => 'tokenOut',
        'amount_out' => 'amountOut',
        'amount_out_usd' => 'amountOutUsd',
        'reserve_amounts' => 'reserveAmounts',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'token_in' => 'tokenIn',
        'amount_in' => 'amountIn',
        'amount_in_usd' => 'amountInUsd',
        'token_out' => 'tokenOut',
        'amount_out' => 'amountOut',
        'amount_out_usd' => 'amountOutUsd',
        'reserve_amounts' => 'reserveAmounts',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'token_in' => 'tokenIn',
        'amount_in' => 'amountIn',
        'amount_in_usd' => 'amountInUsd',
        'token_out' => 'tokenOut',
        'amount_out' => 'amountOut',
        'amount_out_usd' => 'amountOutUsd',
        'reserve_amounts' => 'reserveAmounts',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'token_in' => 'tokenIn',
        'amount_in' => 'amountIn',
        'amount_in_usd' => 'amountInUsd',
        'token_out' => 'tokenOut',
        'amount_out' => 'amountOut',
        'amount_out_usd' => 'amountOutUsd',
        'reserve_amounts' => 'reserveAmounts',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'token_in' => 'tokenIn',
        'amount_in' => 'amountIn',
        'amount_in_usd' => 'amountInUsd',
        'token_out' => 'tokenOut',
        'amount_out' => 'amountOut',
        'amount_out_usd' => 'amountOutUsd',
        'reserve_amounts' => 'reserveAmounts',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_' => 'block',
        'log_index' => 'logIndex',
        'gas_limit' => 'gasLimit',
        'gas_used' => 'gasUsed',
        'gas_price' => 'gasPrice',
        'token_in' => 'tokenIn',
        'amount_in' => 'amountIn',
        'amount_in_usd' => 'amountInUsd',
        'token_out' => 'tokenOut',
        'amount_out' => 'amountOut',
        'amount_out_usd' => 'amountOutUsd',
        'reserve_amounts' => 'reserveAmounts',
        'pool_id' => 'poolId',
        'transaction_id' => 'transactionId',
        'evaluated_price' => 'evaluatedPrice',
        'evaluated_amount' => 'evaluatedAmount',
        'evaluated_aggressor' => 'evaluatedAggressor'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASPANCAKESWAPV3ETHEREUMSwapDTO() {
        reserveAmounts = new List<String>();
    }

    public static OASPANCAKESWAPV3ETHEREUMSwapDTO getExample() {
        OASPANCAKESWAPV3ETHEREUMSwapDTO paNCAKESWAPV3ETHEREUMSwapDTO = new OASPANCAKESWAPV3ETHEREUMSwapDTO();
          paNCAKESWAPV3ETHEREUMSwapDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          paNCAKESWAPV3ETHEREUMSwapDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          paNCAKESWAPV3ETHEREUMSwapDTO.blockNumber = 123456789L;
          paNCAKESWAPV3ETHEREUMSwapDTO.block = 0;
          paNCAKESWAPV3ETHEREUMSwapDTO.id = '';
          paNCAKESWAPV3ETHEREUMSwapDTO.hash = '';
          paNCAKESWAPV3ETHEREUMSwapDTO.nonce = '';
          paNCAKESWAPV3ETHEREUMSwapDTO.logIndex = 0;
          paNCAKESWAPV3ETHEREUMSwapDTO.gasLimit = '';
          paNCAKESWAPV3ETHEREUMSwapDTO.gasUsed = '';
          paNCAKESWAPV3ETHEREUMSwapDTO.gasPrice = '';
          paNCAKESWAPV3ETHEREUMSwapDTO.protocol = '';
          paNCAKESWAPV3ETHEREUMSwapDTO.account = '';
          paNCAKESWAPV3ETHEREUMSwapDTO.pool = '';
          paNCAKESWAPV3ETHEREUMSwapDTO.timestamp = '';
          paNCAKESWAPV3ETHEREUMSwapDTO.tick = '';
          paNCAKESWAPV3ETHEREUMSwapDTO.tokenIn = '';
          paNCAKESWAPV3ETHEREUMSwapDTO.amountIn = '';
          paNCAKESWAPV3ETHEREUMSwapDTO.amountInUsd = '';
          paNCAKESWAPV3ETHEREUMSwapDTO.tokenOut = '';
          paNCAKESWAPV3ETHEREUMSwapDTO.amountOut = '';
          paNCAKESWAPV3ETHEREUMSwapDTO.amountOutUsd = '';
          paNCAKESWAPV3ETHEREUMSwapDTO.reserveAmounts = new List<String>{''};
          paNCAKESWAPV3ETHEREUMSwapDTO.poolId = '';
          paNCAKESWAPV3ETHEREUMSwapDTO.transactionId = '';
          paNCAKESWAPV3ETHEREUMSwapDTO.evaluatedPrice = 1.3579;
          paNCAKESWAPV3ETHEREUMSwapDTO.evaluatedAmount = 1.3579;
          paNCAKESWAPV3ETHEREUMSwapDTO.evaluatedAggressor = OASTransactionsETradeAggressiveSide.getExample();
        return paNCAKESWAPV3ETHEREUMSwapDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASPANCAKESWAPV3ETHEREUMSwapDTO) {           
            OASPANCAKESWAPV3ETHEREUMSwapDTO paNCAKESWAPV3ETHEREUMSwapDTO = (OASPANCAKESWAPV3ETHEREUMSwapDTO) obj;
            return this.entryTime == paNCAKESWAPV3ETHEREUMSwapDTO.entryTime
                && this.recvTime == paNCAKESWAPV3ETHEREUMSwapDTO.recvTime
                && this.blockNumber == paNCAKESWAPV3ETHEREUMSwapDTO.blockNumber
                && this.block == paNCAKESWAPV3ETHEREUMSwapDTO.block
                && this.id == paNCAKESWAPV3ETHEREUMSwapDTO.id
                && this.hash == paNCAKESWAPV3ETHEREUMSwapDTO.hash
                && this.nonce == paNCAKESWAPV3ETHEREUMSwapDTO.nonce
                && this.logIndex == paNCAKESWAPV3ETHEREUMSwapDTO.logIndex
                && this.gasLimit == paNCAKESWAPV3ETHEREUMSwapDTO.gasLimit
                && this.gasUsed == paNCAKESWAPV3ETHEREUMSwapDTO.gasUsed
                && this.gasPrice == paNCAKESWAPV3ETHEREUMSwapDTO.gasPrice
                && this.protocol == paNCAKESWAPV3ETHEREUMSwapDTO.protocol
                && this.account == paNCAKESWAPV3ETHEREUMSwapDTO.account
                && this.pool == paNCAKESWAPV3ETHEREUMSwapDTO.pool
                && this.timestamp == paNCAKESWAPV3ETHEREUMSwapDTO.timestamp
                && this.tick == paNCAKESWAPV3ETHEREUMSwapDTO.tick
                && this.tokenIn == paNCAKESWAPV3ETHEREUMSwapDTO.tokenIn
                && this.amountIn == paNCAKESWAPV3ETHEREUMSwapDTO.amountIn
                && this.amountInUsd == paNCAKESWAPV3ETHEREUMSwapDTO.amountInUsd
                && this.tokenOut == paNCAKESWAPV3ETHEREUMSwapDTO.tokenOut
                && this.amountOut == paNCAKESWAPV3ETHEREUMSwapDTO.amountOut
                && this.amountOutUsd == paNCAKESWAPV3ETHEREUMSwapDTO.amountOutUsd
                && this.reserveAmounts == paNCAKESWAPV3ETHEREUMSwapDTO.reserveAmounts
                && this.poolId == paNCAKESWAPV3ETHEREUMSwapDTO.poolId
                && this.transactionId == paNCAKESWAPV3ETHEREUMSwapDTO.transactionId
                && this.evaluatedPrice == paNCAKESWAPV3ETHEREUMSwapDTO.evaluatedPrice
                && this.evaluatedAmount == paNCAKESWAPV3ETHEREUMSwapDTO.evaluatedAmount
                && this.evaluatedAggressor == paNCAKESWAPV3ETHEREUMSwapDTO.evaluatedAggressor;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (block == null ? 0 : System.hashCode(block));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (hash == null ? 0 : System.hashCode(hash));
        hashCode = (17 * hashCode) + (nonce == null ? 0 : System.hashCode(nonce));
        hashCode = (17 * hashCode) + (logIndex == null ? 0 : System.hashCode(logIndex));
        hashCode = (17 * hashCode) + (gasLimit == null ? 0 : System.hashCode(gasLimit));
        hashCode = (17 * hashCode) + (gasUsed == null ? 0 : System.hashCode(gasUsed));
        hashCode = (17 * hashCode) + (gasPrice == null ? 0 : System.hashCode(gasPrice));
        hashCode = (17 * hashCode) + (protocol == null ? 0 : System.hashCode(protocol));
        hashCode = (17 * hashCode) + (account == null ? 0 : System.hashCode(account));
        hashCode = (17 * hashCode) + (pool == null ? 0 : System.hashCode(pool));
        hashCode = (17 * hashCode) + (timestamp == null ? 0 : System.hashCode(timestamp));
        hashCode = (17 * hashCode) + (tick == null ? 0 : System.hashCode(tick));
        hashCode = (17 * hashCode) + (tokenIn == null ? 0 : System.hashCode(tokenIn));
        hashCode = (17 * hashCode) + (amountIn == null ? 0 : System.hashCode(amountIn));
        hashCode = (17 * hashCode) + (amountInUsd == null ? 0 : System.hashCode(amountInUsd));
        hashCode = (17 * hashCode) + (tokenOut == null ? 0 : System.hashCode(tokenOut));
        hashCode = (17 * hashCode) + (amountOut == null ? 0 : System.hashCode(amountOut));
        hashCode = (17 * hashCode) + (amountOutUsd == null ? 0 : System.hashCode(amountOutUsd));
        hashCode = (17 * hashCode) + (reserveAmounts == null ? 0 : System.hashCode(reserveAmounts));
        hashCode = (17 * hashCode) + (poolId == null ? 0 : System.hashCode(poolId));
        hashCode = (17 * hashCode) + (transactionId == null ? 0 : System.hashCode(transactionId));
        hashCode = (17 * hashCode) + (evaluatedPrice == null ? 0 : System.hashCode(evaluatedPrice));
        hashCode = (17 * hashCode) + (evaluatedAmount == null ? 0 : System.hashCode(evaluatedAmount));
        hashCode = (17 * hashCode) + (evaluatedAggressor == null ? 0 : System.hashCode(evaluatedAggressor));
        return hashCode;
    }
}

