/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * 
 */
public class OASUNISWAPV2ETHEREUMMasterChefStakin implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * 
     * @return blockRange
     */
    public String blockRange { get; set; }

    /**
     * (masterchef type) - (pid referenced in the masterchef contract)
     * @return id
     */
    public String id { get; set; }

    /**
     * Staking pool to which this rewarder is associated
     * @return poolAddress
     */
    public String poolAddress { get; set; }

    /**
     * Allocation point of this MasterChef Staking pool
     * @return poolAllocPoint
     */
    public String poolAllocPoint { get; set; }

    /**
     * Reward Multiplier for a given staking pool
     * @return multiplier
     */
    public String multiplier { get; set; }

    /**
     * Last block where rewards were given out
     * @return lastRewardBlock
     */
    public String lastRewardBlock { get; set; }

    /**
     * Optional address of a bonus rewarder, to give additional tokens on top of masterchefs
     * @return rewarder
     */
    public String rewarder { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'pool_address' => 'poolAddress',
        'pool_alloc_point' => 'poolAllocPoint',
        'last_reward_block' => 'lastRewardBlock'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'pool_address' => 'poolAddress',
        'pool_alloc_point' => 'poolAllocPoint',
        'last_reward_block' => 'lastRewardBlock'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'pool_address' => 'poolAddress',
        'pool_alloc_point' => 'poolAllocPoint',
        'last_reward_block' => 'lastRewardBlock'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'pool_address' => 'poolAddress',
        'pool_alloc_point' => 'poolAllocPoint',
        'last_reward_block' => 'lastRewardBlock'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'pool_address' => 'poolAddress',
        'pool_alloc_point' => 'poolAllocPoint',
        'last_reward_block' => 'lastRewardBlock'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'pool_address' => 'poolAddress',
        'pool_alloc_point' => 'poolAllocPoint',
        'last_reward_block' => 'lastRewardBlock'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'pool_address' => 'poolAddress',
        'pool_alloc_point' => 'poolAllocPoint',
        'last_reward_block' => 'lastRewardBlock'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASUNISWAPV2ETHEREUMMasterChefStakin getExample() {
        OASUNISWAPV2ETHEREUMMasterChefStakin unISWAPV2ETHEREUMMasterChefStakingPoolDTO = new OASUNISWAPV2ETHEREUMMasterChefStakin();
          unISWAPV2ETHEREUMMasterChefStakingPoolDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          unISWAPV2ETHEREUMMasterChefStakingPoolDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          unISWAPV2ETHEREUMMasterChefStakingPoolDTO.blockNumber = 123456789L;
          unISWAPV2ETHEREUMMasterChefStakingPoolDTO.blockRange = '';
          unISWAPV2ETHEREUMMasterChefStakingPoolDTO.id = '';
          unISWAPV2ETHEREUMMasterChefStakingPoolDTO.poolAddress = '';
          unISWAPV2ETHEREUMMasterChefStakingPoolDTO.poolAllocPoint = '';
          unISWAPV2ETHEREUMMasterChefStakingPoolDTO.multiplier = '';
          unISWAPV2ETHEREUMMasterChefStakingPoolDTO.lastRewardBlock = '';
          unISWAPV2ETHEREUMMasterChefStakingPoolDTO.rewarder = '';
        return unISWAPV2ETHEREUMMasterChefStakingPoolDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASUNISWAPV2ETHEREUMMasterChefStakin) {           
            OASUNISWAPV2ETHEREUMMasterChefStakin unISWAPV2ETHEREUMMasterChefStakingPoolDTO = (OASUNISWAPV2ETHEREUMMasterChefStakin) obj;
            return this.entryTime == unISWAPV2ETHEREUMMasterChefStakingPoolDTO.entryTime
                && this.recvTime == unISWAPV2ETHEREUMMasterChefStakingPoolDTO.recvTime
                && this.blockNumber == unISWAPV2ETHEREUMMasterChefStakingPoolDTO.blockNumber
                && this.blockRange == unISWAPV2ETHEREUMMasterChefStakingPoolDTO.blockRange
                && this.id == unISWAPV2ETHEREUMMasterChefStakingPoolDTO.id
                && this.poolAddress == unISWAPV2ETHEREUMMasterChefStakingPoolDTO.poolAddress
                && this.poolAllocPoint == unISWAPV2ETHEREUMMasterChefStakingPoolDTO.poolAllocPoint
                && this.multiplier == unISWAPV2ETHEREUMMasterChefStakingPoolDTO.multiplier
                && this.lastRewardBlock == unISWAPV2ETHEREUMMasterChefStakingPoolDTO.lastRewardBlock
                && this.rewarder == unISWAPV2ETHEREUMMasterChefStakingPoolDTO.rewarder;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (blockRange == null ? 0 : System.hashCode(blockRange));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (poolAddress == null ? 0 : System.hashCode(poolAddress));
        hashCode = (17 * hashCode) + (poolAllocPoint == null ? 0 : System.hashCode(poolAllocPoint));
        hashCode = (17 * hashCode) + (multiplier == null ? 0 : System.hashCode(multiplier));
        hashCode = (17 * hashCode) + (lastRewardBlock == null ? 0 : System.hashCode(lastRewardBlock));
        hashCode = (17 * hashCode) + (rewarder == null ? 0 : System.hashCode(rewarder));
        return hashCode;
    }
}

