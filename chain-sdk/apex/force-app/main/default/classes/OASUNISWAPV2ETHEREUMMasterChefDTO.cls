/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Smart contract that is used to manage the liquidity mining program on Uniswap V2.
 */
public class OASUNISWAPV2ETHEREUMMasterChefDTO implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * 
     * @return blockRange
     */
    public String blockRange { get; set; }

    /**
     * (masterChef type) - (pid referenced in the masterchef contract)
     * @return id
     */
    public String id { get; set; }

    /**
     * Address of the masterchef contract
     * @return address
     */
    public String address { get; set; }

    /**
     * Total allocation point of all staking pools
     * @return totalAllocPoint
     */
    public String totalAllocPoint { get; set; }

    /**
     * Amount of reward tokens emitted per block or timestamp
     * @return rewardTokenRate
     */
    public String rewardTokenRate { get; set; }

    /**
     * Indicates whether rewards are indicated by block or timestamp
     * @return rewardTokenInterval
     */
    public String rewardTokenInterval { get; set; }

    /**
     * Reward token rate given after you adjust for allocations either burned or not applicable
     * @return adjustedRewardTokenRate
     */
    public String adjustedRewardTokenRate { get; set; }

    /**
     * Last time the adjusted reward token rate was updated
     * @return lastUpdatedRewardRate
     */
    public String lastUpdatedRewardRate { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'total_alloc_point' => 'totalAllocPoint',
        'reward_token_rate' => 'rewardTokenRate',
        'reward_token_interval' => 'rewardTokenInterval',
        'adjusted_reward_token_rate' => 'adjustedRewardTokenRate',
        'last_updated_reward_rate' => 'lastUpdatedRewardRate'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'total_alloc_point' => 'totalAllocPoint',
        'reward_token_rate' => 'rewardTokenRate',
        'reward_token_interval' => 'rewardTokenInterval',
        'adjusted_reward_token_rate' => 'adjustedRewardTokenRate',
        'last_updated_reward_rate' => 'lastUpdatedRewardRate'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'total_alloc_point' => 'totalAllocPoint',
        'reward_token_rate' => 'rewardTokenRate',
        'reward_token_interval' => 'rewardTokenInterval',
        'adjusted_reward_token_rate' => 'adjustedRewardTokenRate',
        'last_updated_reward_rate' => 'lastUpdatedRewardRate'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'total_alloc_point' => 'totalAllocPoint',
        'reward_token_rate' => 'rewardTokenRate',
        'reward_token_interval' => 'rewardTokenInterval',
        'adjusted_reward_token_rate' => 'adjustedRewardTokenRate',
        'last_updated_reward_rate' => 'lastUpdatedRewardRate'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'total_alloc_point' => 'totalAllocPoint',
        'reward_token_rate' => 'rewardTokenRate',
        'reward_token_interval' => 'rewardTokenInterval',
        'adjusted_reward_token_rate' => 'adjustedRewardTokenRate',
        'last_updated_reward_rate' => 'lastUpdatedRewardRate'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'total_alloc_point' => 'totalAllocPoint',
        'reward_token_rate' => 'rewardTokenRate',
        'reward_token_interval' => 'rewardTokenInterval',
        'adjusted_reward_token_rate' => 'adjustedRewardTokenRate',
        'last_updated_reward_rate' => 'lastUpdatedRewardRate'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'total_alloc_point' => 'totalAllocPoint',
        'reward_token_rate' => 'rewardTokenRate',
        'reward_token_interval' => 'rewardTokenInterval',
        'adjusted_reward_token_rate' => 'adjustedRewardTokenRate',
        'last_updated_reward_rate' => 'lastUpdatedRewardRate'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'total_alloc_point' => 'totalAllocPoint',
        'reward_token_rate' => 'rewardTokenRate',
        'reward_token_interval' => 'rewardTokenInterval',
        'adjusted_reward_token_rate' => 'adjustedRewardTokenRate',
        'last_updated_reward_rate' => 'lastUpdatedRewardRate'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'total_alloc_point' => 'totalAllocPoint',
        'reward_token_rate' => 'rewardTokenRate',
        'reward_token_interval' => 'rewardTokenInterval',
        'adjusted_reward_token_rate' => 'adjustedRewardTokenRate',
        'last_updated_reward_rate' => 'lastUpdatedRewardRate'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASUNISWAPV2ETHEREUMMasterChefDTO getExample() {
        OASUNISWAPV2ETHEREUMMasterChefDTO unISWAPV2ETHEREUMMasterChefDTO = new OASUNISWAPV2ETHEREUMMasterChefDTO();
          unISWAPV2ETHEREUMMasterChefDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          unISWAPV2ETHEREUMMasterChefDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          unISWAPV2ETHEREUMMasterChefDTO.blockNumber = 123456789L;
          unISWAPV2ETHEREUMMasterChefDTO.blockRange = '';
          unISWAPV2ETHEREUMMasterChefDTO.id = '';
          unISWAPV2ETHEREUMMasterChefDTO.address = '';
          unISWAPV2ETHEREUMMasterChefDTO.totalAllocPoint = '';
          unISWAPV2ETHEREUMMasterChefDTO.rewardTokenRate = '';
          unISWAPV2ETHEREUMMasterChefDTO.rewardTokenInterval = '';
          unISWAPV2ETHEREUMMasterChefDTO.adjustedRewardTokenRate = '';
          unISWAPV2ETHEREUMMasterChefDTO.lastUpdatedRewardRate = '';
        return unISWAPV2ETHEREUMMasterChefDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASUNISWAPV2ETHEREUMMasterChefDTO) {           
            OASUNISWAPV2ETHEREUMMasterChefDTO unISWAPV2ETHEREUMMasterChefDTO = (OASUNISWAPV2ETHEREUMMasterChefDTO) obj;
            return this.entryTime == unISWAPV2ETHEREUMMasterChefDTO.entryTime
                && this.recvTime == unISWAPV2ETHEREUMMasterChefDTO.recvTime
                && this.blockNumber == unISWAPV2ETHEREUMMasterChefDTO.blockNumber
                && this.blockRange == unISWAPV2ETHEREUMMasterChefDTO.blockRange
                && this.id == unISWAPV2ETHEREUMMasterChefDTO.id
                && this.address == unISWAPV2ETHEREUMMasterChefDTO.address
                && this.totalAllocPoint == unISWAPV2ETHEREUMMasterChefDTO.totalAllocPoint
                && this.rewardTokenRate == unISWAPV2ETHEREUMMasterChefDTO.rewardTokenRate
                && this.rewardTokenInterval == unISWAPV2ETHEREUMMasterChefDTO.rewardTokenInterval
                && this.adjustedRewardTokenRate == unISWAPV2ETHEREUMMasterChefDTO.adjustedRewardTokenRate
                && this.lastUpdatedRewardRate == unISWAPV2ETHEREUMMasterChefDTO.lastUpdatedRewardRate;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (blockRange == null ? 0 : System.hashCode(blockRange));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (address == null ? 0 : System.hashCode(address));
        hashCode = (17 * hashCode) + (totalAllocPoint == null ? 0 : System.hashCode(totalAllocPoint));
        hashCode = (17 * hashCode) + (rewardTokenRate == null ? 0 : System.hashCode(rewardTokenRate));
        hashCode = (17 * hashCode) + (rewardTokenInterval == null ? 0 : System.hashCode(rewardTokenInterval));
        hashCode = (17 * hashCode) + (adjustedRewardTokenRate == null ? 0 : System.hashCode(adjustedRewardTokenRate));
        hashCode = (17 * hashCode) + (lastUpdatedRewardRate == null ? 0 : System.hashCode(lastUpdatedRewardRate));
        return hashCode;
    }
}

