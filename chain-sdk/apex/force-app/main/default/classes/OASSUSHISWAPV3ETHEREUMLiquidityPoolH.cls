/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * 
 */
public class OASSUSHISWAPV3ETHEREUMLiquidityPoolH implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * (Smart contract address of the pool)-( # of hours since Unix epoch time)
     * @return id
     */
    public String id { get; set; }

    /**
     * Number of hours since Unix epoch time
     * @return hour
     */
    public Integer hour { get; set; }

    /**
     * The protocol this snapshot belongs to
     * @return protocol
     */
    public String protocol { get; set; }

    /**
     * The pool this snapshot belongs to
     * @return pool
     */
    public String pool { get; set; }

    /**
     * Current tick representing the price of token0/token1
     * @return tick
     */
    public String tick { get; set; }

    /**
     * Current TVL (Total Value Locked) of this pool
     * @return totalValueLockedUsd
     */
    public String totalValueLockedUsd { get; set; }

    /**
     * The sum of all active and non-active liquidity for this pool.
     * @return totalLiquidity
     */
    public String totalLiquidity { get; set; }

    /**
     * The sum of all active and non-active liquidity in USD for this pool.
     * @return totalLiquidityUsd
     */
    public String totalLiquidityUsd { get; set; }

    /**
     * All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pool\'s current tick.
     * @return activeLiquidity
     */
    public String activeLiquidity { get; set; }

    /**
     * All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pool\'s current tick.
     * @return activeLiquidityUsd
     */
    public String activeLiquidityUsd { get; set; }

    /**
     * All protocol-side value locked in token amounts that remains uncollected and unused in the pool.
     * @return uncollectedProtocolSideTokenAmounts
     */
    public List<String> uncollectedProtocolSideTokenAmounts { get; set; }

    /**
     * All protocol-side value locking in USD that remains uncollected and unused in the pool.
     * @return uncollectedProtocolSideValuesUsd
     */
    public List<String> uncollectedProtocolSideValuesUsd { get; set; }

    /**
     * All supply-side value locked in token amounts that remains uncollected and unused in the pool.
     * @return uncollectedSupplySideTokenAmounts
     */
    public List<String> uncollectedSupplySideTokenAmounts { get; set; }

    /**
     * All supply-side value locked in USD that remains uncollected and unused in the pool.
     * @return uncollectedSupplySideValuesUsd
     */
    public List<String> uncollectedSupplySideValuesUsd { get; set; }

    /**
     * All revenue generated by the liquidity pool, accrued to the supply side.
     * @return cumulativeSupplySideRevenueUsd
     */
    public String cumulativeSupplySideRevenueUsd { get; set; }

    /**
     * Hourly revenue generated by the liquidity pool, accrued to the supply side.
     * @return hourlySupplySideRevenueUsd
     */
    public String hourlySupplySideRevenueUsd { get; set; }

    /**
     * All revenue generated by the liquidity pool, accrued to the protocol.
     * @return cumulativeProtocolSideRevenueUsd
     */
    public String cumulativeProtocolSideRevenueUsd { get; set; }

    /**
     * Hourly revenue generated by the liquidity pool, accrued to the protocol.
     * @return hourlyProtocolSideRevenueUsd
     */
    public String hourlyProtocolSideRevenueUsd { get; set; }

    /**
     * All revenue generated by the liquidity pool.
     * @return cumulativeTotalRevenueUsd
     */
    public String cumulativeTotalRevenueUsd { get; set; }

    /**
     * Hourly revenue generated by the liquidity pool.
     * @return hourlyTotalRevenueUsd
     */
    public String hourlyTotalRevenueUsd { get; set; }

    /**
     * All historical trade volume occurred in this pool, in USD.
     * @return cumulativeVolumeUsd
     */
    public String cumulativeVolumeUsd { get; set; }

    /**
     * All trade volume occurred in a given hour, in USD.
     * @return hourlyVolumeUsd
     */
    public String hourlyVolumeUsd { get; set; }

    /**
     * All trade volume, in native amount. The ordering should be the same as the pool\'s `inputTokens` field.
     * @return cumulativeVolumeByTokenAmount
     */
    public List<String> cumulativeVolumeByTokenAmount { get; set; }

    /**
     * All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool\'s `inputTokens` field.
     * @return hourlyVolumeByTokenAmount
     */
    public List<String> hourlyVolumeByTokenAmount { get; set; }

    /**
     * All trade volume, in USD. The ordering should be the same as the pool\'s `inputTokens` field.
     * @return cumulativeVolumeByTokenUsd
     */
    public List<String> cumulativeVolumeByTokenUsd { get; set; }

    /**
     * All trade volume occurred in a given hour for a specific input token, in USD. The ordering should be the same as the pool\'s `inputTokens` field.
     * @return hourlyVolumeByTokenUsd
     */
    public List<String> hourlyVolumeByTokenUsd { get; set; }

    /**
     * Amount of input tokens in the pool. The ordering should be the same as the pool\'s `inputTokens` field.
     * @return inputTokenBalances
     */
    public List<String> inputTokenBalances { get; set; }

    /**
     * Amount of input tokens in USD in the pool. The ordering should be the same as the pool\'s `inputTokens` field.
     * @return inputTokenBalancesUsd
     */
    public List<String> inputTokenBalancesUsd { get; set; }

    /**
     * Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
     * @return inputTokenWeights
     */
    public List<String> inputTokenWeights { get; set; }

    /**
     * Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
     * @return stakedOutputTokenAmount
     */
    public String stakedOutputTokenAmount { get; set; }

    /**
     * Per-block reward token emission as of the current block normalized to a day (not hour), in token\'s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
     * @return rewardTokenEmissionsAmount
     */
    public List<String> rewardTokenEmissionsAmount { get; set; }

    /**
     * Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
     * @return rewardTokenEmissionsUsd
     */
    public List<String> rewardTokenEmissionsUsd { get; set; }

    /**
     * Total number of deposits (add liquidity)
     * @return cumulativeDepositCount
     */
    public Integer cumulativeDepositCount { get; set; }

    /**
     * Total number of deposits (add liquidity) in an hour
     * @return hourlyDepositCount
     */
    public Integer hourlyDepositCount { get; set; }

    /**
     * Total number of withdrawals (remove liquidity)
     * @return cumulativeWithdrawCount
     */
    public Integer cumulativeWithdrawCount { get; set; }

    /**
     * Total number of withdrawals (remove liquidity) in an hour
     * @return hourlyWithdrawCount
     */
    public Integer hourlyWithdrawCount { get; set; }

    /**
     * Total number of trades (swaps)
     * @return cumulativeSwapCount
     */
    public Integer cumulativeSwapCount { get; set; }

    /**
     * Total number of trades (swaps) in an hour
     * @return hourlySwapCount
     */
    public Integer hourlySwapCount { get; set; }

    /**
     * Number of positions in this market
     * @return positionCount
     */
    public Integer positionCount { get; set; }

    /**
     * Number of open positions in this market
     * @return openPositionCount
     */
    public Integer openPositionCount { get; set; }

    /**
     * Number of closed positions in this market
     * @return closedPositionCount
     */
    public Integer closedPositionCount { get; set; }

    /**
     * Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)
     * @return timestamp
     */
    public String timestamp { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'hourly_supply_side_revenue_usd' => 'hourlySupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'hourly_protocol_side_revenue_usd' => 'hourlyProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'hourly_total_revenue_usd' => 'hourlyTotalRevenueUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'hourly_volume_usd' => 'hourlyVolumeUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'hourly_volume_by_token_amount' => 'hourlyVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'hourly_volume_by_token_usd' => 'hourlyVolumeByTokenUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'hourly_deposit_count' => 'hourlyDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'hourly_withdraw_count' => 'hourlyWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'hourly_swap_count' => 'hourlySwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASSUSHISWAPV3ETHEREUMLiquidityPoolH() {
        uncollectedProtocolSideTokenAmounts = new List<String>();
        uncollectedProtocolSideValuesUsd = new List<String>();
        uncollectedSupplySideTokenAmounts = new List<String>();
        uncollectedSupplySideValuesUsd = new List<String>();
        cumulativeVolumeByTokenAmount = new List<String>();
        hourlyVolumeByTokenAmount = new List<String>();
        cumulativeVolumeByTokenUsd = new List<String>();
        hourlyVolumeByTokenUsd = new List<String>();
        inputTokenBalances = new List<String>();
        inputTokenBalancesUsd = new List<String>();
        inputTokenWeights = new List<String>();
        rewardTokenEmissionsAmount = new List<String>();
        rewardTokenEmissionsUsd = new List<String>();
    }

    public static OASSUSHISWAPV3ETHEREUMLiquidityPoolH getExample() {
        OASSUSHISWAPV3ETHEREUMLiquidityPoolH suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO = new OASSUSHISWAPV3ETHEREUMLiquidityPoolH();
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.blockNumber = 123456789L;
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.id = '';
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.hour = 0;
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.protocol = '';
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.pool = '';
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.tick = '';
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.totalValueLockedUsd = '';
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.totalLiquidity = '';
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.totalLiquidityUsd = '';
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.activeLiquidity = '';
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.activeLiquidityUsd = '';
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.uncollectedProtocolSideTokenAmounts = new List<String>{''};
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.uncollectedProtocolSideValuesUsd = new List<String>{''};
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.uncollectedSupplySideTokenAmounts = new List<String>{''};
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.uncollectedSupplySideValuesUsd = new List<String>{''};
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.cumulativeSupplySideRevenueUsd = '';
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.hourlySupplySideRevenueUsd = '';
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.cumulativeProtocolSideRevenueUsd = '';
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.hourlyProtocolSideRevenueUsd = '';
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.cumulativeTotalRevenueUsd = '';
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.hourlyTotalRevenueUsd = '';
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.cumulativeVolumeUsd = '';
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.hourlyVolumeUsd = '';
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.cumulativeVolumeByTokenAmount = new List<String>{''};
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.hourlyVolumeByTokenAmount = new List<String>{''};
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.cumulativeVolumeByTokenUsd = new List<String>{''};
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.hourlyVolumeByTokenUsd = new List<String>{''};
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.inputTokenBalances = new List<String>{''};
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.inputTokenBalancesUsd = new List<String>{''};
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.inputTokenWeights = new List<String>{''};
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.stakedOutputTokenAmount = '';
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.rewardTokenEmissionsAmount = new List<String>{''};
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.rewardTokenEmissionsUsd = new List<String>{''};
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.cumulativeDepositCount = 0;
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.hourlyDepositCount = 0;
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.cumulativeWithdrawCount = 0;
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.hourlyWithdrawCount = 0;
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.cumulativeSwapCount = 0;
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.hourlySwapCount = 0;
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.positionCount = 0;
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.openPositionCount = 0;
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.closedPositionCount = 0;
          suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.timestamp = '';
        return suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASSUSHISWAPV3ETHEREUMLiquidityPoolH) {           
            OASSUSHISWAPV3ETHEREUMLiquidityPoolH suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO = (OASSUSHISWAPV3ETHEREUMLiquidityPoolH) obj;
            return this.entryTime == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.entryTime
                && this.recvTime == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.recvTime
                && this.blockNumber == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.blockNumber
                && this.id == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.id
                && this.hour == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.hour
                && this.protocol == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.protocol
                && this.pool == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.pool
                && this.tick == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.tick
                && this.totalValueLockedUsd == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.totalValueLockedUsd
                && this.totalLiquidity == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.totalLiquidity
                && this.totalLiquidityUsd == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.totalLiquidityUsd
                && this.activeLiquidity == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.activeLiquidity
                && this.activeLiquidityUsd == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.activeLiquidityUsd
                && this.uncollectedProtocolSideTokenAmounts == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.uncollectedProtocolSideTokenAmounts
                && this.uncollectedProtocolSideValuesUsd == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.uncollectedProtocolSideValuesUsd
                && this.uncollectedSupplySideTokenAmounts == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.uncollectedSupplySideTokenAmounts
                && this.uncollectedSupplySideValuesUsd == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.uncollectedSupplySideValuesUsd
                && this.cumulativeSupplySideRevenueUsd == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.cumulativeSupplySideRevenueUsd
                && this.hourlySupplySideRevenueUsd == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.hourlySupplySideRevenueUsd
                && this.cumulativeProtocolSideRevenueUsd == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.cumulativeProtocolSideRevenueUsd
                && this.hourlyProtocolSideRevenueUsd == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.hourlyProtocolSideRevenueUsd
                && this.cumulativeTotalRevenueUsd == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.cumulativeTotalRevenueUsd
                && this.hourlyTotalRevenueUsd == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.hourlyTotalRevenueUsd
                && this.cumulativeVolumeUsd == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.cumulativeVolumeUsd
                && this.hourlyVolumeUsd == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.hourlyVolumeUsd
                && this.cumulativeVolumeByTokenAmount == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.cumulativeVolumeByTokenAmount
                && this.hourlyVolumeByTokenAmount == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.hourlyVolumeByTokenAmount
                && this.cumulativeVolumeByTokenUsd == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.cumulativeVolumeByTokenUsd
                && this.hourlyVolumeByTokenUsd == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.hourlyVolumeByTokenUsd
                && this.inputTokenBalances == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.inputTokenBalances
                && this.inputTokenBalancesUsd == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.inputTokenBalancesUsd
                && this.inputTokenWeights == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.inputTokenWeights
                && this.stakedOutputTokenAmount == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.stakedOutputTokenAmount
                && this.rewardTokenEmissionsAmount == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.rewardTokenEmissionsAmount
                && this.rewardTokenEmissionsUsd == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.rewardTokenEmissionsUsd
                && this.cumulativeDepositCount == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.cumulativeDepositCount
                && this.hourlyDepositCount == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.hourlyDepositCount
                && this.cumulativeWithdrawCount == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.cumulativeWithdrawCount
                && this.hourlyWithdrawCount == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.hourlyWithdrawCount
                && this.cumulativeSwapCount == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.cumulativeSwapCount
                && this.hourlySwapCount == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.hourlySwapCount
                && this.positionCount == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.positionCount
                && this.openPositionCount == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.openPositionCount
                && this.closedPositionCount == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.closedPositionCount
                && this.timestamp == suSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO.timestamp;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (hour == null ? 0 : System.hashCode(hour));
        hashCode = (17 * hashCode) + (protocol == null ? 0 : System.hashCode(protocol));
        hashCode = (17 * hashCode) + (pool == null ? 0 : System.hashCode(pool));
        hashCode = (17 * hashCode) + (tick == null ? 0 : System.hashCode(tick));
        hashCode = (17 * hashCode) + (totalValueLockedUsd == null ? 0 : System.hashCode(totalValueLockedUsd));
        hashCode = (17 * hashCode) + (totalLiquidity == null ? 0 : System.hashCode(totalLiquidity));
        hashCode = (17 * hashCode) + (totalLiquidityUsd == null ? 0 : System.hashCode(totalLiquidityUsd));
        hashCode = (17 * hashCode) + (activeLiquidity == null ? 0 : System.hashCode(activeLiquidity));
        hashCode = (17 * hashCode) + (activeLiquidityUsd == null ? 0 : System.hashCode(activeLiquidityUsd));
        hashCode = (17 * hashCode) + (uncollectedProtocolSideTokenAmounts == null ? 0 : System.hashCode(uncollectedProtocolSideTokenAmounts));
        hashCode = (17 * hashCode) + (uncollectedProtocolSideValuesUsd == null ? 0 : System.hashCode(uncollectedProtocolSideValuesUsd));
        hashCode = (17 * hashCode) + (uncollectedSupplySideTokenAmounts == null ? 0 : System.hashCode(uncollectedSupplySideTokenAmounts));
        hashCode = (17 * hashCode) + (uncollectedSupplySideValuesUsd == null ? 0 : System.hashCode(uncollectedSupplySideValuesUsd));
        hashCode = (17 * hashCode) + (cumulativeSupplySideRevenueUsd == null ? 0 : System.hashCode(cumulativeSupplySideRevenueUsd));
        hashCode = (17 * hashCode) + (hourlySupplySideRevenueUsd == null ? 0 : System.hashCode(hourlySupplySideRevenueUsd));
        hashCode = (17 * hashCode) + (cumulativeProtocolSideRevenueUsd == null ? 0 : System.hashCode(cumulativeProtocolSideRevenueUsd));
        hashCode = (17 * hashCode) + (hourlyProtocolSideRevenueUsd == null ? 0 : System.hashCode(hourlyProtocolSideRevenueUsd));
        hashCode = (17 * hashCode) + (cumulativeTotalRevenueUsd == null ? 0 : System.hashCode(cumulativeTotalRevenueUsd));
        hashCode = (17 * hashCode) + (hourlyTotalRevenueUsd == null ? 0 : System.hashCode(hourlyTotalRevenueUsd));
        hashCode = (17 * hashCode) + (cumulativeVolumeUsd == null ? 0 : System.hashCode(cumulativeVolumeUsd));
        hashCode = (17 * hashCode) + (hourlyVolumeUsd == null ? 0 : System.hashCode(hourlyVolumeUsd));
        hashCode = (17 * hashCode) + (cumulativeVolumeByTokenAmount == null ? 0 : System.hashCode(cumulativeVolumeByTokenAmount));
        hashCode = (17 * hashCode) + (hourlyVolumeByTokenAmount == null ? 0 : System.hashCode(hourlyVolumeByTokenAmount));
        hashCode = (17 * hashCode) + (cumulativeVolumeByTokenUsd == null ? 0 : System.hashCode(cumulativeVolumeByTokenUsd));
        hashCode = (17 * hashCode) + (hourlyVolumeByTokenUsd == null ? 0 : System.hashCode(hourlyVolumeByTokenUsd));
        hashCode = (17 * hashCode) + (inputTokenBalances == null ? 0 : System.hashCode(inputTokenBalances));
        hashCode = (17 * hashCode) + (inputTokenBalancesUsd == null ? 0 : System.hashCode(inputTokenBalancesUsd));
        hashCode = (17 * hashCode) + (inputTokenWeights == null ? 0 : System.hashCode(inputTokenWeights));
        hashCode = (17 * hashCode) + (stakedOutputTokenAmount == null ? 0 : System.hashCode(stakedOutputTokenAmount));
        hashCode = (17 * hashCode) + (rewardTokenEmissionsAmount == null ? 0 : System.hashCode(rewardTokenEmissionsAmount));
        hashCode = (17 * hashCode) + (rewardTokenEmissionsUsd == null ? 0 : System.hashCode(rewardTokenEmissionsUsd));
        hashCode = (17 * hashCode) + (cumulativeDepositCount == null ? 0 : System.hashCode(cumulativeDepositCount));
        hashCode = (17 * hashCode) + (hourlyDepositCount == null ? 0 : System.hashCode(hourlyDepositCount));
        hashCode = (17 * hashCode) + (cumulativeWithdrawCount == null ? 0 : System.hashCode(cumulativeWithdrawCount));
        hashCode = (17 * hashCode) + (hourlyWithdrawCount == null ? 0 : System.hashCode(hourlyWithdrawCount));
        hashCode = (17 * hashCode) + (cumulativeSwapCount == null ? 0 : System.hashCode(cumulativeSwapCount));
        hashCode = (17 * hashCode) + (hourlySwapCount == null ? 0 : System.hashCode(hourlySwapCount));
        hashCode = (17 * hashCode) + (positionCount == null ? 0 : System.hashCode(positionCount));
        hashCode = (17 * hashCode) + (openPositionCount == null ? 0 : System.hashCode(openPositionCount));
        hashCode = (17 * hashCode) + (closedPositionCount == null ? 0 : System.hashCode(closedPositionCount));
        hashCode = (17 * hashCode) + (timestamp == null ? 0 : System.hashCode(timestamp));
        return hashCode;
    }
}

