/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * 
 */
public class OASUNISWAPV2ETHEREUMUsageMetricsDail implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * 
     * @return blockRange
     */
    public String blockRange { get; set; }

    /**
     * ID is # of days since Unix epoch time
     * @return id
     */
    public String id { get; set; }

    /**
     * Protocol this snapshot is associated with
     * @return protocol
     */
    public String protocol { get; set; }

    /**
     * Number of unique daily active users
     * @return dailyActiveUsers
     */
    public Integer dailyActiveUsers { get; set; }

    /**
     * Number of cumulative unique users
     * @return cumulativeUniqueUsers
     */
    public Integer cumulativeUniqueUsers { get; set; }

    /**
     * Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface.
     * @return dailyTransactionCount
     */
    public Integer dailyTransactionCount { get; set; }

    /**
     * Total number of deposits (add liquidity) in a day
     * @return dailyDepositCount
     */
    public Integer dailyDepositCount { get; set; }

    /**
     * Total number of withdrawals (remove liquidity) in a day
     * @return dailyWithdrawCount
     */
    public Integer dailyWithdrawCount { get; set; }

    /**
     * Total number of trades (swaps) in a day
     * @return dailySwapCount
     */
    public Integer dailySwapCount { get; set; }

    /**
     * Total number of pools
     * @return totalPoolCount
     */
    public Integer totalPoolCount { get; set; }

    /**
     * Timestamp of this snapshot
     * @return timestamp
     */
    public String timestamp { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'daily_active_users' => 'dailyActiveUsers',
        'cumulative_unique_users' => 'cumulativeUniqueUsers',
        'daily_transaction_count' => 'dailyTransactionCount',
        'daily_deposit_count' => 'dailyDepositCount',
        'daily_withdraw_count' => 'dailyWithdrawCount',
        'daily_swap_count' => 'dailySwapCount',
        'total_pool_count' => 'totalPoolCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'daily_active_users' => 'dailyActiveUsers',
        'cumulative_unique_users' => 'cumulativeUniqueUsers',
        'daily_transaction_count' => 'dailyTransactionCount',
        'daily_deposit_count' => 'dailyDepositCount',
        'daily_withdraw_count' => 'dailyWithdrawCount',
        'daily_swap_count' => 'dailySwapCount',
        'total_pool_count' => 'totalPoolCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'daily_active_users' => 'dailyActiveUsers',
        'cumulative_unique_users' => 'cumulativeUniqueUsers',
        'daily_transaction_count' => 'dailyTransactionCount',
        'daily_deposit_count' => 'dailyDepositCount',
        'daily_withdraw_count' => 'dailyWithdrawCount',
        'daily_swap_count' => 'dailySwapCount',
        'total_pool_count' => 'totalPoolCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'daily_active_users' => 'dailyActiveUsers',
        'cumulative_unique_users' => 'cumulativeUniqueUsers',
        'daily_transaction_count' => 'dailyTransactionCount',
        'daily_deposit_count' => 'dailyDepositCount',
        'daily_withdraw_count' => 'dailyWithdrawCount',
        'daily_swap_count' => 'dailySwapCount',
        'total_pool_count' => 'totalPoolCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'daily_active_users' => 'dailyActiveUsers',
        'cumulative_unique_users' => 'cumulativeUniqueUsers',
        'daily_transaction_count' => 'dailyTransactionCount',
        'daily_deposit_count' => 'dailyDepositCount',
        'daily_withdraw_count' => 'dailyWithdrawCount',
        'daily_swap_count' => 'dailySwapCount',
        'total_pool_count' => 'totalPoolCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'daily_active_users' => 'dailyActiveUsers',
        'cumulative_unique_users' => 'cumulativeUniqueUsers',
        'daily_transaction_count' => 'dailyTransactionCount',
        'daily_deposit_count' => 'dailyDepositCount',
        'daily_withdraw_count' => 'dailyWithdrawCount',
        'daily_swap_count' => 'dailySwapCount',
        'total_pool_count' => 'totalPoolCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'daily_active_users' => 'dailyActiveUsers',
        'cumulative_unique_users' => 'cumulativeUniqueUsers',
        'daily_transaction_count' => 'dailyTransactionCount',
        'daily_deposit_count' => 'dailyDepositCount',
        'daily_withdraw_count' => 'dailyWithdrawCount',
        'daily_swap_count' => 'dailySwapCount',
        'total_pool_count' => 'totalPoolCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'daily_active_users' => 'dailyActiveUsers',
        'cumulative_unique_users' => 'cumulativeUniqueUsers',
        'daily_transaction_count' => 'dailyTransactionCount',
        'daily_deposit_count' => 'dailyDepositCount',
        'daily_withdraw_count' => 'dailyWithdrawCount',
        'daily_swap_count' => 'dailySwapCount',
        'total_pool_count' => 'totalPoolCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'daily_active_users' => 'dailyActiveUsers',
        'cumulative_unique_users' => 'cumulativeUniqueUsers',
        'daily_transaction_count' => 'dailyTransactionCount',
        'daily_deposit_count' => 'dailyDepositCount',
        'daily_withdraw_count' => 'dailyWithdrawCount',
        'daily_swap_count' => 'dailySwapCount',
        'total_pool_count' => 'totalPoolCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'daily_active_users' => 'dailyActiveUsers',
        'cumulative_unique_users' => 'cumulativeUniqueUsers',
        'daily_transaction_count' => 'dailyTransactionCount',
        'daily_deposit_count' => 'dailyDepositCount',
        'daily_withdraw_count' => 'dailyWithdrawCount',
        'daily_swap_count' => 'dailySwapCount',
        'total_pool_count' => 'totalPoolCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'daily_active_users' => 'dailyActiveUsers',
        'cumulative_unique_users' => 'cumulativeUniqueUsers',
        'daily_transaction_count' => 'dailyTransactionCount',
        'daily_deposit_count' => 'dailyDepositCount',
        'daily_withdraw_count' => 'dailyWithdrawCount',
        'daily_swap_count' => 'dailySwapCount',
        'total_pool_count' => 'totalPoolCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASUNISWAPV2ETHEREUMUsageMetricsDail getExample() {
        OASUNISWAPV2ETHEREUMUsageMetricsDail unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO = new OASUNISWAPV2ETHEREUMUsageMetricsDail();
          unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.blockNumber = 123456789L;
          unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.blockRange = '';
          unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.id = '';
          unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.protocol = '';
          unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.dailyActiveUsers = 0;
          unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.cumulativeUniqueUsers = 0;
          unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.dailyTransactionCount = 0;
          unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.dailyDepositCount = 0;
          unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.dailyWithdrawCount = 0;
          unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.dailySwapCount = 0;
          unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.totalPoolCount = 0;
          unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.timestamp = '';
        return unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASUNISWAPV2ETHEREUMUsageMetricsDail) {           
            OASUNISWAPV2ETHEREUMUsageMetricsDail unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO = (OASUNISWAPV2ETHEREUMUsageMetricsDail) obj;
            return this.entryTime == unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.entryTime
                && this.recvTime == unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.recvTime
                && this.blockNumber == unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.blockNumber
                && this.blockRange == unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.blockRange
                && this.id == unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.id
                && this.protocol == unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.protocol
                && this.dailyActiveUsers == unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.dailyActiveUsers
                && this.cumulativeUniqueUsers == unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.cumulativeUniqueUsers
                && this.dailyTransactionCount == unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.dailyTransactionCount
                && this.dailyDepositCount == unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.dailyDepositCount
                && this.dailyWithdrawCount == unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.dailyWithdrawCount
                && this.dailySwapCount == unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.dailySwapCount
                && this.totalPoolCount == unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.totalPoolCount
                && this.timestamp == unISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO.timestamp;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (blockRange == null ? 0 : System.hashCode(blockRange));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (protocol == null ? 0 : System.hashCode(protocol));
        hashCode = (17 * hashCode) + (dailyActiveUsers == null ? 0 : System.hashCode(dailyActiveUsers));
        hashCode = (17 * hashCode) + (cumulativeUniqueUsers == null ? 0 : System.hashCode(cumulativeUniqueUsers));
        hashCode = (17 * hashCode) + (dailyTransactionCount == null ? 0 : System.hashCode(dailyTransactionCount));
        hashCode = (17 * hashCode) + (dailyDepositCount == null ? 0 : System.hashCode(dailyDepositCount));
        hashCode = (17 * hashCode) + (dailyWithdrawCount == null ? 0 : System.hashCode(dailyWithdrawCount));
        hashCode = (17 * hashCode) + (dailySwapCount == null ? 0 : System.hashCode(dailySwapCount));
        hashCode = (17 * hashCode) + (totalPoolCount == null ? 0 : System.hashCode(totalPoolCount));
        hashCode = (17 * hashCode) + (timestamp == null ? 0 : System.hashCode(timestamp));
        return hashCode;
    }
}

