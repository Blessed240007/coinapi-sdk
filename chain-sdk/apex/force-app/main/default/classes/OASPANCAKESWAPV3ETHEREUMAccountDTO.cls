/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASPANCAKESWAPV3ETHEREUMAccountDTO
 */
public class OASPANCAKESWAPV3ETHEREUMAccountDTO implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * 
     * @return blockRange
     */
    public String blockRange { get; set; }

    /**
     * Account address.
     * @return id
     */
    public String id { get; set; }

    /**
     * Number of positions this account has.
     * @return positionCount
     */
    public Integer positionCount { get; set; }

    /**
     * Number of open positions this account has.
     * @return openPositionCount
     */
    public Integer openPositionCount { get; set; }

    /**
     * Number of closed positions this account has.
     * @return closedPositionCount
     */
    public Integer closedPositionCount { get; set; }

    /**
     * Number of deposits this account made.
     * @return depositCount
     */
    public Integer depositCount { get; set; }

    /**
     * Number of withdrawals this account made.
     * @return withdrawCount
     */
    public Integer withdrawCount { get; set; }

    /**
     * Number of times this account has traded/swapped.
     * @return swapCount
     */
    public Integer swapCount { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount',
        'swap_count' => 'swapCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount',
        'swap_count' => 'swapCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount',
        'swap_count' => 'swapCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount',
        'swap_count' => 'swapCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount',
        'swap_count' => 'swapCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount',
        'swap_count' => 'swapCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount',
        'swap_count' => 'swapCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount',
        'swap_count' => 'swapCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount',
        'swap_count' => 'swapCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'deposit_count' => 'depositCount',
        'withdraw_count' => 'withdrawCount',
        'swap_count' => 'swapCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASPANCAKESWAPV3ETHEREUMAccountDTO getExample() {
        OASPANCAKESWAPV3ETHEREUMAccountDTO paNCAKESWAPV3ETHEREUMAccountDTO = new OASPANCAKESWAPV3ETHEREUMAccountDTO();
          paNCAKESWAPV3ETHEREUMAccountDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          paNCAKESWAPV3ETHEREUMAccountDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          paNCAKESWAPV3ETHEREUMAccountDTO.blockNumber = 123456789L;
          paNCAKESWAPV3ETHEREUMAccountDTO.blockRange = '';
          paNCAKESWAPV3ETHEREUMAccountDTO.id = '';
          paNCAKESWAPV3ETHEREUMAccountDTO.positionCount = 0;
          paNCAKESWAPV3ETHEREUMAccountDTO.openPositionCount = 0;
          paNCAKESWAPV3ETHEREUMAccountDTO.closedPositionCount = 0;
          paNCAKESWAPV3ETHEREUMAccountDTO.depositCount = 0;
          paNCAKESWAPV3ETHEREUMAccountDTO.withdrawCount = 0;
          paNCAKESWAPV3ETHEREUMAccountDTO.swapCount = 0;
        return paNCAKESWAPV3ETHEREUMAccountDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASPANCAKESWAPV3ETHEREUMAccountDTO) {           
            OASPANCAKESWAPV3ETHEREUMAccountDTO paNCAKESWAPV3ETHEREUMAccountDTO = (OASPANCAKESWAPV3ETHEREUMAccountDTO) obj;
            return this.entryTime == paNCAKESWAPV3ETHEREUMAccountDTO.entryTime
                && this.recvTime == paNCAKESWAPV3ETHEREUMAccountDTO.recvTime
                && this.blockNumber == paNCAKESWAPV3ETHEREUMAccountDTO.blockNumber
                && this.blockRange == paNCAKESWAPV3ETHEREUMAccountDTO.blockRange
                && this.id == paNCAKESWAPV3ETHEREUMAccountDTO.id
                && this.positionCount == paNCAKESWAPV3ETHEREUMAccountDTO.positionCount
                && this.openPositionCount == paNCAKESWAPV3ETHEREUMAccountDTO.openPositionCount
                && this.closedPositionCount == paNCAKESWAPV3ETHEREUMAccountDTO.closedPositionCount
                && this.depositCount == paNCAKESWAPV3ETHEREUMAccountDTO.depositCount
                && this.withdrawCount == paNCAKESWAPV3ETHEREUMAccountDTO.withdrawCount
                && this.swapCount == paNCAKESWAPV3ETHEREUMAccountDTO.swapCount;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (blockRange == null ? 0 : System.hashCode(blockRange));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (positionCount == null ? 0 : System.hashCode(positionCount));
        hashCode = (17 * hashCode) + (openPositionCount == null ? 0 : System.hashCode(openPositionCount));
        hashCode = (17 * hashCode) + (closedPositionCount == null ? 0 : System.hashCode(closedPositionCount));
        hashCode = (17 * hashCode) + (depositCount == null ? 0 : System.hashCode(depositCount));
        hashCode = (17 * hashCode) + (withdrawCount == null ? 0 : System.hashCode(withdrawCount));
        hashCode = (17 * hashCode) + (swapCount == null ? 0 : System.hashCode(swapCount));
        return hashCode;
    }
}

