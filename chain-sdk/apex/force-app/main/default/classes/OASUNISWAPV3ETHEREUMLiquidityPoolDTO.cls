/*
 * On Chain Dapps - REST API
 * \nThis section will provide necessary information about the `OnChain API` protocol. \n<br/><br/>\nLorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.        \n                    
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Pool-level metadata.
 */
public class OASUNISWAPV3ETHEREUMLiquidityPoolDTO implements OAS.MappedProperties {
    /**
     * Get entryTime
     * @return entryTime
     */
    public Datetime entryTime { get; set; }

    /**
     * Get recvTime
     * @return recvTime
     */
    public Datetime recvTime { get; set; }

    /**
     * Number of block in which entity was recorded.
     * @return blockNumber
     */
    public Long blockNumber { get; set; }

    /**
     * .
     * @return vid
     */
    public Long vid { get; set; }

    /**
     * Block range of the liquidity pool.
     * @return blockRange
     */
    public String blockRange { get; set; }

    /**
     * Smart contract address of the pool.
     * @return id
     */
    public String id { get; set; }

    /**
     * Protocol this pool belongs to.
     * @return protocol
     */
    public String protocol { get; set; }

    /**
     * Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT).
     * @return name
     */
    public String name { get; set; }

    /**
     * Symbol of liquidity pool (e.g. 3CRV).
     * @return symbol
     */
    public String symbol { get; set; }

    /**
     * Token that is to represent ownership of liquidity.
     * @return liquidityToken
     */
    public String liquidityToken { get; set; }

    /**
     * Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer.
     * @return inputTokens
     */
    public List<String> inputTokens { get; set; }

    /**
     * Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon.
     * @return rewardTokens
     */
    public List<String> rewardTokens { get; set; }

    /**
     * Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee.).
     * @return fees
     */
    public List<String> fees { get; set; }

    /**
     * Specifies whether this pool is single-sided (e.g. Bancor, Platypus\'s Alternative Pool). The specifics of the implementation depends on the protocol.
     * @return isSingleSided
     */
    public Boolean isSingleSided { get; set; }

    /**
     * Timestamp when the liquidity pool was created.
     * @return createdTimestamp
     */
    public String createdTimestamp { get; set; }

    /**
     * Block number when the liquidity pool was created.
     * @return createdBlockNumber
     */
    public String createdBlockNumber { get; set; }

    /**
     * Current tick representing the price of token0/token1.
     * @return tick
     */
    public String tick { get; set; }

    /**
     * Current TVL (Total Value Locked) of this pool in USD.
     * @return totalValueLockedUsd
     */
    public String totalValueLockedUsd { get; set; }

    /**
     * Sum of all active and non-active liquidity for this pool.
     * @return totalLiquidity
     */
    public String totalLiquidity { get; set; }

    /**
     * Sum of all active and non-active liquidity in USD for this pool.
     * @return totalLiquidityUsd
     */
    public String totalLiquidityUsd { get; set; }

    /**
     * All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
     * @return activeLiquidity
     */
    public String activeLiquidity { get; set; }

    /**
     * All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
     * @return activeLiquidityUsd
     */
    public String activeLiquidityUsd { get; set; }

    /**
     * All protocol-side value locked in token amounts that remains uncollected and unused in the pool.
     * @return uncollectedProtocolSideTokenAmounts
     */
    public List<String> uncollectedProtocolSideTokenAmounts { get; set; }

    /**
     * All protocol-side value locking in USD that remains uncollected and unused in the pool.
     * @return uncollectedProtocolSideValuesUsd
     */
    public List<String> uncollectedProtocolSideValuesUsd { get; set; }

    /**
     * All supply-side value locked in token amounts that remains uncollected and unused in the pool.
     * @return uncollectedSupplySideTokenAmounts
     */
    public List<String> uncollectedSupplySideTokenAmounts { get; set; }

    /**
     * All supply-side value locked in USD that remains uncollected and unused in the pool.
     * @return uncollectedSupplySideValuesUsd
     */
    public List<String> uncollectedSupplySideValuesUsd { get; set; }

    /**
     * All revenue generated by the liquidity pool, accrued to the supply side.
     * @return cumulativeSupplySideRevenueUsd
     */
    public String cumulativeSupplySideRevenueUsd { get; set; }

    /**
     * All revenue generated by the liquidity pool, accrued to the protocol.
     * @return cumulativeProtocolSideRevenueUsd
     */
    public String cumulativeProtocolSideRevenueUsd { get; set; }

    /**
     *  All revenue generated by the liquidity pool.
     * @return cumulativeTotalRevenueUsd
     */
    public String cumulativeTotalRevenueUsd { get; set; }

    /**
     * All trade volume occurred for a specific input token, in native amount. The ordering should be the same as the pool\'s `inputTokens` field.
     * @return cumulativeVolumeByTokenAmount
     */
    public List<String> cumulativeVolumeByTokenAmount { get; set; }

    /**
     * All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool\'s `inputTokens` field.
     * @return cumulativeVolumeByTokenUsd
     */
    public List<String> cumulativeVolumeByTokenUsd { get; set; }

    /**
     * All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool\'s `inputTokens` field.
     * @return cumulativeVolumeUsd
     */
    public String cumulativeVolumeUsd { get; set; }

    /**
     * Amount of input tokens in the pool. The ordering should be the same as the pool\'s `inputTokens` field.
     * @return inputTokenBalances
     */
    public List<String> inputTokenBalances { get; set; }

    /**
     * Amount of input tokens in USD in the pool. The ordering should be the same as the pool\'s `inputTokens` field.
     * @return inputTokenBalancesUsd
     */
    public List<String> inputTokenBalancesUsd { get; set; }

    /**
     * Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
     * @return inputTokenWeights
     */
    public List<String> inputTokenWeights { get; set; }

    /**
     * Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
     * @return stakedOutputTokenAmount
     */
    public String stakedOutputTokenAmount { get; set; }

    /**
     * Per-block reward token emission as of the current block normalized to a day, in token\'s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
     * @return rewardTokenEmissionsAmount
     */
    public List<String> rewardTokenEmissionsAmount { get; set; }

    /**
     * Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
     * @return rewardTokenEmissionsUsd
     */
    public List<String> rewardTokenEmissionsUsd { get; set; }

    /**
     * Total number of deposits (add liquidity).
     * @return cumulativeDepositCount
     */
    public Integer cumulativeDepositCount { get; set; }

    /**
     * Total number of withdrawals (remove liquidity).
     * @return cumulativeWithdrawCount
     */
    public Integer cumulativeWithdrawCount { get; set; }

    /**
     * Total number of trades (swaps).
     * @return cumulativeSwapCount
     */
    public Integer cumulativeSwapCount { get; set; }

    /**
     * Number of positions in this market.
     * @return positionCount
     */
    public Integer positionCount { get; set; }

    /**
     * Number of open positions in this market.
     * @return openPositionCount
     */
    public Integer openPositionCount { get; set; }

    /**
     * Number of closed positions in this market.
     * @return closedPositionCount
     */
    public Integer closedPositionCount { get; set; }

    /**
     * Day ID of the most recent daily snapshot.
     * @return lastSnapshotDayId
     */
    public Integer lastSnapshotDayId { get; set; }

    /**
     * Hour ID of the most recent hourly snapshot.
     * @return lastSnapshotHourId
     */
    public Integer lastSnapshotHourId { get; set; }

    /**
     * Timestamp of the last time this entity was updated.
     * @return lastUpdateTimestamp
     */
    public String lastUpdateTimestamp { get; set; }

    /**
     * Block number of the last time this entity was updated.
     * @return lastUpdateBlockNumber
     */
    public String lastUpdateBlockNumber { get; set; }

    /**
     * Evaluated ask value of the liquidity pool.
     * @return evaluatedAsk
     */
    public Double evaluatedAsk { get; private set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'entry_time' => 'entryTime',
        'recv_time' => 'recvTime',
        'block_number' => 'blockNumber',
        'block_range' => 'blockRange',
        'liquidity_token' => 'liquidityToken',
        'input_tokens' => 'inputTokens',
        'reward_tokens' => 'rewardTokens',
        'is_single_sided' => 'isSingleSided',
        'created_timestamp' => 'createdTimestamp',
        'created_block_number' => 'createdBlockNumber',
        'total_value_locked_usd' => 'totalValueLockedUsd',
        'total_liquidity' => 'totalLiquidity',
        'total_liquidity_usd' => 'totalLiquidityUsd',
        'active_liquidity' => 'activeLiquidity',
        'active_liquidity_usd' => 'activeLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'uncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'uncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'uncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'uncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'cumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'cumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'cumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'cumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'cumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'cumulativeVolumeUsd',
        'input_token_balances' => 'inputTokenBalances',
        'input_token_balances_usd' => 'inputTokenBalancesUsd',
        'input_token_weights' => 'inputTokenWeights',
        'staked_output_token_amount' => 'stakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'rewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'rewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'cumulativeDepositCount',
        'cumulative_withdraw_count' => 'cumulativeWithdrawCount',
        'cumulative_swap_count' => 'cumulativeSwapCount',
        'position_count' => 'positionCount',
        'open_position_count' => 'openPositionCount',
        'closed_position_count' => 'closedPositionCount',
        'last_snapshot_day_id' => 'lastSnapshotDayId',
        'last_snapshot_hour_id' => 'lastSnapshotHourId',
        'last_update_timestamp' => 'lastUpdateTimestamp',
        'last_update_block_number' => 'lastUpdateBlockNumber',
        'evaluated_ask' => 'evaluatedAsk'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASUNISWAPV3ETHEREUMLiquidityPoolDTO() {
        inputTokens = new List<String>();
        rewardTokens = new List<String>();
        fees = new List<String>();
        uncollectedProtocolSideTokenAmounts = new List<String>();
        uncollectedProtocolSideValuesUsd = new List<String>();
        uncollectedSupplySideTokenAmounts = new List<String>();
        uncollectedSupplySideValuesUsd = new List<String>();
        cumulativeVolumeByTokenAmount = new List<String>();
        cumulativeVolumeByTokenUsd = new List<String>();
        inputTokenBalances = new List<String>();
        inputTokenBalancesUsd = new List<String>();
        inputTokenWeights = new List<String>();
        rewardTokenEmissionsAmount = new List<String>();
        rewardTokenEmissionsUsd = new List<String>();
    }

    public static OASUNISWAPV3ETHEREUMLiquidityPoolDTO getExample() {
        OASUNISWAPV3ETHEREUMLiquidityPoolDTO unISWAPV3ETHEREUMLiquidityPoolDTO = new OASUNISWAPV3ETHEREUMLiquidityPoolDTO();
          unISWAPV3ETHEREUMLiquidityPoolDTO.entryTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          unISWAPV3ETHEREUMLiquidityPoolDTO.recvTime = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          unISWAPV3ETHEREUMLiquidityPoolDTO.blockNumber = 123456789L;
          unISWAPV3ETHEREUMLiquidityPoolDTO.vid = 123456789L;
          unISWAPV3ETHEREUMLiquidityPoolDTO.blockRange = '';
          unISWAPV3ETHEREUMLiquidityPoolDTO.id = '';
          unISWAPV3ETHEREUMLiquidityPoolDTO.protocol = '';
          unISWAPV3ETHEREUMLiquidityPoolDTO.name = '';
          unISWAPV3ETHEREUMLiquidityPoolDTO.symbol = '';
          unISWAPV3ETHEREUMLiquidityPoolDTO.liquidityToken = '';
          unISWAPV3ETHEREUMLiquidityPoolDTO.inputTokens = new List<String>{''};
          unISWAPV3ETHEREUMLiquidityPoolDTO.rewardTokens = new List<String>{''};
          unISWAPV3ETHEREUMLiquidityPoolDTO.fees = new List<String>{''};
          unISWAPV3ETHEREUMLiquidityPoolDTO.isSingleSided = true;
          unISWAPV3ETHEREUMLiquidityPoolDTO.createdTimestamp = '';
          unISWAPV3ETHEREUMLiquidityPoolDTO.createdBlockNumber = '';
          unISWAPV3ETHEREUMLiquidityPoolDTO.tick = '';
          unISWAPV3ETHEREUMLiquidityPoolDTO.totalValueLockedUsd = '';
          unISWAPV3ETHEREUMLiquidityPoolDTO.totalLiquidity = '';
          unISWAPV3ETHEREUMLiquidityPoolDTO.totalLiquidityUsd = '';
          unISWAPV3ETHEREUMLiquidityPoolDTO.activeLiquidity = '';
          unISWAPV3ETHEREUMLiquidityPoolDTO.activeLiquidityUsd = '';
          unISWAPV3ETHEREUMLiquidityPoolDTO.uncollectedProtocolSideTokenAmounts = new List<String>{''};
          unISWAPV3ETHEREUMLiquidityPoolDTO.uncollectedProtocolSideValuesUsd = new List<String>{''};
          unISWAPV3ETHEREUMLiquidityPoolDTO.uncollectedSupplySideTokenAmounts = new List<String>{''};
          unISWAPV3ETHEREUMLiquidityPoolDTO.uncollectedSupplySideValuesUsd = new List<String>{''};
          unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeSupplySideRevenueUsd = '';
          unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeProtocolSideRevenueUsd = '';
          unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeTotalRevenueUsd = '';
          unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeVolumeByTokenAmount = new List<String>{''};
          unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeVolumeByTokenUsd = new List<String>{''};
          unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeVolumeUsd = '';
          unISWAPV3ETHEREUMLiquidityPoolDTO.inputTokenBalances = new List<String>{''};
          unISWAPV3ETHEREUMLiquidityPoolDTO.inputTokenBalancesUsd = new List<String>{''};
          unISWAPV3ETHEREUMLiquidityPoolDTO.inputTokenWeights = new List<String>{''};
          unISWAPV3ETHEREUMLiquidityPoolDTO.stakedOutputTokenAmount = '';
          unISWAPV3ETHEREUMLiquidityPoolDTO.rewardTokenEmissionsAmount = new List<String>{''};
          unISWAPV3ETHEREUMLiquidityPoolDTO.rewardTokenEmissionsUsd = new List<String>{''};
          unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeDepositCount = 0;
          unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeWithdrawCount = 0;
          unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeSwapCount = 0;
          unISWAPV3ETHEREUMLiquidityPoolDTO.positionCount = 0;
          unISWAPV3ETHEREUMLiquidityPoolDTO.openPositionCount = 0;
          unISWAPV3ETHEREUMLiquidityPoolDTO.closedPositionCount = 0;
          unISWAPV3ETHEREUMLiquidityPoolDTO.lastSnapshotDayId = 0;
          unISWAPV3ETHEREUMLiquidityPoolDTO.lastSnapshotHourId = 0;
          unISWAPV3ETHEREUMLiquidityPoolDTO.lastUpdateTimestamp = '';
          unISWAPV3ETHEREUMLiquidityPoolDTO.lastUpdateBlockNumber = '';
          unISWAPV3ETHEREUMLiquidityPoolDTO.evaluatedAsk = 1.3579;
        return unISWAPV3ETHEREUMLiquidityPoolDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASUNISWAPV3ETHEREUMLiquidityPoolDTO) {           
            OASUNISWAPV3ETHEREUMLiquidityPoolDTO unISWAPV3ETHEREUMLiquidityPoolDTO = (OASUNISWAPV3ETHEREUMLiquidityPoolDTO) obj;
            return this.entryTime == unISWAPV3ETHEREUMLiquidityPoolDTO.entryTime
                && this.recvTime == unISWAPV3ETHEREUMLiquidityPoolDTO.recvTime
                && this.blockNumber == unISWAPV3ETHEREUMLiquidityPoolDTO.blockNumber
                && this.vid == unISWAPV3ETHEREUMLiquidityPoolDTO.vid
                && this.blockRange == unISWAPV3ETHEREUMLiquidityPoolDTO.blockRange
                && this.id == unISWAPV3ETHEREUMLiquidityPoolDTO.id
                && this.protocol == unISWAPV3ETHEREUMLiquidityPoolDTO.protocol
                && this.name == unISWAPV3ETHEREUMLiquidityPoolDTO.name
                && this.symbol == unISWAPV3ETHEREUMLiquidityPoolDTO.symbol
                && this.liquidityToken == unISWAPV3ETHEREUMLiquidityPoolDTO.liquidityToken
                && this.inputTokens == unISWAPV3ETHEREUMLiquidityPoolDTO.inputTokens
                && this.rewardTokens == unISWAPV3ETHEREUMLiquidityPoolDTO.rewardTokens
                && this.fees == unISWAPV3ETHEREUMLiquidityPoolDTO.fees
                && this.isSingleSided == unISWAPV3ETHEREUMLiquidityPoolDTO.isSingleSided
                && this.createdTimestamp == unISWAPV3ETHEREUMLiquidityPoolDTO.createdTimestamp
                && this.createdBlockNumber == unISWAPV3ETHEREUMLiquidityPoolDTO.createdBlockNumber
                && this.tick == unISWAPV3ETHEREUMLiquidityPoolDTO.tick
                && this.totalValueLockedUsd == unISWAPV3ETHEREUMLiquidityPoolDTO.totalValueLockedUsd
                && this.totalLiquidity == unISWAPV3ETHEREUMLiquidityPoolDTO.totalLiquidity
                && this.totalLiquidityUsd == unISWAPV3ETHEREUMLiquidityPoolDTO.totalLiquidityUsd
                && this.activeLiquidity == unISWAPV3ETHEREUMLiquidityPoolDTO.activeLiquidity
                && this.activeLiquidityUsd == unISWAPV3ETHEREUMLiquidityPoolDTO.activeLiquidityUsd
                && this.uncollectedProtocolSideTokenAmounts == unISWAPV3ETHEREUMLiquidityPoolDTO.uncollectedProtocolSideTokenAmounts
                && this.uncollectedProtocolSideValuesUsd == unISWAPV3ETHEREUMLiquidityPoolDTO.uncollectedProtocolSideValuesUsd
                && this.uncollectedSupplySideTokenAmounts == unISWAPV3ETHEREUMLiquidityPoolDTO.uncollectedSupplySideTokenAmounts
                && this.uncollectedSupplySideValuesUsd == unISWAPV3ETHEREUMLiquidityPoolDTO.uncollectedSupplySideValuesUsd
                && this.cumulativeSupplySideRevenueUsd == unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeSupplySideRevenueUsd
                && this.cumulativeProtocolSideRevenueUsd == unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeProtocolSideRevenueUsd
                && this.cumulativeTotalRevenueUsd == unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeTotalRevenueUsd
                && this.cumulativeVolumeByTokenAmount == unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeVolumeByTokenAmount
                && this.cumulativeVolumeByTokenUsd == unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeVolumeByTokenUsd
                && this.cumulativeVolumeUsd == unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeVolumeUsd
                && this.inputTokenBalances == unISWAPV3ETHEREUMLiquidityPoolDTO.inputTokenBalances
                && this.inputTokenBalancesUsd == unISWAPV3ETHEREUMLiquidityPoolDTO.inputTokenBalancesUsd
                && this.inputTokenWeights == unISWAPV3ETHEREUMLiquidityPoolDTO.inputTokenWeights
                && this.stakedOutputTokenAmount == unISWAPV3ETHEREUMLiquidityPoolDTO.stakedOutputTokenAmount
                && this.rewardTokenEmissionsAmount == unISWAPV3ETHEREUMLiquidityPoolDTO.rewardTokenEmissionsAmount
                && this.rewardTokenEmissionsUsd == unISWAPV3ETHEREUMLiquidityPoolDTO.rewardTokenEmissionsUsd
                && this.cumulativeDepositCount == unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeDepositCount
                && this.cumulativeWithdrawCount == unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeWithdrawCount
                && this.cumulativeSwapCount == unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeSwapCount
                && this.positionCount == unISWAPV3ETHEREUMLiquidityPoolDTO.positionCount
                && this.openPositionCount == unISWAPV3ETHEREUMLiquidityPoolDTO.openPositionCount
                && this.closedPositionCount == unISWAPV3ETHEREUMLiquidityPoolDTO.closedPositionCount
                && this.lastSnapshotDayId == unISWAPV3ETHEREUMLiquidityPoolDTO.lastSnapshotDayId
                && this.lastSnapshotHourId == unISWAPV3ETHEREUMLiquidityPoolDTO.lastSnapshotHourId
                && this.lastUpdateTimestamp == unISWAPV3ETHEREUMLiquidityPoolDTO.lastUpdateTimestamp
                && this.lastUpdateBlockNumber == unISWAPV3ETHEREUMLiquidityPoolDTO.lastUpdateBlockNumber
                && this.evaluatedAsk == unISWAPV3ETHEREUMLiquidityPoolDTO.evaluatedAsk;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (entryTime == null ? 0 : System.hashCode(entryTime));
        hashCode = (17 * hashCode) + (recvTime == null ? 0 : System.hashCode(recvTime));
        hashCode = (17 * hashCode) + (blockNumber == null ? 0 : System.hashCode(blockNumber));
        hashCode = (17 * hashCode) + (vid == null ? 0 : System.hashCode(vid));
        hashCode = (17 * hashCode) + (blockRange == null ? 0 : System.hashCode(blockRange));
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (protocol == null ? 0 : System.hashCode(protocol));
        hashCode = (17 * hashCode) + (name == null ? 0 : System.hashCode(name));
        hashCode = (17 * hashCode) + (symbol == null ? 0 : System.hashCode(symbol));
        hashCode = (17 * hashCode) + (liquidityToken == null ? 0 : System.hashCode(liquidityToken));
        hashCode = (17 * hashCode) + (inputTokens == null ? 0 : System.hashCode(inputTokens));
        hashCode = (17 * hashCode) + (rewardTokens == null ? 0 : System.hashCode(rewardTokens));
        hashCode = (17 * hashCode) + (fees == null ? 0 : System.hashCode(fees));
        hashCode = (17 * hashCode) + (isSingleSided == null ? 0 : System.hashCode(isSingleSided));
        hashCode = (17 * hashCode) + (createdTimestamp == null ? 0 : System.hashCode(createdTimestamp));
        hashCode = (17 * hashCode) + (createdBlockNumber == null ? 0 : System.hashCode(createdBlockNumber));
        hashCode = (17 * hashCode) + (tick == null ? 0 : System.hashCode(tick));
        hashCode = (17 * hashCode) + (totalValueLockedUsd == null ? 0 : System.hashCode(totalValueLockedUsd));
        hashCode = (17 * hashCode) + (totalLiquidity == null ? 0 : System.hashCode(totalLiquidity));
        hashCode = (17 * hashCode) + (totalLiquidityUsd == null ? 0 : System.hashCode(totalLiquidityUsd));
        hashCode = (17 * hashCode) + (activeLiquidity == null ? 0 : System.hashCode(activeLiquidity));
        hashCode = (17 * hashCode) + (activeLiquidityUsd == null ? 0 : System.hashCode(activeLiquidityUsd));
        hashCode = (17 * hashCode) + (uncollectedProtocolSideTokenAmounts == null ? 0 : System.hashCode(uncollectedProtocolSideTokenAmounts));
        hashCode = (17 * hashCode) + (uncollectedProtocolSideValuesUsd == null ? 0 : System.hashCode(uncollectedProtocolSideValuesUsd));
        hashCode = (17 * hashCode) + (uncollectedSupplySideTokenAmounts == null ? 0 : System.hashCode(uncollectedSupplySideTokenAmounts));
        hashCode = (17 * hashCode) + (uncollectedSupplySideValuesUsd == null ? 0 : System.hashCode(uncollectedSupplySideValuesUsd));
        hashCode = (17 * hashCode) + (cumulativeSupplySideRevenueUsd == null ? 0 : System.hashCode(cumulativeSupplySideRevenueUsd));
        hashCode = (17 * hashCode) + (cumulativeProtocolSideRevenueUsd == null ? 0 : System.hashCode(cumulativeProtocolSideRevenueUsd));
        hashCode = (17 * hashCode) + (cumulativeTotalRevenueUsd == null ? 0 : System.hashCode(cumulativeTotalRevenueUsd));
        hashCode = (17 * hashCode) + (cumulativeVolumeByTokenAmount == null ? 0 : System.hashCode(cumulativeVolumeByTokenAmount));
        hashCode = (17 * hashCode) + (cumulativeVolumeByTokenUsd == null ? 0 : System.hashCode(cumulativeVolumeByTokenUsd));
        hashCode = (17 * hashCode) + (cumulativeVolumeUsd == null ? 0 : System.hashCode(cumulativeVolumeUsd));
        hashCode = (17 * hashCode) + (inputTokenBalances == null ? 0 : System.hashCode(inputTokenBalances));
        hashCode = (17 * hashCode) + (inputTokenBalancesUsd == null ? 0 : System.hashCode(inputTokenBalancesUsd));
        hashCode = (17 * hashCode) + (inputTokenWeights == null ? 0 : System.hashCode(inputTokenWeights));
        hashCode = (17 * hashCode) + (stakedOutputTokenAmount == null ? 0 : System.hashCode(stakedOutputTokenAmount));
        hashCode = (17 * hashCode) + (rewardTokenEmissionsAmount == null ? 0 : System.hashCode(rewardTokenEmissionsAmount));
        hashCode = (17 * hashCode) + (rewardTokenEmissionsUsd == null ? 0 : System.hashCode(rewardTokenEmissionsUsd));
        hashCode = (17 * hashCode) + (cumulativeDepositCount == null ? 0 : System.hashCode(cumulativeDepositCount));
        hashCode = (17 * hashCode) + (cumulativeWithdrawCount == null ? 0 : System.hashCode(cumulativeWithdrawCount));
        hashCode = (17 * hashCode) + (cumulativeSwapCount == null ? 0 : System.hashCode(cumulativeSwapCount));
        hashCode = (17 * hashCode) + (positionCount == null ? 0 : System.hashCode(positionCount));
        hashCode = (17 * hashCode) + (openPositionCount == null ? 0 : System.hashCode(openPositionCount));
        hashCode = (17 * hashCode) + (closedPositionCount == null ? 0 : System.hashCode(closedPositionCount));
        hashCode = (17 * hashCode) + (lastSnapshotDayId == null ? 0 : System.hashCode(lastSnapshotDayId));
        hashCode = (17 * hashCode) + (lastSnapshotHourId == null ? 0 : System.hashCode(lastSnapshotHourId));
        hashCode = (17 * hashCode) + (lastUpdateTimestamp == null ? 0 : System.hashCode(lastUpdateTimestamp));
        hashCode = (17 * hashCode) + (lastUpdateBlockNumber == null ? 0 : System.hashCode(lastUpdateBlockNumber));
        hashCode = (17 * hashCode) + (evaluatedAsk == null ? 0 : System.hashCode(evaluatedAsk));
        return hashCode;
    }
}

