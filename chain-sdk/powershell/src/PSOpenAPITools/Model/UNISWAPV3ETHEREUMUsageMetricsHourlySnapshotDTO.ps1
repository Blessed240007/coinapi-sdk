#
# On Chain Dapps - REST API
#  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION



.PARAMETER EntryTime
No description available.
.PARAMETER RecvTime
No description available.
.PARAMETER BlockNumber
Number of block in which entity was recorded.
.PARAMETER Id
(# of hours since Unix epoch time)
.PARAMETER Hour
Number of hours since Unix epoch time
.PARAMETER Protocol
Protocol this snapshot is associated with
.PARAMETER HourlyActiveUsers
Number of unique hourly active users
.PARAMETER CumulativeUniqueUsers
Number of cumulative unique users
.PARAMETER HourlyTransactionCount
Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface.
.PARAMETER HourlyDepositCount
Total number of deposits (add liquidity) in an hour
.PARAMETER HourlyWithdrawCount
Total number of withdrawals (remove liquidity) in an hour
.PARAMETER HourlySwapCount
Total number of trades (swaps) in an hour
.PARAMETER Timestamp
Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)
.OUTPUTS

UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO<PSCustomObject>
#>

function Initialize-UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EntryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RecvTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BlockNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Hour},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Protocol},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${HourlyActiveUsers},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CumulativeUniqueUsers},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${HourlyTransactionCount},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${HourlyDepositCount},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${HourlyWithdrawCount},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${HourlySwapCount},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Timestamp}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "id" = ${Id}
            "hour" = ${Hour}
            "protocol" = ${Protocol}
            "hourly_active_users" = ${HourlyActiveUsers}
            "cumulative_unique_users" = ${CumulativeUniqueUsers}
            "hourly_transaction_count" = ${HourlyTransactionCount}
            "hourly_deposit_count" = ${HourlyDepositCount}
            "hourly_withdraw_count" = ${HourlyWithdrawCount}
            "hourly_swap_count" = ${HourlySwapCount}
            "timestamp" = ${Timestamp}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO<PSCustomObject>
#>
function ConvertFrom-JsonToUNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
        $AllProperties = ("entry_time", "recv_time", "block_number", "id", "hour", "protocol", "hourly_active_users", "cumulative_unique_users", "hourly_transaction_count", "hourly_deposit_count", "hourly_withdraw_count", "hourly_swap_count", "timestamp")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entry_time"))) { #optional property not found
            $EntryTime = $null
        } else {
            $EntryTime = $JsonParameters.PSobject.Properties["entry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recv_time"))) { #optional property not found
            $RecvTime = $null
        } else {
            $RecvTime = $JsonParameters.PSobject.Properties["recv_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_number"))) { #optional property not found
            $BlockNumber = $null
        } else {
            $BlockNumber = $JsonParameters.PSobject.Properties["block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hour"))) { #optional property not found
            $Hour = $null
        } else {
            $Hour = $JsonParameters.PSobject.Properties["hour"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protocol"))) { #optional property not found
            $Protocol = $null
        } else {
            $Protocol = $JsonParameters.PSobject.Properties["protocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hourly_active_users"))) { #optional property not found
            $HourlyActiveUsers = $null
        } else {
            $HourlyActiveUsers = $JsonParameters.PSobject.Properties["hourly_active_users"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_unique_users"))) { #optional property not found
            $CumulativeUniqueUsers = $null
        } else {
            $CumulativeUniqueUsers = $JsonParameters.PSobject.Properties["cumulative_unique_users"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hourly_transaction_count"))) { #optional property not found
            $HourlyTransactionCount = $null
        } else {
            $HourlyTransactionCount = $JsonParameters.PSobject.Properties["hourly_transaction_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hourly_deposit_count"))) { #optional property not found
            $HourlyDepositCount = $null
        } else {
            $HourlyDepositCount = $JsonParameters.PSobject.Properties["hourly_deposit_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hourly_withdraw_count"))) { #optional property not found
            $HourlyWithdrawCount = $null
        } else {
            $HourlyWithdrawCount = $JsonParameters.PSobject.Properties["hourly_withdraw_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hourly_swap_count"))) { #optional property not found
            $HourlySwapCount = $null
        } else {
            $HourlySwapCount = $JsonParameters.PSobject.Properties["hourly_swap_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "id" = ${Id}
            "hour" = ${Hour}
            "protocol" = ${Protocol}
            "hourly_active_users" = ${HourlyActiveUsers}
            "cumulative_unique_users" = ${CumulativeUniqueUsers}
            "hourly_transaction_count" = ${HourlyTransactionCount}
            "hourly_deposit_count" = ${HourlyDepositCount}
            "hourly_withdraw_count" = ${HourlyWithdrawCount}
            "hourly_swap_count" = ${HourlySwapCount}
            "timestamp" = ${Timestamp}
        }

        return $PSO
    }

}

