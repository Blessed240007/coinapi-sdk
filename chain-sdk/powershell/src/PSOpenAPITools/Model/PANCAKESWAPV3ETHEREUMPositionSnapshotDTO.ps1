#
# On Chain Dapps - REST API
#  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION



.PARAMETER EntryTime
No description available.
.PARAMETER RecvTime
No description available.
.PARAMETER BlockNumber
Number of block in which entity was recorded.
.PARAMETER Id
 (position id )-( transaction hash )-( log index ) 
.PARAMETER Hash
Transaction hash of the transaction that triggered this snapshot
.PARAMETER LogIndex
Event log index. For transactions that don't emit event, create arbitrary index starting from 0
.PARAMETER Nonce
Nonce of the transaction that triggered this snapshot
.PARAMETER Position
Position of this snapshot
.PARAMETER LiquidityTokenType
Type of token used to track liquidity
.PARAMETER Liquidity
total position liquidity
.PARAMETER LiquidityUsd
total position liquidity in USD
.PARAMETER CumulativeDepositTokenAmounts
amount of tokens ever deposited to position
.PARAMETER CumulativeDepositUsd
amount of tokens in USD deposited to position
.PARAMETER CumulativeWithdrawTokenAmounts
amount of tokens ever withdrawn from position (without fees)
.PARAMETER CumulativeWithdrawUsd
amount of tokens in USD withdrawn from position (without fees)
.PARAMETER CumulativeRewardTokenAmounts
Total reward token accumulated under this position, in native amounts
.PARAMETER CumulativeRewardUsd
Total reward token accumulated under this position, in USD
.PARAMETER DepositCount
Number of deposits related to this position
.PARAMETER WithdrawCount
Number of withdrawals related to this position
.PARAMETER Timestamp
Timestamp of this snapshot
.OUTPUTS

PANCAKESWAPV3ETHEREUMPositionSnapshotDTO<PSCustomObject>
#>

function Initialize-PANCAKESWAPV3ETHEREUMPositionSnapshotDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EntryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RecvTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BlockNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Hash},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LogIndex},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Nonce},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Position},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LiquidityTokenType},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Liquidity},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LiquidityUsd},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${CumulativeDepositTokenAmounts},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CumulativeDepositUsd},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${CumulativeWithdrawTokenAmounts},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CumulativeWithdrawUsd},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${CumulativeRewardTokenAmounts},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${CumulativeRewardUsd},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DepositCount},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${WithdrawCount},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Timestamp}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PANCAKESWAPV3ETHEREUMPositionSnapshotDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "id" = ${Id}
            "hash" = ${Hash}
            "log_index" = ${LogIndex}
            "nonce" = ${Nonce}
            "position" = ${Position}
            "liquidity_token_type" = ${LiquidityTokenType}
            "liquidity" = ${Liquidity}
            "liquidity_usd" = ${LiquidityUsd}
            "cumulative_deposit_token_amounts" = ${CumulativeDepositTokenAmounts}
            "cumulative_deposit_usd" = ${CumulativeDepositUsd}
            "cumulative_withdraw_token_amounts" = ${CumulativeWithdrawTokenAmounts}
            "cumulative_withdraw_usd" = ${CumulativeWithdrawUsd}
            "cumulative_reward_token_amounts" = ${CumulativeRewardTokenAmounts}
            "cumulative_reward_usd" = ${CumulativeRewardUsd}
            "deposit_count" = ${DepositCount}
            "withdraw_count" = ${WithdrawCount}
            "timestamp" = ${Timestamp}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PANCAKESWAPV3ETHEREUMPositionSnapshotDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to PANCAKESWAPV3ETHEREUMPositionSnapshotDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PANCAKESWAPV3ETHEREUMPositionSnapshotDTO<PSCustomObject>
#>
function ConvertFrom-JsonToPANCAKESWAPV3ETHEREUMPositionSnapshotDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PANCAKESWAPV3ETHEREUMPositionSnapshotDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PANCAKESWAPV3ETHEREUMPositionSnapshotDTO
        $AllProperties = ("entry_time", "recv_time", "block_number", "id", "hash", "log_index", "nonce", "position", "liquidity_token_type", "liquidity", "liquidity_usd", "cumulative_deposit_token_amounts", "cumulative_deposit_usd", "cumulative_withdraw_token_amounts", "cumulative_withdraw_usd", "cumulative_reward_token_amounts", "cumulative_reward_usd", "deposit_count", "withdraw_count", "timestamp")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entry_time"))) { #optional property not found
            $EntryTime = $null
        } else {
            $EntryTime = $JsonParameters.PSobject.Properties["entry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recv_time"))) { #optional property not found
            $RecvTime = $null
        } else {
            $RecvTime = $JsonParameters.PSobject.Properties["recv_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_number"))) { #optional property not found
            $BlockNumber = $null
        } else {
            $BlockNumber = $JsonParameters.PSobject.Properties["block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hash"))) { #optional property not found
            $Hash = $null
        } else {
            $Hash = $JsonParameters.PSobject.Properties["hash"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "log_index"))) { #optional property not found
            $LogIndex = $null
        } else {
            $LogIndex = $JsonParameters.PSobject.Properties["log_index"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nonce"))) { #optional property not found
            $Nonce = $null
        } else {
            $Nonce = $JsonParameters.PSobject.Properties["nonce"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "position"))) { #optional property not found
            $Position = $null
        } else {
            $Position = $JsonParameters.PSobject.Properties["position"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "liquidity_token_type"))) { #optional property not found
            $LiquidityTokenType = $null
        } else {
            $LiquidityTokenType = $JsonParameters.PSobject.Properties["liquidity_token_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "liquidity"))) { #optional property not found
            $Liquidity = $null
        } else {
            $Liquidity = $JsonParameters.PSobject.Properties["liquidity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "liquidity_usd"))) { #optional property not found
            $LiquidityUsd = $null
        } else {
            $LiquidityUsd = $JsonParameters.PSobject.Properties["liquidity_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_deposit_token_amounts"))) { #optional property not found
            $CumulativeDepositTokenAmounts = $null
        } else {
            $CumulativeDepositTokenAmounts = $JsonParameters.PSobject.Properties["cumulative_deposit_token_amounts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_deposit_usd"))) { #optional property not found
            $CumulativeDepositUsd = $null
        } else {
            $CumulativeDepositUsd = $JsonParameters.PSobject.Properties["cumulative_deposit_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_withdraw_token_amounts"))) { #optional property not found
            $CumulativeWithdrawTokenAmounts = $null
        } else {
            $CumulativeWithdrawTokenAmounts = $JsonParameters.PSobject.Properties["cumulative_withdraw_token_amounts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_withdraw_usd"))) { #optional property not found
            $CumulativeWithdrawUsd = $null
        } else {
            $CumulativeWithdrawUsd = $JsonParameters.PSobject.Properties["cumulative_withdraw_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_reward_token_amounts"))) { #optional property not found
            $CumulativeRewardTokenAmounts = $null
        } else {
            $CumulativeRewardTokenAmounts = $JsonParameters.PSobject.Properties["cumulative_reward_token_amounts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_reward_usd"))) { #optional property not found
            $CumulativeRewardUsd = $null
        } else {
            $CumulativeRewardUsd = $JsonParameters.PSobject.Properties["cumulative_reward_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deposit_count"))) { #optional property not found
            $DepositCount = $null
        } else {
            $DepositCount = $JsonParameters.PSobject.Properties["deposit_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "withdraw_count"))) { #optional property not found
            $WithdrawCount = $null
        } else {
            $WithdrawCount = $JsonParameters.PSobject.Properties["withdraw_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "id" = ${Id}
            "hash" = ${Hash}
            "log_index" = ${LogIndex}
            "nonce" = ${Nonce}
            "position" = ${Position}
            "liquidity_token_type" = ${LiquidityTokenType}
            "liquidity" = ${Liquidity}
            "liquidity_usd" = ${LiquidityUsd}
            "cumulative_deposit_token_amounts" = ${CumulativeDepositTokenAmounts}
            "cumulative_deposit_usd" = ${CumulativeDepositUsd}
            "cumulative_withdraw_token_amounts" = ${CumulativeWithdrawTokenAmounts}
            "cumulative_withdraw_usd" = ${CumulativeWithdrawUsd}
            "cumulative_reward_token_amounts" = ${CumulativeRewardTokenAmounts}
            "cumulative_reward_usd" = ${CumulativeRewardUsd}
            "deposit_count" = ${DepositCount}
            "withdraw_count" = ${WithdrawCount}
            "timestamp" = ${Timestamp}
        }

        return $PSO
    }

}

