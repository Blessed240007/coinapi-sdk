#
# On Chain Dapps - REST API
#  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Remove liquidity events.

.PARAMETER EntryTime
No description available.
.PARAMETER RecvTime
No description available.
.PARAMETER BlockNumber
Number of block in which entity was recorded.
.PARAMETER BlockRange

.PARAMETER Id
withdraw-(transaction hash)-(log index)
.PARAMETER Hash
Transaction hash of the transaction that emitted this event
.PARAMETER LogIndex
Event log index. For transactions that don't emit event, create arbitrary index starting from 0
.PARAMETER Protocol
The protocol this transaction belongs to
.PARAMETER To
Address that received the tokens
.PARAMETER VarFrom
Address that sent the tokens
.PARAMETER Timestamp
Timestamp of this event
.PARAMETER InputTokens
Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool
.PARAMETER OutputToken
Output token of the pool (not output token of the event/transaction). E.g. the UNI-LP token
.PARAMETER InputTokenAmounts
Amount of input tokens in the token's native unit
.PARAMETER OutputTokenAmount
Amount of output tokens in the token's native unit
.PARAMETER AmountUsd
USD-normalized value of the transaction of the underlying (e.g. sum of tokens withdrawn from a pool)
.PARAMETER Pool
The pool involving this transaction
.OUTPUTS

CURVEFINANCEETHEREUMWithdrawDTO<PSCustomObject>
#>

function Initialize-CURVEFINANCEETHEREUMWithdrawDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EntryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RecvTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BlockNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BlockRange},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Hash},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LogIndex},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Protocol},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${To},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VarFrom},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Timestamp},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${InputTokens},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OutputToken},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${InputTokenAmounts},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OutputTokenAmount},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AmountUsd},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Pool}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CURVEFINANCEETHEREUMWithdrawDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "block_range" = ${BlockRange}
            "id" = ${Id}
            "hash" = ${Hash}
            "log_index" = ${LogIndex}
            "protocol" = ${Protocol}
            "to" = ${To}
            "from" = ${VarFrom}
            "timestamp" = ${Timestamp}
            "input_tokens" = ${InputTokens}
            "output_token" = ${OutputToken}
            "input_token_amounts" = ${InputTokenAmounts}
            "output_token_amount" = ${OutputTokenAmount}
            "amount_usd" = ${AmountUsd}
            "pool" = ${Pool}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CURVEFINANCEETHEREUMWithdrawDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to CURVEFINANCEETHEREUMWithdrawDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CURVEFINANCEETHEREUMWithdrawDTO<PSCustomObject>
#>
function ConvertFrom-JsonToCURVEFINANCEETHEREUMWithdrawDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CURVEFINANCEETHEREUMWithdrawDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CURVEFINANCEETHEREUMWithdrawDTO
        $AllProperties = ("entry_time", "recv_time", "block_number", "block_range", "id", "hash", "log_index", "protocol", "to", "from", "timestamp", "input_tokens", "output_token", "input_token_amounts", "output_token_amount", "amount_usd", "pool")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entry_time"))) { #optional property not found
            $EntryTime = $null
        } else {
            $EntryTime = $JsonParameters.PSobject.Properties["entry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recv_time"))) { #optional property not found
            $RecvTime = $null
        } else {
            $RecvTime = $JsonParameters.PSobject.Properties["recv_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_number"))) { #optional property not found
            $BlockNumber = $null
        } else {
            $BlockNumber = $JsonParameters.PSobject.Properties["block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_range"))) { #optional property not found
            $BlockRange = $null
        } else {
            $BlockRange = $JsonParameters.PSobject.Properties["block_range"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hash"))) { #optional property not found
            $Hash = $null
        } else {
            $Hash = $JsonParameters.PSobject.Properties["hash"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "log_index"))) { #optional property not found
            $LogIndex = $null
        } else {
            $LogIndex = $JsonParameters.PSobject.Properties["log_index"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protocol"))) { #optional property not found
            $Protocol = $null
        } else {
            $Protocol = $JsonParameters.PSobject.Properties["protocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "to"))) { #optional property not found
            $To = $null
        } else {
            $To = $JsonParameters.PSobject.Properties["to"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "from"))) { #optional property not found
            $VarFrom = $null
        } else {
            $VarFrom = $JsonParameters.PSobject.Properties["from"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "input_tokens"))) { #optional property not found
            $InputTokens = $null
        } else {
            $InputTokens = $JsonParameters.PSobject.Properties["input_tokens"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "output_token"))) { #optional property not found
            $OutputToken = $null
        } else {
            $OutputToken = $JsonParameters.PSobject.Properties["output_token"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "input_token_amounts"))) { #optional property not found
            $InputTokenAmounts = $null
        } else {
            $InputTokenAmounts = $JsonParameters.PSobject.Properties["input_token_amounts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "output_token_amount"))) { #optional property not found
            $OutputTokenAmount = $null
        } else {
            $OutputTokenAmount = $JsonParameters.PSobject.Properties["output_token_amount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "amount_usd"))) { #optional property not found
            $AmountUsd = $null
        } else {
            $AmountUsd = $JsonParameters.PSobject.Properties["amount_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pool"))) { #optional property not found
            $Pool = $null
        } else {
            $Pool = $JsonParameters.PSobject.Properties["pool"].value
        }

        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "block_range" = ${BlockRange}
            "id" = ${Id}
            "hash" = ${Hash}
            "log_index" = ${LogIndex}
            "protocol" = ${Protocol}
            "to" = ${To}
            "from" = ${VarFrom}
            "timestamp" = ${Timestamp}
            "input_tokens" = ${InputTokens}
            "output_token" = ${OutputToken}
            "input_token_amounts" = ${InputTokenAmounts}
            "output_token_amount" = ${OutputTokenAmount}
            "amount_usd" = ${AmountUsd}
            "pool" = ${Pool}
        }

        return $PSO
    }

}

