#
# On Chain Dapps - REST API
#  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Smart contract that is used to manage the liquidity mining program on Uniswap V2.

.PARAMETER EntryTime
No description available.
.PARAMETER RecvTime
No description available.
.PARAMETER BlockNumber
Number of block in which entity was recorded.
.PARAMETER BlockRange

.PARAMETER Id
(masterChef type) - (pid referenced in the masterchef contract)
.PARAMETER Address
Address of the masterchef contract
.PARAMETER TotalAllocPoint
Total allocation point of all staking pools
.PARAMETER RewardTokenRate
Amount of reward tokens emitted per block or timestamp
.PARAMETER RewardTokenInterval
Indicates whether rewards are indicated by block or timestamp
.PARAMETER AdjustedRewardTokenRate
Reward token rate given after you adjust for allocations either burned or not applicable
.PARAMETER LastUpdatedRewardRate
Last time the adjusted reward token rate was updated
.OUTPUTS

UNISWAPV2ETHEREUMMasterChefDTO<PSCustomObject>
#>

function Initialize-UNISWAPV2ETHEREUMMasterChefDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EntryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RecvTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BlockNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BlockRange},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Address},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalAllocPoint},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RewardTokenRate},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RewardTokenInterval},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AdjustedRewardTokenRate},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastUpdatedRewardRate}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => UNISWAPV2ETHEREUMMasterChefDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "block_range" = ${BlockRange}
            "id" = ${Id}
            "address" = ${Address}
            "total_alloc_point" = ${TotalAllocPoint}
            "reward_token_rate" = ${RewardTokenRate}
            "reward_token_interval" = ${RewardTokenInterval}
            "adjusted_reward_token_rate" = ${AdjustedRewardTokenRate}
            "last_updated_reward_rate" = ${LastUpdatedRewardRate}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UNISWAPV2ETHEREUMMasterChefDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to UNISWAPV2ETHEREUMMasterChefDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UNISWAPV2ETHEREUMMasterChefDTO<PSCustomObject>
#>
function ConvertFrom-JsonToUNISWAPV2ETHEREUMMasterChefDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => UNISWAPV2ETHEREUMMasterChefDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UNISWAPV2ETHEREUMMasterChefDTO
        $AllProperties = ("entry_time", "recv_time", "block_number", "block_range", "id", "address", "total_alloc_point", "reward_token_rate", "reward_token_interval", "adjusted_reward_token_rate", "last_updated_reward_rate")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entry_time"))) { #optional property not found
            $EntryTime = $null
        } else {
            $EntryTime = $JsonParameters.PSobject.Properties["entry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recv_time"))) { #optional property not found
            $RecvTime = $null
        } else {
            $RecvTime = $JsonParameters.PSobject.Properties["recv_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_number"))) { #optional property not found
            $BlockNumber = $null
        } else {
            $BlockNumber = $JsonParameters.PSobject.Properties["block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_range"))) { #optional property not found
            $BlockRange = $null
        } else {
            $BlockRange = $JsonParameters.PSobject.Properties["block_range"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "address"))) { #optional property not found
            $Address = $null
        } else {
            $Address = $JsonParameters.PSobject.Properties["address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_alloc_point"))) { #optional property not found
            $TotalAllocPoint = $null
        } else {
            $TotalAllocPoint = $JsonParameters.PSobject.Properties["total_alloc_point"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reward_token_rate"))) { #optional property not found
            $RewardTokenRate = $null
        } else {
            $RewardTokenRate = $JsonParameters.PSobject.Properties["reward_token_rate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reward_token_interval"))) { #optional property not found
            $RewardTokenInterval = $null
        } else {
            $RewardTokenInterval = $JsonParameters.PSobject.Properties["reward_token_interval"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "adjusted_reward_token_rate"))) { #optional property not found
            $AdjustedRewardTokenRate = $null
        } else {
            $AdjustedRewardTokenRate = $JsonParameters.PSobject.Properties["adjusted_reward_token_rate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_updated_reward_rate"))) { #optional property not found
            $LastUpdatedRewardRate = $null
        } else {
            $LastUpdatedRewardRate = $JsonParameters.PSobject.Properties["last_updated_reward_rate"].value
        }

        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "block_range" = ${BlockRange}
            "id" = ${Id}
            "address" = ${Address}
            "total_alloc_point" = ${TotalAllocPoint}
            "reward_token_rate" = ${RewardTokenRate}
            "reward_token_interval" = ${RewardTokenInterval}
            "adjusted_reward_token_rate" = ${AdjustedRewardTokenRate}
            "last_updated_reward_rate" = ${LastUpdatedRewardRate}
        }

        return $PSO
    }

}

