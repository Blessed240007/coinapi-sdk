#
# On Chain Dapps - REST API
#  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION



.PARAMETER EntryTime
No description available.
.PARAMETER RecvTime
No description available.
.PARAMETER BlockNumber
Number of block in which entity was recorded.
.PARAMETER BlockRange

.PARAMETER Id
Address of the rewarder contract associated to some staking pool
.PARAMETER Pool
Staking pool to which this rewarder is associated
.PARAMETER RewardToken
Address of the token given by this rewarder
.PARAMETER TokenPerSec
Number of tokens rewarded per second per LP staked in pool by this rewarder
.PARAMETER RateCalculatedAt
Timestamp from the last time tokenPerSec was calculated
.PARAMETER HasFunds
A field to keep track if there are any funds to give away in the rewarder
.PARAMETER HasFundsAt
When it was last checked that there were funds in the rewarder
.PARAMETER CanRetrieveRate
If true it means the rewardRate can be retrieved directly from the contract, without crazy math
.PARAMETER RewardRateCalculationInProgress
Utility field to calculate the rewarder reward rate
.PARAMETER Probes

.OUTPUTS

UNISWAPV2ETHEREUMMasterChefRewarderDTO<PSCustomObject>
#>

function Initialize-UNISWAPV2ETHEREUMMasterChefRewarderDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EntryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RecvTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BlockNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BlockRange},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Pool},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RewardToken},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TokenPerSec},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RateCalculatedAt},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${HasFunds},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HasFundsAt},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${CanRetrieveRate},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RewardRateCalculationInProgress},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Probes}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => UNISWAPV2ETHEREUMMasterChefRewarderDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "block_range" = ${BlockRange}
            "id" = ${Id}
            "pool" = ${Pool}
            "reward_token" = ${RewardToken}
            "token_per_sec" = ${TokenPerSec}
            "rate_calculated_at" = ${RateCalculatedAt}
            "has_funds" = ${HasFunds}
            "has_funds_at" = ${HasFundsAt}
            "can_retrieve_rate" = ${CanRetrieveRate}
            "reward_rate_calculation_in_progress" = ${RewardRateCalculationInProgress}
            "probes" = ${Probes}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UNISWAPV2ETHEREUMMasterChefRewarderDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to UNISWAPV2ETHEREUMMasterChefRewarderDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UNISWAPV2ETHEREUMMasterChefRewarderDTO<PSCustomObject>
#>
function ConvertFrom-JsonToUNISWAPV2ETHEREUMMasterChefRewarderDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => UNISWAPV2ETHEREUMMasterChefRewarderDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UNISWAPV2ETHEREUMMasterChefRewarderDTO
        $AllProperties = ("entry_time", "recv_time", "block_number", "block_range", "id", "pool", "reward_token", "token_per_sec", "rate_calculated_at", "has_funds", "has_funds_at", "can_retrieve_rate", "reward_rate_calculation_in_progress", "probes")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entry_time"))) { #optional property not found
            $EntryTime = $null
        } else {
            $EntryTime = $JsonParameters.PSobject.Properties["entry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recv_time"))) { #optional property not found
            $RecvTime = $null
        } else {
            $RecvTime = $JsonParameters.PSobject.Properties["recv_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_number"))) { #optional property not found
            $BlockNumber = $null
        } else {
            $BlockNumber = $JsonParameters.PSobject.Properties["block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_range"))) { #optional property not found
            $BlockRange = $null
        } else {
            $BlockRange = $JsonParameters.PSobject.Properties["block_range"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pool"))) { #optional property not found
            $Pool = $null
        } else {
            $Pool = $JsonParameters.PSobject.Properties["pool"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reward_token"))) { #optional property not found
            $RewardToken = $null
        } else {
            $RewardToken = $JsonParameters.PSobject.Properties["reward_token"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "token_per_sec"))) { #optional property not found
            $TokenPerSec = $null
        } else {
            $TokenPerSec = $JsonParameters.PSobject.Properties["token_per_sec"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rate_calculated_at"))) { #optional property not found
            $RateCalculatedAt = $null
        } else {
            $RateCalculatedAt = $JsonParameters.PSobject.Properties["rate_calculated_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "has_funds"))) { #optional property not found
            $HasFunds = $null
        } else {
            $HasFunds = $JsonParameters.PSobject.Properties["has_funds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "has_funds_at"))) { #optional property not found
            $HasFundsAt = $null
        } else {
            $HasFundsAt = $JsonParameters.PSobject.Properties["has_funds_at"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "can_retrieve_rate"))) { #optional property not found
            $CanRetrieveRate = $null
        } else {
            $CanRetrieveRate = $JsonParameters.PSobject.Properties["can_retrieve_rate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reward_rate_calculation_in_progress"))) { #optional property not found
            $RewardRateCalculationInProgress = $null
        } else {
            $RewardRateCalculationInProgress = $JsonParameters.PSobject.Properties["reward_rate_calculation_in_progress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "probes"))) { #optional property not found
            $Probes = $null
        } else {
            $Probes = $JsonParameters.PSobject.Properties["probes"].value
        }

        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "block_range" = ${BlockRange}
            "id" = ${Id}
            "pool" = ${Pool}
            "reward_token" = ${RewardToken}
            "token_per_sec" = ${TokenPerSec}
            "rate_calculated_at" = ${RateCalculatedAt}
            "has_funds" = ${HasFunds}
            "has_funds_at" = ${HasFundsAt}
            "can_retrieve_rate" = ${CanRetrieveRate}
            "reward_rate_calculation_in_progress" = ${RewardRateCalculationInProgress}
            "probes" = ${Probes}
        }

        return $PSO
    }

}

