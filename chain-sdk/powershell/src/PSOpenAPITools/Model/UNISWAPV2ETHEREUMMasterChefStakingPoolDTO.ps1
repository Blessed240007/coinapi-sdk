#
# On Chain Dapps - REST API
#  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION



.PARAMETER EntryTime
No description available.
.PARAMETER RecvTime
No description available.
.PARAMETER BlockNumber
Number of block in which entity was recorded.
.PARAMETER BlockRange

.PARAMETER Id
(masterchef type) - (pid referenced in the masterchef contract)
.PARAMETER PoolAddress
Staking pool to which this rewarder is associated
.PARAMETER PoolAllocPoint
Allocation point of this MasterChef Staking pool
.PARAMETER Multiplier
Reward Multiplier for a given staking pool
.PARAMETER LastRewardBlock
Last block where rewards were given out
.PARAMETER Rewarder
Optional address of a bonus rewarder, to give additional tokens on top of masterchefs
.OUTPUTS

UNISWAPV2ETHEREUMMasterChefStakingPoolDTO<PSCustomObject>
#>

function Initialize-UNISWAPV2ETHEREUMMasterChefStakingPoolDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EntryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RecvTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BlockNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BlockRange},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PoolAddress},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PoolAllocPoint},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Multiplier},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastRewardBlock},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Rewarder}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => UNISWAPV2ETHEREUMMasterChefStakingPoolDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "block_range" = ${BlockRange}
            "id" = ${Id}
            "pool_address" = ${PoolAddress}
            "pool_alloc_point" = ${PoolAllocPoint}
            "multiplier" = ${Multiplier}
            "last_reward_block" = ${LastRewardBlock}
            "rewarder" = ${Rewarder}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UNISWAPV2ETHEREUMMasterChefStakingPoolDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to UNISWAPV2ETHEREUMMasterChefStakingPoolDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UNISWAPV2ETHEREUMMasterChefStakingPoolDTO<PSCustomObject>
#>
function ConvertFrom-JsonToUNISWAPV2ETHEREUMMasterChefStakingPoolDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => UNISWAPV2ETHEREUMMasterChefStakingPoolDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UNISWAPV2ETHEREUMMasterChefStakingPoolDTO
        $AllProperties = ("entry_time", "recv_time", "block_number", "block_range", "id", "pool_address", "pool_alloc_point", "multiplier", "last_reward_block", "rewarder")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entry_time"))) { #optional property not found
            $EntryTime = $null
        } else {
            $EntryTime = $JsonParameters.PSobject.Properties["entry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recv_time"))) { #optional property not found
            $RecvTime = $null
        } else {
            $RecvTime = $JsonParameters.PSobject.Properties["recv_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_number"))) { #optional property not found
            $BlockNumber = $null
        } else {
            $BlockNumber = $JsonParameters.PSobject.Properties["block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_range"))) { #optional property not found
            $BlockRange = $null
        } else {
            $BlockRange = $JsonParameters.PSobject.Properties["block_range"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pool_address"))) { #optional property not found
            $PoolAddress = $null
        } else {
            $PoolAddress = $JsonParameters.PSobject.Properties["pool_address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pool_alloc_point"))) { #optional property not found
            $PoolAllocPoint = $null
        } else {
            $PoolAllocPoint = $JsonParameters.PSobject.Properties["pool_alloc_point"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "multiplier"))) { #optional property not found
            $Multiplier = $null
        } else {
            $Multiplier = $JsonParameters.PSobject.Properties["multiplier"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_reward_block"))) { #optional property not found
            $LastRewardBlock = $null
        } else {
            $LastRewardBlock = $JsonParameters.PSobject.Properties["last_reward_block"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rewarder"))) { #optional property not found
            $Rewarder = $null
        } else {
            $Rewarder = $JsonParameters.PSobject.Properties["rewarder"].value
        }

        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "block_range" = ${BlockRange}
            "id" = ${Id}
            "pool_address" = ${PoolAddress}
            "pool_alloc_point" = ${PoolAllocPoint}
            "multiplier" = ${Multiplier}
            "last_reward_block" = ${LastRewardBlock}
            "rewarder" = ${Rewarder}
        }

        return $PSO
    }

}

