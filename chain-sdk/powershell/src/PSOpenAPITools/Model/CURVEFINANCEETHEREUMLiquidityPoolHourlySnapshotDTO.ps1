#
# On Chain Dapps - REST API
#  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION



.PARAMETER EntryTime
No description available.
.PARAMETER RecvTime
No description available.
.PARAMETER BlockNumber
Number of block in which entity was recorded.
.PARAMETER BlockRange

.PARAMETER Id
(smart contract address of the pool)-(# of hours since unix epoch time)
.PARAMETER Protocol
The protocol this snapshot belongs to
.PARAMETER Pool
The pool this snapshot belongs to
.PARAMETER Timestamp
Timestamp of this snapshot
.PARAMETER TotalValueLockedUsd
Current TVL (Total Value Locked) of this pool
.PARAMETER CumulativeSupplySideRevenueUsd
All revenue generated by the liquidity pool, accrued to the supply side.
.PARAMETER HourlySupplySideRevenueUsd
Hourly revenue generated by the liquidity pool, accrued to the supply side.
.PARAMETER CumulativeProtocolSideRevenueUsd
All revenue generated by the liquidity pool, accrued to the protocol.
.PARAMETER HourlyProtocolSideRevenueUsd
Hourly revenue generated by the liquidity pool, accrued to the protocol.
.PARAMETER CumulativeTotalRevenueUsd
All revenue generated by the liquidity pool.
.PARAMETER HourlyTotalRevenueUsd
Hourly revenue generated by the liquidity pool.
.PARAMETER HourlyVolumeUsd
All trade volume occurred in a given hour, in USD
.PARAMETER HourlyVolumeByTokenAmount
All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool's 'inputTokens' field.
.PARAMETER HourlyVolumeByTokenUsd
All trade volume occurred in a given hour for a specific input token, in USD. The ordering should be the same as the pool's 'inputTokens' field.
.PARAMETER CumulativeVolumeUsd
All historical trade volume occurred in this pool, in USD
.PARAMETER InputTokenBalances
Amount of input tokens in the pool. The ordering should be the same as the pool's 'inputTokens' field.
.PARAMETER InputTokenWeights
Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool
.PARAMETER OutputTokenSupply
Total supply of output token. Note that certain DEXes don't have an output token (e.g. Bancor)
.PARAMETER OutputTokenPriceUsd
Price per share of output token in USD
.PARAMETER StakedOutputTokenAmount
Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
.PARAMETER RewardTokenEmissionsAmount
Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
.PARAMETER RewardTokenEmissionsUsd
Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
.OUTPUTS

CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO<PSCustomObject>
#>

function Initialize-CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EntryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RecvTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BlockNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BlockRange},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Protocol},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Pool},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Timestamp},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalValueLockedUsd},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CumulativeSupplySideRevenueUsd},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HourlySupplySideRevenueUsd},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CumulativeProtocolSideRevenueUsd},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HourlyProtocolSideRevenueUsd},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CumulativeTotalRevenueUsd},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HourlyTotalRevenueUsd},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HourlyVolumeUsd},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${HourlyVolumeByTokenAmount},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${HourlyVolumeByTokenUsd},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CumulativeVolumeUsd},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${InputTokenBalances},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${InputTokenWeights},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OutputTokenSupply},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OutputTokenPriceUsd},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StakedOutputTokenAmount},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${RewardTokenEmissionsAmount},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${RewardTokenEmissionsUsd}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "block_range" = ${BlockRange}
            "id" = ${Id}
            "protocol" = ${Protocol}
            "pool" = ${Pool}
            "timestamp" = ${Timestamp}
            "total_value_locked_usd" = ${TotalValueLockedUsd}
            "cumulative_supply_side_revenue_usd" = ${CumulativeSupplySideRevenueUsd}
            "hourly_supply_side_revenue_usd" = ${HourlySupplySideRevenueUsd}
            "cumulative_protocol_side_revenue_usd" = ${CumulativeProtocolSideRevenueUsd}
            "hourly_protocol_side_revenue_usd" = ${HourlyProtocolSideRevenueUsd}
            "cumulative_total_revenue_usd" = ${CumulativeTotalRevenueUsd}
            "hourly_total_revenue_usd" = ${HourlyTotalRevenueUsd}
            "hourly_volume_usd" = ${HourlyVolumeUsd}
            "hourly_volume_by_token_amount" = ${HourlyVolumeByTokenAmount}
            "hourly_volume_by_token_usd" = ${HourlyVolumeByTokenUsd}
            "cumulative_volume_usd" = ${CumulativeVolumeUsd}
            "input_token_balances" = ${InputTokenBalances}
            "input_token_weights" = ${InputTokenWeights}
            "output_token_supply" = ${OutputTokenSupply}
            "output_token_price_usd" = ${OutputTokenPriceUsd}
            "staked_output_token_amount" = ${StakedOutputTokenAmount}
            "reward_token_emissions_amount" = ${RewardTokenEmissionsAmount}
            "reward_token_emissions_usd" = ${RewardTokenEmissionsUsd}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO<PSCustomObject>
#>
function ConvertFrom-JsonToCURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO
        $AllProperties = ("entry_time", "recv_time", "block_number", "block_range", "id", "protocol", "pool", "timestamp", "total_value_locked_usd", "cumulative_supply_side_revenue_usd", "hourly_supply_side_revenue_usd", "cumulative_protocol_side_revenue_usd", "hourly_protocol_side_revenue_usd", "cumulative_total_revenue_usd", "hourly_total_revenue_usd", "hourly_volume_usd", "hourly_volume_by_token_amount", "hourly_volume_by_token_usd", "cumulative_volume_usd", "input_token_balances", "input_token_weights", "output_token_supply", "output_token_price_usd", "staked_output_token_amount", "reward_token_emissions_amount", "reward_token_emissions_usd")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entry_time"))) { #optional property not found
            $EntryTime = $null
        } else {
            $EntryTime = $JsonParameters.PSobject.Properties["entry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recv_time"))) { #optional property not found
            $RecvTime = $null
        } else {
            $RecvTime = $JsonParameters.PSobject.Properties["recv_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_number"))) { #optional property not found
            $BlockNumber = $null
        } else {
            $BlockNumber = $JsonParameters.PSobject.Properties["block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_range"))) { #optional property not found
            $BlockRange = $null
        } else {
            $BlockRange = $JsonParameters.PSobject.Properties["block_range"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protocol"))) { #optional property not found
            $Protocol = $null
        } else {
            $Protocol = $JsonParameters.PSobject.Properties["protocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pool"))) { #optional property not found
            $Pool = $null
        } else {
            $Pool = $JsonParameters.PSobject.Properties["pool"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_value_locked_usd"))) { #optional property not found
            $TotalValueLockedUsd = $null
        } else {
            $TotalValueLockedUsd = $JsonParameters.PSobject.Properties["total_value_locked_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_supply_side_revenue_usd"))) { #optional property not found
            $CumulativeSupplySideRevenueUsd = $null
        } else {
            $CumulativeSupplySideRevenueUsd = $JsonParameters.PSobject.Properties["cumulative_supply_side_revenue_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hourly_supply_side_revenue_usd"))) { #optional property not found
            $HourlySupplySideRevenueUsd = $null
        } else {
            $HourlySupplySideRevenueUsd = $JsonParameters.PSobject.Properties["hourly_supply_side_revenue_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_protocol_side_revenue_usd"))) { #optional property not found
            $CumulativeProtocolSideRevenueUsd = $null
        } else {
            $CumulativeProtocolSideRevenueUsd = $JsonParameters.PSobject.Properties["cumulative_protocol_side_revenue_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hourly_protocol_side_revenue_usd"))) { #optional property not found
            $HourlyProtocolSideRevenueUsd = $null
        } else {
            $HourlyProtocolSideRevenueUsd = $JsonParameters.PSobject.Properties["hourly_protocol_side_revenue_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_total_revenue_usd"))) { #optional property not found
            $CumulativeTotalRevenueUsd = $null
        } else {
            $CumulativeTotalRevenueUsd = $JsonParameters.PSobject.Properties["cumulative_total_revenue_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hourly_total_revenue_usd"))) { #optional property not found
            $HourlyTotalRevenueUsd = $null
        } else {
            $HourlyTotalRevenueUsd = $JsonParameters.PSobject.Properties["hourly_total_revenue_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hourly_volume_usd"))) { #optional property not found
            $HourlyVolumeUsd = $null
        } else {
            $HourlyVolumeUsd = $JsonParameters.PSobject.Properties["hourly_volume_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hourly_volume_by_token_amount"))) { #optional property not found
            $HourlyVolumeByTokenAmount = $null
        } else {
            $HourlyVolumeByTokenAmount = $JsonParameters.PSobject.Properties["hourly_volume_by_token_amount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hourly_volume_by_token_usd"))) { #optional property not found
            $HourlyVolumeByTokenUsd = $null
        } else {
            $HourlyVolumeByTokenUsd = $JsonParameters.PSobject.Properties["hourly_volume_by_token_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_volume_usd"))) { #optional property not found
            $CumulativeVolumeUsd = $null
        } else {
            $CumulativeVolumeUsd = $JsonParameters.PSobject.Properties["cumulative_volume_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "input_token_balances"))) { #optional property not found
            $InputTokenBalances = $null
        } else {
            $InputTokenBalances = $JsonParameters.PSobject.Properties["input_token_balances"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "input_token_weights"))) { #optional property not found
            $InputTokenWeights = $null
        } else {
            $InputTokenWeights = $JsonParameters.PSobject.Properties["input_token_weights"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "output_token_supply"))) { #optional property not found
            $OutputTokenSupply = $null
        } else {
            $OutputTokenSupply = $JsonParameters.PSobject.Properties["output_token_supply"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "output_token_price_usd"))) { #optional property not found
            $OutputTokenPriceUsd = $null
        } else {
            $OutputTokenPriceUsd = $JsonParameters.PSobject.Properties["output_token_price_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "staked_output_token_amount"))) { #optional property not found
            $StakedOutputTokenAmount = $null
        } else {
            $StakedOutputTokenAmount = $JsonParameters.PSobject.Properties["staked_output_token_amount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reward_token_emissions_amount"))) { #optional property not found
            $RewardTokenEmissionsAmount = $null
        } else {
            $RewardTokenEmissionsAmount = $JsonParameters.PSobject.Properties["reward_token_emissions_amount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reward_token_emissions_usd"))) { #optional property not found
            $RewardTokenEmissionsUsd = $null
        } else {
            $RewardTokenEmissionsUsd = $JsonParameters.PSobject.Properties["reward_token_emissions_usd"].value
        }

        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "block_range" = ${BlockRange}
            "id" = ${Id}
            "protocol" = ${Protocol}
            "pool" = ${Pool}
            "timestamp" = ${Timestamp}
            "total_value_locked_usd" = ${TotalValueLockedUsd}
            "cumulative_supply_side_revenue_usd" = ${CumulativeSupplySideRevenueUsd}
            "hourly_supply_side_revenue_usd" = ${HourlySupplySideRevenueUsd}
            "cumulative_protocol_side_revenue_usd" = ${CumulativeProtocolSideRevenueUsd}
            "hourly_protocol_side_revenue_usd" = ${HourlyProtocolSideRevenueUsd}
            "cumulative_total_revenue_usd" = ${CumulativeTotalRevenueUsd}
            "hourly_total_revenue_usd" = ${HourlyTotalRevenueUsd}
            "hourly_volume_usd" = ${HourlyVolumeUsd}
            "hourly_volume_by_token_amount" = ${HourlyVolumeByTokenAmount}
            "hourly_volume_by_token_usd" = ${HourlyVolumeByTokenUsd}
            "cumulative_volume_usd" = ${CumulativeVolumeUsd}
            "input_token_balances" = ${InputTokenBalances}
            "input_token_weights" = ${InputTokenWeights}
            "output_token_supply" = ${OutputTokenSupply}
            "output_token_price_usd" = ${OutputTokenPriceUsd}
            "staked_output_token_amount" = ${StakedOutputTokenAmount}
            "reward_token_emissions_amount" = ${RewardTokenEmissionsAmount}
            "reward_token_emissions_usd" = ${RewardTokenEmissionsUsd}
        }

        return $PSO
    }

}

