#
# On Chain Dapps - REST API
#  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Pool-level metadata.

.PARAMETER EntryTime
No description available.
.PARAMETER RecvTime
No description available.
.PARAMETER BlockNumber
Number of block in which entity was recorded.
.PARAMETER Vid
.
.PARAMETER Id
Smart contract address of the pool
.PARAMETER Protocol
The protocol this pool belongs to
.PARAMETER Name
Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT)
.PARAMETER Symbol
Symbol of liquidity pool (e.g. 3CRV)
.PARAMETER InputTokens
Tokens that need to be deposited to take a position in the protocol
.PARAMETER OutputToken
Token that is minted to track ownership of position in protocol
.PARAMETER RewardTokens
Aditional tokens that are given as reward for position in a protocol
.PARAMETER Fees
Fees per trade incurred to the user
.PARAMETER IsSingleSided
Whether this pool is single-sided
.PARAMETER CreatedTimestamp
Creation timestamp
.PARAMETER CreatedBlockNumber
Creation block number
.PARAMETER TotalValueLockedUsd
Current TVL (Total Value Locked) of this pool in USD
.PARAMETER CumulativeSupplySideRevenueUsd
All revenue generated by the liquidity pool, accrued to the supply side
.PARAMETER CumulativeProtocolSideRevenueUsd
All revenue generated by the liquidity pool, accrued to the protocol
.PARAMETER CumulativeTotalRevenueUsd
All revenue generated by the liquidity pool
.PARAMETER CumulativeVolumeUsd
All historical trade volume occurred in this pool, in USD
.PARAMETER InputTokenBalances
Amount of input tokens in the pool
.PARAMETER InputTokenWeights
Weights of input tokens in the liquidity pool in percentage values
.PARAMETER OutputTokenSupply
Total supply of output token
.PARAMETER OutputTokenPriceUsd
Price per share of output token in USD
.PARAMETER StakedOutputTokenAmount
Total supply of output tokens that are staked
.PARAMETER RewardTokenEmissionsAmount
Per-block reward token emission as of the current block normalized to a day, in token's native amount
.PARAMETER RewardTokenEmissionsUsd
Per-block reward token emission as of the current block normalized to a day, in USD value
.PARAMETER EvaluatedAsk
Evaluated ask value of the liquidity pool.
.OUTPUTS

UNISWAPV2ETHEREUMLiquidityPoolDTO<PSCustomObject>
#>

function Initialize-UNISWAPV2ETHEREUMLiquidityPoolDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EntryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RecvTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BlockNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Vid},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Protocol},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Symbol},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${InputTokens},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OutputToken},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${RewardTokens},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Fees},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsSingleSided},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CreatedTimestamp},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CreatedBlockNumber},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalValueLockedUsd},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CumulativeSupplySideRevenueUsd},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CumulativeProtocolSideRevenueUsd},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CumulativeTotalRevenueUsd},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CumulativeVolumeUsd},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${InputTokenBalances},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${InputTokenWeights},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OutputTokenSupply},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OutputTokenPriceUsd},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StakedOutputTokenAmount},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${RewardTokenEmissionsAmount},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${RewardTokenEmissionsUsd},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${EvaluatedAsk}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => UNISWAPV2ETHEREUMLiquidityPoolDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "vid" = ${Vid}
            "id" = ${Id}
            "protocol" = ${Protocol}
            "name" = ${Name}
            "symbol" = ${Symbol}
            "input_tokens" = ${InputTokens}
            "output_token" = ${OutputToken}
            "reward_tokens" = ${RewardTokens}
            "fees" = ${Fees}
            "is_single_sided" = ${IsSingleSided}
            "created_timestamp" = ${CreatedTimestamp}
            "created_block_number" = ${CreatedBlockNumber}
            "total_value_locked_usd" = ${TotalValueLockedUsd}
            "cumulative_supply_side_revenue_usd" = ${CumulativeSupplySideRevenueUsd}
            "cumulative_protocol_side_revenue_usd" = ${CumulativeProtocolSideRevenueUsd}
            "cumulative_total_revenue_usd" = ${CumulativeTotalRevenueUsd}
            "cumulative_volume_usd" = ${CumulativeVolumeUsd}
            "input_token_balances" = ${InputTokenBalances}
            "input_token_weights" = ${InputTokenWeights}
            "output_token_supply" = ${OutputTokenSupply}
            "output_token_price_usd" = ${OutputTokenPriceUsd}
            "staked_output_token_amount" = ${StakedOutputTokenAmount}
            "reward_token_emissions_amount" = ${RewardTokenEmissionsAmount}
            "reward_token_emissions_usd" = ${RewardTokenEmissionsUsd}
            "evaluated_ask" = ${EvaluatedAsk}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UNISWAPV2ETHEREUMLiquidityPoolDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to UNISWAPV2ETHEREUMLiquidityPoolDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UNISWAPV2ETHEREUMLiquidityPoolDTO<PSCustomObject>
#>
function ConvertFrom-JsonToUNISWAPV2ETHEREUMLiquidityPoolDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => UNISWAPV2ETHEREUMLiquidityPoolDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UNISWAPV2ETHEREUMLiquidityPoolDTO
        $AllProperties = ("entry_time", "recv_time", "block_number", "vid", "id", "protocol", "name", "symbol", "input_tokens", "output_token", "reward_tokens", "fees", "is_single_sided", "created_timestamp", "created_block_number", "total_value_locked_usd", "cumulative_supply_side_revenue_usd", "cumulative_protocol_side_revenue_usd", "cumulative_total_revenue_usd", "cumulative_volume_usd", "input_token_balances", "input_token_weights", "output_token_supply", "output_token_price_usd", "staked_output_token_amount", "reward_token_emissions_amount", "reward_token_emissions_usd", "evaluated_ask")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entry_time"))) { #optional property not found
            $EntryTime = $null
        } else {
            $EntryTime = $JsonParameters.PSobject.Properties["entry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recv_time"))) { #optional property not found
            $RecvTime = $null
        } else {
            $RecvTime = $JsonParameters.PSobject.Properties["recv_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_number"))) { #optional property not found
            $BlockNumber = $null
        } else {
            $BlockNumber = $JsonParameters.PSobject.Properties["block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vid"))) { #optional property not found
            $Vid = $null
        } else {
            $Vid = $JsonParameters.PSobject.Properties["vid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protocol"))) { #optional property not found
            $Protocol = $null
        } else {
            $Protocol = $JsonParameters.PSobject.Properties["protocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "symbol"))) { #optional property not found
            $Symbol = $null
        } else {
            $Symbol = $JsonParameters.PSobject.Properties["symbol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "input_tokens"))) { #optional property not found
            $InputTokens = $null
        } else {
            $InputTokens = $JsonParameters.PSobject.Properties["input_tokens"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "output_token"))) { #optional property not found
            $OutputToken = $null
        } else {
            $OutputToken = $JsonParameters.PSobject.Properties["output_token"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reward_tokens"))) { #optional property not found
            $RewardTokens = $null
        } else {
            $RewardTokens = $JsonParameters.PSobject.Properties["reward_tokens"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fees"))) { #optional property not found
            $Fees = $null
        } else {
            $Fees = $JsonParameters.PSobject.Properties["fees"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_single_sided"))) { #optional property not found
            $IsSingleSided = $null
        } else {
            $IsSingleSided = $JsonParameters.PSobject.Properties["is_single_sided"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created_timestamp"))) { #optional property not found
            $CreatedTimestamp = $null
        } else {
            $CreatedTimestamp = $JsonParameters.PSobject.Properties["created_timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created_block_number"))) { #optional property not found
            $CreatedBlockNumber = $null
        } else {
            $CreatedBlockNumber = $JsonParameters.PSobject.Properties["created_block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_value_locked_usd"))) { #optional property not found
            $TotalValueLockedUsd = $null
        } else {
            $TotalValueLockedUsd = $JsonParameters.PSobject.Properties["total_value_locked_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_supply_side_revenue_usd"))) { #optional property not found
            $CumulativeSupplySideRevenueUsd = $null
        } else {
            $CumulativeSupplySideRevenueUsd = $JsonParameters.PSobject.Properties["cumulative_supply_side_revenue_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_protocol_side_revenue_usd"))) { #optional property not found
            $CumulativeProtocolSideRevenueUsd = $null
        } else {
            $CumulativeProtocolSideRevenueUsd = $JsonParameters.PSobject.Properties["cumulative_protocol_side_revenue_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_total_revenue_usd"))) { #optional property not found
            $CumulativeTotalRevenueUsd = $null
        } else {
            $CumulativeTotalRevenueUsd = $JsonParameters.PSobject.Properties["cumulative_total_revenue_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_volume_usd"))) { #optional property not found
            $CumulativeVolumeUsd = $null
        } else {
            $CumulativeVolumeUsd = $JsonParameters.PSobject.Properties["cumulative_volume_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "input_token_balances"))) { #optional property not found
            $InputTokenBalances = $null
        } else {
            $InputTokenBalances = $JsonParameters.PSobject.Properties["input_token_balances"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "input_token_weights"))) { #optional property not found
            $InputTokenWeights = $null
        } else {
            $InputTokenWeights = $JsonParameters.PSobject.Properties["input_token_weights"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "output_token_supply"))) { #optional property not found
            $OutputTokenSupply = $null
        } else {
            $OutputTokenSupply = $JsonParameters.PSobject.Properties["output_token_supply"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "output_token_price_usd"))) { #optional property not found
            $OutputTokenPriceUsd = $null
        } else {
            $OutputTokenPriceUsd = $JsonParameters.PSobject.Properties["output_token_price_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "staked_output_token_amount"))) { #optional property not found
            $StakedOutputTokenAmount = $null
        } else {
            $StakedOutputTokenAmount = $JsonParameters.PSobject.Properties["staked_output_token_amount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reward_token_emissions_amount"))) { #optional property not found
            $RewardTokenEmissionsAmount = $null
        } else {
            $RewardTokenEmissionsAmount = $JsonParameters.PSobject.Properties["reward_token_emissions_amount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reward_token_emissions_usd"))) { #optional property not found
            $RewardTokenEmissionsUsd = $null
        } else {
            $RewardTokenEmissionsUsd = $JsonParameters.PSobject.Properties["reward_token_emissions_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "evaluated_ask"))) { #optional property not found
            $EvaluatedAsk = $null
        } else {
            $EvaluatedAsk = $JsonParameters.PSobject.Properties["evaluated_ask"].value
        }

        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "vid" = ${Vid}
            "id" = ${Id}
            "protocol" = ${Protocol}
            "name" = ${Name}
            "symbol" = ${Symbol}
            "input_tokens" = ${InputTokens}
            "output_token" = ${OutputToken}
            "reward_tokens" = ${RewardTokens}
            "fees" = ${Fees}
            "is_single_sided" = ${IsSingleSided}
            "created_timestamp" = ${CreatedTimestamp}
            "created_block_number" = ${CreatedBlockNumber}
            "total_value_locked_usd" = ${TotalValueLockedUsd}
            "cumulative_supply_side_revenue_usd" = ${CumulativeSupplySideRevenueUsd}
            "cumulative_protocol_side_revenue_usd" = ${CumulativeProtocolSideRevenueUsd}
            "cumulative_total_revenue_usd" = ${CumulativeTotalRevenueUsd}
            "cumulative_volume_usd" = ${CumulativeVolumeUsd}
            "input_token_balances" = ${InputTokenBalances}
            "input_token_weights" = ${InputTokenWeights}
            "output_token_supply" = ${OutputTokenSupply}
            "output_token_price_usd" = ${OutputTokenPriceUsd}
            "staked_output_token_amount" = ${StakedOutputTokenAmount}
            "reward_token_emissions_amount" = ${RewardTokenEmissionsAmount}
            "reward_token_emissions_usd" = ${RewardTokenEmissionsUsd}
            "evaluated_ask" = ${EvaluatedAsk}
        }

        return $PSO
    }

}

