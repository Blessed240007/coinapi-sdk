#
# On Chain Dapps - REST API
#  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

 Decentralized exchange (Dex) automated market maker (Amm) protocol. It's an entity that represents a protocol involving a smart contract that use automated market makers.

.PARAMETER EntryTime
No description available.
.PARAMETER RecvTime
No description available.
.PARAMETER BlockNumber
Number of block in which entity was recorded.
.PARAMETER BlockRange

.PARAMETER Id
Smart contract address of the protocol's main contract (Factory, Registry, etc).
.PARAMETER Name
Name of the protocol, including version. e.g. Uniswap v3.
.PARAMETER Slug
Slug of protocol, including version. e.g. uniswap-v3.
.PARAMETER SchemaVersion
Version of the subgraph schema, in SemVer format (e.g. 1.0.0).
.PARAMETER SubgraphVersion
Version of the subgraph implementation, in SemVer format (e.g. 1.0.0).
.PARAMETER MethodologyVersion
Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0).
.PARAMETER TotalValueLockedUsd
Current TVL (Total Value Locked) of the entire protocol.
.PARAMETER TotalLiquidityUsd
The sum of all active and non-active liquidity in USD for this pool.
.PARAMETER ActiveLiquidityUsd
All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
.PARAMETER UncollectedProtocolSideValueUsd
All protocol-side value locking in USD that remains uncollected and unused in the protocol.
.PARAMETER UncollectedSupplySideValueUsd
All supply-side value locking in USD that remains uncollected and unused in the protocol.
.PARAMETER ProtocolControlledValueUsd
Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.
.PARAMETER CumulativeVolumeUsd
All historical volume in USD.
.PARAMETER CumulativeSupplySideRevenueUsd
Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
.PARAMETER CumulativeProtocolSideRevenueUsd
Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushiâ€™s 0.05%). OpenSea 10% sell fee.
.PARAMETER CumulativeTotalRevenueUsd
All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
.PARAMETER CumulativeUniqueUsers
Number of cumulative unique users.
.PARAMETER CumulativeUniqueLPs
Number of cumulative liquidity providers.
.PARAMETER CumulativeUniqueTraders
Number of cumulative traders
.PARAMETER TotalPoolCount
Total number of pools.
.PARAMETER OpenPositionCount
Total number of open positions.
.PARAMETER CumulativePositionCount
Total number of positions (open and closed).
.PARAMETER LastSnapshotDayId
Day ID of the most recent daily snapshot.
.PARAMETER LastUpdateTimestamp
Timestamp of the last time this entity was updated
.PARAMETER LastUpdateBlockNumber
Block number of the last time this entity was updated.
.PARAMETER Regenesis
This is a boolean to indicate whether or not the pools have been instantiated the were initialized before Optimism regenesis.
.OUTPUTS

UNISWAPV3ETHEREUMDexAmmProtocolDTO<PSCustomObject>
#>

function Initialize-UNISWAPV3ETHEREUMDexAmmProtocolDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EntryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RecvTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BlockNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BlockRange},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Slug},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SchemaVersion},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubgraphVersion},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MethodologyVersion},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalValueLockedUsd},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalLiquidityUsd},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ActiveLiquidityUsd},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UncollectedProtocolSideValueUsd},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UncollectedSupplySideValueUsd},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProtocolControlledValueUsd},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CumulativeVolumeUsd},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CumulativeSupplySideRevenueUsd},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CumulativeProtocolSideRevenueUsd},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CumulativeTotalRevenueUsd},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CumulativeUniqueUsers},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CumulativeUniqueLPs},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CumulativeUniqueTraders},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TotalPoolCount},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${OpenPositionCount},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CumulativePositionCount},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LastSnapshotDayId},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastUpdateTimestamp},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastUpdateBlockNumber},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Regenesis}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => UNISWAPV3ETHEREUMDexAmmProtocolDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "block_range" = ${BlockRange}
            "id" = ${Id}
            "name" = ${Name}
            "slug" = ${Slug}
            "schema_version" = ${SchemaVersion}
            "subgraph_version" = ${SubgraphVersion}
            "methodology_version" = ${MethodologyVersion}
            "total_value_locked_usd" = ${TotalValueLockedUsd}
            "total_liquidity_usd" = ${TotalLiquidityUsd}
            "active_liquidity_usd" = ${ActiveLiquidityUsd}
            "uncollected_protocol_side_value_usd" = ${UncollectedProtocolSideValueUsd}
            "uncollected_supply_side_value_usd" = ${UncollectedSupplySideValueUsd}
            "protocol_controlled_value_usd" = ${ProtocolControlledValueUsd}
            "cumulative_volume_usd" = ${CumulativeVolumeUsd}
            "cumulative_supply_side_revenue_usd" = ${CumulativeSupplySideRevenueUsd}
            "cumulative_protocol_side_revenue_usd" = ${CumulativeProtocolSideRevenueUsd}
            "cumulative_total_revenue_usd" = ${CumulativeTotalRevenueUsd}
            "cumulative_unique_users" = ${CumulativeUniqueUsers}
            "cumulative_unique_l_ps" = ${CumulativeUniqueLPs}
            "cumulative_unique_traders" = ${CumulativeUniqueTraders}
            "total_pool_count" = ${TotalPoolCount}
            "open_position_count" = ${OpenPositionCount}
            "cumulative_position_count" = ${CumulativePositionCount}
            "last_snapshot_day_id" = ${LastSnapshotDayId}
            "last_update_timestamp" = ${LastUpdateTimestamp}
            "last_update_block_number" = ${LastUpdateBlockNumber}
            "regenesis" = ${Regenesis}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UNISWAPV3ETHEREUMDexAmmProtocolDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to UNISWAPV3ETHEREUMDexAmmProtocolDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UNISWAPV3ETHEREUMDexAmmProtocolDTO<PSCustomObject>
#>
function ConvertFrom-JsonToUNISWAPV3ETHEREUMDexAmmProtocolDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => UNISWAPV3ETHEREUMDexAmmProtocolDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UNISWAPV3ETHEREUMDexAmmProtocolDTO
        $AllProperties = ("entry_time", "recv_time", "block_number", "block_range", "id", "name", "slug", "schema_version", "subgraph_version", "methodology_version", "total_value_locked_usd", "total_liquidity_usd", "active_liquidity_usd", "uncollected_protocol_side_value_usd", "uncollected_supply_side_value_usd", "protocol_controlled_value_usd", "cumulative_volume_usd", "cumulative_supply_side_revenue_usd", "cumulative_protocol_side_revenue_usd", "cumulative_total_revenue_usd", "cumulative_unique_users", "cumulative_unique_l_ps", "cumulative_unique_traders", "total_pool_count", "open_position_count", "cumulative_position_count", "last_snapshot_day_id", "last_update_timestamp", "last_update_block_number", "regenesis")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entry_time"))) { #optional property not found
            $EntryTime = $null
        } else {
            $EntryTime = $JsonParameters.PSobject.Properties["entry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recv_time"))) { #optional property not found
            $RecvTime = $null
        } else {
            $RecvTime = $JsonParameters.PSobject.Properties["recv_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_number"))) { #optional property not found
            $BlockNumber = $null
        } else {
            $BlockNumber = $JsonParameters.PSobject.Properties["block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_range"))) { #optional property not found
            $BlockRange = $null
        } else {
            $BlockRange = $JsonParameters.PSobject.Properties["block_range"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "slug"))) { #optional property not found
            $Slug = $null
        } else {
            $Slug = $JsonParameters.PSobject.Properties["slug"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "schema_version"))) { #optional property not found
            $SchemaVersion = $null
        } else {
            $SchemaVersion = $JsonParameters.PSobject.Properties["schema_version"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subgraph_version"))) { #optional property not found
            $SubgraphVersion = $null
        } else {
            $SubgraphVersion = $JsonParameters.PSobject.Properties["subgraph_version"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "methodology_version"))) { #optional property not found
            $MethodologyVersion = $null
        } else {
            $MethodologyVersion = $JsonParameters.PSobject.Properties["methodology_version"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_value_locked_usd"))) { #optional property not found
            $TotalValueLockedUsd = $null
        } else {
            $TotalValueLockedUsd = $JsonParameters.PSobject.Properties["total_value_locked_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_liquidity_usd"))) { #optional property not found
            $TotalLiquidityUsd = $null
        } else {
            $TotalLiquidityUsd = $JsonParameters.PSobject.Properties["total_liquidity_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "active_liquidity_usd"))) { #optional property not found
            $ActiveLiquidityUsd = $null
        } else {
            $ActiveLiquidityUsd = $JsonParameters.PSobject.Properties["active_liquidity_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uncollected_protocol_side_value_usd"))) { #optional property not found
            $UncollectedProtocolSideValueUsd = $null
        } else {
            $UncollectedProtocolSideValueUsd = $JsonParameters.PSobject.Properties["uncollected_protocol_side_value_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uncollected_supply_side_value_usd"))) { #optional property not found
            $UncollectedSupplySideValueUsd = $null
        } else {
            $UncollectedSupplySideValueUsd = $JsonParameters.PSobject.Properties["uncollected_supply_side_value_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protocol_controlled_value_usd"))) { #optional property not found
            $ProtocolControlledValueUsd = $null
        } else {
            $ProtocolControlledValueUsd = $JsonParameters.PSobject.Properties["protocol_controlled_value_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_volume_usd"))) { #optional property not found
            $CumulativeVolumeUsd = $null
        } else {
            $CumulativeVolumeUsd = $JsonParameters.PSobject.Properties["cumulative_volume_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_supply_side_revenue_usd"))) { #optional property not found
            $CumulativeSupplySideRevenueUsd = $null
        } else {
            $CumulativeSupplySideRevenueUsd = $JsonParameters.PSobject.Properties["cumulative_supply_side_revenue_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_protocol_side_revenue_usd"))) { #optional property not found
            $CumulativeProtocolSideRevenueUsd = $null
        } else {
            $CumulativeProtocolSideRevenueUsd = $JsonParameters.PSobject.Properties["cumulative_protocol_side_revenue_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_total_revenue_usd"))) { #optional property not found
            $CumulativeTotalRevenueUsd = $null
        } else {
            $CumulativeTotalRevenueUsd = $JsonParameters.PSobject.Properties["cumulative_total_revenue_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_unique_users"))) { #optional property not found
            $CumulativeUniqueUsers = $null
        } else {
            $CumulativeUniqueUsers = $JsonParameters.PSobject.Properties["cumulative_unique_users"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_unique_l_ps"))) { #optional property not found
            $CumulativeUniqueLPs = $null
        } else {
            $CumulativeUniqueLPs = $JsonParameters.PSobject.Properties["cumulative_unique_l_ps"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_unique_traders"))) { #optional property not found
            $CumulativeUniqueTraders = $null
        } else {
            $CumulativeUniqueTraders = $JsonParameters.PSobject.Properties["cumulative_unique_traders"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_pool_count"))) { #optional property not found
            $TotalPoolCount = $null
        } else {
            $TotalPoolCount = $JsonParameters.PSobject.Properties["total_pool_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "open_position_count"))) { #optional property not found
            $OpenPositionCount = $null
        } else {
            $OpenPositionCount = $JsonParameters.PSobject.Properties["open_position_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_position_count"))) { #optional property not found
            $CumulativePositionCount = $null
        } else {
            $CumulativePositionCount = $JsonParameters.PSobject.Properties["cumulative_position_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_snapshot_day_id"))) { #optional property not found
            $LastSnapshotDayId = $null
        } else {
            $LastSnapshotDayId = $JsonParameters.PSobject.Properties["last_snapshot_day_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_update_timestamp"))) { #optional property not found
            $LastUpdateTimestamp = $null
        } else {
            $LastUpdateTimestamp = $JsonParameters.PSobject.Properties["last_update_timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_update_block_number"))) { #optional property not found
            $LastUpdateBlockNumber = $null
        } else {
            $LastUpdateBlockNumber = $JsonParameters.PSobject.Properties["last_update_block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "regenesis"))) { #optional property not found
            $Regenesis = $null
        } else {
            $Regenesis = $JsonParameters.PSobject.Properties["regenesis"].value
        }

        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "block_range" = ${BlockRange}
            "id" = ${Id}
            "name" = ${Name}
            "slug" = ${Slug}
            "schema_version" = ${SchemaVersion}
            "subgraph_version" = ${SubgraphVersion}
            "methodology_version" = ${MethodologyVersion}
            "total_value_locked_usd" = ${TotalValueLockedUsd}
            "total_liquidity_usd" = ${TotalLiquidityUsd}
            "active_liquidity_usd" = ${ActiveLiquidityUsd}
            "uncollected_protocol_side_value_usd" = ${UncollectedProtocolSideValueUsd}
            "uncollected_supply_side_value_usd" = ${UncollectedSupplySideValueUsd}
            "protocol_controlled_value_usd" = ${ProtocolControlledValueUsd}
            "cumulative_volume_usd" = ${CumulativeVolumeUsd}
            "cumulative_supply_side_revenue_usd" = ${CumulativeSupplySideRevenueUsd}
            "cumulative_protocol_side_revenue_usd" = ${CumulativeProtocolSideRevenueUsd}
            "cumulative_total_revenue_usd" = ${CumulativeTotalRevenueUsd}
            "cumulative_unique_users" = ${CumulativeUniqueUsers}
            "cumulative_unique_l_ps" = ${CumulativeUniqueLPs}
            "cumulative_unique_traders" = ${CumulativeUniqueTraders}
            "total_pool_count" = ${TotalPoolCount}
            "open_position_count" = ${OpenPositionCount}
            "cumulative_position_count" = ${CumulativePositionCount}
            "last_snapshot_day_id" = ${LastSnapshotDayId}
            "last_update_timestamp" = ${LastUpdateTimestamp}
            "last_update_block_number" = ${LastUpdateBlockNumber}
            "regenesis" = ${Regenesis}
        }

        return $PSO
    }

}

