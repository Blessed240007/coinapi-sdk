#
# On Chain Dapps - REST API
#  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Entity represents a user action in the protocol involving the addition of funds to a liquidity pool.

.PARAMETER EntryTime
No description available.
.PARAMETER RecvTime
No description available.
.PARAMETER BlockNumber
Number of block in which entity was recorded.
.PARAMETER Block

.PARAMETER Id
Identifier, format: (transaction hash)-(log index)
.PARAMETER Hash
Transaction hash of the transaction that emitted this event.
.PARAMETER Nonce
Nonce of the transaction that emitted this event.
.PARAMETER LogIndex
Event log index. For transactions that don't emit event, create arbitrary index starting from 0.
.PARAMETER GasLimit
Gas limit of the transaction that emitted this event.
.PARAMETER GasUsed
Gas used in this transaction. (Optional because not every chain will support this).
.PARAMETER GasPrice
Gas price of the transaction that emitted this event.
.PARAMETER Protocol
The protocol this transaction belongs to.
.PARAMETER Account
Account that emitted this event.
.PARAMETER Position
The user position changed by this event.
.PARAMETER Pool
The pool involving this event.
.PARAMETER TickLower
Lower tick of position.
.PARAMETER TickUpper
Upper tick of position.
.PARAMETER Timestamp
Timestamp of this event.
.PARAMETER Liquidity
Amount of liquidity minted.
.PARAMETER InputTokens
Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool.
.PARAMETER InputTokenAmounts
Amount of input tokens in the token's native unit.
.PARAMETER ReserveAmounts
Amount of input tokens in the liquidity pool.
.PARAMETER AmountUsd
USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool).
.PARAMETER BlockRange

.OUTPUTS

UNISWAPV3ETHEREUMDepositDTO<PSCustomObject>
#>

function Initialize-UNISWAPV3ETHEREUMDepositDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EntryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RecvTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BlockNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Block},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Hash},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Nonce},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${LogIndex},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GasLimit},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GasUsed},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GasPrice},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Protocol},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Account},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Position},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Pool},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TickLower},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TickUpper},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Timestamp},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Liquidity},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${InputTokens},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${InputTokenAmounts},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ReserveAmounts},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AmountUsd},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BlockRange}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => UNISWAPV3ETHEREUMDepositDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "block_" = ${Block}
            "id" = ${Id}
            "hash" = ${Hash}
            "nonce" = ${Nonce}
            "log_index" = ${LogIndex}
            "gas_limit" = ${GasLimit}
            "gas_used" = ${GasUsed}
            "gas_price" = ${GasPrice}
            "protocol" = ${Protocol}
            "account" = ${Account}
            "position" = ${Position}
            "pool" = ${Pool}
            "tick_lower" = ${TickLower}
            "tick_upper" = ${TickUpper}
            "timestamp" = ${Timestamp}
            "liquidity" = ${Liquidity}
            "input_tokens" = ${InputTokens}
            "input_token_amounts" = ${InputTokenAmounts}
            "reserve_amounts" = ${ReserveAmounts}
            "amount_usd" = ${AmountUsd}
            "block_range" = ${BlockRange}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UNISWAPV3ETHEREUMDepositDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to UNISWAPV3ETHEREUMDepositDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UNISWAPV3ETHEREUMDepositDTO<PSCustomObject>
#>
function ConvertFrom-JsonToUNISWAPV3ETHEREUMDepositDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => UNISWAPV3ETHEREUMDepositDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UNISWAPV3ETHEREUMDepositDTO
        $AllProperties = ("entry_time", "recv_time", "block_number", "block_", "id", "hash", "nonce", "log_index", "gas_limit", "gas_used", "gas_price", "protocol", "account", "position", "pool", "tick_lower", "tick_upper", "timestamp", "liquidity", "input_tokens", "input_token_amounts", "reserve_amounts", "amount_usd", "block_range")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entry_time"))) { #optional property not found
            $EntryTime = $null
        } else {
            $EntryTime = $JsonParameters.PSobject.Properties["entry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recv_time"))) { #optional property not found
            $RecvTime = $null
        } else {
            $RecvTime = $JsonParameters.PSobject.Properties["recv_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_number"))) { #optional property not found
            $BlockNumber = $null
        } else {
            $BlockNumber = $JsonParameters.PSobject.Properties["block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_"))) { #optional property not found
            $Block = $null
        } else {
            $Block = $JsonParameters.PSobject.Properties["block_"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hash"))) { #optional property not found
            $Hash = $null
        } else {
            $Hash = $JsonParameters.PSobject.Properties["hash"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nonce"))) { #optional property not found
            $Nonce = $null
        } else {
            $Nonce = $JsonParameters.PSobject.Properties["nonce"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "log_index"))) { #optional property not found
            $LogIndex = $null
        } else {
            $LogIndex = $JsonParameters.PSobject.Properties["log_index"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "gas_limit"))) { #optional property not found
            $GasLimit = $null
        } else {
            $GasLimit = $JsonParameters.PSobject.Properties["gas_limit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "gas_used"))) { #optional property not found
            $GasUsed = $null
        } else {
            $GasUsed = $JsonParameters.PSobject.Properties["gas_used"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "gas_price"))) { #optional property not found
            $GasPrice = $null
        } else {
            $GasPrice = $JsonParameters.PSobject.Properties["gas_price"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protocol"))) { #optional property not found
            $Protocol = $null
        } else {
            $Protocol = $JsonParameters.PSobject.Properties["protocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "account"))) { #optional property not found
            $Account = $null
        } else {
            $Account = $JsonParameters.PSobject.Properties["account"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "position"))) { #optional property not found
            $Position = $null
        } else {
            $Position = $JsonParameters.PSobject.Properties["position"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pool"))) { #optional property not found
            $Pool = $null
        } else {
            $Pool = $JsonParameters.PSobject.Properties["pool"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tick_lower"))) { #optional property not found
            $TickLower = $null
        } else {
            $TickLower = $JsonParameters.PSobject.Properties["tick_lower"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tick_upper"))) { #optional property not found
            $TickUpper = $null
        } else {
            $TickUpper = $JsonParameters.PSobject.Properties["tick_upper"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "liquidity"))) { #optional property not found
            $Liquidity = $null
        } else {
            $Liquidity = $JsonParameters.PSobject.Properties["liquidity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "input_tokens"))) { #optional property not found
            $InputTokens = $null
        } else {
            $InputTokens = $JsonParameters.PSobject.Properties["input_tokens"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "input_token_amounts"))) { #optional property not found
            $InputTokenAmounts = $null
        } else {
            $InputTokenAmounts = $JsonParameters.PSobject.Properties["input_token_amounts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reserve_amounts"))) { #optional property not found
            $ReserveAmounts = $null
        } else {
            $ReserveAmounts = $JsonParameters.PSobject.Properties["reserve_amounts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "amount_usd"))) { #optional property not found
            $AmountUsd = $null
        } else {
            $AmountUsd = $JsonParameters.PSobject.Properties["amount_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_range"))) { #optional property not found
            $BlockRange = $null
        } else {
            $BlockRange = $JsonParameters.PSobject.Properties["block_range"].value
        }

        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "block_" = ${Block}
            "id" = ${Id}
            "hash" = ${Hash}
            "nonce" = ${Nonce}
            "log_index" = ${LogIndex}
            "gas_limit" = ${GasLimit}
            "gas_used" = ${GasUsed}
            "gas_price" = ${GasPrice}
            "protocol" = ${Protocol}
            "account" = ${Account}
            "position" = ${Position}
            "pool" = ${Pool}
            "tick_lower" = ${TickLower}
            "tick_upper" = ${TickUpper}
            "timestamp" = ${Timestamp}
            "liquidity" = ${Liquidity}
            "input_tokens" = ${InputTokens}
            "input_token_amounts" = ${InputTokenAmounts}
            "reserve_amounts" = ${ReserveAmounts}
            "amount_usd" = ${AmountUsd}
            "block_range" = ${BlockRange}
        }

        return $PSO
    }

}

