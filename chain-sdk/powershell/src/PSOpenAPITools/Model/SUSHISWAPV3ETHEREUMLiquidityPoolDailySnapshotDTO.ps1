#
# On Chain Dapps - REST API
#  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
# Version: v1
# Contact: support@coinapi.io
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents a liquidity pool daily snapshot for Sushiswap V3.

.PARAMETER EntryTime
No description available.
.PARAMETER RecvTime
No description available.
.PARAMETER BlockNumber
Number of block in which entity was recorded.
.PARAMETER Block
The Ethereum block number associated with the liquidity pool daily snapshot.
.PARAMETER Id
Identifier, format: (smart contract address of the pool)-(# of days since Unix epoch time).
.PARAMETER Day
Number of days since Unix epoch time.
.PARAMETER Protocol
Protocol associated with the liquidity pool.
.PARAMETER Pool
Pool this snapshot belongs to.
.PARAMETER Tick
Current tick representing the price of token0/token1.
.PARAMETER TotalValueLockedUsd
Current TVL (Total Value Locked) of this pool.
.PARAMETER TotalLiquidity
The sum of all active and non-active liquidity for this pool.
.PARAMETER TotalLiquidityUsd
Sum of all active and non-active liquidity in USD for this pool.
.PARAMETER ActiveLiquidity
All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
.PARAMETER ActiveLiquidityUsd
All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
.PARAMETER UncollectedProtocolSideTokenAmounts
All protocol-side value locked in token amounts that remains uncollected and unused in the pool.
.PARAMETER UncollectedProtocolSideValuesUsd
All protocol-side value locking in USD that remains uncollected and unused in the pool.
.PARAMETER UncollectedSupplySideTokenAmounts
All supply-side value locked in token amounts that remains uncollected and unused in the pool.
.PARAMETER UncollectedSupplySideValuesUsd
All supply-side value locked in USD that remains uncollected and unused in the pool.
.PARAMETER CumulativeSupplySideRevenueUsd
All revenue generated by the liquidity pool, accrued to the supply side.
.PARAMETER DailySupplySideRevenueUsd
Daily revenue generated by the liquidity pool, accrued to the supply side.
.PARAMETER CumulativeProtocolSideRevenueUsd
All revenue generated by the liquidity pool, accrued to the protocol.
.PARAMETER DailyProtocolSideRevenueUsd
Daily revenue generated by the liquidity pool, accrued to the protocol.
.PARAMETER CumulativeTotalRevenueUsd
All revenue generated by the liquidity pool.
.PARAMETER DailyTotalRevenueUsd
Daily revenue generated by the liquidity pool.
.PARAMETER CumulativeVolumeUsd
All historical trade volume occurred in this pool, in USD.
.PARAMETER DailyVolumeUsd
All trade volume occurred in a given day, in USD.
.PARAMETER CumulativeVolumeByTokenAmount
All trade volume , in native amount. The ordering should be the same as the pool's `inputTokens` field.
.PARAMETER DailyVolumeByTokenAmount
All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field.
.PARAMETER CumulativeVolumeByTokenUsd
All trade volume, in USD. The ordering should be the same as the pool's `inputTokens` field.
.PARAMETER DailyVolumeByTokenUsd
 All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.
.PARAMETER InputTokenBalances
Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.
.PARAMETER InputTokenBalancesUsd
Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field.
.PARAMETER InputTokenWeights
Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
.PARAMETER StakedOutputTokenAmount
Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
.PARAMETER RewardTokenEmissionsAmount
Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
.PARAMETER RewardTokenEmissionsUsd
Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
.PARAMETER CumulativeDepositCount
Total number of deposits (add liquidity).
.PARAMETER DailyDepositCount
Total number of deposits (add liquidity) in a day.
.PARAMETER CumulativeWithdrawCount
Total number of withdrawals (remove liquidity).
.PARAMETER DailyWithdrawCount
Total number of withdrawals (remove liquidity) in a day.
.PARAMETER CumulativeSwapCount
Total number of trades (swaps).
.PARAMETER DailySwapCount
Total number of trades (swaps) in a day.
.PARAMETER PositionCount
Number of positions in this market.
.PARAMETER OpenPositionCount
Number of open positions in this market.
.PARAMETER ClosedPositionCount
Number of closed positions in this market.
.PARAMETER Timestamp
Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed).
.OUTPUTS

SUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO<PSCustomObject>
#>

function Initialize-SUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EntryTime},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RecvTime},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${BlockNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Block},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Day},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Protocol},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Pool},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Tick},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalValueLockedUsd},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalLiquidity},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TotalLiquidityUsd},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ActiveLiquidity},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ActiveLiquidityUsd},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${UncollectedProtocolSideTokenAmounts},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${UncollectedProtocolSideValuesUsd},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${UncollectedSupplySideTokenAmounts},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${UncollectedSupplySideValuesUsd},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CumulativeSupplySideRevenueUsd},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DailySupplySideRevenueUsd},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CumulativeProtocolSideRevenueUsd},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DailyProtocolSideRevenueUsd},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CumulativeTotalRevenueUsd},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DailyTotalRevenueUsd},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CumulativeVolumeUsd},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DailyVolumeUsd},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${CumulativeVolumeByTokenAmount},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${DailyVolumeByTokenAmount},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${CumulativeVolumeByTokenUsd},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${DailyVolumeByTokenUsd},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${InputTokenBalances},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${InputTokenBalancesUsd},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${InputTokenWeights},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StakedOutputTokenAmount},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${RewardTokenEmissionsAmount},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${RewardTokenEmissionsUsd},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CumulativeDepositCount},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DailyDepositCount},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CumulativeWithdrawCount},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DailyWithdrawCount},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CumulativeSwapCount},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DailySwapCount},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PositionCount},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${OpenPositionCount},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ClosedPositionCount},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Timestamp}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "block_" = ${Block}
            "id" = ${Id}
            "day" = ${Day}
            "protocol" = ${Protocol}
            "pool" = ${Pool}
            "tick" = ${Tick}
            "total_value_locked_usd" = ${TotalValueLockedUsd}
            "total_liquidity" = ${TotalLiquidity}
            "total_liquidity_usd" = ${TotalLiquidityUsd}
            "active_liquidity" = ${ActiveLiquidity}
            "active_liquidity_usd" = ${ActiveLiquidityUsd}
            "uncollected_protocol_side_token_amounts" = ${UncollectedProtocolSideTokenAmounts}
            "uncollected_protocol_side_values_usd" = ${UncollectedProtocolSideValuesUsd}
            "uncollected_supply_side_token_amounts" = ${UncollectedSupplySideTokenAmounts}
            "uncollected_supply_side_values_usd" = ${UncollectedSupplySideValuesUsd}
            "cumulative_supply_side_revenue_usd" = ${CumulativeSupplySideRevenueUsd}
            "daily_supply_side_revenue_usd" = ${DailySupplySideRevenueUsd}
            "cumulative_protocol_side_revenue_usd" = ${CumulativeProtocolSideRevenueUsd}
            "daily_protocol_side_revenue_usd" = ${DailyProtocolSideRevenueUsd}
            "cumulative_total_revenue_usd" = ${CumulativeTotalRevenueUsd}
            "daily_total_revenue_usd" = ${DailyTotalRevenueUsd}
            "cumulative_volume_usd" = ${CumulativeVolumeUsd}
            "daily_volume_usd" = ${DailyVolumeUsd}
            "cumulative_volume_by_token_amount" = ${CumulativeVolumeByTokenAmount}
            "daily_volume_by_token_amount" = ${DailyVolumeByTokenAmount}
            "cumulative_volume_by_token_usd" = ${CumulativeVolumeByTokenUsd}
            "daily_volume_by_token_usd" = ${DailyVolumeByTokenUsd}
            "input_token_balances" = ${InputTokenBalances}
            "input_token_balances_usd" = ${InputTokenBalancesUsd}
            "input_token_weights" = ${InputTokenWeights}
            "staked_output_token_amount" = ${StakedOutputTokenAmount}
            "reward_token_emissions_amount" = ${RewardTokenEmissionsAmount}
            "reward_token_emissions_usd" = ${RewardTokenEmissionsUsd}
            "cumulative_deposit_count" = ${CumulativeDepositCount}
            "daily_deposit_count" = ${DailyDepositCount}
            "cumulative_withdraw_count" = ${CumulativeWithdrawCount}
            "daily_withdraw_count" = ${DailyWithdrawCount}
            "cumulative_swap_count" = ${CumulativeSwapCount}
            "daily_swap_count" = ${DailySwapCount}
            "position_count" = ${PositionCount}
            "open_position_count" = ${OpenPositionCount}
            "closed_position_count" = ${ClosedPositionCount}
            "timestamp" = ${Timestamp}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO<PSCustomObject>

.DESCRIPTION

Convert from JSON to SUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO<PSCustomObject>
#>
function ConvertFrom-JsonToSUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
        $AllProperties = ("entry_time", "recv_time", "block_number", "block_", "id", "day", "protocol", "pool", "tick", "total_value_locked_usd", "total_liquidity", "total_liquidity_usd", "active_liquidity", "active_liquidity_usd", "uncollected_protocol_side_token_amounts", "uncollected_protocol_side_values_usd", "uncollected_supply_side_token_amounts", "uncollected_supply_side_values_usd", "cumulative_supply_side_revenue_usd", "daily_supply_side_revenue_usd", "cumulative_protocol_side_revenue_usd", "daily_protocol_side_revenue_usd", "cumulative_total_revenue_usd", "daily_total_revenue_usd", "cumulative_volume_usd", "daily_volume_usd", "cumulative_volume_by_token_amount", "daily_volume_by_token_amount", "cumulative_volume_by_token_usd", "daily_volume_by_token_usd", "input_token_balances", "input_token_balances_usd", "input_token_weights", "staked_output_token_amount", "reward_token_emissions_amount", "reward_token_emissions_usd", "cumulative_deposit_count", "daily_deposit_count", "cumulative_withdraw_count", "daily_withdraw_count", "cumulative_swap_count", "daily_swap_count", "position_count", "open_position_count", "closed_position_count", "timestamp")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entry_time"))) { #optional property not found
            $EntryTime = $null
        } else {
            $EntryTime = $JsonParameters.PSobject.Properties["entry_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recv_time"))) { #optional property not found
            $RecvTime = $null
        } else {
            $RecvTime = $JsonParameters.PSobject.Properties["recv_time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_number"))) { #optional property not found
            $BlockNumber = $null
        } else {
            $BlockNumber = $JsonParameters.PSobject.Properties["block_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "block_"))) { #optional property not found
            $Block = $null
        } else {
            $Block = $JsonParameters.PSobject.Properties["block_"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "day"))) { #optional property not found
            $Day = $null
        } else {
            $Day = $JsonParameters.PSobject.Properties["day"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "protocol"))) { #optional property not found
            $Protocol = $null
        } else {
            $Protocol = $JsonParameters.PSobject.Properties["protocol"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pool"))) { #optional property not found
            $Pool = $null
        } else {
            $Pool = $JsonParameters.PSobject.Properties["pool"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tick"))) { #optional property not found
            $Tick = $null
        } else {
            $Tick = $JsonParameters.PSobject.Properties["tick"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_value_locked_usd"))) { #optional property not found
            $TotalValueLockedUsd = $null
        } else {
            $TotalValueLockedUsd = $JsonParameters.PSobject.Properties["total_value_locked_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_liquidity"))) { #optional property not found
            $TotalLiquidity = $null
        } else {
            $TotalLiquidity = $JsonParameters.PSobject.Properties["total_liquidity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "total_liquidity_usd"))) { #optional property not found
            $TotalLiquidityUsd = $null
        } else {
            $TotalLiquidityUsd = $JsonParameters.PSobject.Properties["total_liquidity_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "active_liquidity"))) { #optional property not found
            $ActiveLiquidity = $null
        } else {
            $ActiveLiquidity = $JsonParameters.PSobject.Properties["active_liquidity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "active_liquidity_usd"))) { #optional property not found
            $ActiveLiquidityUsd = $null
        } else {
            $ActiveLiquidityUsd = $JsonParameters.PSobject.Properties["active_liquidity_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uncollected_protocol_side_token_amounts"))) { #optional property not found
            $UncollectedProtocolSideTokenAmounts = $null
        } else {
            $UncollectedProtocolSideTokenAmounts = $JsonParameters.PSobject.Properties["uncollected_protocol_side_token_amounts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uncollected_protocol_side_values_usd"))) { #optional property not found
            $UncollectedProtocolSideValuesUsd = $null
        } else {
            $UncollectedProtocolSideValuesUsd = $JsonParameters.PSobject.Properties["uncollected_protocol_side_values_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uncollected_supply_side_token_amounts"))) { #optional property not found
            $UncollectedSupplySideTokenAmounts = $null
        } else {
            $UncollectedSupplySideTokenAmounts = $JsonParameters.PSobject.Properties["uncollected_supply_side_token_amounts"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "uncollected_supply_side_values_usd"))) { #optional property not found
            $UncollectedSupplySideValuesUsd = $null
        } else {
            $UncollectedSupplySideValuesUsd = $JsonParameters.PSobject.Properties["uncollected_supply_side_values_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_supply_side_revenue_usd"))) { #optional property not found
            $CumulativeSupplySideRevenueUsd = $null
        } else {
            $CumulativeSupplySideRevenueUsd = $JsonParameters.PSobject.Properties["cumulative_supply_side_revenue_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "daily_supply_side_revenue_usd"))) { #optional property not found
            $DailySupplySideRevenueUsd = $null
        } else {
            $DailySupplySideRevenueUsd = $JsonParameters.PSobject.Properties["daily_supply_side_revenue_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_protocol_side_revenue_usd"))) { #optional property not found
            $CumulativeProtocolSideRevenueUsd = $null
        } else {
            $CumulativeProtocolSideRevenueUsd = $JsonParameters.PSobject.Properties["cumulative_protocol_side_revenue_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "daily_protocol_side_revenue_usd"))) { #optional property not found
            $DailyProtocolSideRevenueUsd = $null
        } else {
            $DailyProtocolSideRevenueUsd = $JsonParameters.PSobject.Properties["daily_protocol_side_revenue_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_total_revenue_usd"))) { #optional property not found
            $CumulativeTotalRevenueUsd = $null
        } else {
            $CumulativeTotalRevenueUsd = $JsonParameters.PSobject.Properties["cumulative_total_revenue_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "daily_total_revenue_usd"))) { #optional property not found
            $DailyTotalRevenueUsd = $null
        } else {
            $DailyTotalRevenueUsd = $JsonParameters.PSobject.Properties["daily_total_revenue_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_volume_usd"))) { #optional property not found
            $CumulativeVolumeUsd = $null
        } else {
            $CumulativeVolumeUsd = $JsonParameters.PSobject.Properties["cumulative_volume_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "daily_volume_usd"))) { #optional property not found
            $DailyVolumeUsd = $null
        } else {
            $DailyVolumeUsd = $JsonParameters.PSobject.Properties["daily_volume_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_volume_by_token_amount"))) { #optional property not found
            $CumulativeVolumeByTokenAmount = $null
        } else {
            $CumulativeVolumeByTokenAmount = $JsonParameters.PSobject.Properties["cumulative_volume_by_token_amount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "daily_volume_by_token_amount"))) { #optional property not found
            $DailyVolumeByTokenAmount = $null
        } else {
            $DailyVolumeByTokenAmount = $JsonParameters.PSobject.Properties["daily_volume_by_token_amount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_volume_by_token_usd"))) { #optional property not found
            $CumulativeVolumeByTokenUsd = $null
        } else {
            $CumulativeVolumeByTokenUsd = $JsonParameters.PSobject.Properties["cumulative_volume_by_token_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "daily_volume_by_token_usd"))) { #optional property not found
            $DailyVolumeByTokenUsd = $null
        } else {
            $DailyVolumeByTokenUsd = $JsonParameters.PSobject.Properties["daily_volume_by_token_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "input_token_balances"))) { #optional property not found
            $InputTokenBalances = $null
        } else {
            $InputTokenBalances = $JsonParameters.PSobject.Properties["input_token_balances"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "input_token_balances_usd"))) { #optional property not found
            $InputTokenBalancesUsd = $null
        } else {
            $InputTokenBalancesUsd = $JsonParameters.PSobject.Properties["input_token_balances_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "input_token_weights"))) { #optional property not found
            $InputTokenWeights = $null
        } else {
            $InputTokenWeights = $JsonParameters.PSobject.Properties["input_token_weights"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "staked_output_token_amount"))) { #optional property not found
            $StakedOutputTokenAmount = $null
        } else {
            $StakedOutputTokenAmount = $JsonParameters.PSobject.Properties["staked_output_token_amount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reward_token_emissions_amount"))) { #optional property not found
            $RewardTokenEmissionsAmount = $null
        } else {
            $RewardTokenEmissionsAmount = $JsonParameters.PSobject.Properties["reward_token_emissions_amount"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reward_token_emissions_usd"))) { #optional property not found
            $RewardTokenEmissionsUsd = $null
        } else {
            $RewardTokenEmissionsUsd = $JsonParameters.PSobject.Properties["reward_token_emissions_usd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_deposit_count"))) { #optional property not found
            $CumulativeDepositCount = $null
        } else {
            $CumulativeDepositCount = $JsonParameters.PSobject.Properties["cumulative_deposit_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "daily_deposit_count"))) { #optional property not found
            $DailyDepositCount = $null
        } else {
            $DailyDepositCount = $JsonParameters.PSobject.Properties["daily_deposit_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_withdraw_count"))) { #optional property not found
            $CumulativeWithdrawCount = $null
        } else {
            $CumulativeWithdrawCount = $JsonParameters.PSobject.Properties["cumulative_withdraw_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "daily_withdraw_count"))) { #optional property not found
            $DailyWithdrawCount = $null
        } else {
            $DailyWithdrawCount = $JsonParameters.PSobject.Properties["daily_withdraw_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cumulative_swap_count"))) { #optional property not found
            $CumulativeSwapCount = $null
        } else {
            $CumulativeSwapCount = $JsonParameters.PSobject.Properties["cumulative_swap_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "daily_swap_count"))) { #optional property not found
            $DailySwapCount = $null
        } else {
            $DailySwapCount = $JsonParameters.PSobject.Properties["daily_swap_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "position_count"))) { #optional property not found
            $PositionCount = $null
        } else {
            $PositionCount = $JsonParameters.PSobject.Properties["position_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "open_position_count"))) { #optional property not found
            $OpenPositionCount = $null
        } else {
            $OpenPositionCount = $JsonParameters.PSobject.Properties["open_position_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "closed_position_count"))) { #optional property not found
            $ClosedPositionCount = $null
        } else {
            $ClosedPositionCount = $JsonParameters.PSobject.Properties["closed_position_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        $PSO = [PSCustomObject]@{
            "entry_time" = ${EntryTime}
            "recv_time" = ${RecvTime}
            "block_number" = ${BlockNumber}
            "block_" = ${Block}
            "id" = ${Id}
            "day" = ${Day}
            "protocol" = ${Protocol}
            "pool" = ${Pool}
            "tick" = ${Tick}
            "total_value_locked_usd" = ${TotalValueLockedUsd}
            "total_liquidity" = ${TotalLiquidity}
            "total_liquidity_usd" = ${TotalLiquidityUsd}
            "active_liquidity" = ${ActiveLiquidity}
            "active_liquidity_usd" = ${ActiveLiquidityUsd}
            "uncollected_protocol_side_token_amounts" = ${UncollectedProtocolSideTokenAmounts}
            "uncollected_protocol_side_values_usd" = ${UncollectedProtocolSideValuesUsd}
            "uncollected_supply_side_token_amounts" = ${UncollectedSupplySideTokenAmounts}
            "uncollected_supply_side_values_usd" = ${UncollectedSupplySideValuesUsd}
            "cumulative_supply_side_revenue_usd" = ${CumulativeSupplySideRevenueUsd}
            "daily_supply_side_revenue_usd" = ${DailySupplySideRevenueUsd}
            "cumulative_protocol_side_revenue_usd" = ${CumulativeProtocolSideRevenueUsd}
            "daily_protocol_side_revenue_usd" = ${DailyProtocolSideRevenueUsd}
            "cumulative_total_revenue_usd" = ${CumulativeTotalRevenueUsd}
            "daily_total_revenue_usd" = ${DailyTotalRevenueUsd}
            "cumulative_volume_usd" = ${CumulativeVolumeUsd}
            "daily_volume_usd" = ${DailyVolumeUsd}
            "cumulative_volume_by_token_amount" = ${CumulativeVolumeByTokenAmount}
            "daily_volume_by_token_amount" = ${DailyVolumeByTokenAmount}
            "cumulative_volume_by_token_usd" = ${CumulativeVolumeByTokenUsd}
            "daily_volume_by_token_usd" = ${DailyVolumeByTokenUsd}
            "input_token_balances" = ${InputTokenBalances}
            "input_token_balances_usd" = ${InputTokenBalancesUsd}
            "input_token_weights" = ${InputTokenWeights}
            "staked_output_token_amount" = ${StakedOutputTokenAmount}
            "reward_token_emissions_amount" = ${RewardTokenEmissionsAmount}
            "reward_token_emissions_usd" = ${RewardTokenEmissionsUsd}
            "cumulative_deposit_count" = ${CumulativeDepositCount}
            "daily_deposit_count" = ${DailyDepositCount}
            "cumulative_withdraw_count" = ${CumulativeWithdrawCount}
            "daily_withdraw_count" = ${DailyWithdrawCount}
            "cumulative_swap_count" = ${CumulativeSwapCount}
            "daily_swap_count" = ${DailySwapCount}
            "position_count" = ${PositionCount}
            "open_position_count" = ${OpenPositionCount}
            "closed_position_count" = ${ClosedPositionCount}
            "timestamp" = ${Timestamp}
        }

        return $PSO
    }

}

