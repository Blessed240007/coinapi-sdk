=begin
#On Chain Dapps - REST API

# This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

The version of the OpenAPI document: v1
Contact: support@coinapi.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module OpenapiClient
  class CRYPTOPUNKSApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Bids (current)
    # Gets bids.
    # @param [Hash] opts the optional parameters
    # @return [Array<CRYPTOPUNKSBidDTO>]
    def c_ryptopunks_bids__current(opts = {})
      data, _status_code, _headers = c_ryptopunks_bids__current_with_http_info(opts)
      data
    end

    # Bids (current)
    # Gets bids.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CRYPTOPUNKSBidDTO>, Integer, Hash)>] Array<CRYPTOPUNKSBidDTO> data, response status code and response headers
    def c_ryptopunks_bids__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CRYPTOPUNKSApi.c_ryptopunks_bids__current ...'
      end
      # resource path
      local_var_path = '/dapps/cryptopunks/bids/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CRYPTOPUNKSBidDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CRYPTOPUNKSApi.c_ryptopunks_bids__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CRYPTOPUNKSApi#c_ryptopunks_bids__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # CollectionDailySnapshots (current)
    # Gets collectionDailySnapshots.
    # @param [Hash] opts the optional parameters
    # @return [Array<CRYPTOPUNKSCollectionDailySnapshotDTO>]
    def c_ryptopunks_collection_daily_snapshots__current(opts = {})
      data, _status_code, _headers = c_ryptopunks_collection_daily_snapshots__current_with_http_info(opts)
      data
    end

    # CollectionDailySnapshots (current)
    # Gets collectionDailySnapshots.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CRYPTOPUNKSCollectionDailySnapshotDTO>, Integer, Hash)>] Array<CRYPTOPUNKSCollectionDailySnapshotDTO> data, response status code and response headers
    def c_ryptopunks_collection_daily_snapshots__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CRYPTOPUNKSApi.c_ryptopunks_collection_daily_snapshots__current ...'
      end
      # resource path
      local_var_path = '/dapps/cryptopunks/collectionDailySnapshots/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CRYPTOPUNKSCollectionDailySnapshotDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CRYPTOPUNKSApi.c_ryptopunks_collection_daily_snapshots__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CRYPTOPUNKSApi#c_ryptopunks_collection_daily_snapshots__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Collections (current)
    # Gets collections.
    # @param [Hash] opts the optional parameters
    # @return [Array<CRYPTOPUNKSCollectionDTO>]
    def c_ryptopunks_collections__current(opts = {})
      data, _status_code, _headers = c_ryptopunks_collections__current_with_http_info(opts)
      data
    end

    # Collections (current)
    # Gets collections.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CRYPTOPUNKSCollectionDTO>, Integer, Hash)>] Array<CRYPTOPUNKSCollectionDTO> data, response status code and response headers
    def c_ryptopunks_collections__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CRYPTOPUNKSApi.c_ryptopunks_collections__current ...'
      end
      # resource path
      local_var_path = '/dapps/cryptopunks/collections/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CRYPTOPUNKSCollectionDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CRYPTOPUNKSApi.c_ryptopunks_collections__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CRYPTOPUNKSApi#c_ryptopunks_collections__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # DataSources (current)
    # Gets dataSources.
    # @param [Hash] opts the optional parameters
    # @return [Array<CRYPTOPUNKSDataSourcesDTO>]
    def c_ryptopunks_data_sources__current(opts = {})
      data, _status_code, _headers = c_ryptopunks_data_sources__current_with_http_info(opts)
      data
    end

    # DataSources (current)
    # Gets dataSources.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CRYPTOPUNKSDataSourcesDTO>, Integer, Hash)>] Array<CRYPTOPUNKSDataSourcesDTO> data, response status code and response headers
    def c_ryptopunks_data_sources__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CRYPTOPUNKSApi.c_ryptopunks_data_sources__current ...'
      end
      # resource path
      local_var_path = '/dapps/cryptopunks/dataSources/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CRYPTOPUNKSDataSourcesDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CRYPTOPUNKSApi.c_ryptopunks_data_sources__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CRYPTOPUNKSApi#c_ryptopunks_data_sources__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Items (current)
    # Gets items.
    # @param [Hash] opts the optional parameters
    # @return [Array<CRYPTOPUNKSItemDTO>]
    def c_ryptopunks_items__current(opts = {})
      data, _status_code, _headers = c_ryptopunks_items__current_with_http_info(opts)
      data
    end

    # Items (current)
    # Gets items.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CRYPTOPUNKSItemDTO>, Integer, Hash)>] Array<CRYPTOPUNKSItemDTO> data, response status code and response headers
    def c_ryptopunks_items__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CRYPTOPUNKSApi.c_ryptopunks_items__current ...'
      end
      # resource path
      local_var_path = '/dapps/cryptopunks/items/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CRYPTOPUNKSItemDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CRYPTOPUNKSApi.c_ryptopunks_items__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CRYPTOPUNKSApi#c_ryptopunks_items__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # MarketPlaces (current)
    # Gets marketPlaces.
    # @param [Hash] opts the optional parameters
    # @return [Array<CRYPTOPUNKSMarketPlaceDTO>]
    def c_ryptopunks_market_places__current(opts = {})
      data, _status_code, _headers = c_ryptopunks_market_places__current_with_http_info(opts)
      data
    end

    # MarketPlaces (current)
    # Gets marketPlaces.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CRYPTOPUNKSMarketPlaceDTO>, Integer, Hash)>] Array<CRYPTOPUNKSMarketPlaceDTO> data, response status code and response headers
    def c_ryptopunks_market_places__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CRYPTOPUNKSApi.c_ryptopunks_market_places__current ...'
      end
      # resource path
      local_var_path = '/dapps/cryptopunks/marketPlaces/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CRYPTOPUNKSMarketPlaceDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CRYPTOPUNKSApi.c_ryptopunks_market_places__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CRYPTOPUNKSApi#c_ryptopunks_market_places__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # MarketplaceDailySnapshots (current)
    # Gets marketplaceDailySnapshots.
    # @param [Hash] opts the optional parameters
    # @return [Array<CRYPTOPUNKSMarketplaceDailySnapshotDTO>]
    def c_ryptopunks_marketplace_daily_snapshots__current(opts = {})
      data, _status_code, _headers = c_ryptopunks_marketplace_daily_snapshots__current_with_http_info(opts)
      data
    end

    # MarketplaceDailySnapshots (current)
    # Gets marketplaceDailySnapshots.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CRYPTOPUNKSMarketplaceDailySnapshotDTO>, Integer, Hash)>] Array<CRYPTOPUNKSMarketplaceDailySnapshotDTO> data, response status code and response headers
    def c_ryptopunks_marketplace_daily_snapshots__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CRYPTOPUNKSApi.c_ryptopunks_marketplace_daily_snapshots__current ...'
      end
      # resource path
      local_var_path = '/dapps/cryptopunks/marketplaceDailySnapshots/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CRYPTOPUNKSMarketplaceDailySnapshotDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CRYPTOPUNKSApi.c_ryptopunks_marketplace_daily_snapshots__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CRYPTOPUNKSApi#c_ryptopunks_marketplace_daily_snapshots__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Trades (current)
    # Gets trades.
    # @param [Hash] opts the optional parameters
    # @return [Array<CRYPTOPUNKSTradeDTO>]
    def c_ryptopunks_trades__current(opts = {})
      data, _status_code, _headers = c_ryptopunks_trades__current_with_http_info(opts)
      data
    end

    # Trades (current)
    # Gets trades.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CRYPTOPUNKSTradeDTO>, Integer, Hash)>] Array<CRYPTOPUNKSTradeDTO> data, response status code and response headers
    def c_ryptopunks_trades__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CRYPTOPUNKSApi.c_ryptopunks_trades__current ...'
      end
      # resource path
      local_var_path = '/dapps/cryptopunks/trades/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CRYPTOPUNKSTradeDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CRYPTOPUNKSApi.c_ryptopunks_trades__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CRYPTOPUNKSApi#c_ryptopunks_trades__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Users (current)
    # Gets users.
    # @param [Hash] opts the optional parameters
    # @return [Array<CRYPTOPUNKSUserDTO>]
    def c_ryptopunks_users__current(opts = {})
      data, _status_code, _headers = c_ryptopunks_users__current_with_http_info(opts)
      data
    end

    # Users (current)
    # Gets users.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CRYPTOPUNKSUserDTO>, Integer, Hash)>] Array<CRYPTOPUNKSUserDTO> data, response status code and response headers
    def c_ryptopunks_users__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CRYPTOPUNKSApi.c_ryptopunks_users__current ...'
      end
      # resource path
      local_var_path = '/dapps/cryptopunks/users/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CRYPTOPUNKSUserDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CRYPTOPUNKSApi.c_ryptopunks_users__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CRYPTOPUNKSApi#c_ryptopunks_users__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
