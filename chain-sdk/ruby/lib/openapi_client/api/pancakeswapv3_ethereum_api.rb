=begin
#On Chain Dapps - REST API

# This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

The version of the OpenAPI document: v1
Contact: support@coinapi.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module OpenapiClient
  class PANCAKESWAPV3ETHEREUMApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # LiquidityPools (current)
    # Gets liquidityPools.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Smart contract address of the pool.
    # @return [Array<PANCAKESWAPV3ETHEREUMLiquidityPoolDTO>]
    def p_ancakeswapv3_ethereum_liquidity_pools__current(opts = {})
      data, _status_code, _headers = p_ancakeswapv3_ethereum_liquidity_pools__current_with_http_info(opts)
      data
    end

    # LiquidityPools (current)
    # Gets liquidityPools.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Smart contract address of the pool.
    # @return [Array<(Array<PANCAKESWAPV3ETHEREUMLiquidityPoolDTO>, Integer, Hash)>] Array<PANCAKESWAPV3ETHEREUMLiquidityPoolDTO> data, response status code and response headers
    def p_ancakeswapv3_ethereum_liquidity_pools__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PANCAKESWAPV3ETHEREUMApi.p_ancakeswapv3_ethereum_liquidity_pools__current ...'
      end
      # resource path
      local_var_path = '/v1/dapps/pancakeswap-v3-ethereum/liquidityPools/current'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json', 'application/x-msgpack'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PANCAKESWAPV3ETHEREUMLiquidityPoolDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PANCAKESWAPV3ETHEREUMApi.p_ancakeswapv3_ethereum_liquidity_pools__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PANCAKESWAPV3ETHEREUMApi#p_ancakeswapv3_ethereum_liquidity_pools__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Swaps (current)
    # Gets swaps.
    # @param [Hash] opts the optional parameters
    # @return [Array<PANCAKESWAPV3ETHEREUMSwapDTO>]
    def p_ancakeswapv3_ethereum_swaps__current(opts = {})
      data, _status_code, _headers = p_ancakeswapv3_ethereum_swaps__current_with_http_info(opts)
      data
    end

    # Swaps (current)
    # Gets swaps.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PANCAKESWAPV3ETHEREUMSwapDTO>, Integer, Hash)>] Array<PANCAKESWAPV3ETHEREUMSwapDTO> data, response status code and response headers
    def p_ancakeswapv3_ethereum_swaps__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PANCAKESWAPV3ETHEREUMApi.p_ancakeswapv3_ethereum_swaps__current ...'
      end
      # resource path
      local_var_path = '/v1/dapps/pancakeswap-v3-ethereum/swaps/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json', 'application/x-msgpack'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PANCAKESWAPV3ETHEREUMSwapDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PANCAKESWAPV3ETHEREUMApi.p_ancakeswapv3_ethereum_swaps__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PANCAKESWAPV3ETHEREUMApi#p_ancakeswapv3_ethereum_swaps__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Tokens (current)
    # Gets tokens.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Smart contract address of the token.
    # @return [Array<PANCAKESWAPV3ETHEREUMTokenDTO>]
    def p_ancakeswapv3_ethereum_tokens__current(opts = {})
      data, _status_code, _headers = p_ancakeswapv3_ethereum_tokens__current_with_http_info(opts)
      data
    end

    # Tokens (current)
    # Gets tokens.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Smart contract address of the token.
    # @return [Array<(Array<PANCAKESWAPV3ETHEREUMTokenDTO>, Integer, Hash)>] Array<PANCAKESWAPV3ETHEREUMTokenDTO> data, response status code and response headers
    def p_ancakeswapv3_ethereum_tokens__current_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PANCAKESWAPV3ETHEREUMApi.p_ancakeswapv3_ethereum_tokens__current ...'
      end
      # resource path
      local_var_path = '/v1/dapps/pancakeswap-v3-ethereum/tokens/current'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json', 'application/x-msgpack'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PANCAKESWAPV3ETHEREUMTokenDTO>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"PANCAKESWAPV3ETHEREUMApi.p_ancakeswapv3_ethereum_tokens__current",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PANCAKESWAPV3ETHEREUMApi#p_ancakeswapv3_ethereum_tokens__current\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
