/*
On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the UNISWAPV2ETHEREUMMasterChefRewarderDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UNISWAPV2ETHEREUMMasterChefRewarderDTO{}

// UNISWAPV2ETHEREUMMasterChefRewarderDTO 
type UNISWAPV2ETHEREUMMasterChefRewarderDTO struct {
	EntryTime *time.Time `json:"entry_time,omitempty"`
	RecvTime *time.Time `json:"recv_time,omitempty"`
	// Number of block in which entity was recorded.
	BlockNumber *int64 `json:"block_number,omitempty"`
	// 
	BlockRange NullableString `json:"block_range,omitempty"`
	// Address of the rewarder contract associated to some staking pool
	Id NullableString `json:"id,omitempty"`
	// Staking pool to which this rewarder is associated
	Pool NullableString `json:"pool,omitempty"`
	// Address of the token given by this rewarder
	RewardToken NullableString `json:"reward_token,omitempty"`
	// Number of tokens rewarded per second per LP staked in pool by this rewarder
	TokenPerSec NullableString `json:"token_per_sec,omitempty"`
	// Timestamp from the last time tokenPerSec was calculated
	RateCalculatedAt NullableString `json:"rate_calculated_at,omitempty"`
	// A field to keep track if there are any funds to give away in the rewarder
	HasFunds NullableBool `json:"has_funds,omitempty"`
	// When it was last checked that there were funds in the rewarder
	HasFundsAt NullableString `json:"has_funds_at,omitempty"`
	// If true it means the rewardRate can be retrieved directly from the contract, without crazy math
	CanRetrieveRate *bool `json:"can_retrieve_rate,omitempty"`
	// Utility field to calculate the rewarder reward rate
	RewardRateCalculationInProgress *bool `json:"reward_rate_calculation_in_progress,omitempty"`
	// 
	Probes []string `json:"probes,omitempty"`
}

// NewUNISWAPV2ETHEREUMMasterChefRewarderDTO instantiates a new UNISWAPV2ETHEREUMMasterChefRewarderDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUNISWAPV2ETHEREUMMasterChefRewarderDTO() *UNISWAPV2ETHEREUMMasterChefRewarderDTO {
	this := UNISWAPV2ETHEREUMMasterChefRewarderDTO{}
	return &this
}

// NewUNISWAPV2ETHEREUMMasterChefRewarderDTOWithDefaults instantiates a new UNISWAPV2ETHEREUMMasterChefRewarderDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUNISWAPV2ETHEREUMMasterChefRewarderDTOWithDefaults() *UNISWAPV2ETHEREUMMasterChefRewarderDTO {
	this := UNISWAPV2ETHEREUMMasterChefRewarderDTO{}
	return &this
}

// GetEntryTime returns the EntryTime field value if set, zero value otherwise.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetEntryTime() time.Time {
	if o == nil || IsNil(o.EntryTime) {
		var ret time.Time
		return ret
	}
	return *o.EntryTime
}

// GetEntryTimeOk returns a tuple with the EntryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetEntryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EntryTime) {
		return nil, false
	}
	return o.EntryTime, true
}

// HasEntryTime returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) HasEntryTime() bool {
	if o != nil && !IsNil(o.EntryTime) {
		return true
	}

	return false
}

// SetEntryTime gets a reference to the given time.Time and assigns it to the EntryTime field.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) SetEntryTime(v time.Time) {
	o.EntryTime = &v
}

// GetRecvTime returns the RecvTime field value if set, zero value otherwise.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetRecvTime() time.Time {
	if o == nil || IsNil(o.RecvTime) {
		var ret time.Time
		return ret
	}
	return *o.RecvTime
}

// GetRecvTimeOk returns a tuple with the RecvTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetRecvTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecvTime) {
		return nil, false
	}
	return o.RecvTime, true
}

// HasRecvTime returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) HasRecvTime() bool {
	if o != nil && !IsNil(o.RecvTime) {
		return true
	}

	return false
}

// SetRecvTime gets a reference to the given time.Time and assigns it to the RecvTime field.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) SetRecvTime(v time.Time) {
	o.RecvTime = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber) {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetBlockNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetBlockRange returns the BlockRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetBlockRange() string {
	if o == nil || IsNil(o.BlockRange.Get()) {
		var ret string
		return ret
	}
	return *o.BlockRange.Get()
}

// GetBlockRangeOk returns a tuple with the BlockRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetBlockRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockRange.Get(), o.BlockRange.IsSet()
}

// HasBlockRange returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) HasBlockRange() bool {
	if o != nil && o.BlockRange.IsSet() {
		return true
	}

	return false
}

// SetBlockRange gets a reference to the given NullableString and assigns it to the BlockRange field.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) SetBlockRange(v string) {
	o.BlockRange.Set(&v)
}
// SetBlockRangeNil sets the value for BlockRange to be an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) SetBlockRangeNil() {
	o.BlockRange.Set(nil)
}

// UnsetBlockRange ensures that no value is present for BlockRange, not even an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) UnsetBlockRange() {
	o.BlockRange.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) UnsetId() {
	o.Id.Unset()
}

// GetPool returns the Pool field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetPool() string {
	if o == nil || IsNil(o.Pool.Get()) {
		var ret string
		return ret
	}
	return *o.Pool.Get()
}

// GetPoolOk returns a tuple with the Pool field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetPoolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pool.Get(), o.Pool.IsSet()
}

// HasPool returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) HasPool() bool {
	if o != nil && o.Pool.IsSet() {
		return true
	}

	return false
}

// SetPool gets a reference to the given NullableString and assigns it to the Pool field.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) SetPool(v string) {
	o.Pool.Set(&v)
}
// SetPoolNil sets the value for Pool to be an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) SetPoolNil() {
	o.Pool.Set(nil)
}

// UnsetPool ensures that no value is present for Pool, not even an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) UnsetPool() {
	o.Pool.Unset()
}

// GetRewardToken returns the RewardToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetRewardToken() string {
	if o == nil || IsNil(o.RewardToken.Get()) {
		var ret string
		return ret
	}
	return *o.RewardToken.Get()
}

// GetRewardTokenOk returns a tuple with the RewardToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetRewardTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RewardToken.Get(), o.RewardToken.IsSet()
}

// HasRewardToken returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) HasRewardToken() bool {
	if o != nil && o.RewardToken.IsSet() {
		return true
	}

	return false
}

// SetRewardToken gets a reference to the given NullableString and assigns it to the RewardToken field.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) SetRewardToken(v string) {
	o.RewardToken.Set(&v)
}
// SetRewardTokenNil sets the value for RewardToken to be an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) SetRewardTokenNil() {
	o.RewardToken.Set(nil)
}

// UnsetRewardToken ensures that no value is present for RewardToken, not even an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) UnsetRewardToken() {
	o.RewardToken.Unset()
}

// GetTokenPerSec returns the TokenPerSec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetTokenPerSec() string {
	if o == nil || IsNil(o.TokenPerSec.Get()) {
		var ret string
		return ret
	}
	return *o.TokenPerSec.Get()
}

// GetTokenPerSecOk returns a tuple with the TokenPerSec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetTokenPerSecOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TokenPerSec.Get(), o.TokenPerSec.IsSet()
}

// HasTokenPerSec returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) HasTokenPerSec() bool {
	if o != nil && o.TokenPerSec.IsSet() {
		return true
	}

	return false
}

// SetTokenPerSec gets a reference to the given NullableString and assigns it to the TokenPerSec field.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) SetTokenPerSec(v string) {
	o.TokenPerSec.Set(&v)
}
// SetTokenPerSecNil sets the value for TokenPerSec to be an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) SetTokenPerSecNil() {
	o.TokenPerSec.Set(nil)
}

// UnsetTokenPerSec ensures that no value is present for TokenPerSec, not even an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) UnsetTokenPerSec() {
	o.TokenPerSec.Unset()
}

// GetRateCalculatedAt returns the RateCalculatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetRateCalculatedAt() string {
	if o == nil || IsNil(o.RateCalculatedAt.Get()) {
		var ret string
		return ret
	}
	return *o.RateCalculatedAt.Get()
}

// GetRateCalculatedAtOk returns a tuple with the RateCalculatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetRateCalculatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RateCalculatedAt.Get(), o.RateCalculatedAt.IsSet()
}

// HasRateCalculatedAt returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) HasRateCalculatedAt() bool {
	if o != nil && o.RateCalculatedAt.IsSet() {
		return true
	}

	return false
}

// SetRateCalculatedAt gets a reference to the given NullableString and assigns it to the RateCalculatedAt field.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) SetRateCalculatedAt(v string) {
	o.RateCalculatedAt.Set(&v)
}
// SetRateCalculatedAtNil sets the value for RateCalculatedAt to be an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) SetRateCalculatedAtNil() {
	o.RateCalculatedAt.Set(nil)
}

// UnsetRateCalculatedAt ensures that no value is present for RateCalculatedAt, not even an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) UnsetRateCalculatedAt() {
	o.RateCalculatedAt.Unset()
}

// GetHasFunds returns the HasFunds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetHasFunds() bool {
	if o == nil || IsNil(o.HasFunds.Get()) {
		var ret bool
		return ret
	}
	return *o.HasFunds.Get()
}

// GetHasFundsOk returns a tuple with the HasFunds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetHasFundsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HasFunds.Get(), o.HasFunds.IsSet()
}

// HasHasFunds returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) HasHasFunds() bool {
	if o != nil && o.HasFunds.IsSet() {
		return true
	}

	return false
}

// SetHasFunds gets a reference to the given NullableBool and assigns it to the HasFunds field.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) SetHasFunds(v bool) {
	o.HasFunds.Set(&v)
}
// SetHasFundsNil sets the value for HasFunds to be an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) SetHasFundsNil() {
	o.HasFunds.Set(nil)
}

// UnsetHasFunds ensures that no value is present for HasFunds, not even an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) UnsetHasFunds() {
	o.HasFunds.Unset()
}

// GetHasFundsAt returns the HasFundsAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetHasFundsAt() string {
	if o == nil || IsNil(o.HasFundsAt.Get()) {
		var ret string
		return ret
	}
	return *o.HasFundsAt.Get()
}

// GetHasFundsAtOk returns a tuple with the HasFundsAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetHasFundsAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HasFundsAt.Get(), o.HasFundsAt.IsSet()
}

// HasHasFundsAt returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) HasHasFundsAt() bool {
	if o != nil && o.HasFundsAt.IsSet() {
		return true
	}

	return false
}

// SetHasFundsAt gets a reference to the given NullableString and assigns it to the HasFundsAt field.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) SetHasFundsAt(v string) {
	o.HasFundsAt.Set(&v)
}
// SetHasFundsAtNil sets the value for HasFundsAt to be an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) SetHasFundsAtNil() {
	o.HasFundsAt.Set(nil)
}

// UnsetHasFundsAt ensures that no value is present for HasFundsAt, not even an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) UnsetHasFundsAt() {
	o.HasFundsAt.Unset()
}

// GetCanRetrieveRate returns the CanRetrieveRate field value if set, zero value otherwise.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetCanRetrieveRate() bool {
	if o == nil || IsNil(o.CanRetrieveRate) {
		var ret bool
		return ret
	}
	return *o.CanRetrieveRate
}

// GetCanRetrieveRateOk returns a tuple with the CanRetrieveRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetCanRetrieveRateOk() (*bool, bool) {
	if o == nil || IsNil(o.CanRetrieveRate) {
		return nil, false
	}
	return o.CanRetrieveRate, true
}

// HasCanRetrieveRate returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) HasCanRetrieveRate() bool {
	if o != nil && !IsNil(o.CanRetrieveRate) {
		return true
	}

	return false
}

// SetCanRetrieveRate gets a reference to the given bool and assigns it to the CanRetrieveRate field.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) SetCanRetrieveRate(v bool) {
	o.CanRetrieveRate = &v
}

// GetRewardRateCalculationInProgress returns the RewardRateCalculationInProgress field value if set, zero value otherwise.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetRewardRateCalculationInProgress() bool {
	if o == nil || IsNil(o.RewardRateCalculationInProgress) {
		var ret bool
		return ret
	}
	return *o.RewardRateCalculationInProgress
}

// GetRewardRateCalculationInProgressOk returns a tuple with the RewardRateCalculationInProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetRewardRateCalculationInProgressOk() (*bool, bool) {
	if o == nil || IsNil(o.RewardRateCalculationInProgress) {
		return nil, false
	}
	return o.RewardRateCalculationInProgress, true
}

// HasRewardRateCalculationInProgress returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) HasRewardRateCalculationInProgress() bool {
	if o != nil && !IsNil(o.RewardRateCalculationInProgress) {
		return true
	}

	return false
}

// SetRewardRateCalculationInProgress gets a reference to the given bool and assigns it to the RewardRateCalculationInProgress field.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) SetRewardRateCalculationInProgress(v bool) {
	o.RewardRateCalculationInProgress = &v
}

// GetProbes returns the Probes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetProbes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Probes
}

// GetProbesOk returns a tuple with the Probes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) GetProbesOk() ([]string, bool) {
	if o == nil || IsNil(o.Probes) {
		return nil, false
	}
	return o.Probes, true
}

// HasProbes returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) HasProbes() bool {
	if o != nil && IsNil(o.Probes) {
		return true
	}

	return false
}

// SetProbes gets a reference to the given []string and assigns it to the Probes field.
func (o *UNISWAPV2ETHEREUMMasterChefRewarderDTO) SetProbes(v []string) {
	o.Probes = v
}

func (o UNISWAPV2ETHEREUMMasterChefRewarderDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UNISWAPV2ETHEREUMMasterChefRewarderDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryTime) {
		toSerialize["entry_time"] = o.EntryTime
	}
	if !IsNil(o.RecvTime) {
		toSerialize["recv_time"] = o.RecvTime
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["block_number"] = o.BlockNumber
	}
	if o.BlockRange.IsSet() {
		toSerialize["block_range"] = o.BlockRange.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Pool.IsSet() {
		toSerialize["pool"] = o.Pool.Get()
	}
	if o.RewardToken.IsSet() {
		toSerialize["reward_token"] = o.RewardToken.Get()
	}
	if o.TokenPerSec.IsSet() {
		toSerialize["token_per_sec"] = o.TokenPerSec.Get()
	}
	if o.RateCalculatedAt.IsSet() {
		toSerialize["rate_calculated_at"] = o.RateCalculatedAt.Get()
	}
	if o.HasFunds.IsSet() {
		toSerialize["has_funds"] = o.HasFunds.Get()
	}
	if o.HasFundsAt.IsSet() {
		toSerialize["has_funds_at"] = o.HasFundsAt.Get()
	}
	if !IsNil(o.CanRetrieveRate) {
		toSerialize["can_retrieve_rate"] = o.CanRetrieveRate
	}
	if !IsNil(o.RewardRateCalculationInProgress) {
		toSerialize["reward_rate_calculation_in_progress"] = o.RewardRateCalculationInProgress
	}
	if o.Probes != nil {
		toSerialize["probes"] = o.Probes
	}
	return toSerialize, nil
}

type NullableUNISWAPV2ETHEREUMMasterChefRewarderDTO struct {
	value *UNISWAPV2ETHEREUMMasterChefRewarderDTO
	isSet bool
}

func (v NullableUNISWAPV2ETHEREUMMasterChefRewarderDTO) Get() *UNISWAPV2ETHEREUMMasterChefRewarderDTO {
	return v.value
}

func (v *NullableUNISWAPV2ETHEREUMMasterChefRewarderDTO) Set(val *UNISWAPV2ETHEREUMMasterChefRewarderDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUNISWAPV2ETHEREUMMasterChefRewarderDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUNISWAPV2ETHEREUMMasterChefRewarderDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUNISWAPV2ETHEREUMMasterChefRewarderDTO(val *UNISWAPV2ETHEREUMMasterChefRewarderDTO) *NullableUNISWAPV2ETHEREUMMasterChefRewarderDTO {
	return &NullableUNISWAPV2ETHEREUMMasterChefRewarderDTO{value: val, isSet: true}
}

func (v NullableUNISWAPV2ETHEREUMMasterChefRewarderDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUNISWAPV2ETHEREUMMasterChefRewarderDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


