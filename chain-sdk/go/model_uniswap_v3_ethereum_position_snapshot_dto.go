/*
On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the UNISWAPV3ETHEREUMPositionSnapshotDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UNISWAPV3ETHEREUMPositionSnapshotDTO{}

// UNISWAPV3ETHEREUMPositionSnapshotDTO 
type UNISWAPV3ETHEREUMPositionSnapshotDTO struct {
	EntryTime *time.Time `json:"entry_time,omitempty"`
	RecvTime *time.Time `json:"recv_time,omitempty"`
	// Number of block in which entity was recorded.
	BlockNumber *int64 `json:"block_number,omitempty"`
	//  (position id )-( transaction hash )-( log index ) 
	Id NullableString `json:"id,omitempty"`
	// Transaction hash of the transaction that triggered this snapshot
	Hash NullableString `json:"hash,omitempty"`
	// Event log index. For transactions that don't emit event, create arbitrary index starting from 0
	LogIndex *int32 `json:"log_index,omitempty"`
	// Nonce of the transaction that triggered this snapshot
	Nonce NullableString `json:"nonce,omitempty"`
	// Position of this snapshot
	Position NullableString `json:"position,omitempty"`
	// Type of token used to track liquidity
	LiquidityTokenType NullableString `json:"liquidity_token_type,omitempty"`
	// total position liquidity
	Liquidity NullableString `json:"liquidity,omitempty"`
	// total position liquidity in USD
	LiquidityUsd NullableString `json:"liquidity_usd,omitempty"`
	// amount of tokens ever deposited to position
	CumulativeDepositTokenAmounts []string `json:"cumulative_deposit_token_amounts,omitempty"`
	// amount of tokens in USD deposited to position
	CumulativeDepositUsd NullableString `json:"cumulative_deposit_usd,omitempty"`
	// amount of tokens ever withdrawn from position (without fees)
	CumulativeWithdrawTokenAmounts []string `json:"cumulative_withdraw_token_amounts,omitempty"`
	// amount of tokens in USD withdrawn from position (without fees)
	CumulativeWithdrawUsd NullableString `json:"cumulative_withdraw_usd,omitempty"`
	// Total reward token accumulated under this position, in native amounts
	CumulativeRewardTokenAmounts []string `json:"cumulative_reward_token_amounts,omitempty"`
	// Total reward token accumulated under this position, in USD
	CumulativeRewardUsd []string `json:"cumulative_reward_usd,omitempty"`
	// Number of deposits related to this position
	DepositCount *int32 `json:"deposit_count,omitempty"`
	// Number of withdrawals related to this position
	WithdrawCount *int32 `json:"withdraw_count,omitempty"`
	// Timestamp of this snapshot
	Timestamp NullableString `json:"timestamp,omitempty"`
}

// NewUNISWAPV3ETHEREUMPositionSnapshotDTO instantiates a new UNISWAPV3ETHEREUMPositionSnapshotDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUNISWAPV3ETHEREUMPositionSnapshotDTO() *UNISWAPV3ETHEREUMPositionSnapshotDTO {
	this := UNISWAPV3ETHEREUMPositionSnapshotDTO{}
	return &this
}

// NewUNISWAPV3ETHEREUMPositionSnapshotDTOWithDefaults instantiates a new UNISWAPV3ETHEREUMPositionSnapshotDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUNISWAPV3ETHEREUMPositionSnapshotDTOWithDefaults() *UNISWAPV3ETHEREUMPositionSnapshotDTO {
	this := UNISWAPV3ETHEREUMPositionSnapshotDTO{}
	return &this
}

// GetEntryTime returns the EntryTime field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetEntryTime() time.Time {
	if o == nil || IsNil(o.EntryTime) {
		var ret time.Time
		return ret
	}
	return *o.EntryTime
}

// GetEntryTimeOk returns a tuple with the EntryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetEntryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EntryTime) {
		return nil, false
	}
	return o.EntryTime, true
}

// HasEntryTime returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) HasEntryTime() bool {
	if o != nil && !IsNil(o.EntryTime) {
		return true
	}

	return false
}

// SetEntryTime gets a reference to the given time.Time and assigns it to the EntryTime field.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetEntryTime(v time.Time) {
	o.EntryTime = &v
}

// GetRecvTime returns the RecvTime field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetRecvTime() time.Time {
	if o == nil || IsNil(o.RecvTime) {
		var ret time.Time
		return ret
	}
	return *o.RecvTime
}

// GetRecvTimeOk returns a tuple with the RecvTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetRecvTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecvTime) {
		return nil, false
	}
	return o.RecvTime, true
}

// HasRecvTime returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) HasRecvTime() bool {
	if o != nil && !IsNil(o.RecvTime) {
		return true
	}

	return false
}

// SetRecvTime gets a reference to the given time.Time and assigns it to the RecvTime field.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetRecvTime(v time.Time) {
	o.RecvTime = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber) {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetBlockNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) UnsetId() {
	o.Id.Unset()
}

// GetHash returns the Hash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetHash() string {
	if o == nil || IsNil(o.Hash.Get()) {
		var ret string
		return ret
	}
	return *o.Hash.Get()
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hash.Get(), o.Hash.IsSet()
}

// HasHash returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) HasHash() bool {
	if o != nil && o.Hash.IsSet() {
		return true
	}

	return false
}

// SetHash gets a reference to the given NullableString and assigns it to the Hash field.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetHash(v string) {
	o.Hash.Set(&v)
}
// SetHashNil sets the value for Hash to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetHashNil() {
	o.Hash.Set(nil)
}

// UnsetHash ensures that no value is present for Hash, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) UnsetHash() {
	o.Hash.Unset()
}

// GetLogIndex returns the LogIndex field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetLogIndex() int32 {
	if o == nil || IsNil(o.LogIndex) {
		var ret int32
		return ret
	}
	return *o.LogIndex
}

// GetLogIndexOk returns a tuple with the LogIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetLogIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.LogIndex) {
		return nil, false
	}
	return o.LogIndex, true
}

// HasLogIndex returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) HasLogIndex() bool {
	if o != nil && !IsNil(o.LogIndex) {
		return true
	}

	return false
}

// SetLogIndex gets a reference to the given int32 and assigns it to the LogIndex field.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetLogIndex(v int32) {
	o.LogIndex = &v
}

// GetNonce returns the Nonce field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetNonce() string {
	if o == nil || IsNil(o.Nonce.Get()) {
		var ret string
		return ret
	}
	return *o.Nonce.Get()
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetNonceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Nonce.Get(), o.Nonce.IsSet()
}

// HasNonce returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) HasNonce() bool {
	if o != nil && o.Nonce.IsSet() {
		return true
	}

	return false
}

// SetNonce gets a reference to the given NullableString and assigns it to the Nonce field.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetNonce(v string) {
	o.Nonce.Set(&v)
}
// SetNonceNil sets the value for Nonce to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetNonceNil() {
	o.Nonce.Set(nil)
}

// UnsetNonce ensures that no value is present for Nonce, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) UnsetNonce() {
	o.Nonce.Unset()
}

// GetPosition returns the Position field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetPosition() string {
	if o == nil || IsNil(o.Position.Get()) {
		var ret string
		return ret
	}
	return *o.Position.Get()
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetPositionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Position.Get(), o.Position.IsSet()
}

// HasPosition returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) HasPosition() bool {
	if o != nil && o.Position.IsSet() {
		return true
	}

	return false
}

// SetPosition gets a reference to the given NullableString and assigns it to the Position field.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetPosition(v string) {
	o.Position.Set(&v)
}
// SetPositionNil sets the value for Position to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetPositionNil() {
	o.Position.Set(nil)
}

// UnsetPosition ensures that no value is present for Position, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) UnsetPosition() {
	o.Position.Unset()
}

// GetLiquidityTokenType returns the LiquidityTokenType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetLiquidityTokenType() string {
	if o == nil || IsNil(o.LiquidityTokenType.Get()) {
		var ret string
		return ret
	}
	return *o.LiquidityTokenType.Get()
}

// GetLiquidityTokenTypeOk returns a tuple with the LiquidityTokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetLiquidityTokenTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LiquidityTokenType.Get(), o.LiquidityTokenType.IsSet()
}

// HasLiquidityTokenType returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) HasLiquidityTokenType() bool {
	if o != nil && o.LiquidityTokenType.IsSet() {
		return true
	}

	return false
}

// SetLiquidityTokenType gets a reference to the given NullableString and assigns it to the LiquidityTokenType field.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetLiquidityTokenType(v string) {
	o.LiquidityTokenType.Set(&v)
}
// SetLiquidityTokenTypeNil sets the value for LiquidityTokenType to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetLiquidityTokenTypeNil() {
	o.LiquidityTokenType.Set(nil)
}

// UnsetLiquidityTokenType ensures that no value is present for LiquidityTokenType, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) UnsetLiquidityTokenType() {
	o.LiquidityTokenType.Unset()
}

// GetLiquidity returns the Liquidity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetLiquidity() string {
	if o == nil || IsNil(o.Liquidity.Get()) {
		var ret string
		return ret
	}
	return *o.Liquidity.Get()
}

// GetLiquidityOk returns a tuple with the Liquidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetLiquidityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Liquidity.Get(), o.Liquidity.IsSet()
}

// HasLiquidity returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) HasLiquidity() bool {
	if o != nil && o.Liquidity.IsSet() {
		return true
	}

	return false
}

// SetLiquidity gets a reference to the given NullableString and assigns it to the Liquidity field.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetLiquidity(v string) {
	o.Liquidity.Set(&v)
}
// SetLiquidityNil sets the value for Liquidity to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetLiquidityNil() {
	o.Liquidity.Set(nil)
}

// UnsetLiquidity ensures that no value is present for Liquidity, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) UnsetLiquidity() {
	o.Liquidity.Unset()
}

// GetLiquidityUsd returns the LiquidityUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetLiquidityUsd() string {
	if o == nil || IsNil(o.LiquidityUsd.Get()) {
		var ret string
		return ret
	}
	return *o.LiquidityUsd.Get()
}

// GetLiquidityUsdOk returns a tuple with the LiquidityUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetLiquidityUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LiquidityUsd.Get(), o.LiquidityUsd.IsSet()
}

// HasLiquidityUsd returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) HasLiquidityUsd() bool {
	if o != nil && o.LiquidityUsd.IsSet() {
		return true
	}

	return false
}

// SetLiquidityUsd gets a reference to the given NullableString and assigns it to the LiquidityUsd field.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetLiquidityUsd(v string) {
	o.LiquidityUsd.Set(&v)
}
// SetLiquidityUsdNil sets the value for LiquidityUsd to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetLiquidityUsdNil() {
	o.LiquidityUsd.Set(nil)
}

// UnsetLiquidityUsd ensures that no value is present for LiquidityUsd, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) UnsetLiquidityUsd() {
	o.LiquidityUsd.Unset()
}

// GetCumulativeDepositTokenAmounts returns the CumulativeDepositTokenAmounts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetCumulativeDepositTokenAmounts() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.CumulativeDepositTokenAmounts
}

// GetCumulativeDepositTokenAmountsOk returns a tuple with the CumulativeDepositTokenAmounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetCumulativeDepositTokenAmountsOk() ([]string, bool) {
	if o == nil || IsNil(o.CumulativeDepositTokenAmounts) {
		return nil, false
	}
	return o.CumulativeDepositTokenAmounts, true
}

// HasCumulativeDepositTokenAmounts returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) HasCumulativeDepositTokenAmounts() bool {
	if o != nil && IsNil(o.CumulativeDepositTokenAmounts) {
		return true
	}

	return false
}

// SetCumulativeDepositTokenAmounts gets a reference to the given []string and assigns it to the CumulativeDepositTokenAmounts field.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetCumulativeDepositTokenAmounts(v []string) {
	o.CumulativeDepositTokenAmounts = v
}

// GetCumulativeDepositUsd returns the CumulativeDepositUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetCumulativeDepositUsd() string {
	if o == nil || IsNil(o.CumulativeDepositUsd.Get()) {
		var ret string
		return ret
	}
	return *o.CumulativeDepositUsd.Get()
}

// GetCumulativeDepositUsdOk returns a tuple with the CumulativeDepositUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetCumulativeDepositUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CumulativeDepositUsd.Get(), o.CumulativeDepositUsd.IsSet()
}

// HasCumulativeDepositUsd returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) HasCumulativeDepositUsd() bool {
	if o != nil && o.CumulativeDepositUsd.IsSet() {
		return true
	}

	return false
}

// SetCumulativeDepositUsd gets a reference to the given NullableString and assigns it to the CumulativeDepositUsd field.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetCumulativeDepositUsd(v string) {
	o.CumulativeDepositUsd.Set(&v)
}
// SetCumulativeDepositUsdNil sets the value for CumulativeDepositUsd to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetCumulativeDepositUsdNil() {
	o.CumulativeDepositUsd.Set(nil)
}

// UnsetCumulativeDepositUsd ensures that no value is present for CumulativeDepositUsd, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) UnsetCumulativeDepositUsd() {
	o.CumulativeDepositUsd.Unset()
}

// GetCumulativeWithdrawTokenAmounts returns the CumulativeWithdrawTokenAmounts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetCumulativeWithdrawTokenAmounts() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.CumulativeWithdrawTokenAmounts
}

// GetCumulativeWithdrawTokenAmountsOk returns a tuple with the CumulativeWithdrawTokenAmounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetCumulativeWithdrawTokenAmountsOk() ([]string, bool) {
	if o == nil || IsNil(o.CumulativeWithdrawTokenAmounts) {
		return nil, false
	}
	return o.CumulativeWithdrawTokenAmounts, true
}

// HasCumulativeWithdrawTokenAmounts returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) HasCumulativeWithdrawTokenAmounts() bool {
	if o != nil && IsNil(o.CumulativeWithdrawTokenAmounts) {
		return true
	}

	return false
}

// SetCumulativeWithdrawTokenAmounts gets a reference to the given []string and assigns it to the CumulativeWithdrawTokenAmounts field.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetCumulativeWithdrawTokenAmounts(v []string) {
	o.CumulativeWithdrawTokenAmounts = v
}

// GetCumulativeWithdrawUsd returns the CumulativeWithdrawUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetCumulativeWithdrawUsd() string {
	if o == nil || IsNil(o.CumulativeWithdrawUsd.Get()) {
		var ret string
		return ret
	}
	return *o.CumulativeWithdrawUsd.Get()
}

// GetCumulativeWithdrawUsdOk returns a tuple with the CumulativeWithdrawUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetCumulativeWithdrawUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CumulativeWithdrawUsd.Get(), o.CumulativeWithdrawUsd.IsSet()
}

// HasCumulativeWithdrawUsd returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) HasCumulativeWithdrawUsd() bool {
	if o != nil && o.CumulativeWithdrawUsd.IsSet() {
		return true
	}

	return false
}

// SetCumulativeWithdrawUsd gets a reference to the given NullableString and assigns it to the CumulativeWithdrawUsd field.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetCumulativeWithdrawUsd(v string) {
	o.CumulativeWithdrawUsd.Set(&v)
}
// SetCumulativeWithdrawUsdNil sets the value for CumulativeWithdrawUsd to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetCumulativeWithdrawUsdNil() {
	o.CumulativeWithdrawUsd.Set(nil)
}

// UnsetCumulativeWithdrawUsd ensures that no value is present for CumulativeWithdrawUsd, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) UnsetCumulativeWithdrawUsd() {
	o.CumulativeWithdrawUsd.Unset()
}

// GetCumulativeRewardTokenAmounts returns the CumulativeRewardTokenAmounts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetCumulativeRewardTokenAmounts() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.CumulativeRewardTokenAmounts
}

// GetCumulativeRewardTokenAmountsOk returns a tuple with the CumulativeRewardTokenAmounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetCumulativeRewardTokenAmountsOk() ([]string, bool) {
	if o == nil || IsNil(o.CumulativeRewardTokenAmounts) {
		return nil, false
	}
	return o.CumulativeRewardTokenAmounts, true
}

// HasCumulativeRewardTokenAmounts returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) HasCumulativeRewardTokenAmounts() bool {
	if o != nil && IsNil(o.CumulativeRewardTokenAmounts) {
		return true
	}

	return false
}

// SetCumulativeRewardTokenAmounts gets a reference to the given []string and assigns it to the CumulativeRewardTokenAmounts field.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetCumulativeRewardTokenAmounts(v []string) {
	o.CumulativeRewardTokenAmounts = v
}

// GetCumulativeRewardUsd returns the CumulativeRewardUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetCumulativeRewardUsd() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.CumulativeRewardUsd
}

// GetCumulativeRewardUsdOk returns a tuple with the CumulativeRewardUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetCumulativeRewardUsdOk() ([]string, bool) {
	if o == nil || IsNil(o.CumulativeRewardUsd) {
		return nil, false
	}
	return o.CumulativeRewardUsd, true
}

// HasCumulativeRewardUsd returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) HasCumulativeRewardUsd() bool {
	if o != nil && IsNil(o.CumulativeRewardUsd) {
		return true
	}

	return false
}

// SetCumulativeRewardUsd gets a reference to the given []string and assigns it to the CumulativeRewardUsd field.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetCumulativeRewardUsd(v []string) {
	o.CumulativeRewardUsd = v
}

// GetDepositCount returns the DepositCount field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetDepositCount() int32 {
	if o == nil || IsNil(o.DepositCount) {
		var ret int32
		return ret
	}
	return *o.DepositCount
}

// GetDepositCountOk returns a tuple with the DepositCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetDepositCountOk() (*int32, bool) {
	if o == nil || IsNil(o.DepositCount) {
		return nil, false
	}
	return o.DepositCount, true
}

// HasDepositCount returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) HasDepositCount() bool {
	if o != nil && !IsNil(o.DepositCount) {
		return true
	}

	return false
}

// SetDepositCount gets a reference to the given int32 and assigns it to the DepositCount field.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetDepositCount(v int32) {
	o.DepositCount = &v
}

// GetWithdrawCount returns the WithdrawCount field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetWithdrawCount() int32 {
	if o == nil || IsNil(o.WithdrawCount) {
		var ret int32
		return ret
	}
	return *o.WithdrawCount
}

// GetWithdrawCountOk returns a tuple with the WithdrawCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetWithdrawCountOk() (*int32, bool) {
	if o == nil || IsNil(o.WithdrawCount) {
		return nil, false
	}
	return o.WithdrawCount, true
}

// HasWithdrawCount returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) HasWithdrawCount() bool {
	if o != nil && !IsNil(o.WithdrawCount) {
		return true
	}

	return false
}

// SetWithdrawCount gets a reference to the given int32 and assigns it to the WithdrawCount field.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetWithdrawCount(v int32) {
	o.WithdrawCount = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret string
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) GetTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableString and assigns it to the Timestamp field.
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetTimestamp(v string) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionSnapshotDTO) UnsetTimestamp() {
	o.Timestamp.Unset()
}

func (o UNISWAPV3ETHEREUMPositionSnapshotDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UNISWAPV3ETHEREUMPositionSnapshotDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryTime) {
		toSerialize["entry_time"] = o.EntryTime
	}
	if !IsNil(o.RecvTime) {
		toSerialize["recv_time"] = o.RecvTime
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["block_number"] = o.BlockNumber
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Hash.IsSet() {
		toSerialize["hash"] = o.Hash.Get()
	}
	if !IsNil(o.LogIndex) {
		toSerialize["log_index"] = o.LogIndex
	}
	if o.Nonce.IsSet() {
		toSerialize["nonce"] = o.Nonce.Get()
	}
	if o.Position.IsSet() {
		toSerialize["position"] = o.Position.Get()
	}
	if o.LiquidityTokenType.IsSet() {
		toSerialize["liquidity_token_type"] = o.LiquidityTokenType.Get()
	}
	if o.Liquidity.IsSet() {
		toSerialize["liquidity"] = o.Liquidity.Get()
	}
	if o.LiquidityUsd.IsSet() {
		toSerialize["liquidity_usd"] = o.LiquidityUsd.Get()
	}
	if o.CumulativeDepositTokenAmounts != nil {
		toSerialize["cumulative_deposit_token_amounts"] = o.CumulativeDepositTokenAmounts
	}
	if o.CumulativeDepositUsd.IsSet() {
		toSerialize["cumulative_deposit_usd"] = o.CumulativeDepositUsd.Get()
	}
	if o.CumulativeWithdrawTokenAmounts != nil {
		toSerialize["cumulative_withdraw_token_amounts"] = o.CumulativeWithdrawTokenAmounts
	}
	if o.CumulativeWithdrawUsd.IsSet() {
		toSerialize["cumulative_withdraw_usd"] = o.CumulativeWithdrawUsd.Get()
	}
	if o.CumulativeRewardTokenAmounts != nil {
		toSerialize["cumulative_reward_token_amounts"] = o.CumulativeRewardTokenAmounts
	}
	if o.CumulativeRewardUsd != nil {
		toSerialize["cumulative_reward_usd"] = o.CumulativeRewardUsd
	}
	if !IsNil(o.DepositCount) {
		toSerialize["deposit_count"] = o.DepositCount
	}
	if !IsNil(o.WithdrawCount) {
		toSerialize["withdraw_count"] = o.WithdrawCount
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	return toSerialize, nil
}

type NullableUNISWAPV3ETHEREUMPositionSnapshotDTO struct {
	value *UNISWAPV3ETHEREUMPositionSnapshotDTO
	isSet bool
}

func (v NullableUNISWAPV3ETHEREUMPositionSnapshotDTO) Get() *UNISWAPV3ETHEREUMPositionSnapshotDTO {
	return v.value
}

func (v *NullableUNISWAPV3ETHEREUMPositionSnapshotDTO) Set(val *UNISWAPV3ETHEREUMPositionSnapshotDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUNISWAPV3ETHEREUMPositionSnapshotDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUNISWAPV3ETHEREUMPositionSnapshotDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUNISWAPV3ETHEREUMPositionSnapshotDTO(val *UNISWAPV3ETHEREUMPositionSnapshotDTO) *NullableUNISWAPV3ETHEREUMPositionSnapshotDTO {
	return &NullableUNISWAPV3ETHEREUMPositionSnapshotDTO{value: val, isSet: true}
}

func (v NullableUNISWAPV3ETHEREUMPositionSnapshotDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUNISWAPV3ETHEREUMPositionSnapshotDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


