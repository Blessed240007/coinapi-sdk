/*
On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the UNISWAPV3ETHEREUMLiquidityPoolDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UNISWAPV3ETHEREUMLiquidityPoolDTO{}

// UNISWAPV3ETHEREUMLiquidityPoolDTO Pool-level metadata.
type UNISWAPV3ETHEREUMLiquidityPoolDTO struct {
	EntryTime *time.Time `json:"entry_time,omitempty"`
	RecvTime *time.Time `json:"recv_time,omitempty"`
	// Number of block in which entity was recorded.
	BlockNumber *int64 `json:"block_number,omitempty"`
	// .
	Vid *int64 `json:"vid,omitempty"`
	// Block range of the liquidity pool.
	BlockRange NullableString `json:"block_range,omitempty"`
	// Smart contract address of the pool.
	Id NullableString `json:"id,omitempty"`
	// Protocol this pool belongs to.
	Protocol NullableString `json:"protocol,omitempty"`
	// Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT).
	Name NullableString `json:"name,omitempty"`
	// Symbol of liquidity pool (e.g. 3CRV).
	Symbol NullableString `json:"symbol,omitempty"`
	// Token that is to represent ownership of liquidity.
	LiquidityToken NullableString `json:"liquidity_token,omitempty"`
	// Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer.
	InputTokens []string `json:"input_tokens,omitempty"`
	// Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon.
	RewardTokens []string `json:"reward_tokens,omitempty"`
	// Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee.).
	Fees []string `json:"fees,omitempty"`
	// Specifies whether this pool is single-sided (e.g. Bancor, Platypus's Alternative Pool). The specifics of the implementation depends on the protocol.
	IsSingleSided *bool `json:"is_single_sided,omitempty"`
	// Timestamp when the liquidity pool was created.
	CreatedTimestamp NullableString `json:"created_timestamp,omitempty"`
	// Block number when the liquidity pool was created.
	CreatedBlockNumber NullableString `json:"created_block_number,omitempty"`
	// Current tick representing the price of token0/token1.
	Tick NullableString `json:"tick,omitempty"`
	// Current TVL (Total Value Locked) of this pool in USD.
	TotalValueLockedUsd NullableString `json:"total_value_locked_usd,omitempty"`
	// Sum of all active and non-active liquidity for this pool.
	TotalLiquidity NullableString `json:"total_liquidity,omitempty"`
	// Sum of all active and non-active liquidity in USD for this pool.
	TotalLiquidityUsd NullableString `json:"total_liquidity_usd,omitempty"`
	// All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
	ActiveLiquidity NullableString `json:"active_liquidity,omitempty"`
	// All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
	ActiveLiquidityUsd NullableString `json:"active_liquidity_usd,omitempty"`
	// All protocol-side value locked in token amounts that remains uncollected and unused in the pool.
	UncollectedProtocolSideTokenAmounts []string `json:"uncollected_protocol_side_token_amounts,omitempty"`
	// All protocol-side value locking in USD that remains uncollected and unused in the pool.
	UncollectedProtocolSideValuesUsd []string `json:"uncollected_protocol_side_values_usd,omitempty"`
	// All supply-side value locked in token amounts that remains uncollected and unused in the pool.
	UncollectedSupplySideTokenAmounts []string `json:"uncollected_supply_side_token_amounts,omitempty"`
	// All supply-side value locked in USD that remains uncollected and unused in the pool.
	UncollectedSupplySideValuesUsd []string `json:"uncollected_supply_side_values_usd,omitempty"`
	// All revenue generated by the liquidity pool, accrued to the supply side.
	CumulativeSupplySideRevenueUsd NullableString `json:"cumulative_supply_side_revenue_usd,omitempty"`
	// All revenue generated by the liquidity pool, accrued to the protocol.
	CumulativeProtocolSideRevenueUsd NullableString `json:"cumulative_protocol_side_revenue_usd,omitempty"`
	//  All revenue generated by the liquidity pool.
	CumulativeTotalRevenueUsd NullableString `json:"cumulative_total_revenue_usd,omitempty"`
	// All trade volume occurred for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field.
	CumulativeVolumeByTokenAmount []string `json:"cumulative_volume_by_token_amount,omitempty"`
	// All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.
	CumulativeVolumeByTokenUsd []string `json:"cumulative_volume_by_token_usd,omitempty"`
	// All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.
	CumulativeVolumeUsd NullableString `json:"cumulative_volume_usd,omitempty"`
	// Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.
	InputTokenBalances []string `json:"input_token_balances,omitempty"`
	// Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field.
	InputTokenBalancesUsd []string `json:"input_token_balances_usd,omitempty"`
	// Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
	InputTokenWeights []string `json:"input_token_weights,omitempty"`
	// Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
	StakedOutputTokenAmount NullableString `json:"staked_output_token_amount,omitempty"`
	// Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
	RewardTokenEmissionsAmount []string `json:"reward_token_emissions_amount,omitempty"`
	// Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
	RewardTokenEmissionsUsd []string `json:"reward_token_emissions_usd,omitempty"`
	// Total number of deposits (add liquidity).
	CumulativeDepositCount *int32 `json:"cumulative_deposit_count,omitempty"`
	// Total number of withdrawals (remove liquidity).
	CumulativeWithdrawCount *int32 `json:"cumulative_withdraw_count,omitempty"`
	// Total number of trades (swaps).
	CumulativeSwapCount *int32 `json:"cumulative_swap_count,omitempty"`
	// Number of positions in this market.
	PositionCount *int32 `json:"position_count,omitempty"`
	// Number of open positions in this market.
	OpenPositionCount *int32 `json:"open_position_count,omitempty"`
	// Number of closed positions in this market.
	ClosedPositionCount *int32 `json:"closed_position_count,omitempty"`
	// Day ID of the most recent daily snapshot.
	LastSnapshotDayId *int32 `json:"last_snapshot_day_id,omitempty"`
	// Hour ID of the most recent hourly snapshot.
	LastSnapshotHourId *int32 `json:"last_snapshot_hour_id,omitempty"`
	// Timestamp of the last time this entity was updated.
	LastUpdateTimestamp NullableString `json:"last_update_timestamp,omitempty"`
	// Block number of the last time this entity was updated.
	LastUpdateBlockNumber NullableString `json:"last_update_block_number,omitempty"`
	// Evaluated ask value of the liquidity pool.
	EvaluatedAsk *float64 `json:"evaluated_ask,omitempty"`
}

// NewUNISWAPV3ETHEREUMLiquidityPoolDTO instantiates a new UNISWAPV3ETHEREUMLiquidityPoolDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUNISWAPV3ETHEREUMLiquidityPoolDTO() *UNISWAPV3ETHEREUMLiquidityPoolDTO {
	this := UNISWAPV3ETHEREUMLiquidityPoolDTO{}
	return &this
}

// NewUNISWAPV3ETHEREUMLiquidityPoolDTOWithDefaults instantiates a new UNISWAPV3ETHEREUMLiquidityPoolDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUNISWAPV3ETHEREUMLiquidityPoolDTOWithDefaults() *UNISWAPV3ETHEREUMLiquidityPoolDTO {
	this := UNISWAPV3ETHEREUMLiquidityPoolDTO{}
	return &this
}

// GetEntryTime returns the EntryTime field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetEntryTime() time.Time {
	if o == nil || IsNil(o.EntryTime) {
		var ret time.Time
		return ret
	}
	return *o.EntryTime
}

// GetEntryTimeOk returns a tuple with the EntryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetEntryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EntryTime) {
		return nil, false
	}
	return o.EntryTime, true
}

// HasEntryTime returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasEntryTime() bool {
	if o != nil && !IsNil(o.EntryTime) {
		return true
	}

	return false
}

// SetEntryTime gets a reference to the given time.Time and assigns it to the EntryTime field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetEntryTime(v time.Time) {
	o.EntryTime = &v
}

// GetRecvTime returns the RecvTime field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetRecvTime() time.Time {
	if o == nil || IsNil(o.RecvTime) {
		var ret time.Time
		return ret
	}
	return *o.RecvTime
}

// GetRecvTimeOk returns a tuple with the RecvTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetRecvTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecvTime) {
		return nil, false
	}
	return o.RecvTime, true
}

// HasRecvTime returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasRecvTime() bool {
	if o != nil && !IsNil(o.RecvTime) {
		return true
	}

	return false
}

// SetRecvTime gets a reference to the given time.Time and assigns it to the RecvTime field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetRecvTime(v time.Time) {
	o.RecvTime = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber) {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetBlockNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetVid returns the Vid field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetVid() int64 {
	if o == nil || IsNil(o.Vid) {
		var ret int64
		return ret
	}
	return *o.Vid
}

// GetVidOk returns a tuple with the Vid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetVidOk() (*int64, bool) {
	if o == nil || IsNil(o.Vid) {
		return nil, false
	}
	return o.Vid, true
}

// HasVid returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasVid() bool {
	if o != nil && !IsNil(o.Vid) {
		return true
	}

	return false
}

// SetVid gets a reference to the given int64 and assigns it to the Vid field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetVid(v int64) {
	o.Vid = &v
}

// GetBlockRange returns the BlockRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetBlockRange() string {
	if o == nil || IsNil(o.BlockRange.Get()) {
		var ret string
		return ret
	}
	return *o.BlockRange.Get()
}

// GetBlockRangeOk returns a tuple with the BlockRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetBlockRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockRange.Get(), o.BlockRange.IsSet()
}

// HasBlockRange returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasBlockRange() bool {
	if o != nil && o.BlockRange.IsSet() {
		return true
	}

	return false
}

// SetBlockRange gets a reference to the given NullableString and assigns it to the BlockRange field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetBlockRange(v string) {
	o.BlockRange.Set(&v)
}
// SetBlockRangeNil sets the value for BlockRange to be an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetBlockRangeNil() {
	o.BlockRange.Set(nil)
}

// UnsetBlockRange ensures that no value is present for BlockRange, not even an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) UnsetBlockRange() {
	o.BlockRange.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) UnsetId() {
	o.Id.Unset()
}

// GetProtocol returns the Protocol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetProtocol() string {
	if o == nil || IsNil(o.Protocol.Get()) {
		var ret string
		return ret
	}
	return *o.Protocol.Get()
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Protocol.Get(), o.Protocol.IsSet()
}

// HasProtocol returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasProtocol() bool {
	if o != nil && o.Protocol.IsSet() {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given NullableString and assigns it to the Protocol field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetProtocol(v string) {
	o.Protocol.Set(&v)
}
// SetProtocolNil sets the value for Protocol to be an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetProtocolNil() {
	o.Protocol.Set(nil)
}

// UnsetProtocol ensures that no value is present for Protocol, not even an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) UnsetProtocol() {
	o.Protocol.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) UnsetName() {
	o.Name.Unset()
}

// GetSymbol returns the Symbol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetSymbol() string {
	if o == nil || IsNil(o.Symbol.Get()) {
		var ret string
		return ret
	}
	return *o.Symbol.Get()
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Symbol.Get(), o.Symbol.IsSet()
}

// HasSymbol returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasSymbol() bool {
	if o != nil && o.Symbol.IsSet() {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given NullableString and assigns it to the Symbol field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetSymbol(v string) {
	o.Symbol.Set(&v)
}
// SetSymbolNil sets the value for Symbol to be an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetSymbolNil() {
	o.Symbol.Set(nil)
}

// UnsetSymbol ensures that no value is present for Symbol, not even an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) UnsetSymbol() {
	o.Symbol.Unset()
}

// GetLiquidityToken returns the LiquidityToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetLiquidityToken() string {
	if o == nil || IsNil(o.LiquidityToken.Get()) {
		var ret string
		return ret
	}
	return *o.LiquidityToken.Get()
}

// GetLiquidityTokenOk returns a tuple with the LiquidityToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetLiquidityTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LiquidityToken.Get(), o.LiquidityToken.IsSet()
}

// HasLiquidityToken returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasLiquidityToken() bool {
	if o != nil && o.LiquidityToken.IsSet() {
		return true
	}

	return false
}

// SetLiquidityToken gets a reference to the given NullableString and assigns it to the LiquidityToken field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetLiquidityToken(v string) {
	o.LiquidityToken.Set(&v)
}
// SetLiquidityTokenNil sets the value for LiquidityToken to be an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetLiquidityTokenNil() {
	o.LiquidityToken.Set(nil)
}

// UnsetLiquidityToken ensures that no value is present for LiquidityToken, not even an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) UnsetLiquidityToken() {
	o.LiquidityToken.Unset()
}

// GetInputTokens returns the InputTokens field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetInputTokens() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.InputTokens
}

// GetInputTokensOk returns a tuple with the InputTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetInputTokensOk() ([]string, bool) {
	if o == nil || IsNil(o.InputTokens) {
		return nil, false
	}
	return o.InputTokens, true
}

// HasInputTokens returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasInputTokens() bool {
	if o != nil && IsNil(o.InputTokens) {
		return true
	}

	return false
}

// SetInputTokens gets a reference to the given []string and assigns it to the InputTokens field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetInputTokens(v []string) {
	o.InputTokens = v
}

// GetRewardTokens returns the RewardTokens field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetRewardTokens() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.RewardTokens
}

// GetRewardTokensOk returns a tuple with the RewardTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetRewardTokensOk() ([]string, bool) {
	if o == nil || IsNil(o.RewardTokens) {
		return nil, false
	}
	return o.RewardTokens, true
}

// HasRewardTokens returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasRewardTokens() bool {
	if o != nil && IsNil(o.RewardTokens) {
		return true
	}

	return false
}

// SetRewardTokens gets a reference to the given []string and assigns it to the RewardTokens field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetRewardTokens(v []string) {
	o.RewardTokens = v
}

// GetFees returns the Fees field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetFees() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Fees
}

// GetFeesOk returns a tuple with the Fees field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetFeesOk() ([]string, bool) {
	if o == nil || IsNil(o.Fees) {
		return nil, false
	}
	return o.Fees, true
}

// HasFees returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasFees() bool {
	if o != nil && IsNil(o.Fees) {
		return true
	}

	return false
}

// SetFees gets a reference to the given []string and assigns it to the Fees field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetFees(v []string) {
	o.Fees = v
}

// GetIsSingleSided returns the IsSingleSided field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetIsSingleSided() bool {
	if o == nil || IsNil(o.IsSingleSided) {
		var ret bool
		return ret
	}
	return *o.IsSingleSided
}

// GetIsSingleSidedOk returns a tuple with the IsSingleSided field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetIsSingleSidedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSingleSided) {
		return nil, false
	}
	return o.IsSingleSided, true
}

// HasIsSingleSided returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasIsSingleSided() bool {
	if o != nil && !IsNil(o.IsSingleSided) {
		return true
	}

	return false
}

// SetIsSingleSided gets a reference to the given bool and assigns it to the IsSingleSided field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetIsSingleSided(v bool) {
	o.IsSingleSided = &v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetCreatedTimestamp() string {
	if o == nil || IsNil(o.CreatedTimestamp.Get()) {
		var ret string
		return ret
	}
	return *o.CreatedTimestamp.Get()
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetCreatedTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedTimestamp.Get(), o.CreatedTimestamp.IsSet()
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasCreatedTimestamp() bool {
	if o != nil && o.CreatedTimestamp.IsSet() {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given NullableString and assigns it to the CreatedTimestamp field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp.Set(&v)
}
// SetCreatedTimestampNil sets the value for CreatedTimestamp to be an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetCreatedTimestampNil() {
	o.CreatedTimestamp.Set(nil)
}

// UnsetCreatedTimestamp ensures that no value is present for CreatedTimestamp, not even an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) UnsetCreatedTimestamp() {
	o.CreatedTimestamp.Unset()
}

// GetCreatedBlockNumber returns the CreatedBlockNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetCreatedBlockNumber() string {
	if o == nil || IsNil(o.CreatedBlockNumber.Get()) {
		var ret string
		return ret
	}
	return *o.CreatedBlockNumber.Get()
}

// GetCreatedBlockNumberOk returns a tuple with the CreatedBlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetCreatedBlockNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedBlockNumber.Get(), o.CreatedBlockNumber.IsSet()
}

// HasCreatedBlockNumber returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasCreatedBlockNumber() bool {
	if o != nil && o.CreatedBlockNumber.IsSet() {
		return true
	}

	return false
}

// SetCreatedBlockNumber gets a reference to the given NullableString and assigns it to the CreatedBlockNumber field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetCreatedBlockNumber(v string) {
	o.CreatedBlockNumber.Set(&v)
}
// SetCreatedBlockNumberNil sets the value for CreatedBlockNumber to be an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetCreatedBlockNumberNil() {
	o.CreatedBlockNumber.Set(nil)
}

// UnsetCreatedBlockNumber ensures that no value is present for CreatedBlockNumber, not even an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) UnsetCreatedBlockNumber() {
	o.CreatedBlockNumber.Unset()
}

// GetTick returns the Tick field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetTick() string {
	if o == nil || IsNil(o.Tick.Get()) {
		var ret string
		return ret
	}
	return *o.Tick.Get()
}

// GetTickOk returns a tuple with the Tick field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetTickOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tick.Get(), o.Tick.IsSet()
}

// HasTick returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasTick() bool {
	if o != nil && o.Tick.IsSet() {
		return true
	}

	return false
}

// SetTick gets a reference to the given NullableString and assigns it to the Tick field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetTick(v string) {
	o.Tick.Set(&v)
}
// SetTickNil sets the value for Tick to be an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetTickNil() {
	o.Tick.Set(nil)
}

// UnsetTick ensures that no value is present for Tick, not even an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) UnsetTick() {
	o.Tick.Unset()
}

// GetTotalValueLockedUsd returns the TotalValueLockedUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetTotalValueLockedUsd() string {
	if o == nil || IsNil(o.TotalValueLockedUsd.Get()) {
		var ret string
		return ret
	}
	return *o.TotalValueLockedUsd.Get()
}

// GetTotalValueLockedUsdOk returns a tuple with the TotalValueLockedUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetTotalValueLockedUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalValueLockedUsd.Get(), o.TotalValueLockedUsd.IsSet()
}

// HasTotalValueLockedUsd returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasTotalValueLockedUsd() bool {
	if o != nil && o.TotalValueLockedUsd.IsSet() {
		return true
	}

	return false
}

// SetTotalValueLockedUsd gets a reference to the given NullableString and assigns it to the TotalValueLockedUsd field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetTotalValueLockedUsd(v string) {
	o.TotalValueLockedUsd.Set(&v)
}
// SetTotalValueLockedUsdNil sets the value for TotalValueLockedUsd to be an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetTotalValueLockedUsdNil() {
	o.TotalValueLockedUsd.Set(nil)
}

// UnsetTotalValueLockedUsd ensures that no value is present for TotalValueLockedUsd, not even an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) UnsetTotalValueLockedUsd() {
	o.TotalValueLockedUsd.Unset()
}

// GetTotalLiquidity returns the TotalLiquidity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetTotalLiquidity() string {
	if o == nil || IsNil(o.TotalLiquidity.Get()) {
		var ret string
		return ret
	}
	return *o.TotalLiquidity.Get()
}

// GetTotalLiquidityOk returns a tuple with the TotalLiquidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetTotalLiquidityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalLiquidity.Get(), o.TotalLiquidity.IsSet()
}

// HasTotalLiquidity returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasTotalLiquidity() bool {
	if o != nil && o.TotalLiquidity.IsSet() {
		return true
	}

	return false
}

// SetTotalLiquidity gets a reference to the given NullableString and assigns it to the TotalLiquidity field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetTotalLiquidity(v string) {
	o.TotalLiquidity.Set(&v)
}
// SetTotalLiquidityNil sets the value for TotalLiquidity to be an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetTotalLiquidityNil() {
	o.TotalLiquidity.Set(nil)
}

// UnsetTotalLiquidity ensures that no value is present for TotalLiquidity, not even an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) UnsetTotalLiquidity() {
	o.TotalLiquidity.Unset()
}

// GetTotalLiquidityUsd returns the TotalLiquidityUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetTotalLiquidityUsd() string {
	if o == nil || IsNil(o.TotalLiquidityUsd.Get()) {
		var ret string
		return ret
	}
	return *o.TotalLiquidityUsd.Get()
}

// GetTotalLiquidityUsdOk returns a tuple with the TotalLiquidityUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetTotalLiquidityUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalLiquidityUsd.Get(), o.TotalLiquidityUsd.IsSet()
}

// HasTotalLiquidityUsd returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasTotalLiquidityUsd() bool {
	if o != nil && o.TotalLiquidityUsd.IsSet() {
		return true
	}

	return false
}

// SetTotalLiquidityUsd gets a reference to the given NullableString and assigns it to the TotalLiquidityUsd field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetTotalLiquidityUsd(v string) {
	o.TotalLiquidityUsd.Set(&v)
}
// SetTotalLiquidityUsdNil sets the value for TotalLiquidityUsd to be an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetTotalLiquidityUsdNil() {
	o.TotalLiquidityUsd.Set(nil)
}

// UnsetTotalLiquidityUsd ensures that no value is present for TotalLiquidityUsd, not even an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) UnsetTotalLiquidityUsd() {
	o.TotalLiquidityUsd.Unset()
}

// GetActiveLiquidity returns the ActiveLiquidity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetActiveLiquidity() string {
	if o == nil || IsNil(o.ActiveLiquidity.Get()) {
		var ret string
		return ret
	}
	return *o.ActiveLiquidity.Get()
}

// GetActiveLiquidityOk returns a tuple with the ActiveLiquidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetActiveLiquidityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActiveLiquidity.Get(), o.ActiveLiquidity.IsSet()
}

// HasActiveLiquidity returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasActiveLiquidity() bool {
	if o != nil && o.ActiveLiquidity.IsSet() {
		return true
	}

	return false
}

// SetActiveLiquidity gets a reference to the given NullableString and assigns it to the ActiveLiquidity field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetActiveLiquidity(v string) {
	o.ActiveLiquidity.Set(&v)
}
// SetActiveLiquidityNil sets the value for ActiveLiquidity to be an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetActiveLiquidityNil() {
	o.ActiveLiquidity.Set(nil)
}

// UnsetActiveLiquidity ensures that no value is present for ActiveLiquidity, not even an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) UnsetActiveLiquidity() {
	o.ActiveLiquidity.Unset()
}

// GetActiveLiquidityUsd returns the ActiveLiquidityUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetActiveLiquidityUsd() string {
	if o == nil || IsNil(o.ActiveLiquidityUsd.Get()) {
		var ret string
		return ret
	}
	return *o.ActiveLiquidityUsd.Get()
}

// GetActiveLiquidityUsdOk returns a tuple with the ActiveLiquidityUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetActiveLiquidityUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActiveLiquidityUsd.Get(), o.ActiveLiquidityUsd.IsSet()
}

// HasActiveLiquidityUsd returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasActiveLiquidityUsd() bool {
	if o != nil && o.ActiveLiquidityUsd.IsSet() {
		return true
	}

	return false
}

// SetActiveLiquidityUsd gets a reference to the given NullableString and assigns it to the ActiveLiquidityUsd field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetActiveLiquidityUsd(v string) {
	o.ActiveLiquidityUsd.Set(&v)
}
// SetActiveLiquidityUsdNil sets the value for ActiveLiquidityUsd to be an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetActiveLiquidityUsdNil() {
	o.ActiveLiquidityUsd.Set(nil)
}

// UnsetActiveLiquidityUsd ensures that no value is present for ActiveLiquidityUsd, not even an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) UnsetActiveLiquidityUsd() {
	o.ActiveLiquidityUsd.Unset()
}

// GetUncollectedProtocolSideTokenAmounts returns the UncollectedProtocolSideTokenAmounts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetUncollectedProtocolSideTokenAmounts() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.UncollectedProtocolSideTokenAmounts
}

// GetUncollectedProtocolSideTokenAmountsOk returns a tuple with the UncollectedProtocolSideTokenAmounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetUncollectedProtocolSideTokenAmountsOk() ([]string, bool) {
	if o == nil || IsNil(o.UncollectedProtocolSideTokenAmounts) {
		return nil, false
	}
	return o.UncollectedProtocolSideTokenAmounts, true
}

// HasUncollectedProtocolSideTokenAmounts returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasUncollectedProtocolSideTokenAmounts() bool {
	if o != nil && IsNil(o.UncollectedProtocolSideTokenAmounts) {
		return true
	}

	return false
}

// SetUncollectedProtocolSideTokenAmounts gets a reference to the given []string and assigns it to the UncollectedProtocolSideTokenAmounts field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetUncollectedProtocolSideTokenAmounts(v []string) {
	o.UncollectedProtocolSideTokenAmounts = v
}

// GetUncollectedProtocolSideValuesUsd returns the UncollectedProtocolSideValuesUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetUncollectedProtocolSideValuesUsd() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.UncollectedProtocolSideValuesUsd
}

// GetUncollectedProtocolSideValuesUsdOk returns a tuple with the UncollectedProtocolSideValuesUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetUncollectedProtocolSideValuesUsdOk() ([]string, bool) {
	if o == nil || IsNil(o.UncollectedProtocolSideValuesUsd) {
		return nil, false
	}
	return o.UncollectedProtocolSideValuesUsd, true
}

// HasUncollectedProtocolSideValuesUsd returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasUncollectedProtocolSideValuesUsd() bool {
	if o != nil && IsNil(o.UncollectedProtocolSideValuesUsd) {
		return true
	}

	return false
}

// SetUncollectedProtocolSideValuesUsd gets a reference to the given []string and assigns it to the UncollectedProtocolSideValuesUsd field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetUncollectedProtocolSideValuesUsd(v []string) {
	o.UncollectedProtocolSideValuesUsd = v
}

// GetUncollectedSupplySideTokenAmounts returns the UncollectedSupplySideTokenAmounts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetUncollectedSupplySideTokenAmounts() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.UncollectedSupplySideTokenAmounts
}

// GetUncollectedSupplySideTokenAmountsOk returns a tuple with the UncollectedSupplySideTokenAmounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetUncollectedSupplySideTokenAmountsOk() ([]string, bool) {
	if o == nil || IsNil(o.UncollectedSupplySideTokenAmounts) {
		return nil, false
	}
	return o.UncollectedSupplySideTokenAmounts, true
}

// HasUncollectedSupplySideTokenAmounts returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasUncollectedSupplySideTokenAmounts() bool {
	if o != nil && IsNil(o.UncollectedSupplySideTokenAmounts) {
		return true
	}

	return false
}

// SetUncollectedSupplySideTokenAmounts gets a reference to the given []string and assigns it to the UncollectedSupplySideTokenAmounts field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetUncollectedSupplySideTokenAmounts(v []string) {
	o.UncollectedSupplySideTokenAmounts = v
}

// GetUncollectedSupplySideValuesUsd returns the UncollectedSupplySideValuesUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetUncollectedSupplySideValuesUsd() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.UncollectedSupplySideValuesUsd
}

// GetUncollectedSupplySideValuesUsdOk returns a tuple with the UncollectedSupplySideValuesUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetUncollectedSupplySideValuesUsdOk() ([]string, bool) {
	if o == nil || IsNil(o.UncollectedSupplySideValuesUsd) {
		return nil, false
	}
	return o.UncollectedSupplySideValuesUsd, true
}

// HasUncollectedSupplySideValuesUsd returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasUncollectedSupplySideValuesUsd() bool {
	if o != nil && IsNil(o.UncollectedSupplySideValuesUsd) {
		return true
	}

	return false
}

// SetUncollectedSupplySideValuesUsd gets a reference to the given []string and assigns it to the UncollectedSupplySideValuesUsd field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetUncollectedSupplySideValuesUsd(v []string) {
	o.UncollectedSupplySideValuesUsd = v
}

// GetCumulativeSupplySideRevenueUsd returns the CumulativeSupplySideRevenueUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetCumulativeSupplySideRevenueUsd() string {
	if o == nil || IsNil(o.CumulativeSupplySideRevenueUsd.Get()) {
		var ret string
		return ret
	}
	return *o.CumulativeSupplySideRevenueUsd.Get()
}

// GetCumulativeSupplySideRevenueUsdOk returns a tuple with the CumulativeSupplySideRevenueUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetCumulativeSupplySideRevenueUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CumulativeSupplySideRevenueUsd.Get(), o.CumulativeSupplySideRevenueUsd.IsSet()
}

// HasCumulativeSupplySideRevenueUsd returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasCumulativeSupplySideRevenueUsd() bool {
	if o != nil && o.CumulativeSupplySideRevenueUsd.IsSet() {
		return true
	}

	return false
}

// SetCumulativeSupplySideRevenueUsd gets a reference to the given NullableString and assigns it to the CumulativeSupplySideRevenueUsd field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetCumulativeSupplySideRevenueUsd(v string) {
	o.CumulativeSupplySideRevenueUsd.Set(&v)
}
// SetCumulativeSupplySideRevenueUsdNil sets the value for CumulativeSupplySideRevenueUsd to be an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetCumulativeSupplySideRevenueUsdNil() {
	o.CumulativeSupplySideRevenueUsd.Set(nil)
}

// UnsetCumulativeSupplySideRevenueUsd ensures that no value is present for CumulativeSupplySideRevenueUsd, not even an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) UnsetCumulativeSupplySideRevenueUsd() {
	o.CumulativeSupplySideRevenueUsd.Unset()
}

// GetCumulativeProtocolSideRevenueUsd returns the CumulativeProtocolSideRevenueUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetCumulativeProtocolSideRevenueUsd() string {
	if o == nil || IsNil(o.CumulativeProtocolSideRevenueUsd.Get()) {
		var ret string
		return ret
	}
	return *o.CumulativeProtocolSideRevenueUsd.Get()
}

// GetCumulativeProtocolSideRevenueUsdOk returns a tuple with the CumulativeProtocolSideRevenueUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetCumulativeProtocolSideRevenueUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CumulativeProtocolSideRevenueUsd.Get(), o.CumulativeProtocolSideRevenueUsd.IsSet()
}

// HasCumulativeProtocolSideRevenueUsd returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasCumulativeProtocolSideRevenueUsd() bool {
	if o != nil && o.CumulativeProtocolSideRevenueUsd.IsSet() {
		return true
	}

	return false
}

// SetCumulativeProtocolSideRevenueUsd gets a reference to the given NullableString and assigns it to the CumulativeProtocolSideRevenueUsd field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetCumulativeProtocolSideRevenueUsd(v string) {
	o.CumulativeProtocolSideRevenueUsd.Set(&v)
}
// SetCumulativeProtocolSideRevenueUsdNil sets the value for CumulativeProtocolSideRevenueUsd to be an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetCumulativeProtocolSideRevenueUsdNil() {
	o.CumulativeProtocolSideRevenueUsd.Set(nil)
}

// UnsetCumulativeProtocolSideRevenueUsd ensures that no value is present for CumulativeProtocolSideRevenueUsd, not even an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) UnsetCumulativeProtocolSideRevenueUsd() {
	o.CumulativeProtocolSideRevenueUsd.Unset()
}

// GetCumulativeTotalRevenueUsd returns the CumulativeTotalRevenueUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetCumulativeTotalRevenueUsd() string {
	if o == nil || IsNil(o.CumulativeTotalRevenueUsd.Get()) {
		var ret string
		return ret
	}
	return *o.CumulativeTotalRevenueUsd.Get()
}

// GetCumulativeTotalRevenueUsdOk returns a tuple with the CumulativeTotalRevenueUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetCumulativeTotalRevenueUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CumulativeTotalRevenueUsd.Get(), o.CumulativeTotalRevenueUsd.IsSet()
}

// HasCumulativeTotalRevenueUsd returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasCumulativeTotalRevenueUsd() bool {
	if o != nil && o.CumulativeTotalRevenueUsd.IsSet() {
		return true
	}

	return false
}

// SetCumulativeTotalRevenueUsd gets a reference to the given NullableString and assigns it to the CumulativeTotalRevenueUsd field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetCumulativeTotalRevenueUsd(v string) {
	o.CumulativeTotalRevenueUsd.Set(&v)
}
// SetCumulativeTotalRevenueUsdNil sets the value for CumulativeTotalRevenueUsd to be an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetCumulativeTotalRevenueUsdNil() {
	o.CumulativeTotalRevenueUsd.Set(nil)
}

// UnsetCumulativeTotalRevenueUsd ensures that no value is present for CumulativeTotalRevenueUsd, not even an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) UnsetCumulativeTotalRevenueUsd() {
	o.CumulativeTotalRevenueUsd.Unset()
}

// GetCumulativeVolumeByTokenAmount returns the CumulativeVolumeByTokenAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetCumulativeVolumeByTokenAmount() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.CumulativeVolumeByTokenAmount
}

// GetCumulativeVolumeByTokenAmountOk returns a tuple with the CumulativeVolumeByTokenAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetCumulativeVolumeByTokenAmountOk() ([]string, bool) {
	if o == nil || IsNil(o.CumulativeVolumeByTokenAmount) {
		return nil, false
	}
	return o.CumulativeVolumeByTokenAmount, true
}

// HasCumulativeVolumeByTokenAmount returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasCumulativeVolumeByTokenAmount() bool {
	if o != nil && IsNil(o.CumulativeVolumeByTokenAmount) {
		return true
	}

	return false
}

// SetCumulativeVolumeByTokenAmount gets a reference to the given []string and assigns it to the CumulativeVolumeByTokenAmount field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetCumulativeVolumeByTokenAmount(v []string) {
	o.CumulativeVolumeByTokenAmount = v
}

// GetCumulativeVolumeByTokenUsd returns the CumulativeVolumeByTokenUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetCumulativeVolumeByTokenUsd() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.CumulativeVolumeByTokenUsd
}

// GetCumulativeVolumeByTokenUsdOk returns a tuple with the CumulativeVolumeByTokenUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetCumulativeVolumeByTokenUsdOk() ([]string, bool) {
	if o == nil || IsNil(o.CumulativeVolumeByTokenUsd) {
		return nil, false
	}
	return o.CumulativeVolumeByTokenUsd, true
}

// HasCumulativeVolumeByTokenUsd returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasCumulativeVolumeByTokenUsd() bool {
	if o != nil && IsNil(o.CumulativeVolumeByTokenUsd) {
		return true
	}

	return false
}

// SetCumulativeVolumeByTokenUsd gets a reference to the given []string and assigns it to the CumulativeVolumeByTokenUsd field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetCumulativeVolumeByTokenUsd(v []string) {
	o.CumulativeVolumeByTokenUsd = v
}

// GetCumulativeVolumeUsd returns the CumulativeVolumeUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetCumulativeVolumeUsd() string {
	if o == nil || IsNil(o.CumulativeVolumeUsd.Get()) {
		var ret string
		return ret
	}
	return *o.CumulativeVolumeUsd.Get()
}

// GetCumulativeVolumeUsdOk returns a tuple with the CumulativeVolumeUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetCumulativeVolumeUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CumulativeVolumeUsd.Get(), o.CumulativeVolumeUsd.IsSet()
}

// HasCumulativeVolumeUsd returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasCumulativeVolumeUsd() bool {
	if o != nil && o.CumulativeVolumeUsd.IsSet() {
		return true
	}

	return false
}

// SetCumulativeVolumeUsd gets a reference to the given NullableString and assigns it to the CumulativeVolumeUsd field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetCumulativeVolumeUsd(v string) {
	o.CumulativeVolumeUsd.Set(&v)
}
// SetCumulativeVolumeUsdNil sets the value for CumulativeVolumeUsd to be an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetCumulativeVolumeUsdNil() {
	o.CumulativeVolumeUsd.Set(nil)
}

// UnsetCumulativeVolumeUsd ensures that no value is present for CumulativeVolumeUsd, not even an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) UnsetCumulativeVolumeUsd() {
	o.CumulativeVolumeUsd.Unset()
}

// GetInputTokenBalances returns the InputTokenBalances field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetInputTokenBalances() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.InputTokenBalances
}

// GetInputTokenBalancesOk returns a tuple with the InputTokenBalances field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetInputTokenBalancesOk() ([]string, bool) {
	if o == nil || IsNil(o.InputTokenBalances) {
		return nil, false
	}
	return o.InputTokenBalances, true
}

// HasInputTokenBalances returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasInputTokenBalances() bool {
	if o != nil && IsNil(o.InputTokenBalances) {
		return true
	}

	return false
}

// SetInputTokenBalances gets a reference to the given []string and assigns it to the InputTokenBalances field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetInputTokenBalances(v []string) {
	o.InputTokenBalances = v
}

// GetInputTokenBalancesUsd returns the InputTokenBalancesUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetInputTokenBalancesUsd() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.InputTokenBalancesUsd
}

// GetInputTokenBalancesUsdOk returns a tuple with the InputTokenBalancesUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetInputTokenBalancesUsdOk() ([]string, bool) {
	if o == nil || IsNil(o.InputTokenBalancesUsd) {
		return nil, false
	}
	return o.InputTokenBalancesUsd, true
}

// HasInputTokenBalancesUsd returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasInputTokenBalancesUsd() bool {
	if o != nil && IsNil(o.InputTokenBalancesUsd) {
		return true
	}

	return false
}

// SetInputTokenBalancesUsd gets a reference to the given []string and assigns it to the InputTokenBalancesUsd field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetInputTokenBalancesUsd(v []string) {
	o.InputTokenBalancesUsd = v
}

// GetInputTokenWeights returns the InputTokenWeights field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetInputTokenWeights() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.InputTokenWeights
}

// GetInputTokenWeightsOk returns a tuple with the InputTokenWeights field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetInputTokenWeightsOk() ([]string, bool) {
	if o == nil || IsNil(o.InputTokenWeights) {
		return nil, false
	}
	return o.InputTokenWeights, true
}

// HasInputTokenWeights returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasInputTokenWeights() bool {
	if o != nil && IsNil(o.InputTokenWeights) {
		return true
	}

	return false
}

// SetInputTokenWeights gets a reference to the given []string and assigns it to the InputTokenWeights field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetInputTokenWeights(v []string) {
	o.InputTokenWeights = v
}

// GetStakedOutputTokenAmount returns the StakedOutputTokenAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetStakedOutputTokenAmount() string {
	if o == nil || IsNil(o.StakedOutputTokenAmount.Get()) {
		var ret string
		return ret
	}
	return *o.StakedOutputTokenAmount.Get()
}

// GetStakedOutputTokenAmountOk returns a tuple with the StakedOutputTokenAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetStakedOutputTokenAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StakedOutputTokenAmount.Get(), o.StakedOutputTokenAmount.IsSet()
}

// HasStakedOutputTokenAmount returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasStakedOutputTokenAmount() bool {
	if o != nil && o.StakedOutputTokenAmount.IsSet() {
		return true
	}

	return false
}

// SetStakedOutputTokenAmount gets a reference to the given NullableString and assigns it to the StakedOutputTokenAmount field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetStakedOutputTokenAmount(v string) {
	o.StakedOutputTokenAmount.Set(&v)
}
// SetStakedOutputTokenAmountNil sets the value for StakedOutputTokenAmount to be an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetStakedOutputTokenAmountNil() {
	o.StakedOutputTokenAmount.Set(nil)
}

// UnsetStakedOutputTokenAmount ensures that no value is present for StakedOutputTokenAmount, not even an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) UnsetStakedOutputTokenAmount() {
	o.StakedOutputTokenAmount.Unset()
}

// GetRewardTokenEmissionsAmount returns the RewardTokenEmissionsAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetRewardTokenEmissionsAmount() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.RewardTokenEmissionsAmount
}

// GetRewardTokenEmissionsAmountOk returns a tuple with the RewardTokenEmissionsAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetRewardTokenEmissionsAmountOk() ([]string, bool) {
	if o == nil || IsNil(o.RewardTokenEmissionsAmount) {
		return nil, false
	}
	return o.RewardTokenEmissionsAmount, true
}

// HasRewardTokenEmissionsAmount returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasRewardTokenEmissionsAmount() bool {
	if o != nil && IsNil(o.RewardTokenEmissionsAmount) {
		return true
	}

	return false
}

// SetRewardTokenEmissionsAmount gets a reference to the given []string and assigns it to the RewardTokenEmissionsAmount field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetRewardTokenEmissionsAmount(v []string) {
	o.RewardTokenEmissionsAmount = v
}

// GetRewardTokenEmissionsUsd returns the RewardTokenEmissionsUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetRewardTokenEmissionsUsd() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.RewardTokenEmissionsUsd
}

// GetRewardTokenEmissionsUsdOk returns a tuple with the RewardTokenEmissionsUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetRewardTokenEmissionsUsdOk() ([]string, bool) {
	if o == nil || IsNil(o.RewardTokenEmissionsUsd) {
		return nil, false
	}
	return o.RewardTokenEmissionsUsd, true
}

// HasRewardTokenEmissionsUsd returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasRewardTokenEmissionsUsd() bool {
	if o != nil && IsNil(o.RewardTokenEmissionsUsd) {
		return true
	}

	return false
}

// SetRewardTokenEmissionsUsd gets a reference to the given []string and assigns it to the RewardTokenEmissionsUsd field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetRewardTokenEmissionsUsd(v []string) {
	o.RewardTokenEmissionsUsd = v
}

// GetCumulativeDepositCount returns the CumulativeDepositCount field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetCumulativeDepositCount() int32 {
	if o == nil || IsNil(o.CumulativeDepositCount) {
		var ret int32
		return ret
	}
	return *o.CumulativeDepositCount
}

// GetCumulativeDepositCountOk returns a tuple with the CumulativeDepositCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetCumulativeDepositCountOk() (*int32, bool) {
	if o == nil || IsNil(o.CumulativeDepositCount) {
		return nil, false
	}
	return o.CumulativeDepositCount, true
}

// HasCumulativeDepositCount returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasCumulativeDepositCount() bool {
	if o != nil && !IsNil(o.CumulativeDepositCount) {
		return true
	}

	return false
}

// SetCumulativeDepositCount gets a reference to the given int32 and assigns it to the CumulativeDepositCount field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetCumulativeDepositCount(v int32) {
	o.CumulativeDepositCount = &v
}

// GetCumulativeWithdrawCount returns the CumulativeWithdrawCount field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetCumulativeWithdrawCount() int32 {
	if o == nil || IsNil(o.CumulativeWithdrawCount) {
		var ret int32
		return ret
	}
	return *o.CumulativeWithdrawCount
}

// GetCumulativeWithdrawCountOk returns a tuple with the CumulativeWithdrawCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetCumulativeWithdrawCountOk() (*int32, bool) {
	if o == nil || IsNil(o.CumulativeWithdrawCount) {
		return nil, false
	}
	return o.CumulativeWithdrawCount, true
}

// HasCumulativeWithdrawCount returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasCumulativeWithdrawCount() bool {
	if o != nil && !IsNil(o.CumulativeWithdrawCount) {
		return true
	}

	return false
}

// SetCumulativeWithdrawCount gets a reference to the given int32 and assigns it to the CumulativeWithdrawCount field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetCumulativeWithdrawCount(v int32) {
	o.CumulativeWithdrawCount = &v
}

// GetCumulativeSwapCount returns the CumulativeSwapCount field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetCumulativeSwapCount() int32 {
	if o == nil || IsNil(o.CumulativeSwapCount) {
		var ret int32
		return ret
	}
	return *o.CumulativeSwapCount
}

// GetCumulativeSwapCountOk returns a tuple with the CumulativeSwapCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetCumulativeSwapCountOk() (*int32, bool) {
	if o == nil || IsNil(o.CumulativeSwapCount) {
		return nil, false
	}
	return o.CumulativeSwapCount, true
}

// HasCumulativeSwapCount returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasCumulativeSwapCount() bool {
	if o != nil && !IsNil(o.CumulativeSwapCount) {
		return true
	}

	return false
}

// SetCumulativeSwapCount gets a reference to the given int32 and assigns it to the CumulativeSwapCount field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetCumulativeSwapCount(v int32) {
	o.CumulativeSwapCount = &v
}

// GetPositionCount returns the PositionCount field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetPositionCount() int32 {
	if o == nil || IsNil(o.PositionCount) {
		var ret int32
		return ret
	}
	return *o.PositionCount
}

// GetPositionCountOk returns a tuple with the PositionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetPositionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PositionCount) {
		return nil, false
	}
	return o.PositionCount, true
}

// HasPositionCount returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasPositionCount() bool {
	if o != nil && !IsNil(o.PositionCount) {
		return true
	}

	return false
}

// SetPositionCount gets a reference to the given int32 and assigns it to the PositionCount field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetPositionCount(v int32) {
	o.PositionCount = &v
}

// GetOpenPositionCount returns the OpenPositionCount field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetOpenPositionCount() int32 {
	if o == nil || IsNil(o.OpenPositionCount) {
		var ret int32
		return ret
	}
	return *o.OpenPositionCount
}

// GetOpenPositionCountOk returns a tuple with the OpenPositionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetOpenPositionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.OpenPositionCount) {
		return nil, false
	}
	return o.OpenPositionCount, true
}

// HasOpenPositionCount returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasOpenPositionCount() bool {
	if o != nil && !IsNil(o.OpenPositionCount) {
		return true
	}

	return false
}

// SetOpenPositionCount gets a reference to the given int32 and assigns it to the OpenPositionCount field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetOpenPositionCount(v int32) {
	o.OpenPositionCount = &v
}

// GetClosedPositionCount returns the ClosedPositionCount field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetClosedPositionCount() int32 {
	if o == nil || IsNil(o.ClosedPositionCount) {
		var ret int32
		return ret
	}
	return *o.ClosedPositionCount
}

// GetClosedPositionCountOk returns a tuple with the ClosedPositionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetClosedPositionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ClosedPositionCount) {
		return nil, false
	}
	return o.ClosedPositionCount, true
}

// HasClosedPositionCount returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasClosedPositionCount() bool {
	if o != nil && !IsNil(o.ClosedPositionCount) {
		return true
	}

	return false
}

// SetClosedPositionCount gets a reference to the given int32 and assigns it to the ClosedPositionCount field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetClosedPositionCount(v int32) {
	o.ClosedPositionCount = &v
}

// GetLastSnapshotDayId returns the LastSnapshotDayId field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetLastSnapshotDayId() int32 {
	if o == nil || IsNil(o.LastSnapshotDayId) {
		var ret int32
		return ret
	}
	return *o.LastSnapshotDayId
}

// GetLastSnapshotDayIdOk returns a tuple with the LastSnapshotDayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetLastSnapshotDayIdOk() (*int32, bool) {
	if o == nil || IsNil(o.LastSnapshotDayId) {
		return nil, false
	}
	return o.LastSnapshotDayId, true
}

// HasLastSnapshotDayId returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasLastSnapshotDayId() bool {
	if o != nil && !IsNil(o.LastSnapshotDayId) {
		return true
	}

	return false
}

// SetLastSnapshotDayId gets a reference to the given int32 and assigns it to the LastSnapshotDayId field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetLastSnapshotDayId(v int32) {
	o.LastSnapshotDayId = &v
}

// GetLastSnapshotHourId returns the LastSnapshotHourId field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetLastSnapshotHourId() int32 {
	if o == nil || IsNil(o.LastSnapshotHourId) {
		var ret int32
		return ret
	}
	return *o.LastSnapshotHourId
}

// GetLastSnapshotHourIdOk returns a tuple with the LastSnapshotHourId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetLastSnapshotHourIdOk() (*int32, bool) {
	if o == nil || IsNil(o.LastSnapshotHourId) {
		return nil, false
	}
	return o.LastSnapshotHourId, true
}

// HasLastSnapshotHourId returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasLastSnapshotHourId() bool {
	if o != nil && !IsNil(o.LastSnapshotHourId) {
		return true
	}

	return false
}

// SetLastSnapshotHourId gets a reference to the given int32 and assigns it to the LastSnapshotHourId field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetLastSnapshotHourId(v int32) {
	o.LastSnapshotHourId = &v
}

// GetLastUpdateTimestamp returns the LastUpdateTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetLastUpdateTimestamp() string {
	if o == nil || IsNil(o.LastUpdateTimestamp.Get()) {
		var ret string
		return ret
	}
	return *o.LastUpdateTimestamp.Get()
}

// GetLastUpdateTimestampOk returns a tuple with the LastUpdateTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetLastUpdateTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdateTimestamp.Get(), o.LastUpdateTimestamp.IsSet()
}

// HasLastUpdateTimestamp returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasLastUpdateTimestamp() bool {
	if o != nil && o.LastUpdateTimestamp.IsSet() {
		return true
	}

	return false
}

// SetLastUpdateTimestamp gets a reference to the given NullableString and assigns it to the LastUpdateTimestamp field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetLastUpdateTimestamp(v string) {
	o.LastUpdateTimestamp.Set(&v)
}
// SetLastUpdateTimestampNil sets the value for LastUpdateTimestamp to be an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetLastUpdateTimestampNil() {
	o.LastUpdateTimestamp.Set(nil)
}

// UnsetLastUpdateTimestamp ensures that no value is present for LastUpdateTimestamp, not even an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) UnsetLastUpdateTimestamp() {
	o.LastUpdateTimestamp.Unset()
}

// GetLastUpdateBlockNumber returns the LastUpdateBlockNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetLastUpdateBlockNumber() string {
	if o == nil || IsNil(o.LastUpdateBlockNumber.Get()) {
		var ret string
		return ret
	}
	return *o.LastUpdateBlockNumber.Get()
}

// GetLastUpdateBlockNumberOk returns a tuple with the LastUpdateBlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetLastUpdateBlockNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdateBlockNumber.Get(), o.LastUpdateBlockNumber.IsSet()
}

// HasLastUpdateBlockNumber returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasLastUpdateBlockNumber() bool {
	if o != nil && o.LastUpdateBlockNumber.IsSet() {
		return true
	}

	return false
}

// SetLastUpdateBlockNumber gets a reference to the given NullableString and assigns it to the LastUpdateBlockNumber field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetLastUpdateBlockNumber(v string) {
	o.LastUpdateBlockNumber.Set(&v)
}
// SetLastUpdateBlockNumberNil sets the value for LastUpdateBlockNumber to be an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetLastUpdateBlockNumberNil() {
	o.LastUpdateBlockNumber.Set(nil)
}

// UnsetLastUpdateBlockNumber ensures that no value is present for LastUpdateBlockNumber, not even an explicit nil
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) UnsetLastUpdateBlockNumber() {
	o.LastUpdateBlockNumber.Unset()
}

// GetEvaluatedAsk returns the EvaluatedAsk field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetEvaluatedAsk() float64 {
	if o == nil || IsNil(o.EvaluatedAsk) {
		var ret float64
		return ret
	}
	return *o.EvaluatedAsk
}

// GetEvaluatedAskOk returns a tuple with the EvaluatedAsk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) GetEvaluatedAskOk() (*float64, bool) {
	if o == nil || IsNil(o.EvaluatedAsk) {
		return nil, false
	}
	return o.EvaluatedAsk, true
}

// HasEvaluatedAsk returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) HasEvaluatedAsk() bool {
	if o != nil && !IsNil(o.EvaluatedAsk) {
		return true
	}

	return false
}

// SetEvaluatedAsk gets a reference to the given float64 and assigns it to the EvaluatedAsk field.
func (o *UNISWAPV3ETHEREUMLiquidityPoolDTO) SetEvaluatedAsk(v float64) {
	o.EvaluatedAsk = &v
}

func (o UNISWAPV3ETHEREUMLiquidityPoolDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UNISWAPV3ETHEREUMLiquidityPoolDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryTime) {
		toSerialize["entry_time"] = o.EntryTime
	}
	if !IsNil(o.RecvTime) {
		toSerialize["recv_time"] = o.RecvTime
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["block_number"] = o.BlockNumber
	}
	if !IsNil(o.Vid) {
		toSerialize["vid"] = o.Vid
	}
	if o.BlockRange.IsSet() {
		toSerialize["block_range"] = o.BlockRange.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Protocol.IsSet() {
		toSerialize["protocol"] = o.Protocol.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Symbol.IsSet() {
		toSerialize["symbol"] = o.Symbol.Get()
	}
	if o.LiquidityToken.IsSet() {
		toSerialize["liquidity_token"] = o.LiquidityToken.Get()
	}
	if o.InputTokens != nil {
		toSerialize["input_tokens"] = o.InputTokens
	}
	if o.RewardTokens != nil {
		toSerialize["reward_tokens"] = o.RewardTokens
	}
	if o.Fees != nil {
		toSerialize["fees"] = o.Fees
	}
	if !IsNil(o.IsSingleSided) {
		toSerialize["is_single_sided"] = o.IsSingleSided
	}
	if o.CreatedTimestamp.IsSet() {
		toSerialize["created_timestamp"] = o.CreatedTimestamp.Get()
	}
	if o.CreatedBlockNumber.IsSet() {
		toSerialize["created_block_number"] = o.CreatedBlockNumber.Get()
	}
	if o.Tick.IsSet() {
		toSerialize["tick"] = o.Tick.Get()
	}
	if o.TotalValueLockedUsd.IsSet() {
		toSerialize["total_value_locked_usd"] = o.TotalValueLockedUsd.Get()
	}
	if o.TotalLiquidity.IsSet() {
		toSerialize["total_liquidity"] = o.TotalLiquidity.Get()
	}
	if o.TotalLiquidityUsd.IsSet() {
		toSerialize["total_liquidity_usd"] = o.TotalLiquidityUsd.Get()
	}
	if o.ActiveLiquidity.IsSet() {
		toSerialize["active_liquidity"] = o.ActiveLiquidity.Get()
	}
	if o.ActiveLiquidityUsd.IsSet() {
		toSerialize["active_liquidity_usd"] = o.ActiveLiquidityUsd.Get()
	}
	if o.UncollectedProtocolSideTokenAmounts != nil {
		toSerialize["uncollected_protocol_side_token_amounts"] = o.UncollectedProtocolSideTokenAmounts
	}
	if o.UncollectedProtocolSideValuesUsd != nil {
		toSerialize["uncollected_protocol_side_values_usd"] = o.UncollectedProtocolSideValuesUsd
	}
	if o.UncollectedSupplySideTokenAmounts != nil {
		toSerialize["uncollected_supply_side_token_amounts"] = o.UncollectedSupplySideTokenAmounts
	}
	if o.UncollectedSupplySideValuesUsd != nil {
		toSerialize["uncollected_supply_side_values_usd"] = o.UncollectedSupplySideValuesUsd
	}
	if o.CumulativeSupplySideRevenueUsd.IsSet() {
		toSerialize["cumulative_supply_side_revenue_usd"] = o.CumulativeSupplySideRevenueUsd.Get()
	}
	if o.CumulativeProtocolSideRevenueUsd.IsSet() {
		toSerialize["cumulative_protocol_side_revenue_usd"] = o.CumulativeProtocolSideRevenueUsd.Get()
	}
	if o.CumulativeTotalRevenueUsd.IsSet() {
		toSerialize["cumulative_total_revenue_usd"] = o.CumulativeTotalRevenueUsd.Get()
	}
	if o.CumulativeVolumeByTokenAmount != nil {
		toSerialize["cumulative_volume_by_token_amount"] = o.CumulativeVolumeByTokenAmount
	}
	if o.CumulativeVolumeByTokenUsd != nil {
		toSerialize["cumulative_volume_by_token_usd"] = o.CumulativeVolumeByTokenUsd
	}
	if o.CumulativeVolumeUsd.IsSet() {
		toSerialize["cumulative_volume_usd"] = o.CumulativeVolumeUsd.Get()
	}
	if o.InputTokenBalances != nil {
		toSerialize["input_token_balances"] = o.InputTokenBalances
	}
	if o.InputTokenBalancesUsd != nil {
		toSerialize["input_token_balances_usd"] = o.InputTokenBalancesUsd
	}
	if o.InputTokenWeights != nil {
		toSerialize["input_token_weights"] = o.InputTokenWeights
	}
	if o.StakedOutputTokenAmount.IsSet() {
		toSerialize["staked_output_token_amount"] = o.StakedOutputTokenAmount.Get()
	}
	if o.RewardTokenEmissionsAmount != nil {
		toSerialize["reward_token_emissions_amount"] = o.RewardTokenEmissionsAmount
	}
	if o.RewardTokenEmissionsUsd != nil {
		toSerialize["reward_token_emissions_usd"] = o.RewardTokenEmissionsUsd
	}
	if !IsNil(o.CumulativeDepositCount) {
		toSerialize["cumulative_deposit_count"] = o.CumulativeDepositCount
	}
	if !IsNil(o.CumulativeWithdrawCount) {
		toSerialize["cumulative_withdraw_count"] = o.CumulativeWithdrawCount
	}
	if !IsNil(o.CumulativeSwapCount) {
		toSerialize["cumulative_swap_count"] = o.CumulativeSwapCount
	}
	if !IsNil(o.PositionCount) {
		toSerialize["position_count"] = o.PositionCount
	}
	if !IsNil(o.OpenPositionCount) {
		toSerialize["open_position_count"] = o.OpenPositionCount
	}
	if !IsNil(o.ClosedPositionCount) {
		toSerialize["closed_position_count"] = o.ClosedPositionCount
	}
	if !IsNil(o.LastSnapshotDayId) {
		toSerialize["last_snapshot_day_id"] = o.LastSnapshotDayId
	}
	if !IsNil(o.LastSnapshotHourId) {
		toSerialize["last_snapshot_hour_id"] = o.LastSnapshotHourId
	}
	if o.LastUpdateTimestamp.IsSet() {
		toSerialize["last_update_timestamp"] = o.LastUpdateTimestamp.Get()
	}
	if o.LastUpdateBlockNumber.IsSet() {
		toSerialize["last_update_block_number"] = o.LastUpdateBlockNumber.Get()
	}
	// skip: evaluated_ask is readOnly
	return toSerialize, nil
}

type NullableUNISWAPV3ETHEREUMLiquidityPoolDTO struct {
	value *UNISWAPV3ETHEREUMLiquidityPoolDTO
	isSet bool
}

func (v NullableUNISWAPV3ETHEREUMLiquidityPoolDTO) Get() *UNISWAPV3ETHEREUMLiquidityPoolDTO {
	return v.value
}

func (v *NullableUNISWAPV3ETHEREUMLiquidityPoolDTO) Set(val *UNISWAPV3ETHEREUMLiquidityPoolDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUNISWAPV3ETHEREUMLiquidityPoolDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUNISWAPV3ETHEREUMLiquidityPoolDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUNISWAPV3ETHEREUMLiquidityPoolDTO(val *UNISWAPV3ETHEREUMLiquidityPoolDTO) *NullableUNISWAPV3ETHEREUMLiquidityPoolDTO {
	return &NullableUNISWAPV3ETHEREUMLiquidityPoolDTO{value: val, isSet: true}
}

func (v NullableUNISWAPV3ETHEREUMLiquidityPoolDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUNISWAPV3ETHEREUMLiquidityPoolDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


