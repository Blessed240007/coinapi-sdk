/*
On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the UNISWAPV2ETHEREUMMasterChefDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UNISWAPV2ETHEREUMMasterChefDTO{}

// UNISWAPV2ETHEREUMMasterChefDTO Smart contract that is used to manage the liquidity mining program on Uniswap V2.
type UNISWAPV2ETHEREUMMasterChefDTO struct {
	EntryTime *time.Time `json:"entry_time,omitempty"`
	RecvTime *time.Time `json:"recv_time,omitempty"`
	// Number of block in which entity was recorded.
	BlockNumber *int64 `json:"block_number,omitempty"`
	// 
	BlockRange NullableString `json:"block_range,omitempty"`
	// (masterChef type) - (pid referenced in the masterchef contract)
	Id NullableString `json:"id,omitempty"`
	// Address of the masterchef contract
	Address NullableString `json:"address,omitempty"`
	// Total allocation point of all staking pools
	TotalAllocPoint NullableString `json:"total_alloc_point,omitempty"`
	// Amount of reward tokens emitted per block or timestamp
	RewardTokenRate NullableString `json:"reward_token_rate,omitempty"`
	// Indicates whether rewards are indicated by block or timestamp
	RewardTokenInterval NullableString `json:"reward_token_interval,omitempty"`
	// Reward token rate given after you adjust for allocations either burned or not applicable
	AdjustedRewardTokenRate NullableString `json:"adjusted_reward_token_rate,omitempty"`
	// Last time the adjusted reward token rate was updated
	LastUpdatedRewardRate NullableString `json:"last_updated_reward_rate,omitempty"`
}

// NewUNISWAPV2ETHEREUMMasterChefDTO instantiates a new UNISWAPV2ETHEREUMMasterChefDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUNISWAPV2ETHEREUMMasterChefDTO() *UNISWAPV2ETHEREUMMasterChefDTO {
	this := UNISWAPV2ETHEREUMMasterChefDTO{}
	return &this
}

// NewUNISWAPV2ETHEREUMMasterChefDTOWithDefaults instantiates a new UNISWAPV2ETHEREUMMasterChefDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUNISWAPV2ETHEREUMMasterChefDTOWithDefaults() *UNISWAPV2ETHEREUMMasterChefDTO {
	this := UNISWAPV2ETHEREUMMasterChefDTO{}
	return &this
}

// GetEntryTime returns the EntryTime field value if set, zero value otherwise.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) GetEntryTime() time.Time {
	if o == nil || IsNil(o.EntryTime) {
		var ret time.Time
		return ret
	}
	return *o.EntryTime
}

// GetEntryTimeOk returns a tuple with the EntryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) GetEntryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EntryTime) {
		return nil, false
	}
	return o.EntryTime, true
}

// HasEntryTime returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) HasEntryTime() bool {
	if o != nil && !IsNil(o.EntryTime) {
		return true
	}

	return false
}

// SetEntryTime gets a reference to the given time.Time and assigns it to the EntryTime field.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) SetEntryTime(v time.Time) {
	o.EntryTime = &v
}

// GetRecvTime returns the RecvTime field value if set, zero value otherwise.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) GetRecvTime() time.Time {
	if o == nil || IsNil(o.RecvTime) {
		var ret time.Time
		return ret
	}
	return *o.RecvTime
}

// GetRecvTimeOk returns a tuple with the RecvTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) GetRecvTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecvTime) {
		return nil, false
	}
	return o.RecvTime, true
}

// HasRecvTime returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) HasRecvTime() bool {
	if o != nil && !IsNil(o.RecvTime) {
		return true
	}

	return false
}

// SetRecvTime gets a reference to the given time.Time and assigns it to the RecvTime field.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) SetRecvTime(v time.Time) {
	o.RecvTime = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber) {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) GetBlockNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetBlockRange returns the BlockRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMMasterChefDTO) GetBlockRange() string {
	if o == nil || IsNil(o.BlockRange.Get()) {
		var ret string
		return ret
	}
	return *o.BlockRange.Get()
}

// GetBlockRangeOk returns a tuple with the BlockRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMMasterChefDTO) GetBlockRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockRange.Get(), o.BlockRange.IsSet()
}

// HasBlockRange returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) HasBlockRange() bool {
	if o != nil && o.BlockRange.IsSet() {
		return true
	}

	return false
}

// SetBlockRange gets a reference to the given NullableString and assigns it to the BlockRange field.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) SetBlockRange(v string) {
	o.BlockRange.Set(&v)
}
// SetBlockRangeNil sets the value for BlockRange to be an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefDTO) SetBlockRangeNil() {
	o.BlockRange.Set(nil)
}

// UnsetBlockRange ensures that no value is present for BlockRange, not even an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefDTO) UnsetBlockRange() {
	o.BlockRange.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMMasterChefDTO) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMMasterChefDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefDTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefDTO) UnsetId() {
	o.Id.Unset()
}

// GetAddress returns the Address field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMMasterChefDTO) GetAddress() string {
	if o == nil || IsNil(o.Address.Get()) {
		var ret string
		return ret
	}
	return *o.Address.Get()
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMMasterChefDTO) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Address.Get(), o.Address.IsSet()
}

// HasAddress returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) HasAddress() bool {
	if o != nil && o.Address.IsSet() {
		return true
	}

	return false
}

// SetAddress gets a reference to the given NullableString and assigns it to the Address field.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) SetAddress(v string) {
	o.Address.Set(&v)
}
// SetAddressNil sets the value for Address to be an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefDTO) SetAddressNil() {
	o.Address.Set(nil)
}

// UnsetAddress ensures that no value is present for Address, not even an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefDTO) UnsetAddress() {
	o.Address.Unset()
}

// GetTotalAllocPoint returns the TotalAllocPoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMMasterChefDTO) GetTotalAllocPoint() string {
	if o == nil || IsNil(o.TotalAllocPoint.Get()) {
		var ret string
		return ret
	}
	return *o.TotalAllocPoint.Get()
}

// GetTotalAllocPointOk returns a tuple with the TotalAllocPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMMasterChefDTO) GetTotalAllocPointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalAllocPoint.Get(), o.TotalAllocPoint.IsSet()
}

// HasTotalAllocPoint returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) HasTotalAllocPoint() bool {
	if o != nil && o.TotalAllocPoint.IsSet() {
		return true
	}

	return false
}

// SetTotalAllocPoint gets a reference to the given NullableString and assigns it to the TotalAllocPoint field.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) SetTotalAllocPoint(v string) {
	o.TotalAllocPoint.Set(&v)
}
// SetTotalAllocPointNil sets the value for TotalAllocPoint to be an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefDTO) SetTotalAllocPointNil() {
	o.TotalAllocPoint.Set(nil)
}

// UnsetTotalAllocPoint ensures that no value is present for TotalAllocPoint, not even an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefDTO) UnsetTotalAllocPoint() {
	o.TotalAllocPoint.Unset()
}

// GetRewardTokenRate returns the RewardTokenRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMMasterChefDTO) GetRewardTokenRate() string {
	if o == nil || IsNil(o.RewardTokenRate.Get()) {
		var ret string
		return ret
	}
	return *o.RewardTokenRate.Get()
}

// GetRewardTokenRateOk returns a tuple with the RewardTokenRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMMasterChefDTO) GetRewardTokenRateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RewardTokenRate.Get(), o.RewardTokenRate.IsSet()
}

// HasRewardTokenRate returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) HasRewardTokenRate() bool {
	if o != nil && o.RewardTokenRate.IsSet() {
		return true
	}

	return false
}

// SetRewardTokenRate gets a reference to the given NullableString and assigns it to the RewardTokenRate field.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) SetRewardTokenRate(v string) {
	o.RewardTokenRate.Set(&v)
}
// SetRewardTokenRateNil sets the value for RewardTokenRate to be an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefDTO) SetRewardTokenRateNil() {
	o.RewardTokenRate.Set(nil)
}

// UnsetRewardTokenRate ensures that no value is present for RewardTokenRate, not even an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefDTO) UnsetRewardTokenRate() {
	o.RewardTokenRate.Unset()
}

// GetRewardTokenInterval returns the RewardTokenInterval field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMMasterChefDTO) GetRewardTokenInterval() string {
	if o == nil || IsNil(o.RewardTokenInterval.Get()) {
		var ret string
		return ret
	}
	return *o.RewardTokenInterval.Get()
}

// GetRewardTokenIntervalOk returns a tuple with the RewardTokenInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMMasterChefDTO) GetRewardTokenIntervalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RewardTokenInterval.Get(), o.RewardTokenInterval.IsSet()
}

// HasRewardTokenInterval returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) HasRewardTokenInterval() bool {
	if o != nil && o.RewardTokenInterval.IsSet() {
		return true
	}

	return false
}

// SetRewardTokenInterval gets a reference to the given NullableString and assigns it to the RewardTokenInterval field.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) SetRewardTokenInterval(v string) {
	o.RewardTokenInterval.Set(&v)
}
// SetRewardTokenIntervalNil sets the value for RewardTokenInterval to be an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefDTO) SetRewardTokenIntervalNil() {
	o.RewardTokenInterval.Set(nil)
}

// UnsetRewardTokenInterval ensures that no value is present for RewardTokenInterval, not even an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefDTO) UnsetRewardTokenInterval() {
	o.RewardTokenInterval.Unset()
}

// GetAdjustedRewardTokenRate returns the AdjustedRewardTokenRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMMasterChefDTO) GetAdjustedRewardTokenRate() string {
	if o == nil || IsNil(o.AdjustedRewardTokenRate.Get()) {
		var ret string
		return ret
	}
	return *o.AdjustedRewardTokenRate.Get()
}

// GetAdjustedRewardTokenRateOk returns a tuple with the AdjustedRewardTokenRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMMasterChefDTO) GetAdjustedRewardTokenRateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdjustedRewardTokenRate.Get(), o.AdjustedRewardTokenRate.IsSet()
}

// HasAdjustedRewardTokenRate returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) HasAdjustedRewardTokenRate() bool {
	if o != nil && o.AdjustedRewardTokenRate.IsSet() {
		return true
	}

	return false
}

// SetAdjustedRewardTokenRate gets a reference to the given NullableString and assigns it to the AdjustedRewardTokenRate field.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) SetAdjustedRewardTokenRate(v string) {
	o.AdjustedRewardTokenRate.Set(&v)
}
// SetAdjustedRewardTokenRateNil sets the value for AdjustedRewardTokenRate to be an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefDTO) SetAdjustedRewardTokenRateNil() {
	o.AdjustedRewardTokenRate.Set(nil)
}

// UnsetAdjustedRewardTokenRate ensures that no value is present for AdjustedRewardTokenRate, not even an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefDTO) UnsetAdjustedRewardTokenRate() {
	o.AdjustedRewardTokenRate.Unset()
}

// GetLastUpdatedRewardRate returns the LastUpdatedRewardRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMMasterChefDTO) GetLastUpdatedRewardRate() string {
	if o == nil || IsNil(o.LastUpdatedRewardRate.Get()) {
		var ret string
		return ret
	}
	return *o.LastUpdatedRewardRate.Get()
}

// GetLastUpdatedRewardRateOk returns a tuple with the LastUpdatedRewardRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMMasterChefDTO) GetLastUpdatedRewardRateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdatedRewardRate.Get(), o.LastUpdatedRewardRate.IsSet()
}

// HasLastUpdatedRewardRate returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) HasLastUpdatedRewardRate() bool {
	if o != nil && o.LastUpdatedRewardRate.IsSet() {
		return true
	}

	return false
}

// SetLastUpdatedRewardRate gets a reference to the given NullableString and assigns it to the LastUpdatedRewardRate field.
func (o *UNISWAPV2ETHEREUMMasterChefDTO) SetLastUpdatedRewardRate(v string) {
	o.LastUpdatedRewardRate.Set(&v)
}
// SetLastUpdatedRewardRateNil sets the value for LastUpdatedRewardRate to be an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefDTO) SetLastUpdatedRewardRateNil() {
	o.LastUpdatedRewardRate.Set(nil)
}

// UnsetLastUpdatedRewardRate ensures that no value is present for LastUpdatedRewardRate, not even an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefDTO) UnsetLastUpdatedRewardRate() {
	o.LastUpdatedRewardRate.Unset()
}

func (o UNISWAPV2ETHEREUMMasterChefDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UNISWAPV2ETHEREUMMasterChefDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryTime) {
		toSerialize["entry_time"] = o.EntryTime
	}
	if !IsNil(o.RecvTime) {
		toSerialize["recv_time"] = o.RecvTime
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["block_number"] = o.BlockNumber
	}
	if o.BlockRange.IsSet() {
		toSerialize["block_range"] = o.BlockRange.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Address.IsSet() {
		toSerialize["address"] = o.Address.Get()
	}
	if o.TotalAllocPoint.IsSet() {
		toSerialize["total_alloc_point"] = o.TotalAllocPoint.Get()
	}
	if o.RewardTokenRate.IsSet() {
		toSerialize["reward_token_rate"] = o.RewardTokenRate.Get()
	}
	if o.RewardTokenInterval.IsSet() {
		toSerialize["reward_token_interval"] = o.RewardTokenInterval.Get()
	}
	if o.AdjustedRewardTokenRate.IsSet() {
		toSerialize["adjusted_reward_token_rate"] = o.AdjustedRewardTokenRate.Get()
	}
	if o.LastUpdatedRewardRate.IsSet() {
		toSerialize["last_updated_reward_rate"] = o.LastUpdatedRewardRate.Get()
	}
	return toSerialize, nil
}

type NullableUNISWAPV2ETHEREUMMasterChefDTO struct {
	value *UNISWAPV2ETHEREUMMasterChefDTO
	isSet bool
}

func (v NullableUNISWAPV2ETHEREUMMasterChefDTO) Get() *UNISWAPV2ETHEREUMMasterChefDTO {
	return v.value
}

func (v *NullableUNISWAPV2ETHEREUMMasterChefDTO) Set(val *UNISWAPV2ETHEREUMMasterChefDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUNISWAPV2ETHEREUMMasterChefDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUNISWAPV2ETHEREUMMasterChefDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUNISWAPV2ETHEREUMMasterChefDTO(val *UNISWAPV2ETHEREUMMasterChefDTO) *NullableUNISWAPV2ETHEREUMMasterChefDTO {
	return &NullableUNISWAPV2ETHEREUMMasterChefDTO{value: val, isSet: true}
}

func (v NullableUNISWAPV2ETHEREUMMasterChefDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUNISWAPV2ETHEREUMMasterChefDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


