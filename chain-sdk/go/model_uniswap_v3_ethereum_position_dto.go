/*
On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the UNISWAPV3ETHEREUMPositionDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UNISWAPV3ETHEREUMPositionDTO{}

// UNISWAPV3ETHEREUMPositionDTO 
type UNISWAPV3ETHEREUMPositionDTO struct {
	EntryTime *time.Time `json:"entry_time,omitempty"`
	RecvTime *time.Time `json:"recv_time,omitempty"`
	// Number of block in which entity was recorded.
	BlockNumber *int64 `json:"block_number,omitempty"`
	// (account address)-(market address)-(count)
	Id NullableString `json:"id,omitempty"`
	// Account that owns this position
	Account NullableString `json:"account,omitempty"`
	// The liquidity pool in which this position was opened
	Pool NullableString `json:"pool,omitempty"`
	// The hash of the transaction that opened this position
	HashOpened NullableString `json:"hash_opened,omitempty"`
	// The hash of the transaction that closed this position
	HashClosed NullableString `json:"hash_closed,omitempty"`
	// Block number of when the position was opened
	BlockNumberOpened NullableString `json:"block_number_opened,omitempty"`
	// Timestamp when the position was opened
	TimestampOpened NullableString `json:"timestamp_opened,omitempty"`
	// Block number of when the position was closed (0 if still open)
	BlockNumberClosed NullableString `json:"block_number_closed,omitempty"`
	// Timestamp when the position was closed (0 if still open)
	TimestampClosed NullableString `json:"timestamp_closed,omitempty"`
	// lower tick of the position
	TickLower NullableString `json:"tick_lower,omitempty"`
	// upper tick of the position
	TickUpper NullableString `json:"tick_upper,omitempty"`
	// Token that is to represent ownership of liquidity
	LiquidityToken NullableString `json:"liquidity_token,omitempty"`
	// Type of token used to track liquidity
	LiquidityTokenType NullableString `json:"liquidity_token_type,omitempty"`
	// total position liquidity
	Liquidity NullableString `json:"liquidity,omitempty"`
	// total position liquidity in USD
	LiquidityUsd NullableString `json:"liquidity_usd,omitempty"`
	// amount of tokens ever deposited to position
	CumulativeDepositTokenAmounts []string `json:"cumulative_deposit_token_amounts,omitempty"`
	// amount of tokens in USD deposited to position
	CumulativeDepositUsd NullableString `json:"cumulative_deposit_usd,omitempty"`
	// amount of tokens ever withdrawn from position (without fees)
	CumulativeWithdrawTokenAmounts []string `json:"cumulative_withdraw_token_amounts,omitempty"`
	// amount of tokens in USD withdrawn from position (without fees)
	CumulativeWithdrawUsd NullableString `json:"cumulative_withdraw_usd,omitempty"`
	// Total reward token accumulated under this position, in USD
	CumulativeRewardUsd []string `json:"cumulative_reward_usd,omitempty"`
	// Number of deposits related to this position
	DepositCount *int32 `json:"deposit_count,omitempty"`
	// Number of withdrawals related to this position
	WithdrawCount *int32 `json:"withdraw_count,omitempty"`
}

// NewUNISWAPV3ETHEREUMPositionDTO instantiates a new UNISWAPV3ETHEREUMPositionDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUNISWAPV3ETHEREUMPositionDTO() *UNISWAPV3ETHEREUMPositionDTO {
	this := UNISWAPV3ETHEREUMPositionDTO{}
	return &this
}

// NewUNISWAPV3ETHEREUMPositionDTOWithDefaults instantiates a new UNISWAPV3ETHEREUMPositionDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUNISWAPV3ETHEREUMPositionDTOWithDefaults() *UNISWAPV3ETHEREUMPositionDTO {
	this := UNISWAPV3ETHEREUMPositionDTO{}
	return &this
}

// GetEntryTime returns the EntryTime field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMPositionDTO) GetEntryTime() time.Time {
	if o == nil || IsNil(o.EntryTime) {
		var ret time.Time
		return ret
	}
	return *o.EntryTime
}

// GetEntryTimeOk returns a tuple with the EntryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) GetEntryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EntryTime) {
		return nil, false
	}
	return o.EntryTime, true
}

// HasEntryTime returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasEntryTime() bool {
	if o != nil && !IsNil(o.EntryTime) {
		return true
	}

	return false
}

// SetEntryTime gets a reference to the given time.Time and assigns it to the EntryTime field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetEntryTime(v time.Time) {
	o.EntryTime = &v
}

// GetRecvTime returns the RecvTime field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMPositionDTO) GetRecvTime() time.Time {
	if o == nil || IsNil(o.RecvTime) {
		var ret time.Time
		return ret
	}
	return *o.RecvTime
}

// GetRecvTimeOk returns a tuple with the RecvTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) GetRecvTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecvTime) {
		return nil, false
	}
	return o.RecvTime, true
}

// HasRecvTime returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasRecvTime() bool {
	if o != nil && !IsNil(o.RecvTime) {
		return true
	}

	return false
}

// SetRecvTime gets a reference to the given time.Time and assigns it to the RecvTime field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetRecvTime(v time.Time) {
	o.RecvTime = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMPositionDTO) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber) {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) GetBlockNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionDTO) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) UnsetId() {
	o.Id.Unset()
}

// GetAccount returns the Account field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionDTO) GetAccount() string {
	if o == nil || IsNil(o.Account.Get()) {
		var ret string
		return ret
	}
	return *o.Account.Get()
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionDTO) GetAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Account.Get(), o.Account.IsSet()
}

// HasAccount returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasAccount() bool {
	if o != nil && o.Account.IsSet() {
		return true
	}

	return false
}

// SetAccount gets a reference to the given NullableString and assigns it to the Account field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetAccount(v string) {
	o.Account.Set(&v)
}
// SetAccountNil sets the value for Account to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) SetAccountNil() {
	o.Account.Set(nil)
}

// UnsetAccount ensures that no value is present for Account, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) UnsetAccount() {
	o.Account.Unset()
}

// GetPool returns the Pool field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionDTO) GetPool() string {
	if o == nil || IsNil(o.Pool.Get()) {
		var ret string
		return ret
	}
	return *o.Pool.Get()
}

// GetPoolOk returns a tuple with the Pool field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionDTO) GetPoolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pool.Get(), o.Pool.IsSet()
}

// HasPool returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasPool() bool {
	if o != nil && o.Pool.IsSet() {
		return true
	}

	return false
}

// SetPool gets a reference to the given NullableString and assigns it to the Pool field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetPool(v string) {
	o.Pool.Set(&v)
}
// SetPoolNil sets the value for Pool to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) SetPoolNil() {
	o.Pool.Set(nil)
}

// UnsetPool ensures that no value is present for Pool, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) UnsetPool() {
	o.Pool.Unset()
}

// GetHashOpened returns the HashOpened field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionDTO) GetHashOpened() string {
	if o == nil || IsNil(o.HashOpened.Get()) {
		var ret string
		return ret
	}
	return *o.HashOpened.Get()
}

// GetHashOpenedOk returns a tuple with the HashOpened field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionDTO) GetHashOpenedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HashOpened.Get(), o.HashOpened.IsSet()
}

// HasHashOpened returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasHashOpened() bool {
	if o != nil && o.HashOpened.IsSet() {
		return true
	}

	return false
}

// SetHashOpened gets a reference to the given NullableString and assigns it to the HashOpened field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetHashOpened(v string) {
	o.HashOpened.Set(&v)
}
// SetHashOpenedNil sets the value for HashOpened to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) SetHashOpenedNil() {
	o.HashOpened.Set(nil)
}

// UnsetHashOpened ensures that no value is present for HashOpened, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) UnsetHashOpened() {
	o.HashOpened.Unset()
}

// GetHashClosed returns the HashClosed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionDTO) GetHashClosed() string {
	if o == nil || IsNil(o.HashClosed.Get()) {
		var ret string
		return ret
	}
	return *o.HashClosed.Get()
}

// GetHashClosedOk returns a tuple with the HashClosed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionDTO) GetHashClosedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HashClosed.Get(), o.HashClosed.IsSet()
}

// HasHashClosed returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasHashClosed() bool {
	if o != nil && o.HashClosed.IsSet() {
		return true
	}

	return false
}

// SetHashClosed gets a reference to the given NullableString and assigns it to the HashClosed field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetHashClosed(v string) {
	o.HashClosed.Set(&v)
}
// SetHashClosedNil sets the value for HashClosed to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) SetHashClosedNil() {
	o.HashClosed.Set(nil)
}

// UnsetHashClosed ensures that no value is present for HashClosed, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) UnsetHashClosed() {
	o.HashClosed.Unset()
}

// GetBlockNumberOpened returns the BlockNumberOpened field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionDTO) GetBlockNumberOpened() string {
	if o == nil || IsNil(o.BlockNumberOpened.Get()) {
		var ret string
		return ret
	}
	return *o.BlockNumberOpened.Get()
}

// GetBlockNumberOpenedOk returns a tuple with the BlockNumberOpened field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionDTO) GetBlockNumberOpenedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockNumberOpened.Get(), o.BlockNumberOpened.IsSet()
}

// HasBlockNumberOpened returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasBlockNumberOpened() bool {
	if o != nil && o.BlockNumberOpened.IsSet() {
		return true
	}

	return false
}

// SetBlockNumberOpened gets a reference to the given NullableString and assigns it to the BlockNumberOpened field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetBlockNumberOpened(v string) {
	o.BlockNumberOpened.Set(&v)
}
// SetBlockNumberOpenedNil sets the value for BlockNumberOpened to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) SetBlockNumberOpenedNil() {
	o.BlockNumberOpened.Set(nil)
}

// UnsetBlockNumberOpened ensures that no value is present for BlockNumberOpened, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) UnsetBlockNumberOpened() {
	o.BlockNumberOpened.Unset()
}

// GetTimestampOpened returns the TimestampOpened field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionDTO) GetTimestampOpened() string {
	if o == nil || IsNil(o.TimestampOpened.Get()) {
		var ret string
		return ret
	}
	return *o.TimestampOpened.Get()
}

// GetTimestampOpenedOk returns a tuple with the TimestampOpened field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionDTO) GetTimestampOpenedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimestampOpened.Get(), o.TimestampOpened.IsSet()
}

// HasTimestampOpened returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasTimestampOpened() bool {
	if o != nil && o.TimestampOpened.IsSet() {
		return true
	}

	return false
}

// SetTimestampOpened gets a reference to the given NullableString and assigns it to the TimestampOpened field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetTimestampOpened(v string) {
	o.TimestampOpened.Set(&v)
}
// SetTimestampOpenedNil sets the value for TimestampOpened to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) SetTimestampOpenedNil() {
	o.TimestampOpened.Set(nil)
}

// UnsetTimestampOpened ensures that no value is present for TimestampOpened, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) UnsetTimestampOpened() {
	o.TimestampOpened.Unset()
}

// GetBlockNumberClosed returns the BlockNumberClosed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionDTO) GetBlockNumberClosed() string {
	if o == nil || IsNil(o.BlockNumberClosed.Get()) {
		var ret string
		return ret
	}
	return *o.BlockNumberClosed.Get()
}

// GetBlockNumberClosedOk returns a tuple with the BlockNumberClosed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionDTO) GetBlockNumberClosedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockNumberClosed.Get(), o.BlockNumberClosed.IsSet()
}

// HasBlockNumberClosed returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasBlockNumberClosed() bool {
	if o != nil && o.BlockNumberClosed.IsSet() {
		return true
	}

	return false
}

// SetBlockNumberClosed gets a reference to the given NullableString and assigns it to the BlockNumberClosed field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetBlockNumberClosed(v string) {
	o.BlockNumberClosed.Set(&v)
}
// SetBlockNumberClosedNil sets the value for BlockNumberClosed to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) SetBlockNumberClosedNil() {
	o.BlockNumberClosed.Set(nil)
}

// UnsetBlockNumberClosed ensures that no value is present for BlockNumberClosed, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) UnsetBlockNumberClosed() {
	o.BlockNumberClosed.Unset()
}

// GetTimestampClosed returns the TimestampClosed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionDTO) GetTimestampClosed() string {
	if o == nil || IsNil(o.TimestampClosed.Get()) {
		var ret string
		return ret
	}
	return *o.TimestampClosed.Get()
}

// GetTimestampClosedOk returns a tuple with the TimestampClosed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionDTO) GetTimestampClosedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimestampClosed.Get(), o.TimestampClosed.IsSet()
}

// HasTimestampClosed returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasTimestampClosed() bool {
	if o != nil && o.TimestampClosed.IsSet() {
		return true
	}

	return false
}

// SetTimestampClosed gets a reference to the given NullableString and assigns it to the TimestampClosed field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetTimestampClosed(v string) {
	o.TimestampClosed.Set(&v)
}
// SetTimestampClosedNil sets the value for TimestampClosed to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) SetTimestampClosedNil() {
	o.TimestampClosed.Set(nil)
}

// UnsetTimestampClosed ensures that no value is present for TimestampClosed, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) UnsetTimestampClosed() {
	o.TimestampClosed.Unset()
}

// GetTickLower returns the TickLower field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionDTO) GetTickLower() string {
	if o == nil || IsNil(o.TickLower.Get()) {
		var ret string
		return ret
	}
	return *o.TickLower.Get()
}

// GetTickLowerOk returns a tuple with the TickLower field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionDTO) GetTickLowerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TickLower.Get(), o.TickLower.IsSet()
}

// HasTickLower returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasTickLower() bool {
	if o != nil && o.TickLower.IsSet() {
		return true
	}

	return false
}

// SetTickLower gets a reference to the given NullableString and assigns it to the TickLower field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetTickLower(v string) {
	o.TickLower.Set(&v)
}
// SetTickLowerNil sets the value for TickLower to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) SetTickLowerNil() {
	o.TickLower.Set(nil)
}

// UnsetTickLower ensures that no value is present for TickLower, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) UnsetTickLower() {
	o.TickLower.Unset()
}

// GetTickUpper returns the TickUpper field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionDTO) GetTickUpper() string {
	if o == nil || IsNil(o.TickUpper.Get()) {
		var ret string
		return ret
	}
	return *o.TickUpper.Get()
}

// GetTickUpperOk returns a tuple with the TickUpper field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionDTO) GetTickUpperOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TickUpper.Get(), o.TickUpper.IsSet()
}

// HasTickUpper returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasTickUpper() bool {
	if o != nil && o.TickUpper.IsSet() {
		return true
	}

	return false
}

// SetTickUpper gets a reference to the given NullableString and assigns it to the TickUpper field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetTickUpper(v string) {
	o.TickUpper.Set(&v)
}
// SetTickUpperNil sets the value for TickUpper to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) SetTickUpperNil() {
	o.TickUpper.Set(nil)
}

// UnsetTickUpper ensures that no value is present for TickUpper, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) UnsetTickUpper() {
	o.TickUpper.Unset()
}

// GetLiquidityToken returns the LiquidityToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionDTO) GetLiquidityToken() string {
	if o == nil || IsNil(o.LiquidityToken.Get()) {
		var ret string
		return ret
	}
	return *o.LiquidityToken.Get()
}

// GetLiquidityTokenOk returns a tuple with the LiquidityToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionDTO) GetLiquidityTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LiquidityToken.Get(), o.LiquidityToken.IsSet()
}

// HasLiquidityToken returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasLiquidityToken() bool {
	if o != nil && o.LiquidityToken.IsSet() {
		return true
	}

	return false
}

// SetLiquidityToken gets a reference to the given NullableString and assigns it to the LiquidityToken field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetLiquidityToken(v string) {
	o.LiquidityToken.Set(&v)
}
// SetLiquidityTokenNil sets the value for LiquidityToken to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) SetLiquidityTokenNil() {
	o.LiquidityToken.Set(nil)
}

// UnsetLiquidityToken ensures that no value is present for LiquidityToken, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) UnsetLiquidityToken() {
	o.LiquidityToken.Unset()
}

// GetLiquidityTokenType returns the LiquidityTokenType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionDTO) GetLiquidityTokenType() string {
	if o == nil || IsNil(o.LiquidityTokenType.Get()) {
		var ret string
		return ret
	}
	return *o.LiquidityTokenType.Get()
}

// GetLiquidityTokenTypeOk returns a tuple with the LiquidityTokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionDTO) GetLiquidityTokenTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LiquidityTokenType.Get(), o.LiquidityTokenType.IsSet()
}

// HasLiquidityTokenType returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasLiquidityTokenType() bool {
	if o != nil && o.LiquidityTokenType.IsSet() {
		return true
	}

	return false
}

// SetLiquidityTokenType gets a reference to the given NullableString and assigns it to the LiquidityTokenType field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetLiquidityTokenType(v string) {
	o.LiquidityTokenType.Set(&v)
}
// SetLiquidityTokenTypeNil sets the value for LiquidityTokenType to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) SetLiquidityTokenTypeNil() {
	o.LiquidityTokenType.Set(nil)
}

// UnsetLiquidityTokenType ensures that no value is present for LiquidityTokenType, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) UnsetLiquidityTokenType() {
	o.LiquidityTokenType.Unset()
}

// GetLiquidity returns the Liquidity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionDTO) GetLiquidity() string {
	if o == nil || IsNil(o.Liquidity.Get()) {
		var ret string
		return ret
	}
	return *o.Liquidity.Get()
}

// GetLiquidityOk returns a tuple with the Liquidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionDTO) GetLiquidityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Liquidity.Get(), o.Liquidity.IsSet()
}

// HasLiquidity returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasLiquidity() bool {
	if o != nil && o.Liquidity.IsSet() {
		return true
	}

	return false
}

// SetLiquidity gets a reference to the given NullableString and assigns it to the Liquidity field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetLiquidity(v string) {
	o.Liquidity.Set(&v)
}
// SetLiquidityNil sets the value for Liquidity to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) SetLiquidityNil() {
	o.Liquidity.Set(nil)
}

// UnsetLiquidity ensures that no value is present for Liquidity, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) UnsetLiquidity() {
	o.Liquidity.Unset()
}

// GetLiquidityUsd returns the LiquidityUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionDTO) GetLiquidityUsd() string {
	if o == nil || IsNil(o.LiquidityUsd.Get()) {
		var ret string
		return ret
	}
	return *o.LiquidityUsd.Get()
}

// GetLiquidityUsdOk returns a tuple with the LiquidityUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionDTO) GetLiquidityUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LiquidityUsd.Get(), o.LiquidityUsd.IsSet()
}

// HasLiquidityUsd returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasLiquidityUsd() bool {
	if o != nil && o.LiquidityUsd.IsSet() {
		return true
	}

	return false
}

// SetLiquidityUsd gets a reference to the given NullableString and assigns it to the LiquidityUsd field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetLiquidityUsd(v string) {
	o.LiquidityUsd.Set(&v)
}
// SetLiquidityUsdNil sets the value for LiquidityUsd to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) SetLiquidityUsdNil() {
	o.LiquidityUsd.Set(nil)
}

// UnsetLiquidityUsd ensures that no value is present for LiquidityUsd, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) UnsetLiquidityUsd() {
	o.LiquidityUsd.Unset()
}

// GetCumulativeDepositTokenAmounts returns the CumulativeDepositTokenAmounts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionDTO) GetCumulativeDepositTokenAmounts() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.CumulativeDepositTokenAmounts
}

// GetCumulativeDepositTokenAmountsOk returns a tuple with the CumulativeDepositTokenAmounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionDTO) GetCumulativeDepositTokenAmountsOk() ([]string, bool) {
	if o == nil || IsNil(o.CumulativeDepositTokenAmounts) {
		return nil, false
	}
	return o.CumulativeDepositTokenAmounts, true
}

// HasCumulativeDepositTokenAmounts returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasCumulativeDepositTokenAmounts() bool {
	if o != nil && IsNil(o.CumulativeDepositTokenAmounts) {
		return true
	}

	return false
}

// SetCumulativeDepositTokenAmounts gets a reference to the given []string and assigns it to the CumulativeDepositTokenAmounts field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetCumulativeDepositTokenAmounts(v []string) {
	o.CumulativeDepositTokenAmounts = v
}

// GetCumulativeDepositUsd returns the CumulativeDepositUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionDTO) GetCumulativeDepositUsd() string {
	if o == nil || IsNil(o.CumulativeDepositUsd.Get()) {
		var ret string
		return ret
	}
	return *o.CumulativeDepositUsd.Get()
}

// GetCumulativeDepositUsdOk returns a tuple with the CumulativeDepositUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionDTO) GetCumulativeDepositUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CumulativeDepositUsd.Get(), o.CumulativeDepositUsd.IsSet()
}

// HasCumulativeDepositUsd returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasCumulativeDepositUsd() bool {
	if o != nil && o.CumulativeDepositUsd.IsSet() {
		return true
	}

	return false
}

// SetCumulativeDepositUsd gets a reference to the given NullableString and assigns it to the CumulativeDepositUsd field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetCumulativeDepositUsd(v string) {
	o.CumulativeDepositUsd.Set(&v)
}
// SetCumulativeDepositUsdNil sets the value for CumulativeDepositUsd to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) SetCumulativeDepositUsdNil() {
	o.CumulativeDepositUsd.Set(nil)
}

// UnsetCumulativeDepositUsd ensures that no value is present for CumulativeDepositUsd, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) UnsetCumulativeDepositUsd() {
	o.CumulativeDepositUsd.Unset()
}

// GetCumulativeWithdrawTokenAmounts returns the CumulativeWithdrawTokenAmounts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionDTO) GetCumulativeWithdrawTokenAmounts() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.CumulativeWithdrawTokenAmounts
}

// GetCumulativeWithdrawTokenAmountsOk returns a tuple with the CumulativeWithdrawTokenAmounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionDTO) GetCumulativeWithdrawTokenAmountsOk() ([]string, bool) {
	if o == nil || IsNil(o.CumulativeWithdrawTokenAmounts) {
		return nil, false
	}
	return o.CumulativeWithdrawTokenAmounts, true
}

// HasCumulativeWithdrawTokenAmounts returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasCumulativeWithdrawTokenAmounts() bool {
	if o != nil && IsNil(o.CumulativeWithdrawTokenAmounts) {
		return true
	}

	return false
}

// SetCumulativeWithdrawTokenAmounts gets a reference to the given []string and assigns it to the CumulativeWithdrawTokenAmounts field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetCumulativeWithdrawTokenAmounts(v []string) {
	o.CumulativeWithdrawTokenAmounts = v
}

// GetCumulativeWithdrawUsd returns the CumulativeWithdrawUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionDTO) GetCumulativeWithdrawUsd() string {
	if o == nil || IsNil(o.CumulativeWithdrawUsd.Get()) {
		var ret string
		return ret
	}
	return *o.CumulativeWithdrawUsd.Get()
}

// GetCumulativeWithdrawUsdOk returns a tuple with the CumulativeWithdrawUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionDTO) GetCumulativeWithdrawUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CumulativeWithdrawUsd.Get(), o.CumulativeWithdrawUsd.IsSet()
}

// HasCumulativeWithdrawUsd returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasCumulativeWithdrawUsd() bool {
	if o != nil && o.CumulativeWithdrawUsd.IsSet() {
		return true
	}

	return false
}

// SetCumulativeWithdrawUsd gets a reference to the given NullableString and assigns it to the CumulativeWithdrawUsd field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetCumulativeWithdrawUsd(v string) {
	o.CumulativeWithdrawUsd.Set(&v)
}
// SetCumulativeWithdrawUsdNil sets the value for CumulativeWithdrawUsd to be an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) SetCumulativeWithdrawUsdNil() {
	o.CumulativeWithdrawUsd.Set(nil)
}

// UnsetCumulativeWithdrawUsd ensures that no value is present for CumulativeWithdrawUsd, not even an explicit nil
func (o *UNISWAPV3ETHEREUMPositionDTO) UnsetCumulativeWithdrawUsd() {
	o.CumulativeWithdrawUsd.Unset()
}

// GetCumulativeRewardUsd returns the CumulativeRewardUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMPositionDTO) GetCumulativeRewardUsd() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.CumulativeRewardUsd
}

// GetCumulativeRewardUsdOk returns a tuple with the CumulativeRewardUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMPositionDTO) GetCumulativeRewardUsdOk() ([]string, bool) {
	if o == nil || IsNil(o.CumulativeRewardUsd) {
		return nil, false
	}
	return o.CumulativeRewardUsd, true
}

// HasCumulativeRewardUsd returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasCumulativeRewardUsd() bool {
	if o != nil && IsNil(o.CumulativeRewardUsd) {
		return true
	}

	return false
}

// SetCumulativeRewardUsd gets a reference to the given []string and assigns it to the CumulativeRewardUsd field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetCumulativeRewardUsd(v []string) {
	o.CumulativeRewardUsd = v
}

// GetDepositCount returns the DepositCount field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMPositionDTO) GetDepositCount() int32 {
	if o == nil || IsNil(o.DepositCount) {
		var ret int32
		return ret
	}
	return *o.DepositCount
}

// GetDepositCountOk returns a tuple with the DepositCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) GetDepositCountOk() (*int32, bool) {
	if o == nil || IsNil(o.DepositCount) {
		return nil, false
	}
	return o.DepositCount, true
}

// HasDepositCount returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasDepositCount() bool {
	if o != nil && !IsNil(o.DepositCount) {
		return true
	}

	return false
}

// SetDepositCount gets a reference to the given int32 and assigns it to the DepositCount field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetDepositCount(v int32) {
	o.DepositCount = &v
}

// GetWithdrawCount returns the WithdrawCount field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMPositionDTO) GetWithdrawCount() int32 {
	if o == nil || IsNil(o.WithdrawCount) {
		var ret int32
		return ret
	}
	return *o.WithdrawCount
}

// GetWithdrawCountOk returns a tuple with the WithdrawCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) GetWithdrawCountOk() (*int32, bool) {
	if o == nil || IsNil(o.WithdrawCount) {
		return nil, false
	}
	return o.WithdrawCount, true
}

// HasWithdrawCount returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMPositionDTO) HasWithdrawCount() bool {
	if o != nil && !IsNil(o.WithdrawCount) {
		return true
	}

	return false
}

// SetWithdrawCount gets a reference to the given int32 and assigns it to the WithdrawCount field.
func (o *UNISWAPV3ETHEREUMPositionDTO) SetWithdrawCount(v int32) {
	o.WithdrawCount = &v
}

func (o UNISWAPV3ETHEREUMPositionDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UNISWAPV3ETHEREUMPositionDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryTime) {
		toSerialize["entry_time"] = o.EntryTime
	}
	if !IsNil(o.RecvTime) {
		toSerialize["recv_time"] = o.RecvTime
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["block_number"] = o.BlockNumber
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Account.IsSet() {
		toSerialize["account"] = o.Account.Get()
	}
	if o.Pool.IsSet() {
		toSerialize["pool"] = o.Pool.Get()
	}
	if o.HashOpened.IsSet() {
		toSerialize["hash_opened"] = o.HashOpened.Get()
	}
	if o.HashClosed.IsSet() {
		toSerialize["hash_closed"] = o.HashClosed.Get()
	}
	if o.BlockNumberOpened.IsSet() {
		toSerialize["block_number_opened"] = o.BlockNumberOpened.Get()
	}
	if o.TimestampOpened.IsSet() {
		toSerialize["timestamp_opened"] = o.TimestampOpened.Get()
	}
	if o.BlockNumberClosed.IsSet() {
		toSerialize["block_number_closed"] = o.BlockNumberClosed.Get()
	}
	if o.TimestampClosed.IsSet() {
		toSerialize["timestamp_closed"] = o.TimestampClosed.Get()
	}
	if o.TickLower.IsSet() {
		toSerialize["tick_lower"] = o.TickLower.Get()
	}
	if o.TickUpper.IsSet() {
		toSerialize["tick_upper"] = o.TickUpper.Get()
	}
	if o.LiquidityToken.IsSet() {
		toSerialize["liquidity_token"] = o.LiquidityToken.Get()
	}
	if o.LiquidityTokenType.IsSet() {
		toSerialize["liquidity_token_type"] = o.LiquidityTokenType.Get()
	}
	if o.Liquidity.IsSet() {
		toSerialize["liquidity"] = o.Liquidity.Get()
	}
	if o.LiquidityUsd.IsSet() {
		toSerialize["liquidity_usd"] = o.LiquidityUsd.Get()
	}
	if o.CumulativeDepositTokenAmounts != nil {
		toSerialize["cumulative_deposit_token_amounts"] = o.CumulativeDepositTokenAmounts
	}
	if o.CumulativeDepositUsd.IsSet() {
		toSerialize["cumulative_deposit_usd"] = o.CumulativeDepositUsd.Get()
	}
	if o.CumulativeWithdrawTokenAmounts != nil {
		toSerialize["cumulative_withdraw_token_amounts"] = o.CumulativeWithdrawTokenAmounts
	}
	if o.CumulativeWithdrawUsd.IsSet() {
		toSerialize["cumulative_withdraw_usd"] = o.CumulativeWithdrawUsd.Get()
	}
	if o.CumulativeRewardUsd != nil {
		toSerialize["cumulative_reward_usd"] = o.CumulativeRewardUsd
	}
	if !IsNil(o.DepositCount) {
		toSerialize["deposit_count"] = o.DepositCount
	}
	if !IsNil(o.WithdrawCount) {
		toSerialize["withdraw_count"] = o.WithdrawCount
	}
	return toSerialize, nil
}

type NullableUNISWAPV3ETHEREUMPositionDTO struct {
	value *UNISWAPV3ETHEREUMPositionDTO
	isSet bool
}

func (v NullableUNISWAPV3ETHEREUMPositionDTO) Get() *UNISWAPV3ETHEREUMPositionDTO {
	return v.value
}

func (v *NullableUNISWAPV3ETHEREUMPositionDTO) Set(val *UNISWAPV3ETHEREUMPositionDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUNISWAPV3ETHEREUMPositionDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUNISWAPV3ETHEREUMPositionDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUNISWAPV3ETHEREUMPositionDTO(val *UNISWAPV3ETHEREUMPositionDTO) *NullableUNISWAPV3ETHEREUMPositionDTO {
	return &NullableUNISWAPV3ETHEREUMPositionDTO{value: val, isSet: true}
}

func (v NullableUNISWAPV3ETHEREUMPositionDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUNISWAPV3ETHEREUMPositionDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


