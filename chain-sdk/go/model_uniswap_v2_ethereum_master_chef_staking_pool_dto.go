/*
On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the UNISWAPV2ETHEREUMMasterChefStakingPoolDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UNISWAPV2ETHEREUMMasterChefStakingPoolDTO{}

// UNISWAPV2ETHEREUMMasterChefStakingPoolDTO 
type UNISWAPV2ETHEREUMMasterChefStakingPoolDTO struct {
	EntryTime *time.Time `json:"entry_time,omitempty"`
	RecvTime *time.Time `json:"recv_time,omitempty"`
	// Number of block in which entity was recorded.
	BlockNumber *int64 `json:"block_number,omitempty"`
	// 
	BlockRange NullableString `json:"block_range,omitempty"`
	// (masterchef type) - (pid referenced in the masterchef contract)
	Id NullableString `json:"id,omitempty"`
	// Staking pool to which this rewarder is associated
	PoolAddress NullableString `json:"pool_address,omitempty"`
	// Allocation point of this MasterChef Staking pool
	PoolAllocPoint NullableString `json:"pool_alloc_point,omitempty"`
	// Reward Multiplier for a given staking pool
	Multiplier NullableString `json:"multiplier,omitempty"`
	// Last block where rewards were given out
	LastRewardBlock NullableString `json:"last_reward_block,omitempty"`
	// Optional address of a bonus rewarder, to give additional tokens on top of masterchefs
	Rewarder NullableString `json:"rewarder,omitempty"`
}

// NewUNISWAPV2ETHEREUMMasterChefStakingPoolDTO instantiates a new UNISWAPV2ETHEREUMMasterChefStakingPoolDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUNISWAPV2ETHEREUMMasterChefStakingPoolDTO() *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO {
	this := UNISWAPV2ETHEREUMMasterChefStakingPoolDTO{}
	return &this
}

// NewUNISWAPV2ETHEREUMMasterChefStakingPoolDTOWithDefaults instantiates a new UNISWAPV2ETHEREUMMasterChefStakingPoolDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUNISWAPV2ETHEREUMMasterChefStakingPoolDTOWithDefaults() *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO {
	this := UNISWAPV2ETHEREUMMasterChefStakingPoolDTO{}
	return &this
}

// GetEntryTime returns the EntryTime field value if set, zero value otherwise.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) GetEntryTime() time.Time {
	if o == nil || IsNil(o.EntryTime) {
		var ret time.Time
		return ret
	}
	return *o.EntryTime
}

// GetEntryTimeOk returns a tuple with the EntryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) GetEntryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EntryTime) {
		return nil, false
	}
	return o.EntryTime, true
}

// HasEntryTime returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) HasEntryTime() bool {
	if o != nil && !IsNil(o.EntryTime) {
		return true
	}

	return false
}

// SetEntryTime gets a reference to the given time.Time and assigns it to the EntryTime field.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) SetEntryTime(v time.Time) {
	o.EntryTime = &v
}

// GetRecvTime returns the RecvTime field value if set, zero value otherwise.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) GetRecvTime() time.Time {
	if o == nil || IsNil(o.RecvTime) {
		var ret time.Time
		return ret
	}
	return *o.RecvTime
}

// GetRecvTimeOk returns a tuple with the RecvTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) GetRecvTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecvTime) {
		return nil, false
	}
	return o.RecvTime, true
}

// HasRecvTime returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) HasRecvTime() bool {
	if o != nil && !IsNil(o.RecvTime) {
		return true
	}

	return false
}

// SetRecvTime gets a reference to the given time.Time and assigns it to the RecvTime field.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) SetRecvTime(v time.Time) {
	o.RecvTime = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber) {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) GetBlockNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetBlockRange returns the BlockRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) GetBlockRange() string {
	if o == nil || IsNil(o.BlockRange.Get()) {
		var ret string
		return ret
	}
	return *o.BlockRange.Get()
}

// GetBlockRangeOk returns a tuple with the BlockRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) GetBlockRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockRange.Get(), o.BlockRange.IsSet()
}

// HasBlockRange returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) HasBlockRange() bool {
	if o != nil && o.BlockRange.IsSet() {
		return true
	}

	return false
}

// SetBlockRange gets a reference to the given NullableString and assigns it to the BlockRange field.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) SetBlockRange(v string) {
	o.BlockRange.Set(&v)
}
// SetBlockRangeNil sets the value for BlockRange to be an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) SetBlockRangeNil() {
	o.BlockRange.Set(nil)
}

// UnsetBlockRange ensures that no value is present for BlockRange, not even an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) UnsetBlockRange() {
	o.BlockRange.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) UnsetId() {
	o.Id.Unset()
}

// GetPoolAddress returns the PoolAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) GetPoolAddress() string {
	if o == nil || IsNil(o.PoolAddress.Get()) {
		var ret string
		return ret
	}
	return *o.PoolAddress.Get()
}

// GetPoolAddressOk returns a tuple with the PoolAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) GetPoolAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PoolAddress.Get(), o.PoolAddress.IsSet()
}

// HasPoolAddress returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) HasPoolAddress() bool {
	if o != nil && o.PoolAddress.IsSet() {
		return true
	}

	return false
}

// SetPoolAddress gets a reference to the given NullableString and assigns it to the PoolAddress field.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) SetPoolAddress(v string) {
	o.PoolAddress.Set(&v)
}
// SetPoolAddressNil sets the value for PoolAddress to be an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) SetPoolAddressNil() {
	o.PoolAddress.Set(nil)
}

// UnsetPoolAddress ensures that no value is present for PoolAddress, not even an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) UnsetPoolAddress() {
	o.PoolAddress.Unset()
}

// GetPoolAllocPoint returns the PoolAllocPoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) GetPoolAllocPoint() string {
	if o == nil || IsNil(o.PoolAllocPoint.Get()) {
		var ret string
		return ret
	}
	return *o.PoolAllocPoint.Get()
}

// GetPoolAllocPointOk returns a tuple with the PoolAllocPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) GetPoolAllocPointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PoolAllocPoint.Get(), o.PoolAllocPoint.IsSet()
}

// HasPoolAllocPoint returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) HasPoolAllocPoint() bool {
	if o != nil && o.PoolAllocPoint.IsSet() {
		return true
	}

	return false
}

// SetPoolAllocPoint gets a reference to the given NullableString and assigns it to the PoolAllocPoint field.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) SetPoolAllocPoint(v string) {
	o.PoolAllocPoint.Set(&v)
}
// SetPoolAllocPointNil sets the value for PoolAllocPoint to be an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) SetPoolAllocPointNil() {
	o.PoolAllocPoint.Set(nil)
}

// UnsetPoolAllocPoint ensures that no value is present for PoolAllocPoint, not even an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) UnsetPoolAllocPoint() {
	o.PoolAllocPoint.Unset()
}

// GetMultiplier returns the Multiplier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) GetMultiplier() string {
	if o == nil || IsNil(o.Multiplier.Get()) {
		var ret string
		return ret
	}
	return *o.Multiplier.Get()
}

// GetMultiplierOk returns a tuple with the Multiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) GetMultiplierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Multiplier.Get(), o.Multiplier.IsSet()
}

// HasMultiplier returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) HasMultiplier() bool {
	if o != nil && o.Multiplier.IsSet() {
		return true
	}

	return false
}

// SetMultiplier gets a reference to the given NullableString and assigns it to the Multiplier field.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) SetMultiplier(v string) {
	o.Multiplier.Set(&v)
}
// SetMultiplierNil sets the value for Multiplier to be an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) SetMultiplierNil() {
	o.Multiplier.Set(nil)
}

// UnsetMultiplier ensures that no value is present for Multiplier, not even an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) UnsetMultiplier() {
	o.Multiplier.Unset()
}

// GetLastRewardBlock returns the LastRewardBlock field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) GetLastRewardBlock() string {
	if o == nil || IsNil(o.LastRewardBlock.Get()) {
		var ret string
		return ret
	}
	return *o.LastRewardBlock.Get()
}

// GetLastRewardBlockOk returns a tuple with the LastRewardBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) GetLastRewardBlockOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastRewardBlock.Get(), o.LastRewardBlock.IsSet()
}

// HasLastRewardBlock returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) HasLastRewardBlock() bool {
	if o != nil && o.LastRewardBlock.IsSet() {
		return true
	}

	return false
}

// SetLastRewardBlock gets a reference to the given NullableString and assigns it to the LastRewardBlock field.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) SetLastRewardBlock(v string) {
	o.LastRewardBlock.Set(&v)
}
// SetLastRewardBlockNil sets the value for LastRewardBlock to be an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) SetLastRewardBlockNil() {
	o.LastRewardBlock.Set(nil)
}

// UnsetLastRewardBlock ensures that no value is present for LastRewardBlock, not even an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) UnsetLastRewardBlock() {
	o.LastRewardBlock.Unset()
}

// GetRewarder returns the Rewarder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) GetRewarder() string {
	if o == nil || IsNil(o.Rewarder.Get()) {
		var ret string
		return ret
	}
	return *o.Rewarder.Get()
}

// GetRewarderOk returns a tuple with the Rewarder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) GetRewarderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rewarder.Get(), o.Rewarder.IsSet()
}

// HasRewarder returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) HasRewarder() bool {
	if o != nil && o.Rewarder.IsSet() {
		return true
	}

	return false
}

// SetRewarder gets a reference to the given NullableString and assigns it to the Rewarder field.
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) SetRewarder(v string) {
	o.Rewarder.Set(&v)
}
// SetRewarderNil sets the value for Rewarder to be an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) SetRewarderNil() {
	o.Rewarder.Set(nil)
}

// UnsetRewarder ensures that no value is present for Rewarder, not even an explicit nil
func (o *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) UnsetRewarder() {
	o.Rewarder.Unset()
}

func (o UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryTime) {
		toSerialize["entry_time"] = o.EntryTime
	}
	if !IsNil(o.RecvTime) {
		toSerialize["recv_time"] = o.RecvTime
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["block_number"] = o.BlockNumber
	}
	if o.BlockRange.IsSet() {
		toSerialize["block_range"] = o.BlockRange.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.PoolAddress.IsSet() {
		toSerialize["pool_address"] = o.PoolAddress.Get()
	}
	if o.PoolAllocPoint.IsSet() {
		toSerialize["pool_alloc_point"] = o.PoolAllocPoint.Get()
	}
	if o.Multiplier.IsSet() {
		toSerialize["multiplier"] = o.Multiplier.Get()
	}
	if o.LastRewardBlock.IsSet() {
		toSerialize["last_reward_block"] = o.LastRewardBlock.Get()
	}
	if o.Rewarder.IsSet() {
		toSerialize["rewarder"] = o.Rewarder.Get()
	}
	return toSerialize, nil
}

type NullableUNISWAPV2ETHEREUMMasterChefStakingPoolDTO struct {
	value *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO
	isSet bool
}

func (v NullableUNISWAPV2ETHEREUMMasterChefStakingPoolDTO) Get() *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO {
	return v.value
}

func (v *NullableUNISWAPV2ETHEREUMMasterChefStakingPoolDTO) Set(val *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUNISWAPV2ETHEREUMMasterChefStakingPoolDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUNISWAPV2ETHEREUMMasterChefStakingPoolDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUNISWAPV2ETHEREUMMasterChefStakingPoolDTO(val *UNISWAPV2ETHEREUMMasterChefStakingPoolDTO) *NullableUNISWAPV2ETHEREUMMasterChefStakingPoolDTO {
	return &NullableUNISWAPV2ETHEREUMMasterChefStakingPoolDTO{value: val, isSet: true}
}

func (v NullableUNISWAPV2ETHEREUMMasterChefStakingPoolDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUNISWAPV2ETHEREUMMasterChefStakingPoolDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


