/*
On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the UNISWAPV3ETHEREUMDepositDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UNISWAPV3ETHEREUMDepositDTO{}

// UNISWAPV3ETHEREUMDepositDTO Entity represents a user action in the protocol involving the addition of funds to a liquidity pool.
type UNISWAPV3ETHEREUMDepositDTO struct {
	EntryTime *time.Time `json:"entry_time,omitempty"`
	RecvTime *time.Time `json:"recv_time,omitempty"`
	// Number of block in which entity was recorded.
	BlockNumber *int64 `json:"block_number,omitempty"`
	// 
	Block *int32 `json:"block_,omitempty"`
	// Identifier, format: (transaction hash)-(log index)
	Id NullableString `json:"id,omitempty"`
	// Transaction hash of the transaction that emitted this event.
	Hash NullableString `json:"hash,omitempty"`
	// Nonce of the transaction that emitted this event.
	Nonce NullableString `json:"nonce,omitempty"`
	// Event log index. For transactions that don't emit event, create arbitrary index starting from 0.
	LogIndex *int32 `json:"log_index,omitempty"`
	// Gas limit of the transaction that emitted this event.
	GasLimit NullableString `json:"gas_limit,omitempty"`
	// Gas used in this transaction. (Optional because not every chain will support this).
	GasUsed NullableString `json:"gas_used,omitempty"`
	// Gas price of the transaction that emitted this event.
	GasPrice NullableString `json:"gas_price,omitempty"`
	// The protocol this transaction belongs to.
	Protocol NullableString `json:"protocol,omitempty"`
	// Account that emitted this event.
	Account NullableString `json:"account,omitempty"`
	// The user position changed by this event.
	Position NullableString `json:"position,omitempty"`
	// The pool involving this event.
	Pool NullableString `json:"pool,omitempty"`
	// Lower tick of position.
	TickLower NullableString `json:"tick_lower,omitempty"`
	// Upper tick of position.
	TickUpper NullableString `json:"tick_upper,omitempty"`
	// Timestamp of this event.
	Timestamp NullableString `json:"timestamp,omitempty"`
	// Amount of liquidity minted.
	Liquidity NullableString `json:"liquidity,omitempty"`
	// Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool.
	InputTokens []string `json:"input_tokens,omitempty"`
	// Amount of input tokens in the token's native unit.
	InputTokenAmounts []string `json:"input_token_amounts,omitempty"`
	// Amount of input tokens in the liquidity pool.
	ReserveAmounts []string `json:"reserve_amounts,omitempty"`
	// USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool).
	AmountUsd NullableString `json:"amount_usd,omitempty"`
	// 
	BlockRange NullableString `json:"block_range,omitempty"`
}

// NewUNISWAPV3ETHEREUMDepositDTO instantiates a new UNISWAPV3ETHEREUMDepositDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUNISWAPV3ETHEREUMDepositDTO() *UNISWAPV3ETHEREUMDepositDTO {
	this := UNISWAPV3ETHEREUMDepositDTO{}
	return &this
}

// NewUNISWAPV3ETHEREUMDepositDTOWithDefaults instantiates a new UNISWAPV3ETHEREUMDepositDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUNISWAPV3ETHEREUMDepositDTOWithDefaults() *UNISWAPV3ETHEREUMDepositDTO {
	this := UNISWAPV3ETHEREUMDepositDTO{}
	return &this
}

// GetEntryTime returns the EntryTime field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMDepositDTO) GetEntryTime() time.Time {
	if o == nil || IsNil(o.EntryTime) {
		var ret time.Time
		return ret
	}
	return *o.EntryTime
}

// GetEntryTimeOk returns a tuple with the EntryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) GetEntryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EntryTime) {
		return nil, false
	}
	return o.EntryTime, true
}

// HasEntryTime returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) HasEntryTime() bool {
	if o != nil && !IsNil(o.EntryTime) {
		return true
	}

	return false
}

// SetEntryTime gets a reference to the given time.Time and assigns it to the EntryTime field.
func (o *UNISWAPV3ETHEREUMDepositDTO) SetEntryTime(v time.Time) {
	o.EntryTime = &v
}

// GetRecvTime returns the RecvTime field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMDepositDTO) GetRecvTime() time.Time {
	if o == nil || IsNil(o.RecvTime) {
		var ret time.Time
		return ret
	}
	return *o.RecvTime
}

// GetRecvTimeOk returns a tuple with the RecvTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) GetRecvTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecvTime) {
		return nil, false
	}
	return o.RecvTime, true
}

// HasRecvTime returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) HasRecvTime() bool {
	if o != nil && !IsNil(o.RecvTime) {
		return true
	}

	return false
}

// SetRecvTime gets a reference to the given time.Time and assigns it to the RecvTime field.
func (o *UNISWAPV3ETHEREUMDepositDTO) SetRecvTime(v time.Time) {
	o.RecvTime = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMDepositDTO) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber) {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) GetBlockNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *UNISWAPV3ETHEREUMDepositDTO) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetBlock returns the Block field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMDepositDTO) GetBlock() int32 {
	if o == nil || IsNil(o.Block) {
		var ret int32
		return ret
	}
	return *o.Block
}

// GetBlockOk returns a tuple with the Block field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) GetBlockOk() (*int32, bool) {
	if o == nil || IsNil(o.Block) {
		return nil, false
	}
	return o.Block, true
}

// HasBlock returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) HasBlock() bool {
	if o != nil && !IsNil(o.Block) {
		return true
	}

	return false
}

// SetBlock gets a reference to the given int32 and assigns it to the Block field.
func (o *UNISWAPV3ETHEREUMDepositDTO) SetBlock(v int32) {
	o.Block = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMDepositDTO) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMDepositDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *UNISWAPV3ETHEREUMDepositDTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) UnsetId() {
	o.Id.Unset()
}

// GetHash returns the Hash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMDepositDTO) GetHash() string {
	if o == nil || IsNil(o.Hash.Get()) {
		var ret string
		return ret
	}
	return *o.Hash.Get()
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMDepositDTO) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hash.Get(), o.Hash.IsSet()
}

// HasHash returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) HasHash() bool {
	if o != nil && o.Hash.IsSet() {
		return true
	}

	return false
}

// SetHash gets a reference to the given NullableString and assigns it to the Hash field.
func (o *UNISWAPV3ETHEREUMDepositDTO) SetHash(v string) {
	o.Hash.Set(&v)
}
// SetHashNil sets the value for Hash to be an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) SetHashNil() {
	o.Hash.Set(nil)
}

// UnsetHash ensures that no value is present for Hash, not even an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) UnsetHash() {
	o.Hash.Unset()
}

// GetNonce returns the Nonce field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMDepositDTO) GetNonce() string {
	if o == nil || IsNil(o.Nonce.Get()) {
		var ret string
		return ret
	}
	return *o.Nonce.Get()
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMDepositDTO) GetNonceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Nonce.Get(), o.Nonce.IsSet()
}

// HasNonce returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) HasNonce() bool {
	if o != nil && o.Nonce.IsSet() {
		return true
	}

	return false
}

// SetNonce gets a reference to the given NullableString and assigns it to the Nonce field.
func (o *UNISWAPV3ETHEREUMDepositDTO) SetNonce(v string) {
	o.Nonce.Set(&v)
}
// SetNonceNil sets the value for Nonce to be an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) SetNonceNil() {
	o.Nonce.Set(nil)
}

// UnsetNonce ensures that no value is present for Nonce, not even an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) UnsetNonce() {
	o.Nonce.Unset()
}

// GetLogIndex returns the LogIndex field value if set, zero value otherwise.
func (o *UNISWAPV3ETHEREUMDepositDTO) GetLogIndex() int32 {
	if o == nil || IsNil(o.LogIndex) {
		var ret int32
		return ret
	}
	return *o.LogIndex
}

// GetLogIndexOk returns a tuple with the LogIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) GetLogIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.LogIndex) {
		return nil, false
	}
	return o.LogIndex, true
}

// HasLogIndex returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) HasLogIndex() bool {
	if o != nil && !IsNil(o.LogIndex) {
		return true
	}

	return false
}

// SetLogIndex gets a reference to the given int32 and assigns it to the LogIndex field.
func (o *UNISWAPV3ETHEREUMDepositDTO) SetLogIndex(v int32) {
	o.LogIndex = &v
}

// GetGasLimit returns the GasLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMDepositDTO) GetGasLimit() string {
	if o == nil || IsNil(o.GasLimit.Get()) {
		var ret string
		return ret
	}
	return *o.GasLimit.Get()
}

// GetGasLimitOk returns a tuple with the GasLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMDepositDTO) GetGasLimitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GasLimit.Get(), o.GasLimit.IsSet()
}

// HasGasLimit returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) HasGasLimit() bool {
	if o != nil && o.GasLimit.IsSet() {
		return true
	}

	return false
}

// SetGasLimit gets a reference to the given NullableString and assigns it to the GasLimit field.
func (o *UNISWAPV3ETHEREUMDepositDTO) SetGasLimit(v string) {
	o.GasLimit.Set(&v)
}
// SetGasLimitNil sets the value for GasLimit to be an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) SetGasLimitNil() {
	o.GasLimit.Set(nil)
}

// UnsetGasLimit ensures that no value is present for GasLimit, not even an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) UnsetGasLimit() {
	o.GasLimit.Unset()
}

// GetGasUsed returns the GasUsed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMDepositDTO) GetGasUsed() string {
	if o == nil || IsNil(o.GasUsed.Get()) {
		var ret string
		return ret
	}
	return *o.GasUsed.Get()
}

// GetGasUsedOk returns a tuple with the GasUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMDepositDTO) GetGasUsedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GasUsed.Get(), o.GasUsed.IsSet()
}

// HasGasUsed returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) HasGasUsed() bool {
	if o != nil && o.GasUsed.IsSet() {
		return true
	}

	return false
}

// SetGasUsed gets a reference to the given NullableString and assigns it to the GasUsed field.
func (o *UNISWAPV3ETHEREUMDepositDTO) SetGasUsed(v string) {
	o.GasUsed.Set(&v)
}
// SetGasUsedNil sets the value for GasUsed to be an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) SetGasUsedNil() {
	o.GasUsed.Set(nil)
}

// UnsetGasUsed ensures that no value is present for GasUsed, not even an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) UnsetGasUsed() {
	o.GasUsed.Unset()
}

// GetGasPrice returns the GasPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMDepositDTO) GetGasPrice() string {
	if o == nil || IsNil(o.GasPrice.Get()) {
		var ret string
		return ret
	}
	return *o.GasPrice.Get()
}

// GetGasPriceOk returns a tuple with the GasPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMDepositDTO) GetGasPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GasPrice.Get(), o.GasPrice.IsSet()
}

// HasGasPrice returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) HasGasPrice() bool {
	if o != nil && o.GasPrice.IsSet() {
		return true
	}

	return false
}

// SetGasPrice gets a reference to the given NullableString and assigns it to the GasPrice field.
func (o *UNISWAPV3ETHEREUMDepositDTO) SetGasPrice(v string) {
	o.GasPrice.Set(&v)
}
// SetGasPriceNil sets the value for GasPrice to be an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) SetGasPriceNil() {
	o.GasPrice.Set(nil)
}

// UnsetGasPrice ensures that no value is present for GasPrice, not even an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) UnsetGasPrice() {
	o.GasPrice.Unset()
}

// GetProtocol returns the Protocol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMDepositDTO) GetProtocol() string {
	if o == nil || IsNil(o.Protocol.Get()) {
		var ret string
		return ret
	}
	return *o.Protocol.Get()
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMDepositDTO) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Protocol.Get(), o.Protocol.IsSet()
}

// HasProtocol returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) HasProtocol() bool {
	if o != nil && o.Protocol.IsSet() {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given NullableString and assigns it to the Protocol field.
func (o *UNISWAPV3ETHEREUMDepositDTO) SetProtocol(v string) {
	o.Protocol.Set(&v)
}
// SetProtocolNil sets the value for Protocol to be an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) SetProtocolNil() {
	o.Protocol.Set(nil)
}

// UnsetProtocol ensures that no value is present for Protocol, not even an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) UnsetProtocol() {
	o.Protocol.Unset()
}

// GetAccount returns the Account field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMDepositDTO) GetAccount() string {
	if o == nil || IsNil(o.Account.Get()) {
		var ret string
		return ret
	}
	return *o.Account.Get()
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMDepositDTO) GetAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Account.Get(), o.Account.IsSet()
}

// HasAccount returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) HasAccount() bool {
	if o != nil && o.Account.IsSet() {
		return true
	}

	return false
}

// SetAccount gets a reference to the given NullableString and assigns it to the Account field.
func (o *UNISWAPV3ETHEREUMDepositDTO) SetAccount(v string) {
	o.Account.Set(&v)
}
// SetAccountNil sets the value for Account to be an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) SetAccountNil() {
	o.Account.Set(nil)
}

// UnsetAccount ensures that no value is present for Account, not even an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) UnsetAccount() {
	o.Account.Unset()
}

// GetPosition returns the Position field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMDepositDTO) GetPosition() string {
	if o == nil || IsNil(o.Position.Get()) {
		var ret string
		return ret
	}
	return *o.Position.Get()
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMDepositDTO) GetPositionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Position.Get(), o.Position.IsSet()
}

// HasPosition returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) HasPosition() bool {
	if o != nil && o.Position.IsSet() {
		return true
	}

	return false
}

// SetPosition gets a reference to the given NullableString and assigns it to the Position field.
func (o *UNISWAPV3ETHEREUMDepositDTO) SetPosition(v string) {
	o.Position.Set(&v)
}
// SetPositionNil sets the value for Position to be an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) SetPositionNil() {
	o.Position.Set(nil)
}

// UnsetPosition ensures that no value is present for Position, not even an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) UnsetPosition() {
	o.Position.Unset()
}

// GetPool returns the Pool field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMDepositDTO) GetPool() string {
	if o == nil || IsNil(o.Pool.Get()) {
		var ret string
		return ret
	}
	return *o.Pool.Get()
}

// GetPoolOk returns a tuple with the Pool field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMDepositDTO) GetPoolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pool.Get(), o.Pool.IsSet()
}

// HasPool returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) HasPool() bool {
	if o != nil && o.Pool.IsSet() {
		return true
	}

	return false
}

// SetPool gets a reference to the given NullableString and assigns it to the Pool field.
func (o *UNISWAPV3ETHEREUMDepositDTO) SetPool(v string) {
	o.Pool.Set(&v)
}
// SetPoolNil sets the value for Pool to be an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) SetPoolNil() {
	o.Pool.Set(nil)
}

// UnsetPool ensures that no value is present for Pool, not even an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) UnsetPool() {
	o.Pool.Unset()
}

// GetTickLower returns the TickLower field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMDepositDTO) GetTickLower() string {
	if o == nil || IsNil(o.TickLower.Get()) {
		var ret string
		return ret
	}
	return *o.TickLower.Get()
}

// GetTickLowerOk returns a tuple with the TickLower field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMDepositDTO) GetTickLowerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TickLower.Get(), o.TickLower.IsSet()
}

// HasTickLower returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) HasTickLower() bool {
	if o != nil && o.TickLower.IsSet() {
		return true
	}

	return false
}

// SetTickLower gets a reference to the given NullableString and assigns it to the TickLower field.
func (o *UNISWAPV3ETHEREUMDepositDTO) SetTickLower(v string) {
	o.TickLower.Set(&v)
}
// SetTickLowerNil sets the value for TickLower to be an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) SetTickLowerNil() {
	o.TickLower.Set(nil)
}

// UnsetTickLower ensures that no value is present for TickLower, not even an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) UnsetTickLower() {
	o.TickLower.Unset()
}

// GetTickUpper returns the TickUpper field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMDepositDTO) GetTickUpper() string {
	if o == nil || IsNil(o.TickUpper.Get()) {
		var ret string
		return ret
	}
	return *o.TickUpper.Get()
}

// GetTickUpperOk returns a tuple with the TickUpper field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMDepositDTO) GetTickUpperOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TickUpper.Get(), o.TickUpper.IsSet()
}

// HasTickUpper returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) HasTickUpper() bool {
	if o != nil && o.TickUpper.IsSet() {
		return true
	}

	return false
}

// SetTickUpper gets a reference to the given NullableString and assigns it to the TickUpper field.
func (o *UNISWAPV3ETHEREUMDepositDTO) SetTickUpper(v string) {
	o.TickUpper.Set(&v)
}
// SetTickUpperNil sets the value for TickUpper to be an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) SetTickUpperNil() {
	o.TickUpper.Set(nil)
}

// UnsetTickUpper ensures that no value is present for TickUpper, not even an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) UnsetTickUpper() {
	o.TickUpper.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMDepositDTO) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret string
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMDepositDTO) GetTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableString and assigns it to the Timestamp field.
func (o *UNISWAPV3ETHEREUMDepositDTO) SetTimestamp(v string) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetLiquidity returns the Liquidity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMDepositDTO) GetLiquidity() string {
	if o == nil || IsNil(o.Liquidity.Get()) {
		var ret string
		return ret
	}
	return *o.Liquidity.Get()
}

// GetLiquidityOk returns a tuple with the Liquidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMDepositDTO) GetLiquidityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Liquidity.Get(), o.Liquidity.IsSet()
}

// HasLiquidity returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) HasLiquidity() bool {
	if o != nil && o.Liquidity.IsSet() {
		return true
	}

	return false
}

// SetLiquidity gets a reference to the given NullableString and assigns it to the Liquidity field.
func (o *UNISWAPV3ETHEREUMDepositDTO) SetLiquidity(v string) {
	o.Liquidity.Set(&v)
}
// SetLiquidityNil sets the value for Liquidity to be an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) SetLiquidityNil() {
	o.Liquidity.Set(nil)
}

// UnsetLiquidity ensures that no value is present for Liquidity, not even an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) UnsetLiquidity() {
	o.Liquidity.Unset()
}

// GetInputTokens returns the InputTokens field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMDepositDTO) GetInputTokens() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.InputTokens
}

// GetInputTokensOk returns a tuple with the InputTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMDepositDTO) GetInputTokensOk() ([]string, bool) {
	if o == nil || IsNil(o.InputTokens) {
		return nil, false
	}
	return o.InputTokens, true
}

// HasInputTokens returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) HasInputTokens() bool {
	if o != nil && IsNil(o.InputTokens) {
		return true
	}

	return false
}

// SetInputTokens gets a reference to the given []string and assigns it to the InputTokens field.
func (o *UNISWAPV3ETHEREUMDepositDTO) SetInputTokens(v []string) {
	o.InputTokens = v
}

// GetInputTokenAmounts returns the InputTokenAmounts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMDepositDTO) GetInputTokenAmounts() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.InputTokenAmounts
}

// GetInputTokenAmountsOk returns a tuple with the InputTokenAmounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMDepositDTO) GetInputTokenAmountsOk() ([]string, bool) {
	if o == nil || IsNil(o.InputTokenAmounts) {
		return nil, false
	}
	return o.InputTokenAmounts, true
}

// HasInputTokenAmounts returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) HasInputTokenAmounts() bool {
	if o != nil && IsNil(o.InputTokenAmounts) {
		return true
	}

	return false
}

// SetInputTokenAmounts gets a reference to the given []string and assigns it to the InputTokenAmounts field.
func (o *UNISWAPV3ETHEREUMDepositDTO) SetInputTokenAmounts(v []string) {
	o.InputTokenAmounts = v
}

// GetReserveAmounts returns the ReserveAmounts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMDepositDTO) GetReserveAmounts() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ReserveAmounts
}

// GetReserveAmountsOk returns a tuple with the ReserveAmounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMDepositDTO) GetReserveAmountsOk() ([]string, bool) {
	if o == nil || IsNil(o.ReserveAmounts) {
		return nil, false
	}
	return o.ReserveAmounts, true
}

// HasReserveAmounts returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) HasReserveAmounts() bool {
	if o != nil && IsNil(o.ReserveAmounts) {
		return true
	}

	return false
}

// SetReserveAmounts gets a reference to the given []string and assigns it to the ReserveAmounts field.
func (o *UNISWAPV3ETHEREUMDepositDTO) SetReserveAmounts(v []string) {
	o.ReserveAmounts = v
}

// GetAmountUsd returns the AmountUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMDepositDTO) GetAmountUsd() string {
	if o == nil || IsNil(o.AmountUsd.Get()) {
		var ret string
		return ret
	}
	return *o.AmountUsd.Get()
}

// GetAmountUsdOk returns a tuple with the AmountUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMDepositDTO) GetAmountUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AmountUsd.Get(), o.AmountUsd.IsSet()
}

// HasAmountUsd returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) HasAmountUsd() bool {
	if o != nil && o.AmountUsd.IsSet() {
		return true
	}

	return false
}

// SetAmountUsd gets a reference to the given NullableString and assigns it to the AmountUsd field.
func (o *UNISWAPV3ETHEREUMDepositDTO) SetAmountUsd(v string) {
	o.AmountUsd.Set(&v)
}
// SetAmountUsdNil sets the value for AmountUsd to be an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) SetAmountUsdNil() {
	o.AmountUsd.Set(nil)
}

// UnsetAmountUsd ensures that no value is present for AmountUsd, not even an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) UnsetAmountUsd() {
	o.AmountUsd.Unset()
}

// GetBlockRange returns the BlockRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV3ETHEREUMDepositDTO) GetBlockRange() string {
	if o == nil || IsNil(o.BlockRange.Get()) {
		var ret string
		return ret
	}
	return *o.BlockRange.Get()
}

// GetBlockRangeOk returns a tuple with the BlockRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV3ETHEREUMDepositDTO) GetBlockRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockRange.Get(), o.BlockRange.IsSet()
}

// HasBlockRange returns a boolean if a field has been set.
func (o *UNISWAPV3ETHEREUMDepositDTO) HasBlockRange() bool {
	if o != nil && o.BlockRange.IsSet() {
		return true
	}

	return false
}

// SetBlockRange gets a reference to the given NullableString and assigns it to the BlockRange field.
func (o *UNISWAPV3ETHEREUMDepositDTO) SetBlockRange(v string) {
	o.BlockRange.Set(&v)
}
// SetBlockRangeNil sets the value for BlockRange to be an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) SetBlockRangeNil() {
	o.BlockRange.Set(nil)
}

// UnsetBlockRange ensures that no value is present for BlockRange, not even an explicit nil
func (o *UNISWAPV3ETHEREUMDepositDTO) UnsetBlockRange() {
	o.BlockRange.Unset()
}

func (o UNISWAPV3ETHEREUMDepositDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UNISWAPV3ETHEREUMDepositDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryTime) {
		toSerialize["entry_time"] = o.EntryTime
	}
	if !IsNil(o.RecvTime) {
		toSerialize["recv_time"] = o.RecvTime
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["block_number"] = o.BlockNumber
	}
	if !IsNil(o.Block) {
		toSerialize["block_"] = o.Block
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Hash.IsSet() {
		toSerialize["hash"] = o.Hash.Get()
	}
	if o.Nonce.IsSet() {
		toSerialize["nonce"] = o.Nonce.Get()
	}
	if !IsNil(o.LogIndex) {
		toSerialize["log_index"] = o.LogIndex
	}
	if o.GasLimit.IsSet() {
		toSerialize["gas_limit"] = o.GasLimit.Get()
	}
	if o.GasUsed.IsSet() {
		toSerialize["gas_used"] = o.GasUsed.Get()
	}
	if o.GasPrice.IsSet() {
		toSerialize["gas_price"] = o.GasPrice.Get()
	}
	if o.Protocol.IsSet() {
		toSerialize["protocol"] = o.Protocol.Get()
	}
	if o.Account.IsSet() {
		toSerialize["account"] = o.Account.Get()
	}
	if o.Position.IsSet() {
		toSerialize["position"] = o.Position.Get()
	}
	if o.Pool.IsSet() {
		toSerialize["pool"] = o.Pool.Get()
	}
	if o.TickLower.IsSet() {
		toSerialize["tick_lower"] = o.TickLower.Get()
	}
	if o.TickUpper.IsSet() {
		toSerialize["tick_upper"] = o.TickUpper.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.Liquidity.IsSet() {
		toSerialize["liquidity"] = o.Liquidity.Get()
	}
	if o.InputTokens != nil {
		toSerialize["input_tokens"] = o.InputTokens
	}
	if o.InputTokenAmounts != nil {
		toSerialize["input_token_amounts"] = o.InputTokenAmounts
	}
	if o.ReserveAmounts != nil {
		toSerialize["reserve_amounts"] = o.ReserveAmounts
	}
	if o.AmountUsd.IsSet() {
		toSerialize["amount_usd"] = o.AmountUsd.Get()
	}
	if o.BlockRange.IsSet() {
		toSerialize["block_range"] = o.BlockRange.Get()
	}
	return toSerialize, nil
}

type NullableUNISWAPV3ETHEREUMDepositDTO struct {
	value *UNISWAPV3ETHEREUMDepositDTO
	isSet bool
}

func (v NullableUNISWAPV3ETHEREUMDepositDTO) Get() *UNISWAPV3ETHEREUMDepositDTO {
	return v.value
}

func (v *NullableUNISWAPV3ETHEREUMDepositDTO) Set(val *UNISWAPV3ETHEREUMDepositDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUNISWAPV3ETHEREUMDepositDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUNISWAPV3ETHEREUMDepositDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUNISWAPV3ETHEREUMDepositDTO(val *UNISWAPV3ETHEREUMDepositDTO) *NullableUNISWAPV3ETHEREUMDepositDTO {
	return &NullableUNISWAPV3ETHEREUMDepositDTO{value: val, isSet: true}
}

func (v NullableUNISWAPV3ETHEREUMDepositDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUNISWAPV3ETHEREUMDepositDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


