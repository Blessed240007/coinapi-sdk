/*
On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// CRYPTOPUNKSETHEREUMApiService CRYPTOPUNKSETHEREUMApi service
type CRYPTOPUNKSETHEREUMApiService service

type ApiCRYPTOPUNKSETHEREUMBidsCurrentRequest struct {
	ctx context.Context
	ApiService *CRYPTOPUNKSETHEREUMApiService
}

func (r ApiCRYPTOPUNKSETHEREUMBidsCurrentRequest) Execute() ([]CRYPTOPUNKSBidDTO, *http.Response, error) {
	return r.ApiService.CRYPTOPUNKSETHEREUMBidsCurrentExecute(r)
}

/*
CRYPTOPUNKSETHEREUMBidsCurrent Bids (current)

Gets bids.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCRYPTOPUNKSETHEREUMBidsCurrentRequest
*/
func (a *CRYPTOPUNKSETHEREUMApiService) CRYPTOPUNKSETHEREUMBidsCurrent(ctx context.Context) ApiCRYPTOPUNKSETHEREUMBidsCurrentRequest {
	return ApiCRYPTOPUNKSETHEREUMBidsCurrentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CRYPTOPUNKSBidDTO
func (a *CRYPTOPUNKSETHEREUMApiService) CRYPTOPUNKSETHEREUMBidsCurrentExecute(r ApiCRYPTOPUNKSETHEREUMBidsCurrentRequest) ([]CRYPTOPUNKSBidDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CRYPTOPUNKSBidDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CRYPTOPUNKSETHEREUMApiService.CRYPTOPUNKSETHEREUMBidsCurrent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/dapps/cryptopunks-ethereum/bids/current"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json", "application/x-msgpack"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentRequest struct {
	ctx context.Context
	ApiService *CRYPTOPUNKSETHEREUMApiService
}

func (r ApiCRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentRequest) Execute() ([]CRYPTOPUNKSCollectionDailySnapshotDTO, *http.Response, error) {
	return r.ApiService.CRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentExecute(r)
}

/*
CRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrent CollectionDailySnapshots (current)

Gets collectionDailySnapshots.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentRequest
*/
func (a *CRYPTOPUNKSETHEREUMApiService) CRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrent(ctx context.Context) ApiCRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentRequest {
	return ApiCRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CRYPTOPUNKSCollectionDailySnapshotDTO
func (a *CRYPTOPUNKSETHEREUMApiService) CRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentExecute(r ApiCRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentRequest) ([]CRYPTOPUNKSCollectionDailySnapshotDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CRYPTOPUNKSCollectionDailySnapshotDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CRYPTOPUNKSETHEREUMApiService.CRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/dapps/cryptopunks-ethereum/collectionDailySnapshots/current"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json", "application/x-msgpack"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCRYPTOPUNKSETHEREUMCollectionsCurrentRequest struct {
	ctx context.Context
	ApiService *CRYPTOPUNKSETHEREUMApiService
}

func (r ApiCRYPTOPUNKSETHEREUMCollectionsCurrentRequest) Execute() ([]CRYPTOPUNKSCollectionDTO, *http.Response, error) {
	return r.ApiService.CRYPTOPUNKSETHEREUMCollectionsCurrentExecute(r)
}

/*
CRYPTOPUNKSETHEREUMCollectionsCurrent Collections (current)

Gets collections.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCRYPTOPUNKSETHEREUMCollectionsCurrentRequest
*/
func (a *CRYPTOPUNKSETHEREUMApiService) CRYPTOPUNKSETHEREUMCollectionsCurrent(ctx context.Context) ApiCRYPTOPUNKSETHEREUMCollectionsCurrentRequest {
	return ApiCRYPTOPUNKSETHEREUMCollectionsCurrentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CRYPTOPUNKSCollectionDTO
func (a *CRYPTOPUNKSETHEREUMApiService) CRYPTOPUNKSETHEREUMCollectionsCurrentExecute(r ApiCRYPTOPUNKSETHEREUMCollectionsCurrentRequest) ([]CRYPTOPUNKSCollectionDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CRYPTOPUNKSCollectionDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CRYPTOPUNKSETHEREUMApiService.CRYPTOPUNKSETHEREUMCollectionsCurrent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/dapps/cryptopunks-ethereum/collections/current"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json", "application/x-msgpack"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCRYPTOPUNKSETHEREUMDataSourcesCurrentRequest struct {
	ctx context.Context
	ApiService *CRYPTOPUNKSETHEREUMApiService
}

func (r ApiCRYPTOPUNKSETHEREUMDataSourcesCurrentRequest) Execute() ([]CRYPTOPUNKSDataSourcesDTO, *http.Response, error) {
	return r.ApiService.CRYPTOPUNKSETHEREUMDataSourcesCurrentExecute(r)
}

/*
CRYPTOPUNKSETHEREUMDataSourcesCurrent DataSources (current)

Gets dataSources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCRYPTOPUNKSETHEREUMDataSourcesCurrentRequest
*/
func (a *CRYPTOPUNKSETHEREUMApiService) CRYPTOPUNKSETHEREUMDataSourcesCurrent(ctx context.Context) ApiCRYPTOPUNKSETHEREUMDataSourcesCurrentRequest {
	return ApiCRYPTOPUNKSETHEREUMDataSourcesCurrentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CRYPTOPUNKSDataSourcesDTO
func (a *CRYPTOPUNKSETHEREUMApiService) CRYPTOPUNKSETHEREUMDataSourcesCurrentExecute(r ApiCRYPTOPUNKSETHEREUMDataSourcesCurrentRequest) ([]CRYPTOPUNKSDataSourcesDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CRYPTOPUNKSDataSourcesDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CRYPTOPUNKSETHEREUMApiService.CRYPTOPUNKSETHEREUMDataSourcesCurrent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/dapps/cryptopunks-ethereum/dataSources/current"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json", "application/x-msgpack"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCRYPTOPUNKSETHEREUMItemsCurrentRequest struct {
	ctx context.Context
	ApiService *CRYPTOPUNKSETHEREUMApiService
}

func (r ApiCRYPTOPUNKSETHEREUMItemsCurrentRequest) Execute() ([]CRYPTOPUNKSItemDTO, *http.Response, error) {
	return r.ApiService.CRYPTOPUNKSETHEREUMItemsCurrentExecute(r)
}

/*
CRYPTOPUNKSETHEREUMItemsCurrent Items (current)

Gets items.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCRYPTOPUNKSETHEREUMItemsCurrentRequest
*/
func (a *CRYPTOPUNKSETHEREUMApiService) CRYPTOPUNKSETHEREUMItemsCurrent(ctx context.Context) ApiCRYPTOPUNKSETHEREUMItemsCurrentRequest {
	return ApiCRYPTOPUNKSETHEREUMItemsCurrentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CRYPTOPUNKSItemDTO
func (a *CRYPTOPUNKSETHEREUMApiService) CRYPTOPUNKSETHEREUMItemsCurrentExecute(r ApiCRYPTOPUNKSETHEREUMItemsCurrentRequest) ([]CRYPTOPUNKSItemDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CRYPTOPUNKSItemDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CRYPTOPUNKSETHEREUMApiService.CRYPTOPUNKSETHEREUMItemsCurrent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/dapps/cryptopunks-ethereum/items/current"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json", "application/x-msgpack"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCRYPTOPUNKSETHEREUMMarketPlacesCurrentRequest struct {
	ctx context.Context
	ApiService *CRYPTOPUNKSETHEREUMApiService
}

func (r ApiCRYPTOPUNKSETHEREUMMarketPlacesCurrentRequest) Execute() ([]CRYPTOPUNKSMarketPlaceDTO, *http.Response, error) {
	return r.ApiService.CRYPTOPUNKSETHEREUMMarketPlacesCurrentExecute(r)
}

/*
CRYPTOPUNKSETHEREUMMarketPlacesCurrent MarketPlaces (current)

Gets marketPlaces.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCRYPTOPUNKSETHEREUMMarketPlacesCurrentRequest
*/
func (a *CRYPTOPUNKSETHEREUMApiService) CRYPTOPUNKSETHEREUMMarketPlacesCurrent(ctx context.Context) ApiCRYPTOPUNKSETHEREUMMarketPlacesCurrentRequest {
	return ApiCRYPTOPUNKSETHEREUMMarketPlacesCurrentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CRYPTOPUNKSMarketPlaceDTO
func (a *CRYPTOPUNKSETHEREUMApiService) CRYPTOPUNKSETHEREUMMarketPlacesCurrentExecute(r ApiCRYPTOPUNKSETHEREUMMarketPlacesCurrentRequest) ([]CRYPTOPUNKSMarketPlaceDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CRYPTOPUNKSMarketPlaceDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CRYPTOPUNKSETHEREUMApiService.CRYPTOPUNKSETHEREUMMarketPlacesCurrent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/dapps/cryptopunks-ethereum/marketPlaces/current"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json", "application/x-msgpack"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentRequest struct {
	ctx context.Context
	ApiService *CRYPTOPUNKSETHEREUMApiService
}

func (r ApiCRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentRequest) Execute() ([]CRYPTOPUNKSMarketplaceDailySnapshotDTO, *http.Response, error) {
	return r.ApiService.CRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentExecute(r)
}

/*
CRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrent MarketplaceDailySnapshots (current)

Gets marketplaceDailySnapshots.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentRequest
*/
func (a *CRYPTOPUNKSETHEREUMApiService) CRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrent(ctx context.Context) ApiCRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentRequest {
	return ApiCRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CRYPTOPUNKSMarketplaceDailySnapshotDTO
func (a *CRYPTOPUNKSETHEREUMApiService) CRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentExecute(r ApiCRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentRequest) ([]CRYPTOPUNKSMarketplaceDailySnapshotDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CRYPTOPUNKSMarketplaceDailySnapshotDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CRYPTOPUNKSETHEREUMApiService.CRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/dapps/cryptopunks-ethereum/marketplaceDailySnapshots/current"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json", "application/x-msgpack"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCRYPTOPUNKSETHEREUMTradesCurrentRequest struct {
	ctx context.Context
	ApiService *CRYPTOPUNKSETHEREUMApiService
}

func (r ApiCRYPTOPUNKSETHEREUMTradesCurrentRequest) Execute() ([]CRYPTOPUNKSTradeDTO, *http.Response, error) {
	return r.ApiService.CRYPTOPUNKSETHEREUMTradesCurrentExecute(r)
}

/*
CRYPTOPUNKSETHEREUMTradesCurrent Trades (current)

Gets trades.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCRYPTOPUNKSETHEREUMTradesCurrentRequest
*/
func (a *CRYPTOPUNKSETHEREUMApiService) CRYPTOPUNKSETHEREUMTradesCurrent(ctx context.Context) ApiCRYPTOPUNKSETHEREUMTradesCurrentRequest {
	return ApiCRYPTOPUNKSETHEREUMTradesCurrentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CRYPTOPUNKSTradeDTO
func (a *CRYPTOPUNKSETHEREUMApiService) CRYPTOPUNKSETHEREUMTradesCurrentExecute(r ApiCRYPTOPUNKSETHEREUMTradesCurrentRequest) ([]CRYPTOPUNKSTradeDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CRYPTOPUNKSTradeDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CRYPTOPUNKSETHEREUMApiService.CRYPTOPUNKSETHEREUMTradesCurrent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/dapps/cryptopunks-ethereum/trades/current"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json", "application/x-msgpack"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCRYPTOPUNKSETHEREUMUsersCurrentRequest struct {
	ctx context.Context
	ApiService *CRYPTOPUNKSETHEREUMApiService
}

func (r ApiCRYPTOPUNKSETHEREUMUsersCurrentRequest) Execute() ([]CRYPTOPUNKSUserDTO, *http.Response, error) {
	return r.ApiService.CRYPTOPUNKSETHEREUMUsersCurrentExecute(r)
}

/*
CRYPTOPUNKSETHEREUMUsersCurrent Users (current)

Gets users.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCRYPTOPUNKSETHEREUMUsersCurrentRequest
*/
func (a *CRYPTOPUNKSETHEREUMApiService) CRYPTOPUNKSETHEREUMUsersCurrent(ctx context.Context) ApiCRYPTOPUNKSETHEREUMUsersCurrentRequest {
	return ApiCRYPTOPUNKSETHEREUMUsersCurrentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CRYPTOPUNKSUserDTO
func (a *CRYPTOPUNKSETHEREUMApiService) CRYPTOPUNKSETHEREUMUsersCurrentExecute(r ApiCRYPTOPUNKSETHEREUMUsersCurrentRequest) ([]CRYPTOPUNKSUserDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CRYPTOPUNKSUserDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CRYPTOPUNKSETHEREUMApiService.CRYPTOPUNKSETHEREUMUsersCurrent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/dapps/cryptopunks-ethereum/users/current"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json", "application/x-msgpack"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
