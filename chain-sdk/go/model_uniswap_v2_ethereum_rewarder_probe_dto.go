/*
On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the UNISWAPV2ETHEREUMRewarderProbeDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UNISWAPV2ETHEREUMRewarderProbeDTO{}

// UNISWAPV2ETHEREUMRewarderProbeDTO 
type UNISWAPV2ETHEREUMRewarderProbeDTO struct {
	EntryTime *time.Time `json:"entry_time,omitempty"`
	RecvTime *time.Time `json:"recv_time,omitempty"`
	// Number of block in which entity was recorded.
	BlockNumber *int64 `json:"block_number,omitempty"`
	// 
	BlockRange NullableString `json:"block_range,omitempty"`
	// (rewarder)-(probeNum)
	Id NullableString `json:"id,omitempty"`
	// The address being probed
	User NullableString `json:"user,omitempty"`
	// The value from the last probe
	Pending NullableString `json:"pending,omitempty"`
	// Block at which the probe was made
	BlockNum NullableString `json:"block_num,omitempty"`
	// Block timestamp at whihc the probe was taken
	Timestamp NullableString `json:"timestamp,omitempty"`
	// Total LP staked in pool at the time of the probe
	LpStaked NullableString `json:"lp_staked,omitempty"`
}

// NewUNISWAPV2ETHEREUMRewarderProbeDTO instantiates a new UNISWAPV2ETHEREUMRewarderProbeDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUNISWAPV2ETHEREUMRewarderProbeDTO() *UNISWAPV2ETHEREUMRewarderProbeDTO {
	this := UNISWAPV2ETHEREUMRewarderProbeDTO{}
	return &this
}

// NewUNISWAPV2ETHEREUMRewarderProbeDTOWithDefaults instantiates a new UNISWAPV2ETHEREUMRewarderProbeDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUNISWAPV2ETHEREUMRewarderProbeDTOWithDefaults() *UNISWAPV2ETHEREUMRewarderProbeDTO {
	this := UNISWAPV2ETHEREUMRewarderProbeDTO{}
	return &this
}

// GetEntryTime returns the EntryTime field value if set, zero value otherwise.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) GetEntryTime() time.Time {
	if o == nil || IsNil(o.EntryTime) {
		var ret time.Time
		return ret
	}
	return *o.EntryTime
}

// GetEntryTimeOk returns a tuple with the EntryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) GetEntryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EntryTime) {
		return nil, false
	}
	return o.EntryTime, true
}

// HasEntryTime returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) HasEntryTime() bool {
	if o != nil && !IsNil(o.EntryTime) {
		return true
	}

	return false
}

// SetEntryTime gets a reference to the given time.Time and assigns it to the EntryTime field.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) SetEntryTime(v time.Time) {
	o.EntryTime = &v
}

// GetRecvTime returns the RecvTime field value if set, zero value otherwise.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) GetRecvTime() time.Time {
	if o == nil || IsNil(o.RecvTime) {
		var ret time.Time
		return ret
	}
	return *o.RecvTime
}

// GetRecvTimeOk returns a tuple with the RecvTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) GetRecvTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecvTime) {
		return nil, false
	}
	return o.RecvTime, true
}

// HasRecvTime returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) HasRecvTime() bool {
	if o != nil && !IsNil(o.RecvTime) {
		return true
	}

	return false
}

// SetRecvTime gets a reference to the given time.Time and assigns it to the RecvTime field.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) SetRecvTime(v time.Time) {
	o.RecvTime = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber) {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) GetBlockNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetBlockRange returns the BlockRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) GetBlockRange() string {
	if o == nil || IsNil(o.BlockRange.Get()) {
		var ret string
		return ret
	}
	return *o.BlockRange.Get()
}

// GetBlockRangeOk returns a tuple with the BlockRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) GetBlockRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockRange.Get(), o.BlockRange.IsSet()
}

// HasBlockRange returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) HasBlockRange() bool {
	if o != nil && o.BlockRange.IsSet() {
		return true
	}

	return false
}

// SetBlockRange gets a reference to the given NullableString and assigns it to the BlockRange field.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) SetBlockRange(v string) {
	o.BlockRange.Set(&v)
}
// SetBlockRangeNil sets the value for BlockRange to be an explicit nil
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) SetBlockRangeNil() {
	o.BlockRange.Set(nil)
}

// UnsetBlockRange ensures that no value is present for BlockRange, not even an explicit nil
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) UnsetBlockRange() {
	o.BlockRange.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) UnsetId() {
	o.Id.Unset()
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) GetUser() string {
	if o == nil || IsNil(o.User.Get()) {
		var ret string
		return ret
	}
	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// HasUser returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) HasUser() bool {
	if o != nil && o.User.IsSet() {
		return true
	}

	return false
}

// SetUser gets a reference to the given NullableString and assigns it to the User field.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) SetUser(v string) {
	o.User.Set(&v)
}
// SetUserNil sets the value for User to be an explicit nil
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) SetUserNil() {
	o.User.Set(nil)
}

// UnsetUser ensures that no value is present for User, not even an explicit nil
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) UnsetUser() {
	o.User.Unset()
}

// GetPending returns the Pending field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) GetPending() string {
	if o == nil || IsNil(o.Pending.Get()) {
		var ret string
		return ret
	}
	return *o.Pending.Get()
}

// GetPendingOk returns a tuple with the Pending field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) GetPendingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pending.Get(), o.Pending.IsSet()
}

// HasPending returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) HasPending() bool {
	if o != nil && o.Pending.IsSet() {
		return true
	}

	return false
}

// SetPending gets a reference to the given NullableString and assigns it to the Pending field.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) SetPending(v string) {
	o.Pending.Set(&v)
}
// SetPendingNil sets the value for Pending to be an explicit nil
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) SetPendingNil() {
	o.Pending.Set(nil)
}

// UnsetPending ensures that no value is present for Pending, not even an explicit nil
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) UnsetPending() {
	o.Pending.Unset()
}

// GetBlockNum returns the BlockNum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) GetBlockNum() string {
	if o == nil || IsNil(o.BlockNum.Get()) {
		var ret string
		return ret
	}
	return *o.BlockNum.Get()
}

// GetBlockNumOk returns a tuple with the BlockNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) GetBlockNumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockNum.Get(), o.BlockNum.IsSet()
}

// HasBlockNum returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) HasBlockNum() bool {
	if o != nil && o.BlockNum.IsSet() {
		return true
	}

	return false
}

// SetBlockNum gets a reference to the given NullableString and assigns it to the BlockNum field.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) SetBlockNum(v string) {
	o.BlockNum.Set(&v)
}
// SetBlockNumNil sets the value for BlockNum to be an explicit nil
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) SetBlockNumNil() {
	o.BlockNum.Set(nil)
}

// UnsetBlockNum ensures that no value is present for BlockNum, not even an explicit nil
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) UnsetBlockNum() {
	o.BlockNum.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret string
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) GetTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableString and assigns it to the Timestamp field.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) SetTimestamp(v string) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetLpStaked returns the LpStaked field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) GetLpStaked() string {
	if o == nil || IsNil(o.LpStaked.Get()) {
		var ret string
		return ret
	}
	return *o.LpStaked.Get()
}

// GetLpStakedOk returns a tuple with the LpStaked field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) GetLpStakedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LpStaked.Get(), o.LpStaked.IsSet()
}

// HasLpStaked returns a boolean if a field has been set.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) HasLpStaked() bool {
	if o != nil && o.LpStaked.IsSet() {
		return true
	}

	return false
}

// SetLpStaked gets a reference to the given NullableString and assigns it to the LpStaked field.
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) SetLpStaked(v string) {
	o.LpStaked.Set(&v)
}
// SetLpStakedNil sets the value for LpStaked to be an explicit nil
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) SetLpStakedNil() {
	o.LpStaked.Set(nil)
}

// UnsetLpStaked ensures that no value is present for LpStaked, not even an explicit nil
func (o *UNISWAPV2ETHEREUMRewarderProbeDTO) UnsetLpStaked() {
	o.LpStaked.Unset()
}

func (o UNISWAPV2ETHEREUMRewarderProbeDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UNISWAPV2ETHEREUMRewarderProbeDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryTime) {
		toSerialize["entry_time"] = o.EntryTime
	}
	if !IsNil(o.RecvTime) {
		toSerialize["recv_time"] = o.RecvTime
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["block_number"] = o.BlockNumber
	}
	if o.BlockRange.IsSet() {
		toSerialize["block_range"] = o.BlockRange.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.User.IsSet() {
		toSerialize["user"] = o.User.Get()
	}
	if o.Pending.IsSet() {
		toSerialize["pending"] = o.Pending.Get()
	}
	if o.BlockNum.IsSet() {
		toSerialize["block_num"] = o.BlockNum.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.LpStaked.IsSet() {
		toSerialize["lp_staked"] = o.LpStaked.Get()
	}
	return toSerialize, nil
}

type NullableUNISWAPV2ETHEREUMRewarderProbeDTO struct {
	value *UNISWAPV2ETHEREUMRewarderProbeDTO
	isSet bool
}

func (v NullableUNISWAPV2ETHEREUMRewarderProbeDTO) Get() *UNISWAPV2ETHEREUMRewarderProbeDTO {
	return v.value
}

func (v *NullableUNISWAPV2ETHEREUMRewarderProbeDTO) Set(val *UNISWAPV2ETHEREUMRewarderProbeDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableUNISWAPV2ETHEREUMRewarderProbeDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableUNISWAPV2ETHEREUMRewarderProbeDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUNISWAPV2ETHEREUMRewarderProbeDTO(val *UNISWAPV2ETHEREUMRewarderProbeDTO) *NullableUNISWAPV2ETHEREUMRewarderProbeDTO {
	return &NullableUNISWAPV2ETHEREUMRewarderProbeDTO{value: val, isSet: true}
}

func (v NullableUNISWAPV2ETHEREUMRewarderProbeDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUNISWAPV2ETHEREUMRewarderProbeDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


