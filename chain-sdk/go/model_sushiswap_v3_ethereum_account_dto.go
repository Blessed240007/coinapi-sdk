/*
On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the SUSHISWAPV3ETHEREUMAccountDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SUSHISWAPV3ETHEREUMAccountDTO{}

// SUSHISWAPV3ETHEREUMAccountDTO struct for SUSHISWAPV3ETHEREUMAccountDTO
type SUSHISWAPV3ETHEREUMAccountDTO struct {
	EntryTime *time.Time `json:"entry_time,omitempty"`
	RecvTime *time.Time `json:"recv_time,omitempty"`
	// Number of block in which entity was recorded.
	BlockNumber *int64 `json:"block_number,omitempty"`
	// 
	BlockRange NullableString `json:"block_range,omitempty"`
	// Account address.
	Id NullableString `json:"id,omitempty"`
	// Number of positions this account has.
	PositionCount *int32 `json:"position_count,omitempty"`
	// Number of open positions this account has.
	OpenPositionCount *int32 `json:"open_position_count,omitempty"`
	// Number of closed positions this account has.
	ClosedPositionCount *int32 `json:"closed_position_count,omitempty"`
	// Number of deposits this account made.
	DepositCount *int32 `json:"deposit_count,omitempty"`
	// Number of withdrawals this account made.
	WithdrawCount *int32 `json:"withdraw_count,omitempty"`
	// Number of times this account has traded/swapped.
	SwapCount *int32 `json:"swap_count,omitempty"`
}

// NewSUSHISWAPV3ETHEREUMAccountDTO instantiates a new SUSHISWAPV3ETHEREUMAccountDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSUSHISWAPV3ETHEREUMAccountDTO() *SUSHISWAPV3ETHEREUMAccountDTO {
	this := SUSHISWAPV3ETHEREUMAccountDTO{}
	return &this
}

// NewSUSHISWAPV3ETHEREUMAccountDTOWithDefaults instantiates a new SUSHISWAPV3ETHEREUMAccountDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSUSHISWAPV3ETHEREUMAccountDTOWithDefaults() *SUSHISWAPV3ETHEREUMAccountDTO {
	this := SUSHISWAPV3ETHEREUMAccountDTO{}
	return &this
}

// GetEntryTime returns the EntryTime field value if set, zero value otherwise.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) GetEntryTime() time.Time {
	if o == nil || IsNil(o.EntryTime) {
		var ret time.Time
		return ret
	}
	return *o.EntryTime
}

// GetEntryTimeOk returns a tuple with the EntryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) GetEntryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EntryTime) {
		return nil, false
	}
	return o.EntryTime, true
}

// HasEntryTime returns a boolean if a field has been set.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) HasEntryTime() bool {
	if o != nil && !IsNil(o.EntryTime) {
		return true
	}

	return false
}

// SetEntryTime gets a reference to the given time.Time and assigns it to the EntryTime field.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) SetEntryTime(v time.Time) {
	o.EntryTime = &v
}

// GetRecvTime returns the RecvTime field value if set, zero value otherwise.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) GetRecvTime() time.Time {
	if o == nil || IsNil(o.RecvTime) {
		var ret time.Time
		return ret
	}
	return *o.RecvTime
}

// GetRecvTimeOk returns a tuple with the RecvTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) GetRecvTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecvTime) {
		return nil, false
	}
	return o.RecvTime, true
}

// HasRecvTime returns a boolean if a field has been set.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) HasRecvTime() bool {
	if o != nil && !IsNil(o.RecvTime) {
		return true
	}

	return false
}

// SetRecvTime gets a reference to the given time.Time and assigns it to the RecvTime field.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) SetRecvTime(v time.Time) {
	o.RecvTime = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber) {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) GetBlockNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetBlockRange returns the BlockRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SUSHISWAPV3ETHEREUMAccountDTO) GetBlockRange() string {
	if o == nil || IsNil(o.BlockRange.Get()) {
		var ret string
		return ret
	}
	return *o.BlockRange.Get()
}

// GetBlockRangeOk returns a tuple with the BlockRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SUSHISWAPV3ETHEREUMAccountDTO) GetBlockRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockRange.Get(), o.BlockRange.IsSet()
}

// HasBlockRange returns a boolean if a field has been set.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) HasBlockRange() bool {
	if o != nil && o.BlockRange.IsSet() {
		return true
	}

	return false
}

// SetBlockRange gets a reference to the given NullableString and assigns it to the BlockRange field.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) SetBlockRange(v string) {
	o.BlockRange.Set(&v)
}
// SetBlockRangeNil sets the value for BlockRange to be an explicit nil
func (o *SUSHISWAPV3ETHEREUMAccountDTO) SetBlockRangeNil() {
	o.BlockRange.Set(nil)
}

// UnsetBlockRange ensures that no value is present for BlockRange, not even an explicit nil
func (o *SUSHISWAPV3ETHEREUMAccountDTO) UnsetBlockRange() {
	o.BlockRange.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SUSHISWAPV3ETHEREUMAccountDTO) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SUSHISWAPV3ETHEREUMAccountDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *SUSHISWAPV3ETHEREUMAccountDTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *SUSHISWAPV3ETHEREUMAccountDTO) UnsetId() {
	o.Id.Unset()
}

// GetPositionCount returns the PositionCount field value if set, zero value otherwise.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) GetPositionCount() int32 {
	if o == nil || IsNil(o.PositionCount) {
		var ret int32
		return ret
	}
	return *o.PositionCount
}

// GetPositionCountOk returns a tuple with the PositionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) GetPositionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PositionCount) {
		return nil, false
	}
	return o.PositionCount, true
}

// HasPositionCount returns a boolean if a field has been set.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) HasPositionCount() bool {
	if o != nil && !IsNil(o.PositionCount) {
		return true
	}

	return false
}

// SetPositionCount gets a reference to the given int32 and assigns it to the PositionCount field.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) SetPositionCount(v int32) {
	o.PositionCount = &v
}

// GetOpenPositionCount returns the OpenPositionCount field value if set, zero value otherwise.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) GetOpenPositionCount() int32 {
	if o == nil || IsNil(o.OpenPositionCount) {
		var ret int32
		return ret
	}
	return *o.OpenPositionCount
}

// GetOpenPositionCountOk returns a tuple with the OpenPositionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) GetOpenPositionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.OpenPositionCount) {
		return nil, false
	}
	return o.OpenPositionCount, true
}

// HasOpenPositionCount returns a boolean if a field has been set.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) HasOpenPositionCount() bool {
	if o != nil && !IsNil(o.OpenPositionCount) {
		return true
	}

	return false
}

// SetOpenPositionCount gets a reference to the given int32 and assigns it to the OpenPositionCount field.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) SetOpenPositionCount(v int32) {
	o.OpenPositionCount = &v
}

// GetClosedPositionCount returns the ClosedPositionCount field value if set, zero value otherwise.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) GetClosedPositionCount() int32 {
	if o == nil || IsNil(o.ClosedPositionCount) {
		var ret int32
		return ret
	}
	return *o.ClosedPositionCount
}

// GetClosedPositionCountOk returns a tuple with the ClosedPositionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) GetClosedPositionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ClosedPositionCount) {
		return nil, false
	}
	return o.ClosedPositionCount, true
}

// HasClosedPositionCount returns a boolean if a field has been set.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) HasClosedPositionCount() bool {
	if o != nil && !IsNil(o.ClosedPositionCount) {
		return true
	}

	return false
}

// SetClosedPositionCount gets a reference to the given int32 and assigns it to the ClosedPositionCount field.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) SetClosedPositionCount(v int32) {
	o.ClosedPositionCount = &v
}

// GetDepositCount returns the DepositCount field value if set, zero value otherwise.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) GetDepositCount() int32 {
	if o == nil || IsNil(o.DepositCount) {
		var ret int32
		return ret
	}
	return *o.DepositCount
}

// GetDepositCountOk returns a tuple with the DepositCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) GetDepositCountOk() (*int32, bool) {
	if o == nil || IsNil(o.DepositCount) {
		return nil, false
	}
	return o.DepositCount, true
}

// HasDepositCount returns a boolean if a field has been set.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) HasDepositCount() bool {
	if o != nil && !IsNil(o.DepositCount) {
		return true
	}

	return false
}

// SetDepositCount gets a reference to the given int32 and assigns it to the DepositCount field.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) SetDepositCount(v int32) {
	o.DepositCount = &v
}

// GetWithdrawCount returns the WithdrawCount field value if set, zero value otherwise.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) GetWithdrawCount() int32 {
	if o == nil || IsNil(o.WithdrawCount) {
		var ret int32
		return ret
	}
	return *o.WithdrawCount
}

// GetWithdrawCountOk returns a tuple with the WithdrawCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) GetWithdrawCountOk() (*int32, bool) {
	if o == nil || IsNil(o.WithdrawCount) {
		return nil, false
	}
	return o.WithdrawCount, true
}

// HasWithdrawCount returns a boolean if a field has been set.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) HasWithdrawCount() bool {
	if o != nil && !IsNil(o.WithdrawCount) {
		return true
	}

	return false
}

// SetWithdrawCount gets a reference to the given int32 and assigns it to the WithdrawCount field.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) SetWithdrawCount(v int32) {
	o.WithdrawCount = &v
}

// GetSwapCount returns the SwapCount field value if set, zero value otherwise.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) GetSwapCount() int32 {
	if o == nil || IsNil(o.SwapCount) {
		var ret int32
		return ret
	}
	return *o.SwapCount
}

// GetSwapCountOk returns a tuple with the SwapCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) GetSwapCountOk() (*int32, bool) {
	if o == nil || IsNil(o.SwapCount) {
		return nil, false
	}
	return o.SwapCount, true
}

// HasSwapCount returns a boolean if a field has been set.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) HasSwapCount() bool {
	if o != nil && !IsNil(o.SwapCount) {
		return true
	}

	return false
}

// SetSwapCount gets a reference to the given int32 and assigns it to the SwapCount field.
func (o *SUSHISWAPV3ETHEREUMAccountDTO) SetSwapCount(v int32) {
	o.SwapCount = &v
}

func (o SUSHISWAPV3ETHEREUMAccountDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SUSHISWAPV3ETHEREUMAccountDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryTime) {
		toSerialize["entry_time"] = o.EntryTime
	}
	if !IsNil(o.RecvTime) {
		toSerialize["recv_time"] = o.RecvTime
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["block_number"] = o.BlockNumber
	}
	if o.BlockRange.IsSet() {
		toSerialize["block_range"] = o.BlockRange.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.PositionCount) {
		toSerialize["position_count"] = o.PositionCount
	}
	if !IsNil(o.OpenPositionCount) {
		toSerialize["open_position_count"] = o.OpenPositionCount
	}
	if !IsNil(o.ClosedPositionCount) {
		toSerialize["closed_position_count"] = o.ClosedPositionCount
	}
	if !IsNil(o.DepositCount) {
		toSerialize["deposit_count"] = o.DepositCount
	}
	if !IsNil(o.WithdrawCount) {
		toSerialize["withdraw_count"] = o.WithdrawCount
	}
	if !IsNil(o.SwapCount) {
		toSerialize["swap_count"] = o.SwapCount
	}
	return toSerialize, nil
}

type NullableSUSHISWAPV3ETHEREUMAccountDTO struct {
	value *SUSHISWAPV3ETHEREUMAccountDTO
	isSet bool
}

func (v NullableSUSHISWAPV3ETHEREUMAccountDTO) Get() *SUSHISWAPV3ETHEREUMAccountDTO {
	return v.value
}

func (v *NullableSUSHISWAPV3ETHEREUMAccountDTO) Set(val *SUSHISWAPV3ETHEREUMAccountDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableSUSHISWAPV3ETHEREUMAccountDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableSUSHISWAPV3ETHEREUMAccountDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSUSHISWAPV3ETHEREUMAccountDTO(val *SUSHISWAPV3ETHEREUMAccountDTO) *NullableSUSHISWAPV3ETHEREUMAccountDTO {
	return &NullableSUSHISWAPV3ETHEREUMAccountDTO{value: val, isSet: true}
}

func (v NullableSUSHISWAPV3ETHEREUMAccountDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSUSHISWAPV3ETHEREUMAccountDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


