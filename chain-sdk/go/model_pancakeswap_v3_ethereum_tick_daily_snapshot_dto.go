/*
On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO{}

// PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO 
type PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO struct {
	EntryTime *time.Time `json:"entry_time,omitempty"`
	RecvTime *time.Time `json:"recv_time,omitempty"`
	// Number of block in which entity was recorded.
	BlockNumber *int64 `json:"block_number,omitempty"`
	// 
	Vid *int64 `json:"vid,omitempty"`
	// Identifier, format: (pool address)-(tick index)-(day ID)
	Id NullableString `json:"id,omitempty"`
	// Number of days since Unix epoch time
	DayId *int32 `json:"day_id,omitempty"`
	// tick index
	Tick NullableString `json:"tick,omitempty"`
	// liquidity pool this tick belongs to
	Pool NullableString `json:"pool,omitempty"`
	// total liquidity pool has as tick lower or upper
	LiquidityGross NullableString `json:"liquidity_gross,omitempty"`
	// total liquidity in USD pool has as tick lower or upper
	LiquidityGrossUsd NullableString `json:"liquidity_gross_usd,omitempty"`
	// how much liquidity changes when tick crossed
	LiquidityNet NullableString `json:"liquidity_net,omitempty"`
	// how much liquidity in USD changes when tick crossed
	LiquidityNetUsd NullableString `json:"liquidity_net_usd,omitempty"`
	// Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)
	Timestamp NullableString `json:"timestamp,omitempty"`
}

// NewPANCAKESWAPV3ETHEREUMTickDailySnapshotDTO instantiates a new PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPANCAKESWAPV3ETHEREUMTickDailySnapshotDTO() *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO {
	this := PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO{}
	return &this
}

// NewPANCAKESWAPV3ETHEREUMTickDailySnapshotDTOWithDefaults instantiates a new PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPANCAKESWAPV3ETHEREUMTickDailySnapshotDTOWithDefaults() *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO {
	this := PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO{}
	return &this
}

// GetEntryTime returns the EntryTime field value if set, zero value otherwise.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetEntryTime() time.Time {
	if o == nil || IsNil(o.EntryTime) {
		var ret time.Time
		return ret
	}
	return *o.EntryTime
}

// GetEntryTimeOk returns a tuple with the EntryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetEntryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EntryTime) {
		return nil, false
	}
	return o.EntryTime, true
}

// HasEntryTime returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) HasEntryTime() bool {
	if o != nil && !IsNil(o.EntryTime) {
		return true
	}

	return false
}

// SetEntryTime gets a reference to the given time.Time and assigns it to the EntryTime field.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) SetEntryTime(v time.Time) {
	o.EntryTime = &v
}

// GetRecvTime returns the RecvTime field value if set, zero value otherwise.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetRecvTime() time.Time {
	if o == nil || IsNil(o.RecvTime) {
		var ret time.Time
		return ret
	}
	return *o.RecvTime
}

// GetRecvTimeOk returns a tuple with the RecvTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetRecvTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecvTime) {
		return nil, false
	}
	return o.RecvTime, true
}

// HasRecvTime returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) HasRecvTime() bool {
	if o != nil && !IsNil(o.RecvTime) {
		return true
	}

	return false
}

// SetRecvTime gets a reference to the given time.Time and assigns it to the RecvTime field.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) SetRecvTime(v time.Time) {
	o.RecvTime = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber) {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetBlockNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetVid returns the Vid field value if set, zero value otherwise.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetVid() int64 {
	if o == nil || IsNil(o.Vid) {
		var ret int64
		return ret
	}
	return *o.Vid
}

// GetVidOk returns a tuple with the Vid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetVidOk() (*int64, bool) {
	if o == nil || IsNil(o.Vid) {
		return nil, false
	}
	return o.Vid, true
}

// HasVid returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) HasVid() bool {
	if o != nil && !IsNil(o.Vid) {
		return true
	}

	return false
}

// SetVid gets a reference to the given int64 and assigns it to the Vid field.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) SetVid(v int64) {
	o.Vid = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) UnsetId() {
	o.Id.Unset()
}

// GetDayId returns the DayId field value if set, zero value otherwise.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetDayId() int32 {
	if o == nil || IsNil(o.DayId) {
		var ret int32
		return ret
	}
	return *o.DayId
}

// GetDayIdOk returns a tuple with the DayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetDayIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DayId) {
		return nil, false
	}
	return o.DayId, true
}

// HasDayId returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) HasDayId() bool {
	if o != nil && !IsNil(o.DayId) {
		return true
	}

	return false
}

// SetDayId gets a reference to the given int32 and assigns it to the DayId field.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) SetDayId(v int32) {
	o.DayId = &v
}

// GetTick returns the Tick field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetTick() string {
	if o == nil || IsNil(o.Tick.Get()) {
		var ret string
		return ret
	}
	return *o.Tick.Get()
}

// GetTickOk returns a tuple with the Tick field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetTickOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tick.Get(), o.Tick.IsSet()
}

// HasTick returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) HasTick() bool {
	if o != nil && o.Tick.IsSet() {
		return true
	}

	return false
}

// SetTick gets a reference to the given NullableString and assigns it to the Tick field.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) SetTick(v string) {
	o.Tick.Set(&v)
}
// SetTickNil sets the value for Tick to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) SetTickNil() {
	o.Tick.Set(nil)
}

// UnsetTick ensures that no value is present for Tick, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) UnsetTick() {
	o.Tick.Unset()
}

// GetPool returns the Pool field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetPool() string {
	if o == nil || IsNil(o.Pool.Get()) {
		var ret string
		return ret
	}
	return *o.Pool.Get()
}

// GetPoolOk returns a tuple with the Pool field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetPoolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pool.Get(), o.Pool.IsSet()
}

// HasPool returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) HasPool() bool {
	if o != nil && o.Pool.IsSet() {
		return true
	}

	return false
}

// SetPool gets a reference to the given NullableString and assigns it to the Pool field.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) SetPool(v string) {
	o.Pool.Set(&v)
}
// SetPoolNil sets the value for Pool to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) SetPoolNil() {
	o.Pool.Set(nil)
}

// UnsetPool ensures that no value is present for Pool, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) UnsetPool() {
	o.Pool.Unset()
}

// GetLiquidityGross returns the LiquidityGross field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetLiquidityGross() string {
	if o == nil || IsNil(o.LiquidityGross.Get()) {
		var ret string
		return ret
	}
	return *o.LiquidityGross.Get()
}

// GetLiquidityGrossOk returns a tuple with the LiquidityGross field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetLiquidityGrossOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LiquidityGross.Get(), o.LiquidityGross.IsSet()
}

// HasLiquidityGross returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) HasLiquidityGross() bool {
	if o != nil && o.LiquidityGross.IsSet() {
		return true
	}

	return false
}

// SetLiquidityGross gets a reference to the given NullableString and assigns it to the LiquidityGross field.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) SetLiquidityGross(v string) {
	o.LiquidityGross.Set(&v)
}
// SetLiquidityGrossNil sets the value for LiquidityGross to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) SetLiquidityGrossNil() {
	o.LiquidityGross.Set(nil)
}

// UnsetLiquidityGross ensures that no value is present for LiquidityGross, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) UnsetLiquidityGross() {
	o.LiquidityGross.Unset()
}

// GetLiquidityGrossUsd returns the LiquidityGrossUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetLiquidityGrossUsd() string {
	if o == nil || IsNil(o.LiquidityGrossUsd.Get()) {
		var ret string
		return ret
	}
	return *o.LiquidityGrossUsd.Get()
}

// GetLiquidityGrossUsdOk returns a tuple with the LiquidityGrossUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetLiquidityGrossUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LiquidityGrossUsd.Get(), o.LiquidityGrossUsd.IsSet()
}

// HasLiquidityGrossUsd returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) HasLiquidityGrossUsd() bool {
	if o != nil && o.LiquidityGrossUsd.IsSet() {
		return true
	}

	return false
}

// SetLiquidityGrossUsd gets a reference to the given NullableString and assigns it to the LiquidityGrossUsd field.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) SetLiquidityGrossUsd(v string) {
	o.LiquidityGrossUsd.Set(&v)
}
// SetLiquidityGrossUsdNil sets the value for LiquidityGrossUsd to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) SetLiquidityGrossUsdNil() {
	o.LiquidityGrossUsd.Set(nil)
}

// UnsetLiquidityGrossUsd ensures that no value is present for LiquidityGrossUsd, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) UnsetLiquidityGrossUsd() {
	o.LiquidityGrossUsd.Unset()
}

// GetLiquidityNet returns the LiquidityNet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetLiquidityNet() string {
	if o == nil || IsNil(o.LiquidityNet.Get()) {
		var ret string
		return ret
	}
	return *o.LiquidityNet.Get()
}

// GetLiquidityNetOk returns a tuple with the LiquidityNet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetLiquidityNetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LiquidityNet.Get(), o.LiquidityNet.IsSet()
}

// HasLiquidityNet returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) HasLiquidityNet() bool {
	if o != nil && o.LiquidityNet.IsSet() {
		return true
	}

	return false
}

// SetLiquidityNet gets a reference to the given NullableString and assigns it to the LiquidityNet field.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) SetLiquidityNet(v string) {
	o.LiquidityNet.Set(&v)
}
// SetLiquidityNetNil sets the value for LiquidityNet to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) SetLiquidityNetNil() {
	o.LiquidityNet.Set(nil)
}

// UnsetLiquidityNet ensures that no value is present for LiquidityNet, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) UnsetLiquidityNet() {
	o.LiquidityNet.Unset()
}

// GetLiquidityNetUsd returns the LiquidityNetUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetLiquidityNetUsd() string {
	if o == nil || IsNil(o.LiquidityNetUsd.Get()) {
		var ret string
		return ret
	}
	return *o.LiquidityNetUsd.Get()
}

// GetLiquidityNetUsdOk returns a tuple with the LiquidityNetUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetLiquidityNetUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LiquidityNetUsd.Get(), o.LiquidityNetUsd.IsSet()
}

// HasLiquidityNetUsd returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) HasLiquidityNetUsd() bool {
	if o != nil && o.LiquidityNetUsd.IsSet() {
		return true
	}

	return false
}

// SetLiquidityNetUsd gets a reference to the given NullableString and assigns it to the LiquidityNetUsd field.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) SetLiquidityNetUsd(v string) {
	o.LiquidityNetUsd.Set(&v)
}
// SetLiquidityNetUsdNil sets the value for LiquidityNetUsd to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) SetLiquidityNetUsdNil() {
	o.LiquidityNetUsd.Set(nil)
}

// UnsetLiquidityNetUsd ensures that no value is present for LiquidityNetUsd, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) UnsetLiquidityNetUsd() {
	o.LiquidityNetUsd.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret string
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) GetTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableString and assigns it to the Timestamp field.
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) SetTimestamp(v string) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) UnsetTimestamp() {
	o.Timestamp.Unset()
}

func (o PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryTime) {
		toSerialize["entry_time"] = o.EntryTime
	}
	if !IsNil(o.RecvTime) {
		toSerialize["recv_time"] = o.RecvTime
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["block_number"] = o.BlockNumber
	}
	if !IsNil(o.Vid) {
		toSerialize["vid"] = o.Vid
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.DayId) {
		toSerialize["day_id"] = o.DayId
	}
	if o.Tick.IsSet() {
		toSerialize["tick"] = o.Tick.Get()
	}
	if o.Pool.IsSet() {
		toSerialize["pool"] = o.Pool.Get()
	}
	if o.LiquidityGross.IsSet() {
		toSerialize["liquidity_gross"] = o.LiquidityGross.Get()
	}
	if o.LiquidityGrossUsd.IsSet() {
		toSerialize["liquidity_gross_usd"] = o.LiquidityGrossUsd.Get()
	}
	if o.LiquidityNet.IsSet() {
		toSerialize["liquidity_net"] = o.LiquidityNet.Get()
	}
	if o.LiquidityNetUsd.IsSet() {
		toSerialize["liquidity_net_usd"] = o.LiquidityNetUsd.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	return toSerialize, nil
}

type NullablePANCAKESWAPV3ETHEREUMTickDailySnapshotDTO struct {
	value *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO
	isSet bool
}

func (v NullablePANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) Get() *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO {
	return v.value
}

func (v *NullablePANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) Set(val *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) {
	v.value = val
	v.isSet = true
}

func (v NullablePANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) IsSet() bool {
	return v.isSet
}

func (v *NullablePANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePANCAKESWAPV3ETHEREUMTickDailySnapshotDTO(val *PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) *NullablePANCAKESWAPV3ETHEREUMTickDailySnapshotDTO {
	return &NullablePANCAKESWAPV3ETHEREUMTickDailySnapshotDTO{value: val, isSet: true}
}

func (v NullablePANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePANCAKESWAPV3ETHEREUMTickDailySnapshotDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


