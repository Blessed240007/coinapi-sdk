/*
On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

API version: v1
Contact: support@coinapi.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO{}

// PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO  Decentralized exchange (Dex) automated market maker (Amm) protocol. It's an entity that represents a protocol involving a smart contract that use automated market makers.
type PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO struct {
	EntryTime *time.Time `json:"entry_time,omitempty"`
	RecvTime *time.Time `json:"recv_time,omitempty"`
	// Number of block in which entity was recorded.
	BlockNumber *int64 `json:"block_number,omitempty"`
	// 
	BlockRange NullableString `json:"block_range,omitempty"`
	// Smart contract address of the protocol's main contract (Factory, Registry, etc).
	Id NullableString `json:"id,omitempty"`
	// Name of the protocol, including version. e.g. Uniswap v3.
	Name NullableString `json:"name,omitempty"`
	// Slug of protocol, including version. e.g. uniswap-v3.
	Slug NullableString `json:"slug,omitempty"`
	// Version of the subgraph schema, in SemVer format (e.g. 1.0.0).
	SchemaVersion NullableString `json:"schema_version,omitempty"`
	// Version of the subgraph implementation, in SemVer format (e.g. 1.0.0).
	SubgraphVersion NullableString `json:"subgraph_version,omitempty"`
	// Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0).
	MethodologyVersion NullableString `json:"methodology_version,omitempty"`
	// Current TVL (Total Value Locked) of the entire protocol.
	TotalValueLockedUsd NullableString `json:"total_value_locked_usd,omitempty"`
	// The sum of all active and non-active liquidity in USD for this pool.
	TotalLiquidityUsd NullableString `json:"total_liquidity_usd,omitempty"`
	// All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
	ActiveLiquidityUsd NullableString `json:"active_liquidity_usd,omitempty"`
	// All protocol-side value locking in USD that remains uncollected and unused in the protocol.
	UncollectedProtocolSideValueUsd NullableString `json:"uncollected_protocol_side_value_usd,omitempty"`
	// All supply-side value locking in USD that remains uncollected and unused in the protocol.
	UncollectedSupplySideValueUsd NullableString `json:"uncollected_supply_side_value_usd,omitempty"`
	// Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.
	ProtocolControlledValueUsd NullableString `json:"protocol_controlled_value_usd,omitempty"`
	// All historical volume in USD.
	CumulativeVolumeUsd NullableString `json:"cumulative_volume_usd,omitempty"`
	// Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
	CumulativeSupplySideRevenueUsd NullableString `json:"cumulative_supply_side_revenue_usd,omitempty"`
	// Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushiâ€™s 0.05%). OpenSea 10% sell fee.
	CumulativeProtocolSideRevenueUsd NullableString `json:"cumulative_protocol_side_revenue_usd,omitempty"`
	// All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
	CumulativeTotalRevenueUsd NullableString `json:"cumulative_total_revenue_usd,omitempty"`
	// Number of cumulative unique users.
	CumulativeUniqueUsers *int32 `json:"cumulative_unique_users,omitempty"`
	// Number of cumulative liquidity providers.
	CumulativeUniqueLPs *int32 `json:"cumulative_unique_l_ps,omitempty"`
	// Number of cumulative traders
	CumulativeUniqueTraders *int32 `json:"cumulative_unique_traders,omitempty"`
	// Total number of pools.
	TotalPoolCount *int32 `json:"total_pool_count,omitempty"`
	// Total number of open positions.
	OpenPositionCount *int32 `json:"open_position_count,omitempty"`
	// Total number of positions (open and closed).
	CumulativePositionCount *int32 `json:"cumulative_position_count,omitempty"`
	// Day ID of the most recent daily snapshot.
	LastSnapshotDayId *int32 `json:"last_snapshot_day_id,omitempty"`
	// Timestamp of the last time this entity was updated
	LastUpdateTimestamp NullableString `json:"last_update_timestamp,omitempty"`
	// Block number of the last time this entity was updated.
	LastUpdateBlockNumber NullableString `json:"last_update_block_number,omitempty"`
	// This is a boolean to indicate whether or not the pools have been instantiated the were initialized before Optimism regenesis.
	Regenesis *bool `json:"regenesis,omitempty"`
}

// NewPANCAKESWAPV3ETHEREUMDexAmmProtocolDTO instantiates a new PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPANCAKESWAPV3ETHEREUMDexAmmProtocolDTO() *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO {
	this := PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO{}
	return &this
}

// NewPANCAKESWAPV3ETHEREUMDexAmmProtocolDTOWithDefaults instantiates a new PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPANCAKESWAPV3ETHEREUMDexAmmProtocolDTOWithDefaults() *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO {
	this := PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO{}
	return &this
}

// GetEntryTime returns the EntryTime field value if set, zero value otherwise.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetEntryTime() time.Time {
	if o == nil || IsNil(o.EntryTime) {
		var ret time.Time
		return ret
	}
	return *o.EntryTime
}

// GetEntryTimeOk returns a tuple with the EntryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetEntryTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EntryTime) {
		return nil, false
	}
	return o.EntryTime, true
}

// HasEntryTime returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasEntryTime() bool {
	if o != nil && !IsNil(o.EntryTime) {
		return true
	}

	return false
}

// SetEntryTime gets a reference to the given time.Time and assigns it to the EntryTime field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetEntryTime(v time.Time) {
	o.EntryTime = &v
}

// GetRecvTime returns the RecvTime field value if set, zero value otherwise.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetRecvTime() time.Time {
	if o == nil || IsNil(o.RecvTime) {
		var ret time.Time
		return ret
	}
	return *o.RecvTime
}

// GetRecvTimeOk returns a tuple with the RecvTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetRecvTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecvTime) {
		return nil, false
	}
	return o.RecvTime, true
}

// HasRecvTime returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasRecvTime() bool {
	if o != nil && !IsNil(o.RecvTime) {
		return true
	}

	return false
}

// SetRecvTime gets a reference to the given time.Time and assigns it to the RecvTime field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetRecvTime(v time.Time) {
	o.RecvTime = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetBlockNumber() int64 {
	if o == nil || IsNil(o.BlockNumber) {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetBlockNumberOk() (*int64, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetBlockRange returns the BlockRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetBlockRange() string {
	if o == nil || IsNil(o.BlockRange.Get()) {
		var ret string
		return ret
	}
	return *o.BlockRange.Get()
}

// GetBlockRangeOk returns a tuple with the BlockRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetBlockRangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlockRange.Get(), o.BlockRange.IsSet()
}

// HasBlockRange returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasBlockRange() bool {
	if o != nil && o.BlockRange.IsSet() {
		return true
	}

	return false
}

// SetBlockRange gets a reference to the given NullableString and assigns it to the BlockRange field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetBlockRange(v string) {
	o.BlockRange.Set(&v)
}
// SetBlockRangeNil sets the value for BlockRange to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetBlockRangeNil() {
	o.BlockRange.Set(nil)
}

// UnsetBlockRange ensures that no value is present for BlockRange, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) UnsetBlockRange() {
	o.BlockRange.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) UnsetName() {
	o.Name.Unset()
}

// GetSlug returns the Slug field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetSlug() string {
	if o == nil || IsNil(o.Slug.Get()) {
		var ret string
		return ret
	}
	return *o.Slug.Get()
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Slug.Get(), o.Slug.IsSet()
}

// HasSlug returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasSlug() bool {
	if o != nil && o.Slug.IsSet() {
		return true
	}

	return false
}

// SetSlug gets a reference to the given NullableString and assigns it to the Slug field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetSlug(v string) {
	o.Slug.Set(&v)
}
// SetSlugNil sets the value for Slug to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetSlugNil() {
	o.Slug.Set(nil)
}

// UnsetSlug ensures that no value is present for Slug, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) UnsetSlug() {
	o.Slug.Unset()
}

// GetSchemaVersion returns the SchemaVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetSchemaVersion() string {
	if o == nil || IsNil(o.SchemaVersion.Get()) {
		var ret string
		return ret
	}
	return *o.SchemaVersion.Get()
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetSchemaVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SchemaVersion.Get(), o.SchemaVersion.IsSet()
}

// HasSchemaVersion returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasSchemaVersion() bool {
	if o != nil && o.SchemaVersion.IsSet() {
		return true
	}

	return false
}

// SetSchemaVersion gets a reference to the given NullableString and assigns it to the SchemaVersion field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetSchemaVersion(v string) {
	o.SchemaVersion.Set(&v)
}
// SetSchemaVersionNil sets the value for SchemaVersion to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetSchemaVersionNil() {
	o.SchemaVersion.Set(nil)
}

// UnsetSchemaVersion ensures that no value is present for SchemaVersion, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) UnsetSchemaVersion() {
	o.SchemaVersion.Unset()
}

// GetSubgraphVersion returns the SubgraphVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetSubgraphVersion() string {
	if o == nil || IsNil(o.SubgraphVersion.Get()) {
		var ret string
		return ret
	}
	return *o.SubgraphVersion.Get()
}

// GetSubgraphVersionOk returns a tuple with the SubgraphVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetSubgraphVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubgraphVersion.Get(), o.SubgraphVersion.IsSet()
}

// HasSubgraphVersion returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasSubgraphVersion() bool {
	if o != nil && o.SubgraphVersion.IsSet() {
		return true
	}

	return false
}

// SetSubgraphVersion gets a reference to the given NullableString and assigns it to the SubgraphVersion field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetSubgraphVersion(v string) {
	o.SubgraphVersion.Set(&v)
}
// SetSubgraphVersionNil sets the value for SubgraphVersion to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetSubgraphVersionNil() {
	o.SubgraphVersion.Set(nil)
}

// UnsetSubgraphVersion ensures that no value is present for SubgraphVersion, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) UnsetSubgraphVersion() {
	o.SubgraphVersion.Unset()
}

// GetMethodologyVersion returns the MethodologyVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetMethodologyVersion() string {
	if o == nil || IsNil(o.MethodologyVersion.Get()) {
		var ret string
		return ret
	}
	return *o.MethodologyVersion.Get()
}

// GetMethodologyVersionOk returns a tuple with the MethodologyVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetMethodologyVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MethodologyVersion.Get(), o.MethodologyVersion.IsSet()
}

// HasMethodologyVersion returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasMethodologyVersion() bool {
	if o != nil && o.MethodologyVersion.IsSet() {
		return true
	}

	return false
}

// SetMethodologyVersion gets a reference to the given NullableString and assigns it to the MethodologyVersion field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetMethodologyVersion(v string) {
	o.MethodologyVersion.Set(&v)
}
// SetMethodologyVersionNil sets the value for MethodologyVersion to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetMethodologyVersionNil() {
	o.MethodologyVersion.Set(nil)
}

// UnsetMethodologyVersion ensures that no value is present for MethodologyVersion, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) UnsetMethodologyVersion() {
	o.MethodologyVersion.Unset()
}

// GetTotalValueLockedUsd returns the TotalValueLockedUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetTotalValueLockedUsd() string {
	if o == nil || IsNil(o.TotalValueLockedUsd.Get()) {
		var ret string
		return ret
	}
	return *o.TotalValueLockedUsd.Get()
}

// GetTotalValueLockedUsdOk returns a tuple with the TotalValueLockedUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetTotalValueLockedUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalValueLockedUsd.Get(), o.TotalValueLockedUsd.IsSet()
}

// HasTotalValueLockedUsd returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasTotalValueLockedUsd() bool {
	if o != nil && o.TotalValueLockedUsd.IsSet() {
		return true
	}

	return false
}

// SetTotalValueLockedUsd gets a reference to the given NullableString and assigns it to the TotalValueLockedUsd field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetTotalValueLockedUsd(v string) {
	o.TotalValueLockedUsd.Set(&v)
}
// SetTotalValueLockedUsdNil sets the value for TotalValueLockedUsd to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetTotalValueLockedUsdNil() {
	o.TotalValueLockedUsd.Set(nil)
}

// UnsetTotalValueLockedUsd ensures that no value is present for TotalValueLockedUsd, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) UnsetTotalValueLockedUsd() {
	o.TotalValueLockedUsd.Unset()
}

// GetTotalLiquidityUsd returns the TotalLiquidityUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetTotalLiquidityUsd() string {
	if o == nil || IsNil(o.TotalLiquidityUsd.Get()) {
		var ret string
		return ret
	}
	return *o.TotalLiquidityUsd.Get()
}

// GetTotalLiquidityUsdOk returns a tuple with the TotalLiquidityUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetTotalLiquidityUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalLiquidityUsd.Get(), o.TotalLiquidityUsd.IsSet()
}

// HasTotalLiquidityUsd returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasTotalLiquidityUsd() bool {
	if o != nil && o.TotalLiquidityUsd.IsSet() {
		return true
	}

	return false
}

// SetTotalLiquidityUsd gets a reference to the given NullableString and assigns it to the TotalLiquidityUsd field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetTotalLiquidityUsd(v string) {
	o.TotalLiquidityUsd.Set(&v)
}
// SetTotalLiquidityUsdNil sets the value for TotalLiquidityUsd to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetTotalLiquidityUsdNil() {
	o.TotalLiquidityUsd.Set(nil)
}

// UnsetTotalLiquidityUsd ensures that no value is present for TotalLiquidityUsd, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) UnsetTotalLiquidityUsd() {
	o.TotalLiquidityUsd.Unset()
}

// GetActiveLiquidityUsd returns the ActiveLiquidityUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetActiveLiquidityUsd() string {
	if o == nil || IsNil(o.ActiveLiquidityUsd.Get()) {
		var ret string
		return ret
	}
	return *o.ActiveLiquidityUsd.Get()
}

// GetActiveLiquidityUsdOk returns a tuple with the ActiveLiquidityUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetActiveLiquidityUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActiveLiquidityUsd.Get(), o.ActiveLiquidityUsd.IsSet()
}

// HasActiveLiquidityUsd returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasActiveLiquidityUsd() bool {
	if o != nil && o.ActiveLiquidityUsd.IsSet() {
		return true
	}

	return false
}

// SetActiveLiquidityUsd gets a reference to the given NullableString and assigns it to the ActiveLiquidityUsd field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetActiveLiquidityUsd(v string) {
	o.ActiveLiquidityUsd.Set(&v)
}
// SetActiveLiquidityUsdNil sets the value for ActiveLiquidityUsd to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetActiveLiquidityUsdNil() {
	o.ActiveLiquidityUsd.Set(nil)
}

// UnsetActiveLiquidityUsd ensures that no value is present for ActiveLiquidityUsd, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) UnsetActiveLiquidityUsd() {
	o.ActiveLiquidityUsd.Unset()
}

// GetUncollectedProtocolSideValueUsd returns the UncollectedProtocolSideValueUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetUncollectedProtocolSideValueUsd() string {
	if o == nil || IsNil(o.UncollectedProtocolSideValueUsd.Get()) {
		var ret string
		return ret
	}
	return *o.UncollectedProtocolSideValueUsd.Get()
}

// GetUncollectedProtocolSideValueUsdOk returns a tuple with the UncollectedProtocolSideValueUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetUncollectedProtocolSideValueUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UncollectedProtocolSideValueUsd.Get(), o.UncollectedProtocolSideValueUsd.IsSet()
}

// HasUncollectedProtocolSideValueUsd returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasUncollectedProtocolSideValueUsd() bool {
	if o != nil && o.UncollectedProtocolSideValueUsd.IsSet() {
		return true
	}

	return false
}

// SetUncollectedProtocolSideValueUsd gets a reference to the given NullableString and assigns it to the UncollectedProtocolSideValueUsd field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetUncollectedProtocolSideValueUsd(v string) {
	o.UncollectedProtocolSideValueUsd.Set(&v)
}
// SetUncollectedProtocolSideValueUsdNil sets the value for UncollectedProtocolSideValueUsd to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetUncollectedProtocolSideValueUsdNil() {
	o.UncollectedProtocolSideValueUsd.Set(nil)
}

// UnsetUncollectedProtocolSideValueUsd ensures that no value is present for UncollectedProtocolSideValueUsd, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) UnsetUncollectedProtocolSideValueUsd() {
	o.UncollectedProtocolSideValueUsd.Unset()
}

// GetUncollectedSupplySideValueUsd returns the UncollectedSupplySideValueUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetUncollectedSupplySideValueUsd() string {
	if o == nil || IsNil(o.UncollectedSupplySideValueUsd.Get()) {
		var ret string
		return ret
	}
	return *o.UncollectedSupplySideValueUsd.Get()
}

// GetUncollectedSupplySideValueUsdOk returns a tuple with the UncollectedSupplySideValueUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetUncollectedSupplySideValueUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UncollectedSupplySideValueUsd.Get(), o.UncollectedSupplySideValueUsd.IsSet()
}

// HasUncollectedSupplySideValueUsd returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasUncollectedSupplySideValueUsd() bool {
	if o != nil && o.UncollectedSupplySideValueUsd.IsSet() {
		return true
	}

	return false
}

// SetUncollectedSupplySideValueUsd gets a reference to the given NullableString and assigns it to the UncollectedSupplySideValueUsd field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetUncollectedSupplySideValueUsd(v string) {
	o.UncollectedSupplySideValueUsd.Set(&v)
}
// SetUncollectedSupplySideValueUsdNil sets the value for UncollectedSupplySideValueUsd to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetUncollectedSupplySideValueUsdNil() {
	o.UncollectedSupplySideValueUsd.Set(nil)
}

// UnsetUncollectedSupplySideValueUsd ensures that no value is present for UncollectedSupplySideValueUsd, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) UnsetUncollectedSupplySideValueUsd() {
	o.UncollectedSupplySideValueUsd.Unset()
}

// GetProtocolControlledValueUsd returns the ProtocolControlledValueUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetProtocolControlledValueUsd() string {
	if o == nil || IsNil(o.ProtocolControlledValueUsd.Get()) {
		var ret string
		return ret
	}
	return *o.ProtocolControlledValueUsd.Get()
}

// GetProtocolControlledValueUsdOk returns a tuple with the ProtocolControlledValueUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetProtocolControlledValueUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProtocolControlledValueUsd.Get(), o.ProtocolControlledValueUsd.IsSet()
}

// HasProtocolControlledValueUsd returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasProtocolControlledValueUsd() bool {
	if o != nil && o.ProtocolControlledValueUsd.IsSet() {
		return true
	}

	return false
}

// SetProtocolControlledValueUsd gets a reference to the given NullableString and assigns it to the ProtocolControlledValueUsd field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetProtocolControlledValueUsd(v string) {
	o.ProtocolControlledValueUsd.Set(&v)
}
// SetProtocolControlledValueUsdNil sets the value for ProtocolControlledValueUsd to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetProtocolControlledValueUsdNil() {
	o.ProtocolControlledValueUsd.Set(nil)
}

// UnsetProtocolControlledValueUsd ensures that no value is present for ProtocolControlledValueUsd, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) UnsetProtocolControlledValueUsd() {
	o.ProtocolControlledValueUsd.Unset()
}

// GetCumulativeVolumeUsd returns the CumulativeVolumeUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetCumulativeVolumeUsd() string {
	if o == nil || IsNil(o.CumulativeVolumeUsd.Get()) {
		var ret string
		return ret
	}
	return *o.CumulativeVolumeUsd.Get()
}

// GetCumulativeVolumeUsdOk returns a tuple with the CumulativeVolumeUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetCumulativeVolumeUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CumulativeVolumeUsd.Get(), o.CumulativeVolumeUsd.IsSet()
}

// HasCumulativeVolumeUsd returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasCumulativeVolumeUsd() bool {
	if o != nil && o.CumulativeVolumeUsd.IsSet() {
		return true
	}

	return false
}

// SetCumulativeVolumeUsd gets a reference to the given NullableString and assigns it to the CumulativeVolumeUsd field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetCumulativeVolumeUsd(v string) {
	o.CumulativeVolumeUsd.Set(&v)
}
// SetCumulativeVolumeUsdNil sets the value for CumulativeVolumeUsd to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetCumulativeVolumeUsdNil() {
	o.CumulativeVolumeUsd.Set(nil)
}

// UnsetCumulativeVolumeUsd ensures that no value is present for CumulativeVolumeUsd, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) UnsetCumulativeVolumeUsd() {
	o.CumulativeVolumeUsd.Unset()
}

// GetCumulativeSupplySideRevenueUsd returns the CumulativeSupplySideRevenueUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetCumulativeSupplySideRevenueUsd() string {
	if o == nil || IsNil(o.CumulativeSupplySideRevenueUsd.Get()) {
		var ret string
		return ret
	}
	return *o.CumulativeSupplySideRevenueUsd.Get()
}

// GetCumulativeSupplySideRevenueUsdOk returns a tuple with the CumulativeSupplySideRevenueUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetCumulativeSupplySideRevenueUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CumulativeSupplySideRevenueUsd.Get(), o.CumulativeSupplySideRevenueUsd.IsSet()
}

// HasCumulativeSupplySideRevenueUsd returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasCumulativeSupplySideRevenueUsd() bool {
	if o != nil && o.CumulativeSupplySideRevenueUsd.IsSet() {
		return true
	}

	return false
}

// SetCumulativeSupplySideRevenueUsd gets a reference to the given NullableString and assigns it to the CumulativeSupplySideRevenueUsd field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetCumulativeSupplySideRevenueUsd(v string) {
	o.CumulativeSupplySideRevenueUsd.Set(&v)
}
// SetCumulativeSupplySideRevenueUsdNil sets the value for CumulativeSupplySideRevenueUsd to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetCumulativeSupplySideRevenueUsdNil() {
	o.CumulativeSupplySideRevenueUsd.Set(nil)
}

// UnsetCumulativeSupplySideRevenueUsd ensures that no value is present for CumulativeSupplySideRevenueUsd, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) UnsetCumulativeSupplySideRevenueUsd() {
	o.CumulativeSupplySideRevenueUsd.Unset()
}

// GetCumulativeProtocolSideRevenueUsd returns the CumulativeProtocolSideRevenueUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetCumulativeProtocolSideRevenueUsd() string {
	if o == nil || IsNil(o.CumulativeProtocolSideRevenueUsd.Get()) {
		var ret string
		return ret
	}
	return *o.CumulativeProtocolSideRevenueUsd.Get()
}

// GetCumulativeProtocolSideRevenueUsdOk returns a tuple with the CumulativeProtocolSideRevenueUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetCumulativeProtocolSideRevenueUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CumulativeProtocolSideRevenueUsd.Get(), o.CumulativeProtocolSideRevenueUsd.IsSet()
}

// HasCumulativeProtocolSideRevenueUsd returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasCumulativeProtocolSideRevenueUsd() bool {
	if o != nil && o.CumulativeProtocolSideRevenueUsd.IsSet() {
		return true
	}

	return false
}

// SetCumulativeProtocolSideRevenueUsd gets a reference to the given NullableString and assigns it to the CumulativeProtocolSideRevenueUsd field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetCumulativeProtocolSideRevenueUsd(v string) {
	o.CumulativeProtocolSideRevenueUsd.Set(&v)
}
// SetCumulativeProtocolSideRevenueUsdNil sets the value for CumulativeProtocolSideRevenueUsd to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetCumulativeProtocolSideRevenueUsdNil() {
	o.CumulativeProtocolSideRevenueUsd.Set(nil)
}

// UnsetCumulativeProtocolSideRevenueUsd ensures that no value is present for CumulativeProtocolSideRevenueUsd, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) UnsetCumulativeProtocolSideRevenueUsd() {
	o.CumulativeProtocolSideRevenueUsd.Unset()
}

// GetCumulativeTotalRevenueUsd returns the CumulativeTotalRevenueUsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetCumulativeTotalRevenueUsd() string {
	if o == nil || IsNil(o.CumulativeTotalRevenueUsd.Get()) {
		var ret string
		return ret
	}
	return *o.CumulativeTotalRevenueUsd.Get()
}

// GetCumulativeTotalRevenueUsdOk returns a tuple with the CumulativeTotalRevenueUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetCumulativeTotalRevenueUsdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CumulativeTotalRevenueUsd.Get(), o.CumulativeTotalRevenueUsd.IsSet()
}

// HasCumulativeTotalRevenueUsd returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasCumulativeTotalRevenueUsd() bool {
	if o != nil && o.CumulativeTotalRevenueUsd.IsSet() {
		return true
	}

	return false
}

// SetCumulativeTotalRevenueUsd gets a reference to the given NullableString and assigns it to the CumulativeTotalRevenueUsd field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetCumulativeTotalRevenueUsd(v string) {
	o.CumulativeTotalRevenueUsd.Set(&v)
}
// SetCumulativeTotalRevenueUsdNil sets the value for CumulativeTotalRevenueUsd to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetCumulativeTotalRevenueUsdNil() {
	o.CumulativeTotalRevenueUsd.Set(nil)
}

// UnsetCumulativeTotalRevenueUsd ensures that no value is present for CumulativeTotalRevenueUsd, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) UnsetCumulativeTotalRevenueUsd() {
	o.CumulativeTotalRevenueUsd.Unset()
}

// GetCumulativeUniqueUsers returns the CumulativeUniqueUsers field value if set, zero value otherwise.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetCumulativeUniqueUsers() int32 {
	if o == nil || IsNil(o.CumulativeUniqueUsers) {
		var ret int32
		return ret
	}
	return *o.CumulativeUniqueUsers
}

// GetCumulativeUniqueUsersOk returns a tuple with the CumulativeUniqueUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetCumulativeUniqueUsersOk() (*int32, bool) {
	if o == nil || IsNil(o.CumulativeUniqueUsers) {
		return nil, false
	}
	return o.CumulativeUniqueUsers, true
}

// HasCumulativeUniqueUsers returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasCumulativeUniqueUsers() bool {
	if o != nil && !IsNil(o.CumulativeUniqueUsers) {
		return true
	}

	return false
}

// SetCumulativeUniqueUsers gets a reference to the given int32 and assigns it to the CumulativeUniqueUsers field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetCumulativeUniqueUsers(v int32) {
	o.CumulativeUniqueUsers = &v
}

// GetCumulativeUniqueLPs returns the CumulativeUniqueLPs field value if set, zero value otherwise.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetCumulativeUniqueLPs() int32 {
	if o == nil || IsNil(o.CumulativeUniqueLPs) {
		var ret int32
		return ret
	}
	return *o.CumulativeUniqueLPs
}

// GetCumulativeUniqueLPsOk returns a tuple with the CumulativeUniqueLPs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetCumulativeUniqueLPsOk() (*int32, bool) {
	if o == nil || IsNil(o.CumulativeUniqueLPs) {
		return nil, false
	}
	return o.CumulativeUniqueLPs, true
}

// HasCumulativeUniqueLPs returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasCumulativeUniqueLPs() bool {
	if o != nil && !IsNil(o.CumulativeUniqueLPs) {
		return true
	}

	return false
}

// SetCumulativeUniqueLPs gets a reference to the given int32 and assigns it to the CumulativeUniqueLPs field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetCumulativeUniqueLPs(v int32) {
	o.CumulativeUniqueLPs = &v
}

// GetCumulativeUniqueTraders returns the CumulativeUniqueTraders field value if set, zero value otherwise.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetCumulativeUniqueTraders() int32 {
	if o == nil || IsNil(o.CumulativeUniqueTraders) {
		var ret int32
		return ret
	}
	return *o.CumulativeUniqueTraders
}

// GetCumulativeUniqueTradersOk returns a tuple with the CumulativeUniqueTraders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetCumulativeUniqueTradersOk() (*int32, bool) {
	if o == nil || IsNil(o.CumulativeUniqueTraders) {
		return nil, false
	}
	return o.CumulativeUniqueTraders, true
}

// HasCumulativeUniqueTraders returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasCumulativeUniqueTraders() bool {
	if o != nil && !IsNil(o.CumulativeUniqueTraders) {
		return true
	}

	return false
}

// SetCumulativeUniqueTraders gets a reference to the given int32 and assigns it to the CumulativeUniqueTraders field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetCumulativeUniqueTraders(v int32) {
	o.CumulativeUniqueTraders = &v
}

// GetTotalPoolCount returns the TotalPoolCount field value if set, zero value otherwise.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetTotalPoolCount() int32 {
	if o == nil || IsNil(o.TotalPoolCount) {
		var ret int32
		return ret
	}
	return *o.TotalPoolCount
}

// GetTotalPoolCountOk returns a tuple with the TotalPoolCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetTotalPoolCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalPoolCount) {
		return nil, false
	}
	return o.TotalPoolCount, true
}

// HasTotalPoolCount returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasTotalPoolCount() bool {
	if o != nil && !IsNil(o.TotalPoolCount) {
		return true
	}

	return false
}

// SetTotalPoolCount gets a reference to the given int32 and assigns it to the TotalPoolCount field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetTotalPoolCount(v int32) {
	o.TotalPoolCount = &v
}

// GetOpenPositionCount returns the OpenPositionCount field value if set, zero value otherwise.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetOpenPositionCount() int32 {
	if o == nil || IsNil(o.OpenPositionCount) {
		var ret int32
		return ret
	}
	return *o.OpenPositionCount
}

// GetOpenPositionCountOk returns a tuple with the OpenPositionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetOpenPositionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.OpenPositionCount) {
		return nil, false
	}
	return o.OpenPositionCount, true
}

// HasOpenPositionCount returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasOpenPositionCount() bool {
	if o != nil && !IsNil(o.OpenPositionCount) {
		return true
	}

	return false
}

// SetOpenPositionCount gets a reference to the given int32 and assigns it to the OpenPositionCount field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetOpenPositionCount(v int32) {
	o.OpenPositionCount = &v
}

// GetCumulativePositionCount returns the CumulativePositionCount field value if set, zero value otherwise.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetCumulativePositionCount() int32 {
	if o == nil || IsNil(o.CumulativePositionCount) {
		var ret int32
		return ret
	}
	return *o.CumulativePositionCount
}

// GetCumulativePositionCountOk returns a tuple with the CumulativePositionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetCumulativePositionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.CumulativePositionCount) {
		return nil, false
	}
	return o.CumulativePositionCount, true
}

// HasCumulativePositionCount returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasCumulativePositionCount() bool {
	if o != nil && !IsNil(o.CumulativePositionCount) {
		return true
	}

	return false
}

// SetCumulativePositionCount gets a reference to the given int32 and assigns it to the CumulativePositionCount field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetCumulativePositionCount(v int32) {
	o.CumulativePositionCount = &v
}

// GetLastSnapshotDayId returns the LastSnapshotDayId field value if set, zero value otherwise.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetLastSnapshotDayId() int32 {
	if o == nil || IsNil(o.LastSnapshotDayId) {
		var ret int32
		return ret
	}
	return *o.LastSnapshotDayId
}

// GetLastSnapshotDayIdOk returns a tuple with the LastSnapshotDayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetLastSnapshotDayIdOk() (*int32, bool) {
	if o == nil || IsNil(o.LastSnapshotDayId) {
		return nil, false
	}
	return o.LastSnapshotDayId, true
}

// HasLastSnapshotDayId returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasLastSnapshotDayId() bool {
	if o != nil && !IsNil(o.LastSnapshotDayId) {
		return true
	}

	return false
}

// SetLastSnapshotDayId gets a reference to the given int32 and assigns it to the LastSnapshotDayId field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetLastSnapshotDayId(v int32) {
	o.LastSnapshotDayId = &v
}

// GetLastUpdateTimestamp returns the LastUpdateTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetLastUpdateTimestamp() string {
	if o == nil || IsNil(o.LastUpdateTimestamp.Get()) {
		var ret string
		return ret
	}
	return *o.LastUpdateTimestamp.Get()
}

// GetLastUpdateTimestampOk returns a tuple with the LastUpdateTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetLastUpdateTimestampOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdateTimestamp.Get(), o.LastUpdateTimestamp.IsSet()
}

// HasLastUpdateTimestamp returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasLastUpdateTimestamp() bool {
	if o != nil && o.LastUpdateTimestamp.IsSet() {
		return true
	}

	return false
}

// SetLastUpdateTimestamp gets a reference to the given NullableString and assigns it to the LastUpdateTimestamp field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetLastUpdateTimestamp(v string) {
	o.LastUpdateTimestamp.Set(&v)
}
// SetLastUpdateTimestampNil sets the value for LastUpdateTimestamp to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetLastUpdateTimestampNil() {
	o.LastUpdateTimestamp.Set(nil)
}

// UnsetLastUpdateTimestamp ensures that no value is present for LastUpdateTimestamp, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) UnsetLastUpdateTimestamp() {
	o.LastUpdateTimestamp.Unset()
}

// GetLastUpdateBlockNumber returns the LastUpdateBlockNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetLastUpdateBlockNumber() string {
	if o == nil || IsNil(o.LastUpdateBlockNumber.Get()) {
		var ret string
		return ret
	}
	return *o.LastUpdateBlockNumber.Get()
}

// GetLastUpdateBlockNumberOk returns a tuple with the LastUpdateBlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetLastUpdateBlockNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdateBlockNumber.Get(), o.LastUpdateBlockNumber.IsSet()
}

// HasLastUpdateBlockNumber returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasLastUpdateBlockNumber() bool {
	if o != nil && o.LastUpdateBlockNumber.IsSet() {
		return true
	}

	return false
}

// SetLastUpdateBlockNumber gets a reference to the given NullableString and assigns it to the LastUpdateBlockNumber field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetLastUpdateBlockNumber(v string) {
	o.LastUpdateBlockNumber.Set(&v)
}
// SetLastUpdateBlockNumberNil sets the value for LastUpdateBlockNumber to be an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetLastUpdateBlockNumberNil() {
	o.LastUpdateBlockNumber.Set(nil)
}

// UnsetLastUpdateBlockNumber ensures that no value is present for LastUpdateBlockNumber, not even an explicit nil
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) UnsetLastUpdateBlockNumber() {
	o.LastUpdateBlockNumber.Unset()
}

// GetRegenesis returns the Regenesis field value if set, zero value otherwise.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetRegenesis() bool {
	if o == nil || IsNil(o.Regenesis) {
		var ret bool
		return ret
	}
	return *o.Regenesis
}

// GetRegenesisOk returns a tuple with the Regenesis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) GetRegenesisOk() (*bool, bool) {
	if o == nil || IsNil(o.Regenesis) {
		return nil, false
	}
	return o.Regenesis, true
}

// HasRegenesis returns a boolean if a field has been set.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) HasRegenesis() bool {
	if o != nil && !IsNil(o.Regenesis) {
		return true
	}

	return false
}

// SetRegenesis gets a reference to the given bool and assigns it to the Regenesis field.
func (o *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) SetRegenesis(v bool) {
	o.Regenesis = &v
}

func (o PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryTime) {
		toSerialize["entry_time"] = o.EntryTime
	}
	if !IsNil(o.RecvTime) {
		toSerialize["recv_time"] = o.RecvTime
	}
	if !IsNil(o.BlockNumber) {
		toSerialize["block_number"] = o.BlockNumber
	}
	if o.BlockRange.IsSet() {
		toSerialize["block_range"] = o.BlockRange.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Slug.IsSet() {
		toSerialize["slug"] = o.Slug.Get()
	}
	if o.SchemaVersion.IsSet() {
		toSerialize["schema_version"] = o.SchemaVersion.Get()
	}
	if o.SubgraphVersion.IsSet() {
		toSerialize["subgraph_version"] = o.SubgraphVersion.Get()
	}
	if o.MethodologyVersion.IsSet() {
		toSerialize["methodology_version"] = o.MethodologyVersion.Get()
	}
	if o.TotalValueLockedUsd.IsSet() {
		toSerialize["total_value_locked_usd"] = o.TotalValueLockedUsd.Get()
	}
	if o.TotalLiquidityUsd.IsSet() {
		toSerialize["total_liquidity_usd"] = o.TotalLiquidityUsd.Get()
	}
	if o.ActiveLiquidityUsd.IsSet() {
		toSerialize["active_liquidity_usd"] = o.ActiveLiquidityUsd.Get()
	}
	if o.UncollectedProtocolSideValueUsd.IsSet() {
		toSerialize["uncollected_protocol_side_value_usd"] = o.UncollectedProtocolSideValueUsd.Get()
	}
	if o.UncollectedSupplySideValueUsd.IsSet() {
		toSerialize["uncollected_supply_side_value_usd"] = o.UncollectedSupplySideValueUsd.Get()
	}
	if o.ProtocolControlledValueUsd.IsSet() {
		toSerialize["protocol_controlled_value_usd"] = o.ProtocolControlledValueUsd.Get()
	}
	if o.CumulativeVolumeUsd.IsSet() {
		toSerialize["cumulative_volume_usd"] = o.CumulativeVolumeUsd.Get()
	}
	if o.CumulativeSupplySideRevenueUsd.IsSet() {
		toSerialize["cumulative_supply_side_revenue_usd"] = o.CumulativeSupplySideRevenueUsd.Get()
	}
	if o.CumulativeProtocolSideRevenueUsd.IsSet() {
		toSerialize["cumulative_protocol_side_revenue_usd"] = o.CumulativeProtocolSideRevenueUsd.Get()
	}
	if o.CumulativeTotalRevenueUsd.IsSet() {
		toSerialize["cumulative_total_revenue_usd"] = o.CumulativeTotalRevenueUsd.Get()
	}
	if !IsNil(o.CumulativeUniqueUsers) {
		toSerialize["cumulative_unique_users"] = o.CumulativeUniqueUsers
	}
	if !IsNil(o.CumulativeUniqueLPs) {
		toSerialize["cumulative_unique_l_ps"] = o.CumulativeUniqueLPs
	}
	if !IsNil(o.CumulativeUniqueTraders) {
		toSerialize["cumulative_unique_traders"] = o.CumulativeUniqueTraders
	}
	if !IsNil(o.TotalPoolCount) {
		toSerialize["total_pool_count"] = o.TotalPoolCount
	}
	if !IsNil(o.OpenPositionCount) {
		toSerialize["open_position_count"] = o.OpenPositionCount
	}
	if !IsNil(o.CumulativePositionCount) {
		toSerialize["cumulative_position_count"] = o.CumulativePositionCount
	}
	if !IsNil(o.LastSnapshotDayId) {
		toSerialize["last_snapshot_day_id"] = o.LastSnapshotDayId
	}
	if o.LastUpdateTimestamp.IsSet() {
		toSerialize["last_update_timestamp"] = o.LastUpdateTimestamp.Get()
	}
	if o.LastUpdateBlockNumber.IsSet() {
		toSerialize["last_update_block_number"] = o.LastUpdateBlockNumber.Get()
	}
	if !IsNil(o.Regenesis) {
		toSerialize["regenesis"] = o.Regenesis
	}
	return toSerialize, nil
}

type NullablePANCAKESWAPV3ETHEREUMDexAmmProtocolDTO struct {
	value *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO
	isSet bool
}

func (v NullablePANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) Get() *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO {
	return v.value
}

func (v *NullablePANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) Set(val *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) {
	v.value = val
	v.isSet = true
}

func (v NullablePANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) IsSet() bool {
	return v.isSet
}

func (v *NullablePANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePANCAKESWAPV3ETHEREUMDexAmmProtocolDTO(val *PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) *NullablePANCAKESWAPV3ETHEREUMDexAmmProtocolDTO {
	return &NullablePANCAKESWAPV3ETHEREUMDexAmmProtocolDTO{value: val, isSet: true}
}

func (v NullablePANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePANCAKESWAPV3ETHEREUMDexAmmProtocolDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


