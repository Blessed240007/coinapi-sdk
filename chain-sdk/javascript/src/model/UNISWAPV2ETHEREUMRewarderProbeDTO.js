/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UNISWAPV2ETHEREUMRewarderProbeDTO model module.
 * @module model/UNISWAPV2ETHEREUMRewarderProbeDTO
 * @version v1
 */
class UNISWAPV2ETHEREUMRewarderProbeDTO {
    /**
     * Constructs a new <code>UNISWAPV2ETHEREUMRewarderProbeDTO</code>.
     * 
     * @alias module:model/UNISWAPV2ETHEREUMRewarderProbeDTO
     */
    constructor() { 
        
        UNISWAPV2ETHEREUMRewarderProbeDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UNISWAPV2ETHEREUMRewarderProbeDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UNISWAPV2ETHEREUMRewarderProbeDTO} obj Optional instance to populate.
     * @return {module:model/UNISWAPV2ETHEREUMRewarderProbeDTO} The populated <code>UNISWAPV2ETHEREUMRewarderProbeDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UNISWAPV2ETHEREUMRewarderProbeDTO();

            if (data.hasOwnProperty('entry_time')) {
                obj['entry_time'] = ApiClient.convertToType(data['entry_time'], 'Date');
            }
            if (data.hasOwnProperty('recv_time')) {
                obj['recv_time'] = ApiClient.convertToType(data['recv_time'], 'Date');
            }
            if (data.hasOwnProperty('block_number')) {
                obj['block_number'] = ApiClient.convertToType(data['block_number'], 'Number');
            }
            if (data.hasOwnProperty('block_range')) {
                obj['block_range'] = ApiClient.convertToType(data['block_range'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
            if (data.hasOwnProperty('pending')) {
                obj['pending'] = ApiClient.convertToType(data['pending'], 'String');
            }
            if (data.hasOwnProperty('block_num')) {
                obj['block_num'] = ApiClient.convertToType(data['block_num'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
            }
            if (data.hasOwnProperty('lp_staked')) {
                obj['lp_staked'] = ApiClient.convertToType(data['lp_staked'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UNISWAPV2ETHEREUMRewarderProbeDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UNISWAPV2ETHEREUMRewarderProbeDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['block_range'] && !(typeof data['block_range'] === 'string' || data['block_range'] instanceof String)) {
            throw new Error("Expected the field `block_range` to be a primitive type in the JSON string but got " + data['block_range']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }
        // ensure the json data is a string
        if (data['pending'] && !(typeof data['pending'] === 'string' || data['pending'] instanceof String)) {
            throw new Error("Expected the field `pending` to be a primitive type in the JSON string but got " + data['pending']);
        }
        // ensure the json data is a string
        if (data['block_num'] && !(typeof data['block_num'] === 'string' || data['block_num'] instanceof String)) {
            throw new Error("Expected the field `block_num` to be a primitive type in the JSON string but got " + data['block_num']);
        }
        // ensure the json data is a string
        if (data['timestamp'] && !(typeof data['timestamp'] === 'string' || data['timestamp'] instanceof String)) {
            throw new Error("Expected the field `timestamp` to be a primitive type in the JSON string but got " + data['timestamp']);
        }
        // ensure the json data is a string
        if (data['lp_staked'] && !(typeof data['lp_staked'] === 'string' || data['lp_staked'] instanceof String)) {
            throw new Error("Expected the field `lp_staked` to be a primitive type in the JSON string but got " + data['lp_staked']);
        }

        return true;
    }


}



/**
 * @member {Date} entry_time
 */
UNISWAPV2ETHEREUMRewarderProbeDTO.prototype['entry_time'] = undefined;

/**
 * @member {Date} recv_time
 */
UNISWAPV2ETHEREUMRewarderProbeDTO.prototype['recv_time'] = undefined;

/**
 * Number of block in which entity was recorded.
 * @member {Number} block_number
 */
UNISWAPV2ETHEREUMRewarderProbeDTO.prototype['block_number'] = undefined;

/**
 * 
 * @member {String} block_range
 */
UNISWAPV2ETHEREUMRewarderProbeDTO.prototype['block_range'] = undefined;

/**
 * (rewarder)-(probeNum)
 * @member {String} id
 */
UNISWAPV2ETHEREUMRewarderProbeDTO.prototype['id'] = undefined;

/**
 * The address being probed
 * @member {String} user
 */
UNISWAPV2ETHEREUMRewarderProbeDTO.prototype['user'] = undefined;

/**
 * The value from the last probe
 * @member {String} pending
 */
UNISWAPV2ETHEREUMRewarderProbeDTO.prototype['pending'] = undefined;

/**
 * Block at which the probe was made
 * @member {String} block_num
 */
UNISWAPV2ETHEREUMRewarderProbeDTO.prototype['block_num'] = undefined;

/**
 * Block timestamp at whihc the probe was taken
 * @member {String} timestamp
 */
UNISWAPV2ETHEREUMRewarderProbeDTO.prototype['timestamp'] = undefined;

/**
 * Total LP staked in pool at the time of the probe
 * @member {String} lp_staked
 */
UNISWAPV2ETHEREUMRewarderProbeDTO.prototype['lp_staked'] = undefined;






export default UNISWAPV2ETHEREUMRewarderProbeDTO;

