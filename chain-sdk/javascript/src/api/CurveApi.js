/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CurveAccountDTO from '../model/CurveAccountDTO';
import CurveAddLiquidityEventDTO from '../model/CurveAddLiquidityEventDTO';
import CurveAdminFeeChangeLogDTO from '../model/CurveAdminFeeChangeLogDTO';
import CurveAmplificationCoeffChangeLogDTO from '../model/CurveAmplificationCoeffChangeLogDTO';
import CurveCoinDTO from '../model/CurveCoinDTO';
import CurveContractDTO from '../model/CurveContractDTO';
import CurveContractVersionDTO from '../model/CurveContractVersionDTO';
import CurveDailyVolumeDTO from '../model/CurveDailyVolumeDTO';
import CurveExchangeDTO from '../model/CurveExchangeDTO';
import CurveFeeChangeLogDTO from '../model/CurveFeeChangeLogDTO';
import CurveGaugeDTO from '../model/CurveGaugeDTO';
import CurveGaugeDepositDTO from '../model/CurveGaugeDepositDTO';
import CurveGaugeLiquidityDTO from '../model/CurveGaugeLiquidityDTO';
import CurveGaugeTotalWeightDTO from '../model/CurveGaugeTotalWeightDTO';
import CurveGaugeTypeDTO from '../model/CurveGaugeTypeDTO';
import CurveGaugeTypeWeightDTO from '../model/CurveGaugeTypeWeightDTO';
import CurveGaugeWeightDTO from '../model/CurveGaugeWeightDTO';
import CurveGaugeWeightVoteDTO from '../model/CurveGaugeWeightVoteDTO';
import CurveGaugeWithdrawDTO from '../model/CurveGaugeWithdrawDTO';
import CurveHourlyVolumeDTO from '../model/CurveHourlyVolumeDTO';
import CurveLpTokenDTO from '../model/CurveLpTokenDTO';
import CurvePoolDTO from '../model/CurvePoolDTO';
import CurveProposalDTO from '../model/CurveProposalDTO';
import CurveProposalVoteDTO from '../model/CurveProposalVoteDTO';
import CurveRemoveLiquidityEventDTO from '../model/CurveRemoveLiquidityEventDTO';
import CurveRemoveLiquidityOneEventDTO from '../model/CurveRemoveLiquidityOneEventDTO';
import CurveSystemStateDTO from '../model/CurveSystemStateDTO';
import CurveTokenDTO from '../model/CurveTokenDTO';
import CurveTransferOwnershipEventDTO from '../model/CurveTransferOwnershipEventDTO';
import CurveUnderlyingCoinDTO from '../model/CurveUnderlyingCoinDTO';
import CurveVotingAppDTO from '../model/CurveVotingAppDTO';
import CurveWeeklyVolumeDTO from '../model/CurveWeeklyVolumeDTO';

/**
* Curve service.
* @module api/CurveApi
* @version v1
*/
export default class CurveApi {

    /**
    * Constructs a new CurveApi. 
    * @alias module:api/CurveApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the curveAccountsCurrent operation.
     * @callback module:api/CurveApi~curveAccountsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveAccountDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accounts (current)
     * Gets accounts.
     * @param {module:api/CurveApi~curveAccountsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveAccountDTO>}
     */
    curveAccountsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveAccountDTO];
      return this.apiClient.callApi(
        '/dapps/curve/accounts/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveAddLiquidityEventsCurrent operation.
     * @callback module:api/CurveApi~curveAddLiquidityEventsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveAddLiquidityEventDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AddLiquidityEvents (current)
     * Gets addLiquidityEvents.
     * @param {module:api/CurveApi~curveAddLiquidityEventsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveAddLiquidityEventDTO>}
     */
    curveAddLiquidityEventsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveAddLiquidityEventDTO];
      return this.apiClient.callApi(
        '/dapps/curve/addLiquidityEvents/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveAdminFeeChangeLogsCurrent operation.
     * @callback module:api/CurveApi~curveAdminFeeChangeLogsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveAdminFeeChangeLogDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AdminFeeChangeLogs (current)
     * Gets adminFeeChangeLogs.
     * @param {module:api/CurveApi~curveAdminFeeChangeLogsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveAdminFeeChangeLogDTO>}
     */
    curveAdminFeeChangeLogsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveAdminFeeChangeLogDTO];
      return this.apiClient.callApi(
        '/dapps/curve/adminFeeChangeLogs/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveAmplificationCoeffChangeLogsCurrent operation.
     * @callback module:api/CurveApi~curveAmplificationCoeffChangeLogsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveAmplificationCoeffChangeLogDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * AmplificationCoeffChangeLogs (current)
     * Gets amplificationCoeffChangeLogs.
     * @param {module:api/CurveApi~curveAmplificationCoeffChangeLogsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveAmplificationCoeffChangeLogDTO>}
     */
    curveAmplificationCoeffChangeLogsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveAmplificationCoeffChangeLogDTO];
      return this.apiClient.callApi(
        '/dapps/curve/amplificationCoeffChangeLogs/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveCoinsCurrent operation.
     * @callback module:api/CurveApi~curveCoinsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveCoinDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Coins (current)
     * Gets coins.
     * @param {module:api/CurveApi~curveCoinsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveCoinDTO>}
     */
    curveCoinsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveCoinDTO];
      return this.apiClient.callApi(
        '/dapps/curve/coins/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveContractVersionsCurrent operation.
     * @callback module:api/CurveApi~curveContractVersionsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveContractVersionDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ContractVersions (current)
     * Gets contractVersions.
     * @param {module:api/CurveApi~curveContractVersionsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveContractVersionDTO>}
     */
    curveContractVersionsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveContractVersionDTO];
      return this.apiClient.callApi(
        '/dapps/curve/contractVersions/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveContractsCurrent operation.
     * @callback module:api/CurveApi~curveContractsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveContractDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contracts (current)
     * Gets contracts.
     * @param {module:api/CurveApi~curveContractsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveContractDTO>}
     */
    curveContractsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveContractDTO];
      return this.apiClient.callApi(
        '/dapps/curve/contracts/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveDailyVolumesCurrent operation.
     * @callback module:api/CurveApi~curveDailyVolumesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveDailyVolumeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DailyVolumes (current)
     * Gets dailyVolumes.
     * @param {module:api/CurveApi~curveDailyVolumesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveDailyVolumeDTO>}
     */
    curveDailyVolumesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveDailyVolumeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/dailyVolumes/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveExchangesCurrent operation.
     * @callback module:api/CurveApi~curveExchangesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveExchangeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exchanges (current)
     * Gets exchanges.
     * @param {Object} opts Optional parameters
     * @param {String} [pool] 
     * @param {module:api/CurveApi~curveExchangesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveExchangeDTO>}
     */
    curveExchangesCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveExchangeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/exchanges/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveFeeChangeLogsCurrent operation.
     * @callback module:api/CurveApi~curveFeeChangeLogsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveFeeChangeLogDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * FeeChangeLogs (current)
     * Gets feeChangeLogs.
     * @param {module:api/CurveApi~curveFeeChangeLogsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveFeeChangeLogDTO>}
     */
    curveFeeChangeLogsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveFeeChangeLogDTO];
      return this.apiClient.callApi(
        '/dapps/curve/feeChangeLogs/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGaugeDepositsCurrent operation.
     * @callback module:api/CurveApi~curveGaugeDepositsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeDepositDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeDeposits (current)
     * Gets gaugeDeposits.
     * @param {module:api/CurveApi~curveGaugeDepositsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeDepositDTO>}
     */
    curveGaugeDepositsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeDepositDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugeDeposits/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGaugeLiquiditiesCurrent operation.
     * @callback module:api/CurveApi~curveGaugeLiquiditiesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeLiquidityDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeLiquidities (current)
     * Gets gaugeLiquidities.
     * @param {module:api/CurveApi~curveGaugeLiquiditiesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeLiquidityDTO>}
     */
    curveGaugeLiquiditiesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeLiquidityDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugeLiquidities/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGaugeTotalWeightsCurrent operation.
     * @callback module:api/CurveApi~curveGaugeTotalWeightsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeTotalWeightDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeTotalWeights (current)
     * Gets gaugeTotalWeights.
     * @param {module:api/CurveApi~curveGaugeTotalWeightsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeTotalWeightDTO>}
     */
    curveGaugeTotalWeightsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeTotalWeightDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugeTotalWeights/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGaugeTypeWeightsCurrent operation.
     * @callback module:api/CurveApi~curveGaugeTypeWeightsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeTypeWeightDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeTypeWeights (current)
     * Gets gaugeTypeWeights.
     * @param {module:api/CurveApi~curveGaugeTypeWeightsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeTypeWeightDTO>}
     */
    curveGaugeTypeWeightsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeTypeWeightDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugeTypeWeights/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGaugeTypesCurrent operation.
     * @callback module:api/CurveApi~curveGaugeTypesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeTypeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeTypes (current)
     * Gets gaugeTypes.
     * @param {module:api/CurveApi~curveGaugeTypesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeTypeDTO>}
     */
    curveGaugeTypesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeTypeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugeTypes/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGaugeWeightVotesCurrent operation.
     * @callback module:api/CurveApi~curveGaugeWeightVotesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeWeightVoteDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeWeightVotes (current)
     * Gets gaugeWeightVotes.
     * @param {module:api/CurveApi~curveGaugeWeightVotesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeWeightVoteDTO>}
     */
    curveGaugeWeightVotesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeWeightVoteDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugeWeightVotes/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGaugeWeightsCurrent operation.
     * @callback module:api/CurveApi~curveGaugeWeightsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeWeightDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeWeights (current)
     * Gets gaugeWeights.
     * @param {module:api/CurveApi~curveGaugeWeightsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeWeightDTO>}
     */
    curveGaugeWeightsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeWeightDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugeWeights/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGaugeWithdrawsCurrent operation.
     * @callback module:api/CurveApi~curveGaugeWithdrawsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeWithdrawDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GaugeWithdraws (current)
     * Gets gaugeWithdraws.
     * @param {module:api/CurveApi~curveGaugeWithdrawsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeWithdrawDTO>}
     */
    curveGaugeWithdrawsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeWithdrawDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gaugeWithdraws/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveGaugesCurrent operation.
     * @callback module:api/CurveApi~curveGaugesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveGaugeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gauges (current)
     * Gets gauges.
     * @param {module:api/CurveApi~curveGaugesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveGaugeDTO>}
     */
    curveGaugesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveGaugeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/gauges/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveHourlyVolumesCurrent operation.
     * @callback module:api/CurveApi~curveHourlyVolumesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveHourlyVolumeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * HourlyVolumes (current)
     * Gets hourlyVolumes.
     * @param {module:api/CurveApi~curveHourlyVolumesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveHourlyVolumeDTO>}
     */
    curveHourlyVolumesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveHourlyVolumeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/hourlyVolumes/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveLpTokensCurrent operation.
     * @callback module:api/CurveApi~curveLpTokensCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveLpTokenDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LpTokens (current)
     * Gets lpTokens.
     * @param {module:api/CurveApi~curveLpTokensCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveLpTokenDTO>}
     */
    curveLpTokensCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveLpTokenDTO];
      return this.apiClient.callApi(
        '/dapps/curve/lpTokens/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curvePoolsCurrent operation.
     * @callback module:api/CurveApi~curvePoolsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurvePoolDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pools (current)
     * Gets pools.
     * @param {Object} opts Optional parameters
     * @param {String} [id] Pool address.
     * @param {module:api/CurveApi~curvePoolsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurvePoolDTO>}
     */
    curvePoolsCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurvePoolDTO];
      return this.apiClient.callApi(
        '/dapps/curve/pools/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveProposalVotesCurrent operation.
     * @callback module:api/CurveApi~curveProposalVotesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveProposalVoteDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ProposalVotes (current)
     * Gets proposalVotes.
     * @param {module:api/CurveApi~curveProposalVotesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveProposalVoteDTO>}
     */
    curveProposalVotesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveProposalVoteDTO];
      return this.apiClient.callApi(
        '/dapps/curve/proposalVotes/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveProposalsCurrent operation.
     * @callback module:api/CurveApi~curveProposalsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveProposalDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Proposals (current)
     * Gets proposals.
     * @param {module:api/CurveApi~curveProposalsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveProposalDTO>}
     */
    curveProposalsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveProposalDTO];
      return this.apiClient.callApi(
        '/dapps/curve/proposals/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveRemoveLiquidityEventsCurrent operation.
     * @callback module:api/CurveApi~curveRemoveLiquidityEventsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveRemoveLiquidityEventDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RemoveLiquidityEvents (current)
     * Gets removeLiquidityEvents.
     * @param {module:api/CurveApi~curveRemoveLiquidityEventsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveRemoveLiquidityEventDTO>}
     */
    curveRemoveLiquidityEventsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveRemoveLiquidityEventDTO];
      return this.apiClient.callApi(
        '/dapps/curve/removeLiquidityEvents/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveRemoveLiquidityOneEventsCurrent operation.
     * @callback module:api/CurveApi~curveRemoveLiquidityOneEventsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveRemoveLiquidityOneEventDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RemoveLiquidityOneEvents (current)
     * Gets removeLiquidityOneEvents.
     * @param {module:api/CurveApi~curveRemoveLiquidityOneEventsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveRemoveLiquidityOneEventDTO>}
     */
    curveRemoveLiquidityOneEventsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveRemoveLiquidityOneEventDTO];
      return this.apiClient.callApi(
        '/dapps/curve/removeLiquidityOneEvents/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveSystemStatesCurrent operation.
     * @callback module:api/CurveApi~curveSystemStatesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveSystemStateDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SystemStates (current)
     * Gets systemStates.
     * @param {module:api/CurveApi~curveSystemStatesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveSystemStateDTO>}
     */
    curveSystemStatesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveSystemStateDTO];
      return this.apiClient.callApi(
        '/dapps/curve/systemStates/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveTokensCurrent operation.
     * @callback module:api/CurveApi~curveTokensCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveTokenDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tokens (current)
     * Gets tokens.
     * @param {module:api/CurveApi~curveTokensCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveTokenDTO>}
     */
    curveTokensCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveTokenDTO];
      return this.apiClient.callApi(
        '/dapps/curve/tokens/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveTransferOwnershipEventsCurrent operation.
     * @callback module:api/CurveApi~curveTransferOwnershipEventsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveTransferOwnershipEventDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TransferOwnershipEvents (current)
     * Gets transferOwnershipEvents.
     * @param {module:api/CurveApi~curveTransferOwnershipEventsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveTransferOwnershipEventDTO>}
     */
    curveTransferOwnershipEventsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveTransferOwnershipEventDTO];
      return this.apiClient.callApi(
        '/dapps/curve/transferOwnershipEvents/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveUnderlyingCoinsCurrent operation.
     * @callback module:api/CurveApi~curveUnderlyingCoinsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveUnderlyingCoinDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UnderlyingCoins (current)
     * Gets underlyingCoins.
     * @param {module:api/CurveApi~curveUnderlyingCoinsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveUnderlyingCoinDTO>}
     */
    curveUnderlyingCoinsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveUnderlyingCoinDTO];
      return this.apiClient.callApi(
        '/dapps/curve/underlyingCoins/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveVotingAppsCurrent operation.
     * @callback module:api/CurveApi~curveVotingAppsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveVotingAppDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VotingApps (current)
     * Gets votingApps.
     * @param {module:api/CurveApi~curveVotingAppsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveVotingAppDTO>}
     */
    curveVotingAppsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveVotingAppDTO];
      return this.apiClient.callApi(
        '/dapps/curve/votingApps/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the curveWeeklyVolumesCurrent operation.
     * @callback module:api/CurveApi~curveWeeklyVolumesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CurveWeeklyVolumeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * WeeklyVolumes (current)
     * Gets weeklyVolumes.
     * @param {module:api/CurveApi~curveWeeklyVolumesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CurveWeeklyVolumeDTO>}
     */
    curveWeeklyVolumesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [CurveWeeklyVolumeDTO];
      return this.apiClient.callApi(
        '/dapps/curve/weeklyVolumes/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
