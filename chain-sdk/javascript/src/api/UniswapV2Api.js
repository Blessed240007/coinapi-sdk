/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UniswapV2BundleDTO from '../model/UniswapV2BundleDTO';
import UniswapV2BurnDTO from '../model/UniswapV2BurnDTO';
import UniswapV2LiquidityPositionDTO from '../model/UniswapV2LiquidityPositionDTO';
import UniswapV2LiquidityPositionSnapshotDTO from '../model/UniswapV2LiquidityPositionSnapshotDTO';
import UniswapV2MintDTO from '../model/UniswapV2MintDTO';
import UniswapV2PairDTO from '../model/UniswapV2PairDTO';
import UniswapV2PairDayDataDTO from '../model/UniswapV2PairDayDataDTO';
import UniswapV2PairHourDataDTO from '../model/UniswapV2PairHourDataDTO';
import UniswapV2SwapDTO from '../model/UniswapV2SwapDTO';
import UniswapV2TokenDTO from '../model/UniswapV2TokenDTO';
import UniswapV2TokenDayDataDTO from '../model/UniswapV2TokenDayDataDTO';
import UniswapV2TransactionDTO from '../model/UniswapV2TransactionDTO';
import UniswapV2UniswapDayDataDTO from '../model/UniswapV2UniswapDayDataDTO';
import UniswapV2UniswapFactoryDTO from '../model/UniswapV2UniswapFactoryDTO';
import UniswapV2UserDTO from '../model/UniswapV2UserDTO';

/**
* UniswapV2 service.
* @module api/UniswapV2Api
* @version v1
*/
export default class UniswapV2Api {

    /**
    * Constructs a new UniswapV2Api. 
    * @alias module:api/UniswapV2Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the uniswapV2BundlesCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2BundlesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2BundleDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bundles (current)
     * Gets bundles.
     * @param {module:api/UniswapV2Api~uniswapV2BundlesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2BundleDTO>}
     */
    uniswapV2BundlesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2BundleDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/bundles/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2BurnsCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2BurnsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2BurnDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Burns (current)
     * Gets burns.
     * @param {module:api/UniswapV2Api~uniswapV2BurnsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2BurnDTO>}
     */
    uniswapV2BurnsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2BurnDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/burns/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2LiquidityPositionSnapshotsCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2LiquidityPositionSnapshotsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2LiquidityPositionSnapshotDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LiquidityPositionSnapshots (current)
     * Gets liquidityPositionSnapshots.
     * @param {module:api/UniswapV2Api~uniswapV2LiquidityPositionSnapshotsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2LiquidityPositionSnapshotDTO>}
     */
    uniswapV2LiquidityPositionSnapshotsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2LiquidityPositionSnapshotDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/liquidityPositionSnapshots/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2LiquidityPositionsCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2LiquidityPositionsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2LiquidityPositionDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LiquidityPositions (current)
     * Gets liquidityPositions.
     * @param {module:api/UniswapV2Api~uniswapV2LiquidityPositionsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2LiquidityPositionDTO>}
     */
    uniswapV2LiquidityPositionsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2LiquidityPositionDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/liquidityPositions/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2MintsCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2MintsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2MintDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mints (current)
     * Gets mints.
     * @param {module:api/UniswapV2Api~uniswapV2MintsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2MintDTO>}
     */
    uniswapV2MintsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2MintDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/mints/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2PairDayDataCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2PairDayDataCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2PairDayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PairDayData (current)
     * Gets pairDayData.
     * @param {module:api/UniswapV2Api~uniswapV2PairDayDataCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2PairDayDataDTO>}
     */
    uniswapV2PairDayDataCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2PairDayDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/pairDayData/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2PairHourDataCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2PairHourDataCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2PairHourDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PairHourData (current)
     * Gets pairHourData.
     * @param {module:api/UniswapV2Api~uniswapV2PairHourDataCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2PairHourDataDTO>}
     */
    uniswapV2PairHourDataCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2PairHourDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/pairHourData/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2PairsCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2PairsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2PairDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pairs (current)
     * Gets pairs.
     * @param {Object} opts Optional parameters
     * @param {String} [id] Pair contract address.
     * @param {module:api/UniswapV2Api~uniswapV2PairsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2PairDTO>}
     */
    uniswapV2PairsCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2PairDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/pairs/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2SwapsCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2SwapsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2SwapDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Swaps (current)
     * Gets swaps.
     * @param {Object} opts Optional parameters
     * @param {String} [pair] Reference to pair.
     * @param {module:api/UniswapV2Api~uniswapV2SwapsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2SwapDTO>}
     */
    uniswapV2SwapsCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pair': opts['pair']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2SwapDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/swaps/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2TokenDayDataCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2TokenDayDataCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2TokenDayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TokenDayData (current)
     * Gets tokenDayData.
     * @param {module:api/UniswapV2Api~uniswapV2TokenDayDataCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2TokenDayDataDTO>}
     */
    uniswapV2TokenDayDataCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2TokenDayDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/tokenDayData/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2TokensCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2TokensCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2TokenDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tokens (current)
     * Gets tokens.
     * @param {module:api/UniswapV2Api~uniswapV2TokensCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2TokenDTO>}
     */
    uniswapV2TokensCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2TokenDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/tokens/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2TransactionsCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2TransactionsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2TransactionDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transactions (current)
     * Gets transactions.
     * @param {module:api/UniswapV2Api~uniswapV2TransactionsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2TransactionDTO>}
     */
    uniswapV2TransactionsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2TransactionDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/transactions/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2UniswapDayDataCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2UniswapDayDataCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2UniswapDayDataDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UniswapDayData (current)
     * Gets uniswapDayData.
     * @param {module:api/UniswapV2Api~uniswapV2UniswapDayDataCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2UniswapDayDataDTO>}
     */
    uniswapV2UniswapDayDataCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2UniswapDayDataDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/uniswapDayData/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2UniswapFactoriesCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2UniswapFactoriesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2UniswapFactoryDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UniswapFactories (current)
     * Gets uniswapFactories.
     * @param {module:api/UniswapV2Api~uniswapV2UniswapFactoriesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2UniswapFactoryDTO>}
     */
    uniswapV2UniswapFactoriesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2UniswapFactoryDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/uniswapFactories/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uniswapV2UsersCurrent operation.
     * @callback module:api/UniswapV2Api~uniswapV2UsersCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UniswapV2UserDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Users (current)
     * Gets users.
     * @param {module:api/UniswapV2Api~uniswapV2UsersCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UniswapV2UserDTO>}
     */
    uniswapV2UsersCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UniswapV2UserDTO];
      return this.apiClient.callApi(
        '/dapps/uniswapv2/users/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
