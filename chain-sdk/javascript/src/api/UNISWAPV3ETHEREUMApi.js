/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UNISWAPV3ETHEREUMAccountDTO from '../model/UNISWAPV3ETHEREUMAccountDTO';
import UNISWAPV3ETHEREUMActiveAccountDTO from '../model/UNISWAPV3ETHEREUMActiveAccountDTO';
import UNISWAPV3ETHEREUMDepositDTO from '../model/UNISWAPV3ETHEREUMDepositDTO';
import UNISWAPV3ETHEREUMDexAmmProtocolDTO from '../model/UNISWAPV3ETHEREUMDexAmmProtocolDTO';
import UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO from '../model/UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO';
import UNISWAPV3ETHEREUMLiquidityPoolAmountDTO from '../model/UNISWAPV3ETHEREUMLiquidityPoolAmountDTO';
import UNISWAPV3ETHEREUMLiquidityPoolDTO from '../model/UNISWAPV3ETHEREUMLiquidityPoolDTO';
import UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO from '../model/UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO';
import UNISWAPV3ETHEREUMLiquidityPoolFeeDTO from '../model/UNISWAPV3ETHEREUMLiquidityPoolFeeDTO';
import UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO from '../model/UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO';
import UNISWAPV3ETHEREUMPositionDTO from '../model/UNISWAPV3ETHEREUMPositionDTO';
import UNISWAPV3ETHEREUMPositionSnapshotDTO from '../model/UNISWAPV3ETHEREUMPositionSnapshotDTO';
import UNISWAPV3ETHEREUMRewardTokenDTO from '../model/UNISWAPV3ETHEREUMRewardTokenDTO';
import UNISWAPV3ETHEREUMSwapDTO from '../model/UNISWAPV3ETHEREUMSwapDTO';
import UNISWAPV3ETHEREUMTickDTO from '../model/UNISWAPV3ETHEREUMTickDTO';
import UNISWAPV3ETHEREUMTickDailySnapshotDTO from '../model/UNISWAPV3ETHEREUMTickDailySnapshotDTO';
import UNISWAPV3ETHEREUMTickHourlySnapshotDTO from '../model/UNISWAPV3ETHEREUMTickHourlySnapshotDTO';
import UNISWAPV3ETHEREUMTokenDTO from '../model/UNISWAPV3ETHEREUMTokenDTO';
import UNISWAPV3ETHEREUMTokenWhiteListDTO from '../model/UNISWAPV3ETHEREUMTokenWhiteListDTO';
import UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO from '../model/UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO';
import UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO from '../model/UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO';
import UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO from '../model/UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO';
import UNISWAPV3ETHEREUMWithdrawDTO from '../model/UNISWAPV3ETHEREUMWithdrawDTO';

/**
* UNISWAPV3ETHEREUM service.
* @module api/UNISWAPV3ETHEREUMApi
* @version v1
*/
export default class UNISWAPV3ETHEREUMApi {

    /**
    * Constructs a new UNISWAPV3ETHEREUMApi. 
    * @alias module:api/UNISWAPV3ETHEREUMApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the uNISWAPV3ETHEREUMAccountsCurrent operation.
     * @callback module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMAccountsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UNISWAPV3ETHEREUMAccountDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accounts (current)
     * Gets accounts.
     * @param {module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMAccountsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UNISWAPV3ETHEREUMAccountDTO>}
     */
    uNISWAPV3ETHEREUMAccountsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UNISWAPV3ETHEREUMAccountDTO];
      return this.apiClient.callApi(
        '/dapps/uniswap_v3_ethereum/accounts/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uNISWAPV3ETHEREUMActiveAccountsCurrent operation.
     * @callback module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMActiveAccountsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UNISWAPV3ETHEREUMActiveAccountDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * ActiveAccounts (current)
     * Gets activeAccounts.
     * @param {module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMActiveAccountsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UNISWAPV3ETHEREUMActiveAccountDTO>}
     */
    uNISWAPV3ETHEREUMActiveAccountsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UNISWAPV3ETHEREUMActiveAccountDTO];
      return this.apiClient.callApi(
        '/dapps/uniswap_v3_ethereum/activeAccounts/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uNISWAPV3ETHEREUMDepositsCurrent operation.
     * @callback module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMDepositsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UNISWAPV3ETHEREUMDepositDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deposits (current)
     * Gets deposits.
     * @param {module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMDepositsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UNISWAPV3ETHEREUMDepositDTO>}
     */
    uNISWAPV3ETHEREUMDepositsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UNISWAPV3ETHEREUMDepositDTO];
      return this.apiClient.callApi(
        '/dapps/uniswap_v3_ethereum/deposits/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uNISWAPV3ETHEREUMDexAmmProtocolsCurrent operation.
     * @callback module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMDexAmmProtocolsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UNISWAPV3ETHEREUMDexAmmProtocolDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DexAmmProtocols (current)
     * Gets dexAmmProtocols.
     * @param {module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMDexAmmProtocolsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UNISWAPV3ETHEREUMDexAmmProtocolDTO>}
     */
    uNISWAPV3ETHEREUMDexAmmProtocolsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UNISWAPV3ETHEREUMDexAmmProtocolDTO];
      return this.apiClient.callApi(
        '/dapps/uniswap_v3_ethereum/dexAmmProtocols/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uNISWAPV3ETHEREUMFinancialsDailySnapshotsCurrent operation.
     * @callback module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMFinancialsDailySnapshotsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * FinancialsDailySnapshots (current)
     * Gets financialsDailySnapshots.
     * @param {module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMFinancialsDailySnapshotsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO>}
     */
    uNISWAPV3ETHEREUMFinancialsDailySnapshotsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO];
      return this.apiClient.callApi(
        '/dapps/uniswap_v3_ethereum/financialsDailySnapshots/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uNISWAPV3ETHEREUMLiquidityPoolAmountsCurrent operation.
     * @callback module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMLiquidityPoolAmountsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UNISWAPV3ETHEREUMLiquidityPoolAmountDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LiquidityPoolAmounts (current)
     * Gets liquidityPoolAmounts.
     * @param {Object} opts Optional parameters
     * @param {String} [id] Smart contract address of the pool.
     * @param {module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMLiquidityPoolAmountsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UNISWAPV3ETHEREUMLiquidityPoolAmountDTO>}
     */
    uNISWAPV3ETHEREUMLiquidityPoolAmountsCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UNISWAPV3ETHEREUMLiquidityPoolAmountDTO];
      return this.apiClient.callApi(
        '/dapps/uniswap_v3_ethereum/liquidityPoolAmounts/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrent operation.
     * @callback module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LiquidityPoolDailySnapshots (current)
     * Gets liquidityPoolDailySnapshots.
     * @param {Object} opts Optional parameters
     * @param {String} [pool] Pool this snapshot belongs to.
     * @param {module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO>}
     */
    uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO];
      return this.apiClient.callApi(
        '/dapps/uniswap_v3_ethereum/liquidityPoolDailySnapshots/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uNISWAPV3ETHEREUMLiquidityPoolFeesCurrent operation.
     * @callback module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMLiquidityPoolFeesCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UNISWAPV3ETHEREUMLiquidityPoolFeeDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LiquidityPoolFees (current)
     * Gets liquidityPoolFees.
     * @param {module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMLiquidityPoolFeesCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UNISWAPV3ETHEREUMLiquidityPoolFeeDTO>}
     */
    uNISWAPV3ETHEREUMLiquidityPoolFeesCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UNISWAPV3ETHEREUMLiquidityPoolFeeDTO];
      return this.apiClient.callApi(
        '/dapps/uniswap_v3_ethereum/liquidityPoolFees/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrent operation.
     * @callback module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LiquidityPoolHourlySnapshots (current)
     * Gets liquidityPoolHourlySnapshots.
     * @param {Object} opts Optional parameters
     * @param {String} [pool] The pool this snapshot belongs to
     * @param {module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO>}
     */
    uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO];
      return this.apiClient.callApi(
        '/dapps/uniswap_v3_ethereum/liquidityPoolHourlySnapshots/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uNISWAPV3ETHEREUMLiquidityPoolsCurrent operation.
     * @callback module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMLiquidityPoolsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UNISWAPV3ETHEREUMLiquidityPoolDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * LiquidityPools (current)
     * Gets liquidityPools.
     * @param {Object} opts Optional parameters
     * @param {String} [id] Smart contract address of the pool.
     * @param {module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMLiquidityPoolsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UNISWAPV3ETHEREUMLiquidityPoolDTO>}
     */
    uNISWAPV3ETHEREUMLiquidityPoolsCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UNISWAPV3ETHEREUMLiquidityPoolDTO];
      return this.apiClient.callApi(
        '/dapps/uniswap_v3_ethereum/liquidityPools/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uNISWAPV3ETHEREUMPositionSnapshotsCurrent operation.
     * @callback module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMPositionSnapshotsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UNISWAPV3ETHEREUMPositionSnapshotDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PositionSnapshots (current)
     * Gets positionSnapshots.
     * @param {module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMPositionSnapshotsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UNISWAPV3ETHEREUMPositionSnapshotDTO>}
     */
    uNISWAPV3ETHEREUMPositionSnapshotsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UNISWAPV3ETHEREUMPositionSnapshotDTO];
      return this.apiClient.callApi(
        '/dapps/uniswap_v3_ethereum/positionSnapshots/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uNISWAPV3ETHEREUMPositionsCurrent operation.
     * @callback module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMPositionsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UNISWAPV3ETHEREUMPositionDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Positions (current)
     * Gets positions.
     * @param {Object} opts Optional parameters
     * @param {String} [pool] The liquidity pool in which this position was opened
     * @param {module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMPositionsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UNISWAPV3ETHEREUMPositionDTO>}
     */
    uNISWAPV3ETHEREUMPositionsCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UNISWAPV3ETHEREUMPositionDTO];
      return this.apiClient.callApi(
        '/dapps/uniswap_v3_ethereum/positions/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uNISWAPV3ETHEREUMRewardTokensCurrent operation.
     * @callback module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMRewardTokensCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UNISWAPV3ETHEREUMRewardTokenDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * RewardTokens (current)
     * Gets rewardTokens.
     * @param {module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMRewardTokensCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UNISWAPV3ETHEREUMRewardTokenDTO>}
     */
    uNISWAPV3ETHEREUMRewardTokensCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UNISWAPV3ETHEREUMRewardTokenDTO];
      return this.apiClient.callApi(
        '/dapps/uniswap_v3_ethereum/rewardTokens/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uNISWAPV3ETHEREUMSwapsCurrent operation.
     * @callback module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMSwapsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UNISWAPV3ETHEREUMSwapDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Swaps (current)
     * Gets swaps.
     * @param {module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMSwapsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UNISWAPV3ETHEREUMSwapDTO>}
     */
    uNISWAPV3ETHEREUMSwapsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UNISWAPV3ETHEREUMSwapDTO];
      return this.apiClient.callApi(
        '/dapps/uniswap_v3_ethereum/swaps/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uNISWAPV3ETHEREUMTickDailySnapshotsCurrent operation.
     * @callback module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMTickDailySnapshotsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UNISWAPV3ETHEREUMTickDailySnapshotDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TickDailySnapshots (current)
     * Gets tickDailySnapshots.
     * @param {Object} opts Optional parameters
     * @param {String} [pool] liquidity pool this tick belongs to
     * @param {module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMTickDailySnapshotsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UNISWAPV3ETHEREUMTickDailySnapshotDTO>}
     */
    uNISWAPV3ETHEREUMTickDailySnapshotsCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UNISWAPV3ETHEREUMTickDailySnapshotDTO];
      return this.apiClient.callApi(
        '/dapps/uniswap_v3_ethereum/tickDailySnapshots/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uNISWAPV3ETHEREUMTickHourlySnapshotsCurrent operation.
     * @callback module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMTickHourlySnapshotsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UNISWAPV3ETHEREUMTickHourlySnapshotDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TickHourlySnapshots (current)
     * Gets tickHourlySnapshots.
     * @param {Object} opts Optional parameters
     * @param {String} [pool] liquidity pool this tick belongs to
     * @param {module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMTickHourlySnapshotsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UNISWAPV3ETHEREUMTickHourlySnapshotDTO>}
     */
    uNISWAPV3ETHEREUMTickHourlySnapshotsCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UNISWAPV3ETHEREUMTickHourlySnapshotDTO];
      return this.apiClient.callApi(
        '/dapps/uniswap_v3_ethereum/tickHourlySnapshots/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uNISWAPV3ETHEREUMTicksCurrent operation.
     * @callback module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMTicksCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UNISWAPV3ETHEREUMTickDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ticks (current)
     * Gets ticks.
     * @param {Object} opts Optional parameters
     * @param {String} [pool] Liquidity pool this tick belongs to
     * @param {module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMTicksCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UNISWAPV3ETHEREUMTickDTO>}
     */
    uNISWAPV3ETHEREUMTicksCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pool': opts['pool']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UNISWAPV3ETHEREUMTickDTO];
      return this.apiClient.callApi(
        '/dapps/uniswap_v3_ethereum/ticks/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uNISWAPV3ETHEREUMTokenWhiteListSymbolsCurrent operation.
     * @callback module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMTokenWhiteListSymbolsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TokenWhiteListSymbols (current)
     * Gets tokenWhiteListSymbols.
     * @param {module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMTokenWhiteListSymbolsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO>}
     */
    uNISWAPV3ETHEREUMTokenWhiteListSymbolsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO];
      return this.apiClient.callApi(
        '/dapps/uniswap_v3_ethereum/tokenWhiteListSymbols/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uNISWAPV3ETHEREUMTokenWhiteListsCurrent operation.
     * @callback module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMTokenWhiteListsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UNISWAPV3ETHEREUMTokenWhiteListDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TokenWhiteLists (current)
     * Gets tokenWhiteLists.
     * @param {module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMTokenWhiteListsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UNISWAPV3ETHEREUMTokenWhiteListDTO>}
     */
    uNISWAPV3ETHEREUMTokenWhiteListsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UNISWAPV3ETHEREUMTokenWhiteListDTO];
      return this.apiClient.callApi(
        '/dapps/uniswap_v3_ethereum/tokenWhiteLists/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uNISWAPV3ETHEREUMTokensCurrent operation.
     * @callback module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMTokensCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UNISWAPV3ETHEREUMTokenDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tokens (current)
     * Gets tokens.
     * @param {Object} opts Optional parameters
     * @param {String} [id] Smart contract address of the token.
     * @param {module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMTokensCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UNISWAPV3ETHEREUMTokenDTO>}
     */
    uNISWAPV3ETHEREUMTokensCurrent(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UNISWAPV3ETHEREUMTokenDTO];
      return this.apiClient.callApi(
        '/dapps/uniswap_v3_ethereum/tokens/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uNISWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrent operation.
     * @callback module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UsageMetricsDailySnapshots (current)
     * Gets usageMetricsDailySnapshots.
     * @param {module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO>}
     */
    uNISWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO];
      return this.apiClient.callApi(
        '/dapps/uniswap_v3_ethereum/usageMetricsDailySnapshots/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrent operation.
     * @callback module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UsageMetricsHourlySnapshots (current)
     * Gets usageMetricsHourlySnapshots.
     * @param {module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO>}
     */
    uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO];
      return this.apiClient.callApi(
        '/dapps/uniswap_v3_ethereum/usageMetricsHourlySnapshots/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uNISWAPV3ETHEREUMWithdrawsCurrent operation.
     * @callback module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMWithdrawsCurrentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UNISWAPV3ETHEREUMWithdrawDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Withdraws (current)
     * Gets withdraws.
     * @param {module:api/UNISWAPV3ETHEREUMApi~uNISWAPV3ETHEREUMWithdrawsCurrentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UNISWAPV3ETHEREUMWithdrawDTO>}
     */
    uNISWAPV3ETHEREUMWithdrawsCurrent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [UNISWAPV3ETHEREUMWithdrawDTO];
      return this.apiClient.callApi(
        '/dapps/uniswap_v3_ethereum/withdraws/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
