/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OnChainDappsRestApi);
  }
}(this, function(expect, OnChainDappsRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OnChainDappsRestApi.UNISWAPV2ETHEREUMApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UNISWAPV2ETHEREUMApi', function() {
    describe('uNISWAPV2ETHEREUMAccountsCurrent', function() {
      it('should call uNISWAPV2ETHEREUMAccountsCurrent successfully', function(done) {
        //uncomment below and update the code to test uNISWAPV2ETHEREUMAccountsCurrent
        //instance.uNISWAPV2ETHEREUMAccountsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uNISWAPV2ETHEREUMActiveAccountsCurrent', function() {
      it('should call uNISWAPV2ETHEREUMActiveAccountsCurrent successfully', function(done) {
        //uncomment below and update the code to test uNISWAPV2ETHEREUMActiveAccountsCurrent
        //instance.uNISWAPV2ETHEREUMActiveAccountsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uNISWAPV2ETHEREUMDepositsCurrent', function() {
      it('should call uNISWAPV2ETHEREUMDepositsCurrent successfully', function(done) {
        //uncomment below and update the code to test uNISWAPV2ETHEREUMDepositsCurrent
        //instance.uNISWAPV2ETHEREUMDepositsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uNISWAPV2ETHEREUMDexAmmProtocolsCurrent', function() {
      it('should call uNISWAPV2ETHEREUMDexAmmProtocolsCurrent successfully', function(done) {
        //uncomment below and update the code to test uNISWAPV2ETHEREUMDexAmmProtocolsCurrent
        //instance.uNISWAPV2ETHEREUMDexAmmProtocolsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uNISWAPV2ETHEREUMFinancialsDailySnapshotsCurrent', function() {
      it('should call uNISWAPV2ETHEREUMFinancialsDailySnapshotsCurrent successfully', function(done) {
        //uncomment below and update the code to test uNISWAPV2ETHEREUMFinancialsDailySnapshotsCurrent
        //instance.uNISWAPV2ETHEREUMFinancialsDailySnapshotsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uNISWAPV2ETHEREUMLiquidityPoolAmountsCurrent', function() {
      it('should call uNISWAPV2ETHEREUMLiquidityPoolAmountsCurrent successfully', function(done) {
        //uncomment below and update the code to test uNISWAPV2ETHEREUMLiquidityPoolAmountsCurrent
        //instance.uNISWAPV2ETHEREUMLiquidityPoolAmountsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotsCurrent', function() {
      it('should call uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotsCurrent successfully', function(done) {
        //uncomment below and update the code to test uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotsCurrent
        //instance.uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uNISWAPV2ETHEREUMLiquidityPoolFeesCurrent', function() {
      it('should call uNISWAPV2ETHEREUMLiquidityPoolFeesCurrent successfully', function(done) {
        //uncomment below and update the code to test uNISWAPV2ETHEREUMLiquidityPoolFeesCurrent
        //instance.uNISWAPV2ETHEREUMLiquidityPoolFeesCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotsCurrent', function() {
      it('should call uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotsCurrent successfully', function(done) {
        //uncomment below and update the code to test uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotsCurrent
        //instance.uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uNISWAPV2ETHEREUMLiquidityPoolsCurrent', function() {
      it('should call uNISWAPV2ETHEREUMLiquidityPoolsCurrent successfully', function(done) {
        //uncomment below and update the code to test uNISWAPV2ETHEREUMLiquidityPoolsCurrent
        //instance.uNISWAPV2ETHEREUMLiquidityPoolsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uNISWAPV2ETHEREUMMasterChefAddressToPidsCurrent', function() {
      it('should call uNISWAPV2ETHEREUMMasterChefAddressToPidsCurrent successfully', function(done) {
        //uncomment below and update the code to test uNISWAPV2ETHEREUMMasterChefAddressToPidsCurrent
        //instance.uNISWAPV2ETHEREUMMasterChefAddressToPidsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uNISWAPV2ETHEREUMMasterChefRewardersCurrent', function() {
      it('should call uNISWAPV2ETHEREUMMasterChefRewardersCurrent successfully', function(done) {
        //uncomment below and update the code to test uNISWAPV2ETHEREUMMasterChefRewardersCurrent
        //instance.uNISWAPV2ETHEREUMMasterChefRewardersCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uNISWAPV2ETHEREUMMasterChefStakingPoolsCurrent', function() {
      it('should call uNISWAPV2ETHEREUMMasterChefStakingPoolsCurrent successfully', function(done) {
        //uncomment below and update the code to test uNISWAPV2ETHEREUMMasterChefStakingPoolsCurrent
        //instance.uNISWAPV2ETHEREUMMasterChefStakingPoolsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uNISWAPV2ETHEREUMMasterChefsCurrent', function() {
      it('should call uNISWAPV2ETHEREUMMasterChefsCurrent successfully', function(done) {
        //uncomment below and update the code to test uNISWAPV2ETHEREUMMasterChefsCurrent
        //instance.uNISWAPV2ETHEREUMMasterChefsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uNISWAPV2ETHEREUMRewardTokensCurrent', function() {
      it('should call uNISWAPV2ETHEREUMRewardTokensCurrent successfully', function(done) {
        //uncomment below and update the code to test uNISWAPV2ETHEREUMRewardTokensCurrent
        //instance.uNISWAPV2ETHEREUMRewardTokensCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uNISWAPV2ETHEREUMRewarderProbesCurrent', function() {
      it('should call uNISWAPV2ETHEREUMRewarderProbesCurrent successfully', function(done) {
        //uncomment below and update the code to test uNISWAPV2ETHEREUMRewarderProbesCurrent
        //instance.uNISWAPV2ETHEREUMRewarderProbesCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uNISWAPV2ETHEREUMSwapsCurrent', function() {
      it('should call uNISWAPV2ETHEREUMSwapsCurrent successfully', function(done) {
        //uncomment below and update the code to test uNISWAPV2ETHEREUMSwapsCurrent
        //instance.uNISWAPV2ETHEREUMSwapsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uNISWAPV2ETHEREUMTokenWhiteListsCurrent', function() {
      it('should call uNISWAPV2ETHEREUMTokenWhiteListsCurrent successfully', function(done) {
        //uncomment below and update the code to test uNISWAPV2ETHEREUMTokenWhiteListsCurrent
        //instance.uNISWAPV2ETHEREUMTokenWhiteListsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uNISWAPV2ETHEREUMTokensCurrent', function() {
      it('should call uNISWAPV2ETHEREUMTokensCurrent successfully', function(done) {
        //uncomment below and update the code to test uNISWAPV2ETHEREUMTokensCurrent
        //instance.uNISWAPV2ETHEREUMTokensCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uNISWAPV2ETHEREUMTransfersCurrent', function() {
      it('should call uNISWAPV2ETHEREUMTransfersCurrent successfully', function(done) {
        //uncomment below and update the code to test uNISWAPV2ETHEREUMTransfersCurrent
        //instance.uNISWAPV2ETHEREUMTransfersCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uNISWAPV2ETHEREUMUsageMetricsDailySnapshotsCurrent', function() {
      it('should call uNISWAPV2ETHEREUMUsageMetricsDailySnapshotsCurrent successfully', function(done) {
        //uncomment below and update the code to test uNISWAPV2ETHEREUMUsageMetricsDailySnapshotsCurrent
        //instance.uNISWAPV2ETHEREUMUsageMetricsDailySnapshotsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotsCurrent', function() {
      it('should call uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotsCurrent successfully', function(done) {
        //uncomment below and update the code to test uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotsCurrent
        //instance.uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uNISWAPV2ETHEREUMWithdrawsCurrent', function() {
      it('should call uNISWAPV2ETHEREUMWithdrawsCurrent successfully', function(done) {
        //uncomment below and update the code to test uNISWAPV2ETHEREUMWithdrawsCurrent
        //instance.uNISWAPV2ETHEREUMWithdrawsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
