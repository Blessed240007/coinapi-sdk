/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OnChainDappsRestApi);
  }
}(this, function(expect, OnChainDappsRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OnChainDappsRestApi.UniswapV2Api();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UniswapV2Api', function() {
    describe('uniswapV2BundlesCurrent', function() {
      it('should call uniswapV2BundlesCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV2BundlesCurrent
        //instance.uniswapV2BundlesCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV2BurnsCurrent', function() {
      it('should call uniswapV2BurnsCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV2BurnsCurrent
        //instance.uniswapV2BurnsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV2LiquidityPositionSnapshotsCurrent', function() {
      it('should call uniswapV2LiquidityPositionSnapshotsCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV2LiquidityPositionSnapshotsCurrent
        //instance.uniswapV2LiquidityPositionSnapshotsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV2LiquidityPositionsCurrent', function() {
      it('should call uniswapV2LiquidityPositionsCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV2LiquidityPositionsCurrent
        //instance.uniswapV2LiquidityPositionsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV2MintsCurrent', function() {
      it('should call uniswapV2MintsCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV2MintsCurrent
        //instance.uniswapV2MintsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV2PairDayDataCurrent', function() {
      it('should call uniswapV2PairDayDataCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV2PairDayDataCurrent
        //instance.uniswapV2PairDayDataCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV2PairHourDataCurrent', function() {
      it('should call uniswapV2PairHourDataCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV2PairHourDataCurrent
        //instance.uniswapV2PairHourDataCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV2PairsCurrent', function() {
      it('should call uniswapV2PairsCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV2PairsCurrent
        //instance.uniswapV2PairsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV2SwapsCurrent', function() {
      it('should call uniswapV2SwapsCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV2SwapsCurrent
        //instance.uniswapV2SwapsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV2TokenDayDataCurrent', function() {
      it('should call uniswapV2TokenDayDataCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV2TokenDayDataCurrent
        //instance.uniswapV2TokenDayDataCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV2TokensCurrent', function() {
      it('should call uniswapV2TokensCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV2TokensCurrent
        //instance.uniswapV2TokensCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV2TransactionsCurrent', function() {
      it('should call uniswapV2TransactionsCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV2TransactionsCurrent
        //instance.uniswapV2TransactionsCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV2UniswapDayDataCurrent', function() {
      it('should call uniswapV2UniswapDayDataCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV2UniswapDayDataCurrent
        //instance.uniswapV2UniswapDayDataCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV2UniswapFactoriesCurrent', function() {
      it('should call uniswapV2UniswapFactoriesCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV2UniswapFactoriesCurrent
        //instance.uniswapV2UniswapFactoriesCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uniswapV2UsersCurrent', function() {
      it('should call uniswapV2UsersCurrent successfully', function(done) {
        //uncomment below and update the code to test uniswapV2UsersCurrent
        //instance.uniswapV2UsersCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
