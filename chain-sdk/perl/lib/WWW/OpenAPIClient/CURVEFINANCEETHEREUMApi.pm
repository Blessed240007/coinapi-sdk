=begin comment

On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

The version of the OpenAPI document: v1
Contact: support@coinapi.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::CURVEFINANCEETHEREUMApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# c_urvefinanceethereum_accounts__current
#
# Accounts (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'c_urvefinanceethereum_accounts__current' } = {
        summary => 'Accounts (current)',
        params => $params,
        returns => 'ARRAY[CURVEFINANCEETHEREUMAccountDTO]',
        };
}
# @return ARRAY[CURVEFINANCEETHEREUMAccountDTO]
#
sub c_urvefinanceethereum_accounts__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/curve-finance-ethereum/accounts/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CURVEFINANCEETHEREUMAccountDTO]', $response);
    return $_response_object;
}

#
# c_urvefinanceethereum_active_accounts__current
#
# ActiveAccounts (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'c_urvefinanceethereum_active_accounts__current' } = {
        summary => 'ActiveAccounts (current)',
        params => $params,
        returns => 'ARRAY[CURVEFINANCEETHEREUMActiveAccountDTO]',
        };
}
# @return ARRAY[CURVEFINANCEETHEREUMActiveAccountDTO]
#
sub c_urvefinanceethereum_active_accounts__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/curve-finance-ethereum/activeAccounts/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CURVEFINANCEETHEREUMActiveAccountDTO]', $response);
    return $_response_object;
}

#
# c_urvefinanceethereum_deposits__current
#
# Deposits (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'c_urvefinanceethereum_deposits__current' } = {
        summary => 'Deposits (current)',
        params => $params,
        returns => 'ARRAY[CURVEFINANCEETHEREUMDepositDTO]',
        };
}
# @return ARRAY[CURVEFINANCEETHEREUMDepositDTO]
#
sub c_urvefinanceethereum_deposits__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/curve-finance-ethereum/deposits/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CURVEFINANCEETHEREUMDepositDTO]', $response);
    return $_response_object;
}

#
# c_urvefinanceethereum_dex_amm_protocols__current
#
# DexAmmProtocols (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'c_urvefinanceethereum_dex_amm_protocols__current' } = {
        summary => 'DexAmmProtocols (current)',
        params => $params,
        returns => 'ARRAY[CURVEFINANCEETHEREUMDexAmmProtocolDTO]',
        };
}
# @return ARRAY[CURVEFINANCEETHEREUMDexAmmProtocolDTO]
#
sub c_urvefinanceethereum_dex_amm_protocols__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/curve-finance-ethereum/dexAmmProtocols/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CURVEFINANCEETHEREUMDexAmmProtocolDTO]', $response);
    return $_response_object;
}

#
# c_urvefinanceethereum_financials_daily_snapshots__current
#
# FinancialsDailySnapshots (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'c_urvefinanceethereum_financials_daily_snapshots__current' } = {
        summary => 'FinancialsDailySnapshots (current)',
        params => $params,
        returns => 'ARRAY[CURVEFINANCEETHEREUMFinancialsDailySnapshotDTO]',
        };
}
# @return ARRAY[CURVEFINANCEETHEREUMFinancialsDailySnapshotDTO]
#
sub c_urvefinanceethereum_financials_daily_snapshots__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/curve-finance-ethereum/financialsDailySnapshots/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CURVEFINANCEETHEREUMFinancialsDailySnapshotDTO]', $response);
    return $_response_object;
}

#
# c_urvefinanceethereum_liquidity_gauges__current
#
# LiquidityGauges (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'c_urvefinanceethereum_liquidity_gauges__current' } = {
        summary => 'LiquidityGauges (current)',
        params => $params,
        returns => 'ARRAY[CURVEFINANCEETHEREUMLiquidityGaugeDTO]',
        };
}
# @return ARRAY[CURVEFINANCEETHEREUMLiquidityGaugeDTO]
#
sub c_urvefinanceethereum_liquidity_gauges__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/curve-finance-ethereum/liquidityGauges/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CURVEFINANCEETHEREUMLiquidityGaugeDTO]', $response);
    return $_response_object;
}

#
# c_urvefinanceethereum_liquidity_pool_daily_snapshots__current
#
# LiquidityPoolDailySnapshots (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'c_urvefinanceethereum_liquidity_pool_daily_snapshots__current' } = {
        summary => 'LiquidityPoolDailySnapshots (current)',
        params => $params,
        returns => 'ARRAY[CURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTO]',
        };
}
# @return ARRAY[CURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTO]
#
sub c_urvefinanceethereum_liquidity_pool_daily_snapshots__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/curve-finance-ethereum/liquidityPoolDailySnapshots/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTO]', $response);
    return $_response_object;
}

#
# c_urvefinanceethereum_liquidity_pool_fees__current
#
# LiquidityPoolFees (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'c_urvefinanceethereum_liquidity_pool_fees__current' } = {
        summary => 'LiquidityPoolFees (current)',
        params => $params,
        returns => 'ARRAY[CURVEFINANCEETHEREUMLiquidityPoolFeeDTO]',
        };
}
# @return ARRAY[CURVEFINANCEETHEREUMLiquidityPoolFeeDTO]
#
sub c_urvefinanceethereum_liquidity_pool_fees__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/curve-finance-ethereum/liquidityPoolFees/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CURVEFINANCEETHEREUMLiquidityPoolFeeDTO]', $response);
    return $_response_object;
}

#
# c_urvefinanceethereum_liquidity_pool_hourly_snapshots__current
#
# LiquidityPoolHourlySnapshots (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'c_urvefinanceethereum_liquidity_pool_hourly_snapshots__current' } = {
        summary => 'LiquidityPoolHourlySnapshots (current)',
        params => $params,
        returns => 'ARRAY[CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO]',
        };
}
# @return ARRAY[CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO]
#
sub c_urvefinanceethereum_liquidity_pool_hourly_snapshots__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/curve-finance-ethereum/liquidityPoolHourlySnapshots/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO]', $response);
    return $_response_object;
}

#
# c_urvefinanceethereum_liquidity_pools__current
#
# LiquidityPools (current)
#
# @param string $id Smart contract address of the pool (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Smart contract address of the pool',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'c_urvefinanceethereum_liquidity_pools__current' } = {
        summary => 'LiquidityPools (current)',
        params => $params,
        returns => 'ARRAY[CURVEFINANCEETHEREUMLiquidityPoolDTO]',
        };
}
# @return ARRAY[CURVEFINANCEETHEREUMLiquidityPoolDTO]
#
sub c_urvefinanceethereum_liquidity_pools__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/curve-finance-ethereum/liquidityPools/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CURVEFINANCEETHEREUMLiquidityPoolDTO]', $response);
    return $_response_object;
}

#
# c_urvefinanceethereum_lp_tokens__current
#
# LpTokens (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'c_urvefinanceethereum_lp_tokens__current' } = {
        summary => 'LpTokens (current)',
        params => $params,
        returns => 'ARRAY[CURVEFINANCEETHEREUMLpTokenDTO]',
        };
}
# @return ARRAY[CURVEFINANCEETHEREUMLpTokenDTO]
#
sub c_urvefinanceethereum_lp_tokens__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/curve-finance-ethereum/lpTokens/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CURVEFINANCEETHEREUMLpTokenDTO]', $response);
    return $_response_object;
}

#
# c_urvefinanceethereum_reward_tokens__current
#
# RewardTokens (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'c_urvefinanceethereum_reward_tokens__current' } = {
        summary => 'RewardTokens (current)',
        params => $params,
        returns => 'ARRAY[CURVEFINANCEETHEREUMRewardTokenDTO]',
        };
}
# @return ARRAY[CURVEFINANCEETHEREUMRewardTokenDTO]
#
sub c_urvefinanceethereum_reward_tokens__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/curve-finance-ethereum/rewardTokens/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CURVEFINANCEETHEREUMRewardTokenDTO]', $response);
    return $_response_object;
}

#
# c_urvefinanceethereum_swaps__current
#
# Swaps (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'c_urvefinanceethereum_swaps__current' } = {
        summary => 'Swaps (current)',
        params => $params,
        returns => 'ARRAY[CURVEFINANCEETHEREUMSwapDTO]',
        };
}
# @return ARRAY[CURVEFINANCEETHEREUMSwapDTO]
#
sub c_urvefinanceethereum_swaps__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/curve-finance-ethereum/swaps/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CURVEFINANCEETHEREUMSwapDTO]', $response);
    return $_response_object;
}

#
# c_urvefinanceethereum_tokens__current
#
# Tokens (current)
#
# @param string $id Smart contract address of the token (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Smart contract address of the token',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'c_urvefinanceethereum_tokens__current' } = {
        summary => 'Tokens (current)',
        params => $params,
        returns => 'ARRAY[CURVEFINANCEETHEREUMTokenDTO]',
        };
}
# @return ARRAY[CURVEFINANCEETHEREUMTokenDTO]
#
sub c_urvefinanceethereum_tokens__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/curve-finance-ethereum/tokens/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CURVEFINANCEETHEREUMTokenDTO]', $response);
    return $_response_object;
}

#
# c_urvefinanceethereum_usage_metrics_daily_snapshots__current
#
# UsageMetricsDailySnapshots (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'c_urvefinanceethereum_usage_metrics_daily_snapshots__current' } = {
        summary => 'UsageMetricsDailySnapshots (current)',
        params => $params,
        returns => 'ARRAY[CURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTO]',
        };
}
# @return ARRAY[CURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTO]
#
sub c_urvefinanceethereum_usage_metrics_daily_snapshots__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/curve-finance-ethereum/usageMetricsDailySnapshots/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTO]', $response);
    return $_response_object;
}

#
# c_urvefinanceethereum_usage_metrics_hourly_snapshots__current
#
# UsageMetricsHourlySnapshots (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'c_urvefinanceethereum_usage_metrics_hourly_snapshots__current' } = {
        summary => 'UsageMetricsHourlySnapshots (current)',
        params => $params,
        returns => 'ARRAY[CURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTO]',
        };
}
# @return ARRAY[CURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTO]
#
sub c_urvefinanceethereum_usage_metrics_hourly_snapshots__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/curve-finance-ethereum/usageMetricsHourlySnapshots/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTO]', $response);
    return $_response_object;
}

#
# c_urvefinanceethereum_withdraws__current
#
# Withdraws (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'c_urvefinanceethereum_withdraws__current' } = {
        summary => 'Withdraws (current)',
        params => $params,
        returns => 'ARRAY[CURVEFINANCEETHEREUMWithdrawDTO]',
        };
}
# @return ARRAY[CURVEFINANCEETHEREUMWithdrawDTO]
#
sub c_urvefinanceethereum_withdraws__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/curve-finance-ethereum/withdraws/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CURVEFINANCEETHEREUMWithdrawDTO]', $response);
    return $_response_object;
}

1;
