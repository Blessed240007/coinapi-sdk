=begin comment

On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

The version of the OpenAPI document: v1
Contact: support@coinapi.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::Object::UNISWAPV2ETHEREUMLiquidityPoolDTO;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;


use base ("Class::Accessor", "Class::Data::Inheritable");

#
#Pool-level metadata.
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

The version of the OpenAPI document: v1
Contact: support@coinapi.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {});
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new {
    my ($class, %args) = @_;

    my $self = bless {}, $class;

    $self->init(%args);

    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON {
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            my $_json_attribute = $self->attribute_map->{$_key};
            my $_type = $self->openapi_types->{$_key};
            my $_value = $self->{$_key};
            if ($_type =~ /^array\[(.+)\]$/i) { # array
                my $_subclass = $1;
                $_data->{$_json_attribute} =  [ map { $self->_to_json_primitives($_subclass, $_) } @$_value ];
            } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
                my $_subclass = $1;
                my %_hash = ();
                while (my($_key, $_element) = each %{$_value}) {
                    $_hash{$_key} = $self->_to_json_primitives($_subclass, $_element);
                }
                $_data->{$_json_attribute} = \%_hash;
            } elsif ( grep( /^$_type$/, ('int', 'double', 'string', 'boolean', 'DATE', 'DATE_TIME'))) {
                $_data->{$_json_attribute} = $self->_to_json_primitives($_type, $_value);
            } else {
                $_data->{$_json_attribute} = $_value;
            }
        }
    }

    return $_data;
}

# to_json non-array data
sub _to_json_primitives {
    my ($self, $type, $data) = @_;
    if ( grep( /^$type$/, ('int', 'double'))) {
        # https://metacpan.org/pod/JSON#simple-scalars
        # numify it, ensuring it will be dumped as a number
        return undef unless defined $data;
        return $data + 0;
    } elsif ($type eq 'string') {
        # https://metacpan.org/pod/JSON#simple-scalars
        # stringified
        return undef unless defined $data;
        return $data . q();
    } elsif ($type eq 'boolean') {
        # https://metacpan.org/pod/JSON#JSON::true,-JSON::false,-JSON::null
        return $data ? \1 : \0;
    } elsif ($type eq 'DATE') {
        return undef unless defined $data;
        if (ref($data) eq 'DateTime') {
            # https://metacpan.org/pod/DateTime#$dt-%3Eymd($optional_separator),-$dt-%3Emdy(...),-$dt-%3Edmy(...)
            return $data->ymd;
        }
        return $data .q();
    } elsif ($type eq 'DATE_TIME') {
        return undef unless defined $data;
        # the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
        if (ref($data) eq 'DateTime') {
            # https://metacpan.org/pod/DateTime#$dt-%3Erfc3339
            return $data->rfc3339;
        }
        return $data .q();
    } else { # hash (model),  In this case, the TO_JSON of the $data object is executed
        return $data;
    }
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key};
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }

    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if (grep( /^$type$/ , ('DATE_TIME', 'DATE'))) {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double'))) {
        return undef unless defined $data;
        return $data + 0;
    } elsif ($type eq 'string') {
        return undef unless defined $data;
        return $data . q();
    } elsif ($type eq 'boolean') {
        return !!$data;
    } else { # hash(model)
        my $_instance = eval "WWW::OpenAPIClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}


__PACKAGE__->class_documentation({description => 'Pool-level metadata.',
                                  class => 'UNISWAPV2ETHEREUMLiquidityPoolDTO',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'entry_time' => {
        datatype => 'DATE_TIME',
        base_name => 'entry_time',
        description => '',
        format => '',
        read_only => '',
            },
    'recv_time' => {
        datatype => 'DATE_TIME',
        base_name => 'recv_time',
        description => '',
        format => '',
        read_only => '',
            },
    'block_number' => {
        datatype => 'int',
        base_name => 'block_number',
        description => 'Number of block in which entity was recorded.',
        format => '',
        read_only => '',
            },
    'vid' => {
        datatype => 'int',
        base_name => 'vid',
        description => '.',
        format => '',
        read_only => '',
            },
    'id' => {
        datatype => 'string',
        base_name => 'id',
        description => 'Smart contract address of the pool',
        format => '',
        read_only => '',
            },
    'protocol' => {
        datatype => 'string',
        base_name => 'protocol',
        description => 'The protocol this pool belongs to',
        format => '',
        read_only => '',
            },
    'name' => {
        datatype => 'string',
        base_name => 'name',
        description => 'Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT)',
        format => '',
        read_only => '',
            },
    'symbol' => {
        datatype => 'string',
        base_name => 'symbol',
        description => 'Symbol of liquidity pool (e.g. 3CRV)',
        format => '',
        read_only => '',
            },
    'input_tokens' => {
        datatype => 'ARRAY[string]',
        base_name => 'input_tokens',
        description => 'Tokens that need to be deposited to take a position in the protocol',
        format => '',
        read_only => '',
            },
    'output_token' => {
        datatype => 'string',
        base_name => 'output_token',
        description => 'Token that is minted to track ownership of position in protocol',
        format => '',
        read_only => '',
            },
    'reward_tokens' => {
        datatype => 'ARRAY[string]',
        base_name => 'reward_tokens',
        description => 'Aditional tokens that are given as reward for position in a protocol',
        format => '',
        read_only => '',
            },
    'fees' => {
        datatype => 'ARRAY[string]',
        base_name => 'fees',
        description => 'Fees per trade incurred to the user',
        format => '',
        read_only => '',
            },
    'is_single_sided' => {
        datatype => 'boolean',
        base_name => 'is_single_sided',
        description => 'Whether this pool is single-sided',
        format => '',
        read_only => '',
            },
    'created_timestamp' => {
        datatype => 'string',
        base_name => 'created_timestamp',
        description => 'Creation timestamp',
        format => '',
        read_only => '',
            },
    'created_block_number' => {
        datatype => 'string',
        base_name => 'created_block_number',
        description => 'Creation block number',
        format => '',
        read_only => '',
            },
    'total_value_locked_usd' => {
        datatype => 'string',
        base_name => 'total_value_locked_usd',
        description => 'Current TVL (Total Value Locked) of this pool in USD',
        format => '',
        read_only => '',
            },
    'cumulative_supply_side_revenue_usd' => {
        datatype => 'string',
        base_name => 'cumulative_supply_side_revenue_usd',
        description => 'All revenue generated by the liquidity pool, accrued to the supply side',
        format => '',
        read_only => '',
            },
    'cumulative_protocol_side_revenue_usd' => {
        datatype => 'string',
        base_name => 'cumulative_protocol_side_revenue_usd',
        description => 'All revenue generated by the liquidity pool, accrued to the protocol',
        format => '',
        read_only => '',
            },
    'cumulative_total_revenue_usd' => {
        datatype => 'string',
        base_name => 'cumulative_total_revenue_usd',
        description => 'All revenue generated by the liquidity pool',
        format => '',
        read_only => '',
            },
    'cumulative_volume_usd' => {
        datatype => 'string',
        base_name => 'cumulative_volume_usd',
        description => 'All historical trade volume occurred in this pool, in USD',
        format => '',
        read_only => '',
            },
    'input_token_balances' => {
        datatype => 'ARRAY[string]',
        base_name => 'input_token_balances',
        description => 'Amount of input tokens in the pool',
        format => '',
        read_only => '',
            },
    'input_token_weights' => {
        datatype => 'ARRAY[string]',
        base_name => 'input_token_weights',
        description => 'Weights of input tokens in the liquidity pool in percentage values',
        format => '',
        read_only => '',
            },
    'output_token_supply' => {
        datatype => 'string',
        base_name => 'output_token_supply',
        description => 'Total supply of output token',
        format => '',
        read_only => '',
            },
    'output_token_price_usd' => {
        datatype => 'string',
        base_name => 'output_token_price_usd',
        description => 'Price per share of output token in USD',
        format => '',
        read_only => '',
            },
    'staked_output_token_amount' => {
        datatype => 'string',
        base_name => 'staked_output_token_amount',
        description => 'Total supply of output tokens that are staked',
        format => '',
        read_only => '',
            },
    'reward_token_emissions_amount' => {
        datatype => 'ARRAY[string]',
        base_name => 'reward_token_emissions_amount',
        description => 'Per-block reward token emission as of the current block normalized to a day, in token&#39;s native amount',
        format => '',
        read_only => '',
            },
    'reward_token_emissions_usd' => {
        datatype => 'ARRAY[string]',
        base_name => 'reward_token_emissions_usd',
        description => 'Per-block reward token emission as of the current block normalized to a day, in USD value',
        format => '',
        read_only => '',
            },
    'evaluated_ask' => {
        datatype => 'double',
        base_name => 'evaluated_ask',
        description => 'Evaluated ask value of the liquidity pool.',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'entry_time' => 'DATE_TIME',
    'recv_time' => 'DATE_TIME',
    'block_number' => 'int',
    'vid' => 'int',
    'id' => 'string',
    'protocol' => 'string',
    'name' => 'string',
    'symbol' => 'string',
    'input_tokens' => 'ARRAY[string]',
    'output_token' => 'string',
    'reward_tokens' => 'ARRAY[string]',
    'fees' => 'ARRAY[string]',
    'is_single_sided' => 'boolean',
    'created_timestamp' => 'string',
    'created_block_number' => 'string',
    'total_value_locked_usd' => 'string',
    'cumulative_supply_side_revenue_usd' => 'string',
    'cumulative_protocol_side_revenue_usd' => 'string',
    'cumulative_total_revenue_usd' => 'string',
    'cumulative_volume_usd' => 'string',
    'input_token_balances' => 'ARRAY[string]',
    'input_token_weights' => 'ARRAY[string]',
    'output_token_supply' => 'string',
    'output_token_price_usd' => 'string',
    'staked_output_token_amount' => 'string',
    'reward_token_emissions_amount' => 'ARRAY[string]',
    'reward_token_emissions_usd' => 'ARRAY[string]',
    'evaluated_ask' => 'double'
} );

__PACKAGE__->attribute_map( {
    'entry_time' => 'entry_time',
    'recv_time' => 'recv_time',
    'block_number' => 'block_number',
    'vid' => 'vid',
    'id' => 'id',
    'protocol' => 'protocol',
    'name' => 'name',
    'symbol' => 'symbol',
    'input_tokens' => 'input_tokens',
    'output_token' => 'output_token',
    'reward_tokens' => 'reward_tokens',
    'fees' => 'fees',
    'is_single_sided' => 'is_single_sided',
    'created_timestamp' => 'created_timestamp',
    'created_block_number' => 'created_block_number',
    'total_value_locked_usd' => 'total_value_locked_usd',
    'cumulative_supply_side_revenue_usd' => 'cumulative_supply_side_revenue_usd',
    'cumulative_protocol_side_revenue_usd' => 'cumulative_protocol_side_revenue_usd',
    'cumulative_total_revenue_usd' => 'cumulative_total_revenue_usd',
    'cumulative_volume_usd' => 'cumulative_volume_usd',
    'input_token_balances' => 'input_token_balances',
    'input_token_weights' => 'input_token_weights',
    'output_token_supply' => 'output_token_supply',
    'output_token_price_usd' => 'output_token_price_usd',
    'staked_output_token_amount' => 'staked_output_token_amount',
    'reward_token_emissions_amount' => 'reward_token_emissions_amount',
    'reward_token_emissions_usd' => 'reward_token_emissions_usd',
    'evaluated_ask' => 'evaluated_ask'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
