=begin comment

On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

The version of the OpenAPI document: v1
Contact: support@coinapi.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::UNISWAPV3ETHEREUMApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# u_niswapv3_ethereum_accounts__current
#
# Accounts (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'u_niswapv3_ethereum_accounts__current' } = {
        summary => 'Accounts (current)',
        params => $params,
        returns => 'ARRAY[UNISWAPV3ETHEREUMAccountDTO]',
        };
}
# @return ARRAY[UNISWAPV3ETHEREUMAccountDTO]
#
sub u_niswapv3_ethereum_accounts__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/uniswap-v3-ethereum/accounts/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UNISWAPV3ETHEREUMAccountDTO]', $response);
    return $_response_object;
}

#
# u_niswapv3_ethereum_active_accounts__current
#
# ActiveAccounts (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'u_niswapv3_ethereum_active_accounts__current' } = {
        summary => 'ActiveAccounts (current)',
        params => $params,
        returns => 'ARRAY[UNISWAPV3ETHEREUMActiveAccountDTO]',
        };
}
# @return ARRAY[UNISWAPV3ETHEREUMActiveAccountDTO]
#
sub u_niswapv3_ethereum_active_accounts__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/uniswap-v3-ethereum/activeAccounts/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UNISWAPV3ETHEREUMActiveAccountDTO]', $response);
    return $_response_object;
}

#
# u_niswapv3_ethereum_deposits__current
#
# Deposits (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'u_niswapv3_ethereum_deposits__current' } = {
        summary => 'Deposits (current)',
        params => $params,
        returns => 'ARRAY[UNISWAPV3ETHEREUMDepositDTO]',
        };
}
# @return ARRAY[UNISWAPV3ETHEREUMDepositDTO]
#
sub u_niswapv3_ethereum_deposits__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/uniswap-v3-ethereum/deposits/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UNISWAPV3ETHEREUMDepositDTO]', $response);
    return $_response_object;
}

#
# u_niswapv3_ethereum_dex_amm_protocols__current
#
# DexAmmProtocols (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'u_niswapv3_ethereum_dex_amm_protocols__current' } = {
        summary => 'DexAmmProtocols (current)',
        params => $params,
        returns => 'ARRAY[UNISWAPV3ETHEREUMDexAmmProtocolDTO]',
        };
}
# @return ARRAY[UNISWAPV3ETHEREUMDexAmmProtocolDTO]
#
sub u_niswapv3_ethereum_dex_amm_protocols__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/uniswap-v3-ethereum/dexAmmProtocols/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UNISWAPV3ETHEREUMDexAmmProtocolDTO]', $response);
    return $_response_object;
}

#
# u_niswapv3_ethereum_financials_daily_snapshots__current
#
# FinancialsDailySnapshots (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'u_niswapv3_ethereum_financials_daily_snapshots__current' } = {
        summary => 'FinancialsDailySnapshots (current)',
        params => $params,
        returns => 'ARRAY[UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO]',
        };
}
# @return ARRAY[UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO]
#
sub u_niswapv3_ethereum_financials_daily_snapshots__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/uniswap-v3-ethereum/financialsDailySnapshots/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO]', $response);
    return $_response_object;
}

#
# u_niswapv3_ethereum_liquidity_pool_amounts__current
#
# LiquidityPoolAmounts (current)
#
# @param string $id Smart contract address of the pool. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Smart contract address of the pool.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'u_niswapv3_ethereum_liquidity_pool_amounts__current' } = {
        summary => 'LiquidityPoolAmounts (current)',
        params => $params,
        returns => 'ARRAY[UNISWAPV3ETHEREUMLiquidityPoolAmountDTO]',
        };
}
# @return ARRAY[UNISWAPV3ETHEREUMLiquidityPoolAmountDTO]
#
sub u_niswapv3_ethereum_liquidity_pool_amounts__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/uniswap-v3-ethereum/liquidityPoolAmounts/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UNISWAPV3ETHEREUMLiquidityPoolAmountDTO]', $response);
    return $_response_object;
}

#
# u_niswapv3_ethereum_liquidity_pool_daily_snapshots__current
#
# LiquidityPoolDailySnapshots (current)
#
# @param string $pool Pool this snapshot belongs to. (optional)
{
    my $params = {
    'pool' => {
        data_type => 'string',
        description => 'Pool this snapshot belongs to.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'u_niswapv3_ethereum_liquidity_pool_daily_snapshots__current' } = {
        summary => 'LiquidityPoolDailySnapshots (current)',
        params => $params,
        returns => 'ARRAY[UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO]',
        };
}
# @return ARRAY[UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO]
#
sub u_niswapv3_ethereum_liquidity_pool_daily_snapshots__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/uniswap-v3-ethereum/liquidityPoolDailySnapshots/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'pool'}) {
        $query_params->{'pool'} = $self->{api_client}->to_query_value($args{'pool'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO]', $response);
    return $_response_object;
}

#
# u_niswapv3_ethereum_liquidity_pool_fees__current
#
# LiquidityPoolFees (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'u_niswapv3_ethereum_liquidity_pool_fees__current' } = {
        summary => 'LiquidityPoolFees (current)',
        params => $params,
        returns => 'ARRAY[UNISWAPV3ETHEREUMLiquidityPoolFeeDTO]',
        };
}
# @return ARRAY[UNISWAPV3ETHEREUMLiquidityPoolFeeDTO]
#
sub u_niswapv3_ethereum_liquidity_pool_fees__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/uniswap-v3-ethereum/liquidityPoolFees/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UNISWAPV3ETHEREUMLiquidityPoolFeeDTO]', $response);
    return $_response_object;
}

#
# u_niswapv3_ethereum_liquidity_pool_hourly_snapshots__current
#
# LiquidityPoolHourlySnapshots (current)
#
# @param string $pool The pool this snapshot belongs to (optional)
{
    my $params = {
    'pool' => {
        data_type => 'string',
        description => 'The pool this snapshot belongs to',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'u_niswapv3_ethereum_liquidity_pool_hourly_snapshots__current' } = {
        summary => 'LiquidityPoolHourlySnapshots (current)',
        params => $params,
        returns => 'ARRAY[UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO]',
        };
}
# @return ARRAY[UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO]
#
sub u_niswapv3_ethereum_liquidity_pool_hourly_snapshots__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/uniswap-v3-ethereum/liquidityPoolHourlySnapshots/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'pool'}) {
        $query_params->{'pool'} = $self->{api_client}->to_query_value($args{'pool'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO]', $response);
    return $_response_object;
}

#
# u_niswapv3_ethereum_liquidity_pools__current
#
# LiquidityPools (current)
#
# @param string $id Smart contract address of the pool. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Smart contract address of the pool.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'u_niswapv3_ethereum_liquidity_pools__current' } = {
        summary => 'LiquidityPools (current)',
        params => $params,
        returns => 'ARRAY[UNISWAPV3ETHEREUMLiquidityPoolDTO]',
        };
}
# @return ARRAY[UNISWAPV3ETHEREUMLiquidityPoolDTO]
#
sub u_niswapv3_ethereum_liquidity_pools__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/uniswap-v3-ethereum/liquidityPools/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UNISWAPV3ETHEREUMLiquidityPoolDTO]', $response);
    return $_response_object;
}

#
# u_niswapv3_ethereum_position_snapshots__current
#
# PositionSnapshots (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'u_niswapv3_ethereum_position_snapshots__current' } = {
        summary => 'PositionSnapshots (current)',
        params => $params,
        returns => 'ARRAY[UNISWAPV3ETHEREUMPositionSnapshotDTO]',
        };
}
# @return ARRAY[UNISWAPV3ETHEREUMPositionSnapshotDTO]
#
sub u_niswapv3_ethereum_position_snapshots__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/uniswap-v3-ethereum/positionSnapshots/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UNISWAPV3ETHEREUMPositionSnapshotDTO]', $response);
    return $_response_object;
}

#
# u_niswapv3_ethereum_positions__current
#
# Positions (current)
#
# @param string $pool The liquidity pool in which this position was opened (optional)
{
    my $params = {
    'pool' => {
        data_type => 'string',
        description => 'The liquidity pool in which this position was opened',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'u_niswapv3_ethereum_positions__current' } = {
        summary => 'Positions (current)',
        params => $params,
        returns => 'ARRAY[UNISWAPV3ETHEREUMPositionDTO]',
        };
}
# @return ARRAY[UNISWAPV3ETHEREUMPositionDTO]
#
sub u_niswapv3_ethereum_positions__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/uniswap-v3-ethereum/positions/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'pool'}) {
        $query_params->{'pool'} = $self->{api_client}->to_query_value($args{'pool'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UNISWAPV3ETHEREUMPositionDTO]', $response);
    return $_response_object;
}

#
# u_niswapv3_ethereum_reward_tokens__current
#
# RewardTokens (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'u_niswapv3_ethereum_reward_tokens__current' } = {
        summary => 'RewardTokens (current)',
        params => $params,
        returns => 'ARRAY[UNISWAPV3ETHEREUMRewardTokenDTO]',
        };
}
# @return ARRAY[UNISWAPV3ETHEREUMRewardTokenDTO]
#
sub u_niswapv3_ethereum_reward_tokens__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/uniswap-v3-ethereum/rewardTokens/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UNISWAPV3ETHEREUMRewardTokenDTO]', $response);
    return $_response_object;
}

#
# u_niswapv3_ethereum_swaps__current
#
# Swaps (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'u_niswapv3_ethereum_swaps__current' } = {
        summary => 'Swaps (current)',
        params => $params,
        returns => 'ARRAY[UNISWAPV3ETHEREUMSwapDTO]',
        };
}
# @return ARRAY[UNISWAPV3ETHEREUMSwapDTO]
#
sub u_niswapv3_ethereum_swaps__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/uniswap-v3-ethereum/swaps/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UNISWAPV3ETHEREUMSwapDTO]', $response);
    return $_response_object;
}

#
# u_niswapv3_ethereum_tick_daily_snapshots__current
#
# TickDailySnapshots (current)
#
# @param string $pool liquidity pool this tick belongs to (optional)
{
    my $params = {
    'pool' => {
        data_type => 'string',
        description => 'liquidity pool this tick belongs to',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'u_niswapv3_ethereum_tick_daily_snapshots__current' } = {
        summary => 'TickDailySnapshots (current)',
        params => $params,
        returns => 'ARRAY[UNISWAPV3ETHEREUMTickDailySnapshotDTO]',
        };
}
# @return ARRAY[UNISWAPV3ETHEREUMTickDailySnapshotDTO]
#
sub u_niswapv3_ethereum_tick_daily_snapshots__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/uniswap-v3-ethereum/tickDailySnapshots/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'pool'}) {
        $query_params->{'pool'} = $self->{api_client}->to_query_value($args{'pool'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UNISWAPV3ETHEREUMTickDailySnapshotDTO]', $response);
    return $_response_object;
}

#
# u_niswapv3_ethereum_tick_hourly_snapshots__current
#
# TickHourlySnapshots (current)
#
# @param string $pool liquidity pool this tick belongs to (optional)
{
    my $params = {
    'pool' => {
        data_type => 'string',
        description => 'liquidity pool this tick belongs to',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'u_niswapv3_ethereum_tick_hourly_snapshots__current' } = {
        summary => 'TickHourlySnapshots (current)',
        params => $params,
        returns => 'ARRAY[UNISWAPV3ETHEREUMTickHourlySnapshotDTO]',
        };
}
# @return ARRAY[UNISWAPV3ETHEREUMTickHourlySnapshotDTO]
#
sub u_niswapv3_ethereum_tick_hourly_snapshots__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/uniswap-v3-ethereum/tickHourlySnapshots/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'pool'}) {
        $query_params->{'pool'} = $self->{api_client}->to_query_value($args{'pool'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UNISWAPV3ETHEREUMTickHourlySnapshotDTO]', $response);
    return $_response_object;
}

#
# u_niswapv3_ethereum_ticks__current
#
# Ticks (current)
#
# @param string $pool Liquidity pool this tick belongs to (optional)
{
    my $params = {
    'pool' => {
        data_type => 'string',
        description => 'Liquidity pool this tick belongs to',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'u_niswapv3_ethereum_ticks__current' } = {
        summary => 'Ticks (current)',
        params => $params,
        returns => 'ARRAY[UNISWAPV3ETHEREUMTickDTO]',
        };
}
# @return ARRAY[UNISWAPV3ETHEREUMTickDTO]
#
sub u_niswapv3_ethereum_ticks__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/uniswap-v3-ethereum/ticks/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'pool'}) {
        $query_params->{'pool'} = $self->{api_client}->to_query_value($args{'pool'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UNISWAPV3ETHEREUMTickDTO]', $response);
    return $_response_object;
}

#
# u_niswapv3_ethereum_token_white_list_symbols__current
#
# TokenWhiteListSymbols (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'u_niswapv3_ethereum_token_white_list_symbols__current' } = {
        summary => 'TokenWhiteListSymbols (current)',
        params => $params,
        returns => 'ARRAY[UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO]',
        };
}
# @return ARRAY[UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO]
#
sub u_niswapv3_ethereum_token_white_list_symbols__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/uniswap-v3-ethereum/tokenWhiteListSymbols/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO]', $response);
    return $_response_object;
}

#
# u_niswapv3_ethereum_token_white_lists__current
#
# TokenWhiteLists (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'u_niswapv3_ethereum_token_white_lists__current' } = {
        summary => 'TokenWhiteLists (current)',
        params => $params,
        returns => 'ARRAY[UNISWAPV3ETHEREUMTokenWhiteListDTO]',
        };
}
# @return ARRAY[UNISWAPV3ETHEREUMTokenWhiteListDTO]
#
sub u_niswapv3_ethereum_token_white_lists__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/uniswap-v3-ethereum/tokenWhiteLists/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UNISWAPV3ETHEREUMTokenWhiteListDTO]', $response);
    return $_response_object;
}

#
# u_niswapv3_ethereum_tokens__current
#
# Tokens (current)
#
# @param string $id Smart contract address of the token. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Smart contract address of the token.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'u_niswapv3_ethereum_tokens__current' } = {
        summary => 'Tokens (current)',
        params => $params,
        returns => 'ARRAY[UNISWAPV3ETHEREUMTokenDTO]',
        };
}
# @return ARRAY[UNISWAPV3ETHEREUMTokenDTO]
#
sub u_niswapv3_ethereum_tokens__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/uniswap-v3-ethereum/tokens/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UNISWAPV3ETHEREUMTokenDTO]', $response);
    return $_response_object;
}

#
# u_niswapv3_ethereum_usage_metrics_daily_snapshots__current
#
# UsageMetricsDailySnapshots (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'u_niswapv3_ethereum_usage_metrics_daily_snapshots__current' } = {
        summary => 'UsageMetricsDailySnapshots (current)',
        params => $params,
        returns => 'ARRAY[UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO]',
        };
}
# @return ARRAY[UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO]
#
sub u_niswapv3_ethereum_usage_metrics_daily_snapshots__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/uniswap-v3-ethereum/usageMetricsDailySnapshots/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO]', $response);
    return $_response_object;
}

#
# u_niswapv3_ethereum_usage_metrics_hourly_snapshots__current
#
# UsageMetricsHourlySnapshots (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'u_niswapv3_ethereum_usage_metrics_hourly_snapshots__current' } = {
        summary => 'UsageMetricsHourlySnapshots (current)',
        params => $params,
        returns => 'ARRAY[UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO]',
        };
}
# @return ARRAY[UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO]
#
sub u_niswapv3_ethereum_usage_metrics_hourly_snapshots__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/uniswap-v3-ethereum/usageMetricsHourlySnapshots/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO]', $response);
    return $_response_object;
}

#
# u_niswapv3_ethereum_withdraws__current
#
# Withdraws (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'u_niswapv3_ethereum_withdraws__current' } = {
        summary => 'Withdraws (current)',
        params => $params,
        returns => 'ARRAY[UNISWAPV3ETHEREUMWithdrawDTO]',
        };
}
# @return ARRAY[UNISWAPV3ETHEREUMWithdrawDTO]
#
sub u_niswapv3_ethereum_withdraws__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/v1/dapps/uniswap-v3-ethereum/withdraws/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json', 'application/x-msgpack');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[UNISWAPV3ETHEREUMWithdrawDTO]', $response);
    return $_response_object;
}

1;
