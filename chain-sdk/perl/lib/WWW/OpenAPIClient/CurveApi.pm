=begin comment

On Chain Dapps - REST API

 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

The version of the OpenAPI document: v1
Contact: support@coinapi.io
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::CurveApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# curve_accounts__current
#
# Accounts (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_accounts__current' } = {
        summary => 'Accounts (current)',
        params => $params,
        returns => 'ARRAY[CurveAccountDTO]',
        };
}
# @return ARRAY[CurveAccountDTO]
#
sub curve_accounts__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/accounts/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveAccountDTO]', $response);
    return $_response_object;
}

#
# curve_add_liquidity_events__current
#
# AddLiquidityEvents (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_add_liquidity_events__current' } = {
        summary => 'AddLiquidityEvents (current)',
        params => $params,
        returns => 'ARRAY[CurveAddLiquidityEventDTO]',
        };
}
# @return ARRAY[CurveAddLiquidityEventDTO]
#
sub curve_add_liquidity_events__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/addLiquidityEvents/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveAddLiquidityEventDTO]', $response);
    return $_response_object;
}

#
# curve_admin_fee_change_logs__current
#
# AdminFeeChangeLogs (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_admin_fee_change_logs__current' } = {
        summary => 'AdminFeeChangeLogs (current)',
        params => $params,
        returns => 'ARRAY[CurveAdminFeeChangeLogDTO]',
        };
}
# @return ARRAY[CurveAdminFeeChangeLogDTO]
#
sub curve_admin_fee_change_logs__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/adminFeeChangeLogs/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveAdminFeeChangeLogDTO]', $response);
    return $_response_object;
}

#
# curve_amplification_coeff_change_logs__current
#
# AmplificationCoeffChangeLogs (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_amplification_coeff_change_logs__current' } = {
        summary => 'AmplificationCoeffChangeLogs (current)',
        params => $params,
        returns => 'ARRAY[CurveAmplificationCoeffChangeLogDTO]',
        };
}
# @return ARRAY[CurveAmplificationCoeffChangeLogDTO]
#
sub curve_amplification_coeff_change_logs__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/amplificationCoeffChangeLogs/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveAmplificationCoeffChangeLogDTO]', $response);
    return $_response_object;
}

#
# curve_coins__current
#
# Coins (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_coins__current' } = {
        summary => 'Coins (current)',
        params => $params,
        returns => 'ARRAY[CurveCoinDTO]',
        };
}
# @return ARRAY[CurveCoinDTO]
#
sub curve_coins__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/coins/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveCoinDTO]', $response);
    return $_response_object;
}

#
# curve_contract_versions__current
#
# ContractVersions (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_contract_versions__current' } = {
        summary => 'ContractVersions (current)',
        params => $params,
        returns => 'ARRAY[CurveContractVersionDTO]',
        };
}
# @return ARRAY[CurveContractVersionDTO]
#
sub curve_contract_versions__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/contractVersions/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveContractVersionDTO]', $response);
    return $_response_object;
}

#
# curve_contracts__current
#
# Contracts (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_contracts__current' } = {
        summary => 'Contracts (current)',
        params => $params,
        returns => 'ARRAY[CurveContractDTO]',
        };
}
# @return ARRAY[CurveContractDTO]
#
sub curve_contracts__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/contracts/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveContractDTO]', $response);
    return $_response_object;
}

#
# curve_daily_volumes__current
#
# DailyVolumes (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_daily_volumes__current' } = {
        summary => 'DailyVolumes (current)',
        params => $params,
        returns => 'ARRAY[CurveDailyVolumeDTO]',
        };
}
# @return ARRAY[CurveDailyVolumeDTO]
#
sub curve_daily_volumes__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/dailyVolumes/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveDailyVolumeDTO]', $response);
    return $_response_object;
}

#
# curve_exchanges__current
#
# Exchanges (current)
#
# @param string $pool  (optional)
{
    my $params = {
    'pool' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'curve_exchanges__current' } = {
        summary => 'Exchanges (current)',
        params => $params,
        returns => 'ARRAY[CurveExchangeDTO]',
        };
}
# @return ARRAY[CurveExchangeDTO]
#
sub curve_exchanges__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/exchanges/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'pool'}) {
        $query_params->{'pool'} = $self->{api_client}->to_query_value($args{'pool'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveExchangeDTO]', $response);
    return $_response_object;
}

#
# curve_fee_change_logs__current
#
# FeeChangeLogs (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_fee_change_logs__current' } = {
        summary => 'FeeChangeLogs (current)',
        params => $params,
        returns => 'ARRAY[CurveFeeChangeLogDTO]',
        };
}
# @return ARRAY[CurveFeeChangeLogDTO]
#
sub curve_fee_change_logs__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/feeChangeLogs/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveFeeChangeLogDTO]', $response);
    return $_response_object;
}

#
# curve_gauge_deposits__current
#
# GaugeDeposits (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_gauge_deposits__current' } = {
        summary => 'GaugeDeposits (current)',
        params => $params,
        returns => 'ARRAY[CurveGaugeDepositDTO]',
        };
}
# @return ARRAY[CurveGaugeDepositDTO]
#
sub curve_gauge_deposits__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/gaugeDeposits/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveGaugeDepositDTO]', $response);
    return $_response_object;
}

#
# curve_gauge_liquidities__current
#
# GaugeLiquidities (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_gauge_liquidities__current' } = {
        summary => 'GaugeLiquidities (current)',
        params => $params,
        returns => 'ARRAY[CurveGaugeLiquidityDTO]',
        };
}
# @return ARRAY[CurveGaugeLiquidityDTO]
#
sub curve_gauge_liquidities__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/gaugeLiquidities/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveGaugeLiquidityDTO]', $response);
    return $_response_object;
}

#
# curve_gauge_total_weights__current
#
# GaugeTotalWeights (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_gauge_total_weights__current' } = {
        summary => 'GaugeTotalWeights (current)',
        params => $params,
        returns => 'ARRAY[CurveGaugeTotalWeightDTO]',
        };
}
# @return ARRAY[CurveGaugeTotalWeightDTO]
#
sub curve_gauge_total_weights__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/gaugeTotalWeights/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveGaugeTotalWeightDTO]', $response);
    return $_response_object;
}

#
# curve_gauge_type_weights__current
#
# GaugeTypeWeights (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_gauge_type_weights__current' } = {
        summary => 'GaugeTypeWeights (current)',
        params => $params,
        returns => 'ARRAY[CurveGaugeTypeWeightDTO]',
        };
}
# @return ARRAY[CurveGaugeTypeWeightDTO]
#
sub curve_gauge_type_weights__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/gaugeTypeWeights/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveGaugeTypeWeightDTO]', $response);
    return $_response_object;
}

#
# curve_gauge_types__current
#
# GaugeTypes (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_gauge_types__current' } = {
        summary => 'GaugeTypes (current)',
        params => $params,
        returns => 'ARRAY[CurveGaugeTypeDTO]',
        };
}
# @return ARRAY[CurveGaugeTypeDTO]
#
sub curve_gauge_types__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/gaugeTypes/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveGaugeTypeDTO]', $response);
    return $_response_object;
}

#
# curve_gauge_weight_votes__current
#
# GaugeWeightVotes (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_gauge_weight_votes__current' } = {
        summary => 'GaugeWeightVotes (current)',
        params => $params,
        returns => 'ARRAY[CurveGaugeWeightVoteDTO]',
        };
}
# @return ARRAY[CurveGaugeWeightVoteDTO]
#
sub curve_gauge_weight_votes__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/gaugeWeightVotes/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveGaugeWeightVoteDTO]', $response);
    return $_response_object;
}

#
# curve_gauge_weights__current
#
# GaugeWeights (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_gauge_weights__current' } = {
        summary => 'GaugeWeights (current)',
        params => $params,
        returns => 'ARRAY[CurveGaugeWeightDTO]',
        };
}
# @return ARRAY[CurveGaugeWeightDTO]
#
sub curve_gauge_weights__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/gaugeWeights/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveGaugeWeightDTO]', $response);
    return $_response_object;
}

#
# curve_gauge_withdraws__current
#
# GaugeWithdraws (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_gauge_withdraws__current' } = {
        summary => 'GaugeWithdraws (current)',
        params => $params,
        returns => 'ARRAY[CurveGaugeWithdrawDTO]',
        };
}
# @return ARRAY[CurveGaugeWithdrawDTO]
#
sub curve_gauge_withdraws__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/gaugeWithdraws/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveGaugeWithdrawDTO]', $response);
    return $_response_object;
}

#
# curve_gauges__current
#
# Gauges (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_gauges__current' } = {
        summary => 'Gauges (current)',
        params => $params,
        returns => 'ARRAY[CurveGaugeDTO]',
        };
}
# @return ARRAY[CurveGaugeDTO]
#
sub curve_gauges__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/gauges/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveGaugeDTO]', $response);
    return $_response_object;
}

#
# curve_hourly_volumes__current
#
# HourlyVolumes (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_hourly_volumes__current' } = {
        summary => 'HourlyVolumes (current)',
        params => $params,
        returns => 'ARRAY[CurveHourlyVolumeDTO]',
        };
}
# @return ARRAY[CurveHourlyVolumeDTO]
#
sub curve_hourly_volumes__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/hourlyVolumes/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveHourlyVolumeDTO]', $response);
    return $_response_object;
}

#
# curve_lp_tokens__current
#
# LpTokens (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_lp_tokens__current' } = {
        summary => 'LpTokens (current)',
        params => $params,
        returns => 'ARRAY[CurveLpTokenDTO]',
        };
}
# @return ARRAY[CurveLpTokenDTO]
#
sub curve_lp_tokens__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/lpTokens/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveLpTokenDTO]', $response);
    return $_response_object;
}

#
# curve_pools__current
#
# Pools (current)
#
# @param string $id Pool address. (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Pool address.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'curve_pools__current' } = {
        summary => 'Pools (current)',
        params => $params,
        returns => 'ARRAY[CurvePoolDTO]',
        };
}
# @return ARRAY[CurvePoolDTO]
#
sub curve_pools__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/pools/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurvePoolDTO]', $response);
    return $_response_object;
}

#
# curve_proposal_votes__current
#
# ProposalVotes (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_proposal_votes__current' } = {
        summary => 'ProposalVotes (current)',
        params => $params,
        returns => 'ARRAY[CurveProposalVoteDTO]',
        };
}
# @return ARRAY[CurveProposalVoteDTO]
#
sub curve_proposal_votes__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/proposalVotes/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveProposalVoteDTO]', $response);
    return $_response_object;
}

#
# curve_proposals__current
#
# Proposals (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_proposals__current' } = {
        summary => 'Proposals (current)',
        params => $params,
        returns => 'ARRAY[CurveProposalDTO]',
        };
}
# @return ARRAY[CurveProposalDTO]
#
sub curve_proposals__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/proposals/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveProposalDTO]', $response);
    return $_response_object;
}

#
# curve_remove_liquidity_events__current
#
# RemoveLiquidityEvents (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_remove_liquidity_events__current' } = {
        summary => 'RemoveLiquidityEvents (current)',
        params => $params,
        returns => 'ARRAY[CurveRemoveLiquidityEventDTO]',
        };
}
# @return ARRAY[CurveRemoveLiquidityEventDTO]
#
sub curve_remove_liquidity_events__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/removeLiquidityEvents/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveRemoveLiquidityEventDTO]', $response);
    return $_response_object;
}

#
# curve_remove_liquidity_one_events__current
#
# RemoveLiquidityOneEvents (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_remove_liquidity_one_events__current' } = {
        summary => 'RemoveLiquidityOneEvents (current)',
        params => $params,
        returns => 'ARRAY[CurveRemoveLiquidityOneEventDTO]',
        };
}
# @return ARRAY[CurveRemoveLiquidityOneEventDTO]
#
sub curve_remove_liquidity_one_events__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/removeLiquidityOneEvents/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveRemoveLiquidityOneEventDTO]', $response);
    return $_response_object;
}

#
# curve_system_states__current
#
# SystemStates (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_system_states__current' } = {
        summary => 'SystemStates (current)',
        params => $params,
        returns => 'ARRAY[CurveSystemStateDTO]',
        };
}
# @return ARRAY[CurveSystemStateDTO]
#
sub curve_system_states__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/systemStates/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveSystemStateDTO]', $response);
    return $_response_object;
}

#
# curve_tokens__current
#
# Tokens (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_tokens__current' } = {
        summary => 'Tokens (current)',
        params => $params,
        returns => 'ARRAY[CurveTokenDTO]',
        };
}
# @return ARRAY[CurveTokenDTO]
#
sub curve_tokens__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/tokens/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveTokenDTO]', $response);
    return $_response_object;
}

#
# curve_transfer_ownership_events__current
#
# TransferOwnershipEvents (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_transfer_ownership_events__current' } = {
        summary => 'TransferOwnershipEvents (current)',
        params => $params,
        returns => 'ARRAY[CurveTransferOwnershipEventDTO]',
        };
}
# @return ARRAY[CurveTransferOwnershipEventDTO]
#
sub curve_transfer_ownership_events__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/transferOwnershipEvents/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveTransferOwnershipEventDTO]', $response);
    return $_response_object;
}

#
# curve_underlying_coins__current
#
# UnderlyingCoins (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_underlying_coins__current' } = {
        summary => 'UnderlyingCoins (current)',
        params => $params,
        returns => 'ARRAY[CurveUnderlyingCoinDTO]',
        };
}
# @return ARRAY[CurveUnderlyingCoinDTO]
#
sub curve_underlying_coins__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/underlyingCoins/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveUnderlyingCoinDTO]', $response);
    return $_response_object;
}

#
# curve_voting_apps__current
#
# VotingApps (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_voting_apps__current' } = {
        summary => 'VotingApps (current)',
        params => $params,
        returns => 'ARRAY[CurveVotingAppDTO]',
        };
}
# @return ARRAY[CurveVotingAppDTO]
#
sub curve_voting_apps__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/votingApps/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveVotingAppDTO]', $response);
    return $_response_object;
}

#
# curve_weekly_volumes__current
#
# WeeklyVolumes (current)
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'curve_weekly_volumes__current' } = {
        summary => 'WeeklyVolumes (current)',
        params => $params,
        returns => 'ARRAY[CurveWeeklyVolumeDTO]',
        };
}
# @return ARRAY[CurveWeeklyVolumeDTO]
#
sub curve_weekly_volumes__current {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/dapps/curve/weeklyVolumes/current';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain', 'application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[CurveWeeklyVolumeDTO]', $response);
    return $_response_object;
}

1;
