# coding: utf-8

"""
    On Chain Dapps - REST API

     This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                               # noqa: E501

    The version of the OpenAPI document: v1
    Contact: support@coinapi.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Represents a liquidity pool daily snapshot for PancakeSwap V3.
    """


    class MetaOapg:
        
        class properties:
            entry_time = schemas.DateTimeSchema
            recv_time = schemas.DateTimeSchema
            block_number = schemas.Int64Schema
            vid = schemas.Int64Schema
            block_ = schemas.Int32Schema
            
            
            class id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            day = schemas.Int32Schema
            
            
            class protocol(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'protocol':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class pool(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pool':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class tick(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tick':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class total_value_locked_usd(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'total_value_locked_usd':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class total_liquidity(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'total_liquidity':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class total_liquidity_usd(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'total_liquidity_usd':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class active_liquidity(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'active_liquidity':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class active_liquidity_usd(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'active_liquidity_usd':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class uncollected_protocol_side_token_amounts(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'uncollected_protocol_side_token_amounts':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class uncollected_protocol_side_values_usd(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'uncollected_protocol_side_values_usd':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class uncollected_supply_side_token_amounts(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'uncollected_supply_side_token_amounts':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class uncollected_supply_side_values_usd(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'uncollected_supply_side_values_usd':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class cumulative_supply_side_revenue_usd(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cumulative_supply_side_revenue_usd':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class daily_supply_side_revenue_usd(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'daily_supply_side_revenue_usd':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class cumulative_protocol_side_revenue_usd(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cumulative_protocol_side_revenue_usd':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class daily_protocol_side_revenue_usd(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'daily_protocol_side_revenue_usd':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class cumulative_total_revenue_usd(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cumulative_total_revenue_usd':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class daily_total_revenue_usd(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'daily_total_revenue_usd':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class cumulative_volume_usd(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cumulative_volume_usd':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class daily_volume_usd(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'daily_volume_usd':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class cumulative_volume_by_token_amount(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cumulative_volume_by_token_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class daily_volume_by_token_amount(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'daily_volume_by_token_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class cumulative_volume_by_token_usd(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cumulative_volume_by_token_usd':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class daily_volume_by_token_usd(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'daily_volume_by_token_usd':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class input_token_balances(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'input_token_balances':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class input_token_balances_usd(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'input_token_balances_usd':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class input_token_weights(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'input_token_weights':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class staked_output_token_amount(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'staked_output_token_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class reward_token_emissions_amount(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reward_token_emissions_amount':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class reward_token_emissions_usd(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reward_token_emissions_usd':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            cumulative_deposit_count = schemas.Int32Schema
            daily_deposit_count = schemas.Int32Schema
            cumulative_withdraw_count = schemas.Int32Schema
            daily_withdraw_count = schemas.Int32Schema
            cumulative_swap_count = schemas.Int32Schema
            daily_swap_count = schemas.Int32Schema
            position_count = schemas.Int32Schema
            open_position_count = schemas.Int32Schema
            closed_position_count = schemas.Int32Schema
            
            
            class timestamp(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'timestamp':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "entry_time": entry_time,
                "recv_time": recv_time,
                "block_number": block_number,
                "vid": vid,
                "block_": block_,
                "id": id,
                "day": day,
                "protocol": protocol,
                "pool": pool,
                "tick": tick,
                "total_value_locked_usd": total_value_locked_usd,
                "total_liquidity": total_liquidity,
                "total_liquidity_usd": total_liquidity_usd,
                "active_liquidity": active_liquidity,
                "active_liquidity_usd": active_liquidity_usd,
                "uncollected_protocol_side_token_amounts": uncollected_protocol_side_token_amounts,
                "uncollected_protocol_side_values_usd": uncollected_protocol_side_values_usd,
                "uncollected_supply_side_token_amounts": uncollected_supply_side_token_amounts,
                "uncollected_supply_side_values_usd": uncollected_supply_side_values_usd,
                "cumulative_supply_side_revenue_usd": cumulative_supply_side_revenue_usd,
                "daily_supply_side_revenue_usd": daily_supply_side_revenue_usd,
                "cumulative_protocol_side_revenue_usd": cumulative_protocol_side_revenue_usd,
                "daily_protocol_side_revenue_usd": daily_protocol_side_revenue_usd,
                "cumulative_total_revenue_usd": cumulative_total_revenue_usd,
                "daily_total_revenue_usd": daily_total_revenue_usd,
                "cumulative_volume_usd": cumulative_volume_usd,
                "daily_volume_usd": daily_volume_usd,
                "cumulative_volume_by_token_amount": cumulative_volume_by_token_amount,
                "daily_volume_by_token_amount": daily_volume_by_token_amount,
                "cumulative_volume_by_token_usd": cumulative_volume_by_token_usd,
                "daily_volume_by_token_usd": daily_volume_by_token_usd,
                "input_token_balances": input_token_balances,
                "input_token_balances_usd": input_token_balances_usd,
                "input_token_weights": input_token_weights,
                "staked_output_token_amount": staked_output_token_amount,
                "reward_token_emissions_amount": reward_token_emissions_amount,
                "reward_token_emissions_usd": reward_token_emissions_usd,
                "cumulative_deposit_count": cumulative_deposit_count,
                "daily_deposit_count": daily_deposit_count,
                "cumulative_withdraw_count": cumulative_withdraw_count,
                "daily_withdraw_count": daily_withdraw_count,
                "cumulative_swap_count": cumulative_swap_count,
                "daily_swap_count": daily_swap_count,
                "position_count": position_count,
                "open_position_count": open_position_count,
                "closed_position_count": closed_position_count,
                "timestamp": timestamp,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entry_time"]) -> MetaOapg.properties.entry_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recv_time"]) -> MetaOapg.properties.recv_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["block_number"]) -> MetaOapg.properties.block_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vid"]) -> MetaOapg.properties.vid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["block_"]) -> MetaOapg.properties.block_: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["day"]) -> MetaOapg.properties.day: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protocol"]) -> MetaOapg.properties.protocol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pool"]) -> MetaOapg.properties.pool: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tick"]) -> MetaOapg.properties.tick: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_value_locked_usd"]) -> MetaOapg.properties.total_value_locked_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_liquidity"]) -> MetaOapg.properties.total_liquidity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_liquidity_usd"]) -> MetaOapg.properties.total_liquidity_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active_liquidity"]) -> MetaOapg.properties.active_liquidity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active_liquidity_usd"]) -> MetaOapg.properties.active_liquidity_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uncollected_protocol_side_token_amounts"]) -> MetaOapg.properties.uncollected_protocol_side_token_amounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uncollected_protocol_side_values_usd"]) -> MetaOapg.properties.uncollected_protocol_side_values_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uncollected_supply_side_token_amounts"]) -> MetaOapg.properties.uncollected_supply_side_token_amounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uncollected_supply_side_values_usd"]) -> MetaOapg.properties.uncollected_supply_side_values_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cumulative_supply_side_revenue_usd"]) -> MetaOapg.properties.cumulative_supply_side_revenue_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["daily_supply_side_revenue_usd"]) -> MetaOapg.properties.daily_supply_side_revenue_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cumulative_protocol_side_revenue_usd"]) -> MetaOapg.properties.cumulative_protocol_side_revenue_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["daily_protocol_side_revenue_usd"]) -> MetaOapg.properties.daily_protocol_side_revenue_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cumulative_total_revenue_usd"]) -> MetaOapg.properties.cumulative_total_revenue_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["daily_total_revenue_usd"]) -> MetaOapg.properties.daily_total_revenue_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cumulative_volume_usd"]) -> MetaOapg.properties.cumulative_volume_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["daily_volume_usd"]) -> MetaOapg.properties.daily_volume_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cumulative_volume_by_token_amount"]) -> MetaOapg.properties.cumulative_volume_by_token_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["daily_volume_by_token_amount"]) -> MetaOapg.properties.daily_volume_by_token_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cumulative_volume_by_token_usd"]) -> MetaOapg.properties.cumulative_volume_by_token_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["daily_volume_by_token_usd"]) -> MetaOapg.properties.daily_volume_by_token_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["input_token_balances"]) -> MetaOapg.properties.input_token_balances: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["input_token_balances_usd"]) -> MetaOapg.properties.input_token_balances_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["input_token_weights"]) -> MetaOapg.properties.input_token_weights: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["staked_output_token_amount"]) -> MetaOapg.properties.staked_output_token_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reward_token_emissions_amount"]) -> MetaOapg.properties.reward_token_emissions_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reward_token_emissions_usd"]) -> MetaOapg.properties.reward_token_emissions_usd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cumulative_deposit_count"]) -> MetaOapg.properties.cumulative_deposit_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["daily_deposit_count"]) -> MetaOapg.properties.daily_deposit_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cumulative_withdraw_count"]) -> MetaOapg.properties.cumulative_withdraw_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["daily_withdraw_count"]) -> MetaOapg.properties.daily_withdraw_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cumulative_swap_count"]) -> MetaOapg.properties.cumulative_swap_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["daily_swap_count"]) -> MetaOapg.properties.daily_swap_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["position_count"]) -> MetaOapg.properties.position_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["open_position_count"]) -> MetaOapg.properties.open_position_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["closed_position_count"]) -> MetaOapg.properties.closed_position_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["entry_time"], typing_extensions.Literal["recv_time"], typing_extensions.Literal["block_number"], typing_extensions.Literal["vid"], typing_extensions.Literal["block_"], typing_extensions.Literal["id"], typing_extensions.Literal["day"], typing_extensions.Literal["protocol"], typing_extensions.Literal["pool"], typing_extensions.Literal["tick"], typing_extensions.Literal["total_value_locked_usd"], typing_extensions.Literal["total_liquidity"], typing_extensions.Literal["total_liquidity_usd"], typing_extensions.Literal["active_liquidity"], typing_extensions.Literal["active_liquidity_usd"], typing_extensions.Literal["uncollected_protocol_side_token_amounts"], typing_extensions.Literal["uncollected_protocol_side_values_usd"], typing_extensions.Literal["uncollected_supply_side_token_amounts"], typing_extensions.Literal["uncollected_supply_side_values_usd"], typing_extensions.Literal["cumulative_supply_side_revenue_usd"], typing_extensions.Literal["daily_supply_side_revenue_usd"], typing_extensions.Literal["cumulative_protocol_side_revenue_usd"], typing_extensions.Literal["daily_protocol_side_revenue_usd"], typing_extensions.Literal["cumulative_total_revenue_usd"], typing_extensions.Literal["daily_total_revenue_usd"], typing_extensions.Literal["cumulative_volume_usd"], typing_extensions.Literal["daily_volume_usd"], typing_extensions.Literal["cumulative_volume_by_token_amount"], typing_extensions.Literal["daily_volume_by_token_amount"], typing_extensions.Literal["cumulative_volume_by_token_usd"], typing_extensions.Literal["daily_volume_by_token_usd"], typing_extensions.Literal["input_token_balances"], typing_extensions.Literal["input_token_balances_usd"], typing_extensions.Literal["input_token_weights"], typing_extensions.Literal["staked_output_token_amount"], typing_extensions.Literal["reward_token_emissions_amount"], typing_extensions.Literal["reward_token_emissions_usd"], typing_extensions.Literal["cumulative_deposit_count"], typing_extensions.Literal["daily_deposit_count"], typing_extensions.Literal["cumulative_withdraw_count"], typing_extensions.Literal["daily_withdraw_count"], typing_extensions.Literal["cumulative_swap_count"], typing_extensions.Literal["daily_swap_count"], typing_extensions.Literal["position_count"], typing_extensions.Literal["open_position_count"], typing_extensions.Literal["closed_position_count"], typing_extensions.Literal["timestamp"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entry_time"]) -> typing.Union[MetaOapg.properties.entry_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recv_time"]) -> typing.Union[MetaOapg.properties.recv_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["block_number"]) -> typing.Union[MetaOapg.properties.block_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vid"]) -> typing.Union[MetaOapg.properties.vid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["block_"]) -> typing.Union[MetaOapg.properties.block_, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["day"]) -> typing.Union[MetaOapg.properties.day, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protocol"]) -> typing.Union[MetaOapg.properties.protocol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pool"]) -> typing.Union[MetaOapg.properties.pool, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tick"]) -> typing.Union[MetaOapg.properties.tick, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_value_locked_usd"]) -> typing.Union[MetaOapg.properties.total_value_locked_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_liquidity"]) -> typing.Union[MetaOapg.properties.total_liquidity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_liquidity_usd"]) -> typing.Union[MetaOapg.properties.total_liquidity_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active_liquidity"]) -> typing.Union[MetaOapg.properties.active_liquidity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active_liquidity_usd"]) -> typing.Union[MetaOapg.properties.active_liquidity_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uncollected_protocol_side_token_amounts"]) -> typing.Union[MetaOapg.properties.uncollected_protocol_side_token_amounts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uncollected_protocol_side_values_usd"]) -> typing.Union[MetaOapg.properties.uncollected_protocol_side_values_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uncollected_supply_side_token_amounts"]) -> typing.Union[MetaOapg.properties.uncollected_supply_side_token_amounts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uncollected_supply_side_values_usd"]) -> typing.Union[MetaOapg.properties.uncollected_supply_side_values_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cumulative_supply_side_revenue_usd"]) -> typing.Union[MetaOapg.properties.cumulative_supply_side_revenue_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["daily_supply_side_revenue_usd"]) -> typing.Union[MetaOapg.properties.daily_supply_side_revenue_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cumulative_protocol_side_revenue_usd"]) -> typing.Union[MetaOapg.properties.cumulative_protocol_side_revenue_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["daily_protocol_side_revenue_usd"]) -> typing.Union[MetaOapg.properties.daily_protocol_side_revenue_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cumulative_total_revenue_usd"]) -> typing.Union[MetaOapg.properties.cumulative_total_revenue_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["daily_total_revenue_usd"]) -> typing.Union[MetaOapg.properties.daily_total_revenue_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cumulative_volume_usd"]) -> typing.Union[MetaOapg.properties.cumulative_volume_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["daily_volume_usd"]) -> typing.Union[MetaOapg.properties.daily_volume_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cumulative_volume_by_token_amount"]) -> typing.Union[MetaOapg.properties.cumulative_volume_by_token_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["daily_volume_by_token_amount"]) -> typing.Union[MetaOapg.properties.daily_volume_by_token_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cumulative_volume_by_token_usd"]) -> typing.Union[MetaOapg.properties.cumulative_volume_by_token_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["daily_volume_by_token_usd"]) -> typing.Union[MetaOapg.properties.daily_volume_by_token_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["input_token_balances"]) -> typing.Union[MetaOapg.properties.input_token_balances, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["input_token_balances_usd"]) -> typing.Union[MetaOapg.properties.input_token_balances_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["input_token_weights"]) -> typing.Union[MetaOapg.properties.input_token_weights, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["staked_output_token_amount"]) -> typing.Union[MetaOapg.properties.staked_output_token_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reward_token_emissions_amount"]) -> typing.Union[MetaOapg.properties.reward_token_emissions_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reward_token_emissions_usd"]) -> typing.Union[MetaOapg.properties.reward_token_emissions_usd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cumulative_deposit_count"]) -> typing.Union[MetaOapg.properties.cumulative_deposit_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["daily_deposit_count"]) -> typing.Union[MetaOapg.properties.daily_deposit_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cumulative_withdraw_count"]) -> typing.Union[MetaOapg.properties.cumulative_withdraw_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["daily_withdraw_count"]) -> typing.Union[MetaOapg.properties.daily_withdraw_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cumulative_swap_count"]) -> typing.Union[MetaOapg.properties.cumulative_swap_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["daily_swap_count"]) -> typing.Union[MetaOapg.properties.daily_swap_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["position_count"]) -> typing.Union[MetaOapg.properties.position_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["open_position_count"]) -> typing.Union[MetaOapg.properties.open_position_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["closed_position_count"]) -> typing.Union[MetaOapg.properties.closed_position_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> typing.Union[MetaOapg.properties.timestamp, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["entry_time"], typing_extensions.Literal["recv_time"], typing_extensions.Literal["block_number"], typing_extensions.Literal["vid"], typing_extensions.Literal["block_"], typing_extensions.Literal["id"], typing_extensions.Literal["day"], typing_extensions.Literal["protocol"], typing_extensions.Literal["pool"], typing_extensions.Literal["tick"], typing_extensions.Literal["total_value_locked_usd"], typing_extensions.Literal["total_liquidity"], typing_extensions.Literal["total_liquidity_usd"], typing_extensions.Literal["active_liquidity"], typing_extensions.Literal["active_liquidity_usd"], typing_extensions.Literal["uncollected_protocol_side_token_amounts"], typing_extensions.Literal["uncollected_protocol_side_values_usd"], typing_extensions.Literal["uncollected_supply_side_token_amounts"], typing_extensions.Literal["uncollected_supply_side_values_usd"], typing_extensions.Literal["cumulative_supply_side_revenue_usd"], typing_extensions.Literal["daily_supply_side_revenue_usd"], typing_extensions.Literal["cumulative_protocol_side_revenue_usd"], typing_extensions.Literal["daily_protocol_side_revenue_usd"], typing_extensions.Literal["cumulative_total_revenue_usd"], typing_extensions.Literal["daily_total_revenue_usd"], typing_extensions.Literal["cumulative_volume_usd"], typing_extensions.Literal["daily_volume_usd"], typing_extensions.Literal["cumulative_volume_by_token_amount"], typing_extensions.Literal["daily_volume_by_token_amount"], typing_extensions.Literal["cumulative_volume_by_token_usd"], typing_extensions.Literal["daily_volume_by_token_usd"], typing_extensions.Literal["input_token_balances"], typing_extensions.Literal["input_token_balances_usd"], typing_extensions.Literal["input_token_weights"], typing_extensions.Literal["staked_output_token_amount"], typing_extensions.Literal["reward_token_emissions_amount"], typing_extensions.Literal["reward_token_emissions_usd"], typing_extensions.Literal["cumulative_deposit_count"], typing_extensions.Literal["daily_deposit_count"], typing_extensions.Literal["cumulative_withdraw_count"], typing_extensions.Literal["daily_withdraw_count"], typing_extensions.Literal["cumulative_swap_count"], typing_extensions.Literal["daily_swap_count"], typing_extensions.Literal["position_count"], typing_extensions.Literal["open_position_count"], typing_extensions.Literal["closed_position_count"], typing_extensions.Literal["timestamp"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        entry_time: typing.Union[MetaOapg.properties.entry_time, str, datetime, schemas.Unset] = schemas.unset,
        recv_time: typing.Union[MetaOapg.properties.recv_time, str, datetime, schemas.Unset] = schemas.unset,
        block_number: typing.Union[MetaOapg.properties.block_number, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        vid: typing.Union[MetaOapg.properties.vid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        block_: typing.Union[MetaOapg.properties.block_, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, None, str, schemas.Unset] = schemas.unset,
        day: typing.Union[MetaOapg.properties.day, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        protocol: typing.Union[MetaOapg.properties.protocol, None, str, schemas.Unset] = schemas.unset,
        pool: typing.Union[MetaOapg.properties.pool, None, str, schemas.Unset] = schemas.unset,
        tick: typing.Union[MetaOapg.properties.tick, None, str, schemas.Unset] = schemas.unset,
        total_value_locked_usd: typing.Union[MetaOapg.properties.total_value_locked_usd, None, str, schemas.Unset] = schemas.unset,
        total_liquidity: typing.Union[MetaOapg.properties.total_liquidity, None, str, schemas.Unset] = schemas.unset,
        total_liquidity_usd: typing.Union[MetaOapg.properties.total_liquidity_usd, None, str, schemas.Unset] = schemas.unset,
        active_liquidity: typing.Union[MetaOapg.properties.active_liquidity, None, str, schemas.Unset] = schemas.unset,
        active_liquidity_usd: typing.Union[MetaOapg.properties.active_liquidity_usd, None, str, schemas.Unset] = schemas.unset,
        uncollected_protocol_side_token_amounts: typing.Union[MetaOapg.properties.uncollected_protocol_side_token_amounts, list, tuple, None, schemas.Unset] = schemas.unset,
        uncollected_protocol_side_values_usd: typing.Union[MetaOapg.properties.uncollected_protocol_side_values_usd, list, tuple, None, schemas.Unset] = schemas.unset,
        uncollected_supply_side_token_amounts: typing.Union[MetaOapg.properties.uncollected_supply_side_token_amounts, list, tuple, None, schemas.Unset] = schemas.unset,
        uncollected_supply_side_values_usd: typing.Union[MetaOapg.properties.uncollected_supply_side_values_usd, list, tuple, None, schemas.Unset] = schemas.unset,
        cumulative_supply_side_revenue_usd: typing.Union[MetaOapg.properties.cumulative_supply_side_revenue_usd, None, str, schemas.Unset] = schemas.unset,
        daily_supply_side_revenue_usd: typing.Union[MetaOapg.properties.daily_supply_side_revenue_usd, None, str, schemas.Unset] = schemas.unset,
        cumulative_protocol_side_revenue_usd: typing.Union[MetaOapg.properties.cumulative_protocol_side_revenue_usd, None, str, schemas.Unset] = schemas.unset,
        daily_protocol_side_revenue_usd: typing.Union[MetaOapg.properties.daily_protocol_side_revenue_usd, None, str, schemas.Unset] = schemas.unset,
        cumulative_total_revenue_usd: typing.Union[MetaOapg.properties.cumulative_total_revenue_usd, None, str, schemas.Unset] = schemas.unset,
        daily_total_revenue_usd: typing.Union[MetaOapg.properties.daily_total_revenue_usd, None, str, schemas.Unset] = schemas.unset,
        cumulative_volume_usd: typing.Union[MetaOapg.properties.cumulative_volume_usd, None, str, schemas.Unset] = schemas.unset,
        daily_volume_usd: typing.Union[MetaOapg.properties.daily_volume_usd, None, str, schemas.Unset] = schemas.unset,
        cumulative_volume_by_token_amount: typing.Union[MetaOapg.properties.cumulative_volume_by_token_amount, list, tuple, None, schemas.Unset] = schemas.unset,
        daily_volume_by_token_amount: typing.Union[MetaOapg.properties.daily_volume_by_token_amount, list, tuple, None, schemas.Unset] = schemas.unset,
        cumulative_volume_by_token_usd: typing.Union[MetaOapg.properties.cumulative_volume_by_token_usd, list, tuple, None, schemas.Unset] = schemas.unset,
        daily_volume_by_token_usd: typing.Union[MetaOapg.properties.daily_volume_by_token_usd, list, tuple, None, schemas.Unset] = schemas.unset,
        input_token_balances: typing.Union[MetaOapg.properties.input_token_balances, list, tuple, None, schemas.Unset] = schemas.unset,
        input_token_balances_usd: typing.Union[MetaOapg.properties.input_token_balances_usd, list, tuple, None, schemas.Unset] = schemas.unset,
        input_token_weights: typing.Union[MetaOapg.properties.input_token_weights, list, tuple, None, schemas.Unset] = schemas.unset,
        staked_output_token_amount: typing.Union[MetaOapg.properties.staked_output_token_amount, None, str, schemas.Unset] = schemas.unset,
        reward_token_emissions_amount: typing.Union[MetaOapg.properties.reward_token_emissions_amount, list, tuple, None, schemas.Unset] = schemas.unset,
        reward_token_emissions_usd: typing.Union[MetaOapg.properties.reward_token_emissions_usd, list, tuple, None, schemas.Unset] = schemas.unset,
        cumulative_deposit_count: typing.Union[MetaOapg.properties.cumulative_deposit_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        daily_deposit_count: typing.Union[MetaOapg.properties.daily_deposit_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cumulative_withdraw_count: typing.Union[MetaOapg.properties.cumulative_withdraw_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        daily_withdraw_count: typing.Union[MetaOapg.properties.daily_withdraw_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cumulative_swap_count: typing.Union[MetaOapg.properties.cumulative_swap_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        daily_swap_count: typing.Union[MetaOapg.properties.daily_swap_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        position_count: typing.Union[MetaOapg.properties.position_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        open_position_count: typing.Union[MetaOapg.properties.open_position_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        closed_position_count: typing.Union[MetaOapg.properties.closed_position_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        timestamp: typing.Union[MetaOapg.properties.timestamp, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO':
        return super().__new__(
            cls,
            *_args,
            entry_time=entry_time,
            recv_time=recv_time,
            block_number=block_number,
            vid=vid,
            block_=block_,
            id=id,
            day=day,
            protocol=protocol,
            pool=pool,
            tick=tick,
            total_value_locked_usd=total_value_locked_usd,
            total_liquidity=total_liquidity,
            total_liquidity_usd=total_liquidity_usd,
            active_liquidity=active_liquidity,
            active_liquidity_usd=active_liquidity_usd,
            uncollected_protocol_side_token_amounts=uncollected_protocol_side_token_amounts,
            uncollected_protocol_side_values_usd=uncollected_protocol_side_values_usd,
            uncollected_supply_side_token_amounts=uncollected_supply_side_token_amounts,
            uncollected_supply_side_values_usd=uncollected_supply_side_values_usd,
            cumulative_supply_side_revenue_usd=cumulative_supply_side_revenue_usd,
            daily_supply_side_revenue_usd=daily_supply_side_revenue_usd,
            cumulative_protocol_side_revenue_usd=cumulative_protocol_side_revenue_usd,
            daily_protocol_side_revenue_usd=daily_protocol_side_revenue_usd,
            cumulative_total_revenue_usd=cumulative_total_revenue_usd,
            daily_total_revenue_usd=daily_total_revenue_usd,
            cumulative_volume_usd=cumulative_volume_usd,
            daily_volume_usd=daily_volume_usd,
            cumulative_volume_by_token_amount=cumulative_volume_by_token_amount,
            daily_volume_by_token_amount=daily_volume_by_token_amount,
            cumulative_volume_by_token_usd=cumulative_volume_by_token_usd,
            daily_volume_by_token_usd=daily_volume_by_token_usd,
            input_token_balances=input_token_balances,
            input_token_balances_usd=input_token_balances_usd,
            input_token_weights=input_token_weights,
            staked_output_token_amount=staked_output_token_amount,
            reward_token_emissions_amount=reward_token_emissions_amount,
            reward_token_emissions_usd=reward_token_emissions_usd,
            cumulative_deposit_count=cumulative_deposit_count,
            daily_deposit_count=daily_deposit_count,
            cumulative_withdraw_count=cumulative_withdraw_count,
            daily_withdraw_count=daily_withdraw_count,
            cumulative_swap_count=cumulative_swap_count,
            daily_swap_count=daily_swap_count,
            position_count=position_count,
            open_position_count=open_position_count,
            closed_position_count=closed_position_count,
            timestamp=timestamp,
            _configuration=_configuration,
        )
