/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CoinAPI.EMS.REST.V1.Client;
using CoinAPI.EMS.REST.V1.Model;

namespace CoinAPI.EMS.REST.V1.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPANCAKESWAPV3ETHEREUMApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accounts (current)
        /// </summary>
        /// <remarks>
        /// Gets accounts.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMAccountDTO&gt;</returns>
        List<PANCAKESWAPV3ETHEREUMAccountDTO> PANCAKESWAPV3ETHEREUMAccountsCurrent(int operationIndex = 0);

        /// <summary>
        /// Accounts (current)
        /// </summary>
        /// <remarks>
        /// Gets accounts.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMAccountDTO&gt;</returns>
        ApiResponse<List<PANCAKESWAPV3ETHEREUMAccountDTO>> PANCAKESWAPV3ETHEREUMAccountsCurrentWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// ActiveAccounts (current)
        /// </summary>
        /// <remarks>
        /// Gets activeAccounts.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMActiveAccountDTO&gt;</returns>
        List<PANCAKESWAPV3ETHEREUMActiveAccountDTO> PANCAKESWAPV3ETHEREUMActiveAccountsCurrent(int operationIndex = 0);

        /// <summary>
        /// ActiveAccounts (current)
        /// </summary>
        /// <remarks>
        /// Gets activeAccounts.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMActiveAccountDTO&gt;</returns>
        ApiResponse<List<PANCAKESWAPV3ETHEREUMActiveAccountDTO>> PANCAKESWAPV3ETHEREUMActiveAccountsCurrentWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Deposits (current)
        /// </summary>
        /// <remarks>
        /// Gets deposits.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMDepositDTO&gt;</returns>
        List<PANCAKESWAPV3ETHEREUMDepositDTO> PANCAKESWAPV3ETHEREUMDepositsCurrent(int operationIndex = 0);

        /// <summary>
        /// Deposits (current)
        /// </summary>
        /// <remarks>
        /// Gets deposits.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMDepositDTO&gt;</returns>
        ApiResponse<List<PANCAKESWAPV3ETHEREUMDepositDTO>> PANCAKESWAPV3ETHEREUMDepositsCurrentWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// DexAmmProtocols (current)
        /// </summary>
        /// <remarks>
        /// Gets dexAmmProtocols.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO&gt;</returns>
        List<PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO> PANCAKESWAPV3ETHEREUMDexAmmProtocolsCurrent(int operationIndex = 0);

        /// <summary>
        /// DexAmmProtocols (current)
        /// </summary>
        /// <remarks>
        /// Gets dexAmmProtocols.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO&gt;</returns>
        ApiResponse<List<PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO>> PANCAKESWAPV3ETHEREUMDexAmmProtocolsCurrentWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// FinancialsDailySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets financialsDailySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO&gt;</returns>
        List<PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO> PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotsCurrent(int operationIndex = 0);

        /// <summary>
        /// FinancialsDailySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets financialsDailySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO&gt;</returns>
        ApiResponse<List<PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO>> PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotsCurrentWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// LiquidityPoolAmounts (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPoolAmounts.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Smart contract address of the pool. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO&gt;</returns>
        List<PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO> PANCAKESWAPV3ETHEREUMLiquidityPoolAmountsCurrent(string id = default(string), int operationIndex = 0);

        /// <summary>
        /// LiquidityPoolAmounts (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPoolAmounts.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Smart contract address of the pool. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO&gt;</returns>
        ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO>> PANCAKESWAPV3ETHEREUMLiquidityPoolAmountsCurrentWithHttpInfo(string id = default(string), int operationIndex = 0);
        /// <summary>
        /// LiquidityPoolDailySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPoolDailySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Pool this snapshot belongs to. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO&gt;</returns>
        List<PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO> PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrent(string pool = default(string), int operationIndex = 0);

        /// <summary>
        /// LiquidityPoolDailySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPoolDailySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Pool this snapshot belongs to. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO&gt;</returns>
        ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO>> PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrentWithHttpInfo(string pool = default(string), int operationIndex = 0);
        /// <summary>
        /// LiquidityPoolFees (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPoolFees.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO&gt;</returns>
        List<PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO> PANCAKESWAPV3ETHEREUMLiquidityPoolFeesCurrent(int operationIndex = 0);

        /// <summary>
        /// LiquidityPoolFees (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPoolFees.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO&gt;</returns>
        ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO>> PANCAKESWAPV3ETHEREUMLiquidityPoolFeesCurrentWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// LiquidityPoolHourlySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPoolHourlySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">The pool this snapshot belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO&gt;</returns>
        List<PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO> PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrent(string pool = default(string), int operationIndex = 0);

        /// <summary>
        /// LiquidityPoolHourlySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPoolHourlySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">The pool this snapshot belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO&gt;</returns>
        ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO>> PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrentWithHttpInfo(string pool = default(string), int operationIndex = 0);
        /// <summary>
        /// LiquidityPools (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPools.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Smart contract address of the pool. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolDTO&gt;</returns>
        List<PANCAKESWAPV3ETHEREUMLiquidityPoolDTO> PANCAKESWAPV3ETHEREUMLiquidityPoolsCurrent(string id = default(string), int operationIndex = 0);

        /// <summary>
        /// LiquidityPools (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPools.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Smart contract address of the pool. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolDTO&gt;</returns>
        ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolDTO>> PANCAKESWAPV3ETHEREUMLiquidityPoolsCurrentWithHttpInfo(string id = default(string), int operationIndex = 0);
        /// <summary>
        /// PositionSnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets positionSnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMPositionSnapshotDTO&gt;</returns>
        List<PANCAKESWAPV3ETHEREUMPositionSnapshotDTO> PANCAKESWAPV3ETHEREUMPositionSnapshotsCurrent(int operationIndex = 0);

        /// <summary>
        /// PositionSnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets positionSnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMPositionSnapshotDTO&gt;</returns>
        ApiResponse<List<PANCAKESWAPV3ETHEREUMPositionSnapshotDTO>> PANCAKESWAPV3ETHEREUMPositionSnapshotsCurrentWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Positions (current)
        /// </summary>
        /// <remarks>
        /// Gets positions.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">The liquidity pool in which this position was opened (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMPositionDTO&gt;</returns>
        List<PANCAKESWAPV3ETHEREUMPositionDTO> PANCAKESWAPV3ETHEREUMPositionsCurrent(string pool = default(string), int operationIndex = 0);

        /// <summary>
        /// Positions (current)
        /// </summary>
        /// <remarks>
        /// Gets positions.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">The liquidity pool in which this position was opened (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMPositionDTO&gt;</returns>
        ApiResponse<List<PANCAKESWAPV3ETHEREUMPositionDTO>> PANCAKESWAPV3ETHEREUMPositionsCurrentWithHttpInfo(string pool = default(string), int operationIndex = 0);
        /// <summary>
        /// RewardTokens (current)
        /// </summary>
        /// <remarks>
        /// Gets rewardTokens.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMRewardTokenDTO&gt;</returns>
        List<PANCAKESWAPV3ETHEREUMRewardTokenDTO> PANCAKESWAPV3ETHEREUMRewardTokensCurrent(int operationIndex = 0);

        /// <summary>
        /// RewardTokens (current)
        /// </summary>
        /// <remarks>
        /// Gets rewardTokens.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMRewardTokenDTO&gt;</returns>
        ApiResponse<List<PANCAKESWAPV3ETHEREUMRewardTokenDTO>> PANCAKESWAPV3ETHEREUMRewardTokensCurrentWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Swaps (current)
        /// </summary>
        /// <remarks>
        /// Gets swaps.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMSwapDTO&gt;</returns>
        List<PANCAKESWAPV3ETHEREUMSwapDTO> PANCAKESWAPV3ETHEREUMSwapsCurrent(int operationIndex = 0);

        /// <summary>
        /// Swaps (current)
        /// </summary>
        /// <remarks>
        /// Gets swaps.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMSwapDTO&gt;</returns>
        ApiResponse<List<PANCAKESWAPV3ETHEREUMSwapDTO>> PANCAKESWAPV3ETHEREUMSwapsCurrentWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// TickDailySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets tickDailySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">liquidity pool this tick belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO&gt;</returns>
        List<PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO> PANCAKESWAPV3ETHEREUMTickDailySnapshotsCurrent(string pool = default(string), int operationIndex = 0);

        /// <summary>
        /// TickDailySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets tickDailySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">liquidity pool this tick belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO&gt;</returns>
        ApiResponse<List<PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO>> PANCAKESWAPV3ETHEREUMTickDailySnapshotsCurrentWithHttpInfo(string pool = default(string), int operationIndex = 0);
        /// <summary>
        /// TickHourlySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets tickHourlySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">liquidity pool this tick belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO&gt;</returns>
        List<PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO> PANCAKESWAPV3ETHEREUMTickHourlySnapshotsCurrent(string pool = default(string), int operationIndex = 0);

        /// <summary>
        /// TickHourlySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets tickHourlySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">liquidity pool this tick belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO&gt;</returns>
        ApiResponse<List<PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO>> PANCAKESWAPV3ETHEREUMTickHourlySnapshotsCurrentWithHttpInfo(string pool = default(string), int operationIndex = 0);
        /// <summary>
        /// Ticks (current)
        /// </summary>
        /// <remarks>
        /// Gets ticks.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Liquidity pool this tick belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMTickDTO&gt;</returns>
        List<PANCAKESWAPV3ETHEREUMTickDTO> PANCAKESWAPV3ETHEREUMTicksCurrent(string pool = default(string), int operationIndex = 0);

        /// <summary>
        /// Ticks (current)
        /// </summary>
        /// <remarks>
        /// Gets ticks.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Liquidity pool this tick belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMTickDTO&gt;</returns>
        ApiResponse<List<PANCAKESWAPV3ETHEREUMTickDTO>> PANCAKESWAPV3ETHEREUMTicksCurrentWithHttpInfo(string pool = default(string), int operationIndex = 0);
        /// <summary>
        /// TokenWhiteListSymbols (current)
        /// </summary>
        /// <remarks>
        /// Gets tokenWhiteListSymbols.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO&gt;</returns>
        List<PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO> PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolsCurrent(int operationIndex = 0);

        /// <summary>
        /// TokenWhiteListSymbols (current)
        /// </summary>
        /// <remarks>
        /// Gets tokenWhiteListSymbols.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO&gt;</returns>
        ApiResponse<List<PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO>> PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolsCurrentWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// TokenWhiteLists (current)
        /// </summary>
        /// <remarks>
        /// Gets tokenWhiteLists.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMTokenWhiteListDTO&gt;</returns>
        List<PANCAKESWAPV3ETHEREUMTokenWhiteListDTO> PANCAKESWAPV3ETHEREUMTokenWhiteListsCurrent(int operationIndex = 0);

        /// <summary>
        /// TokenWhiteLists (current)
        /// </summary>
        /// <remarks>
        /// Gets tokenWhiteLists.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMTokenWhiteListDTO&gt;</returns>
        ApiResponse<List<PANCAKESWAPV3ETHEREUMTokenWhiteListDTO>> PANCAKESWAPV3ETHEREUMTokenWhiteListsCurrentWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Tokens (current)
        /// </summary>
        /// <remarks>
        /// Gets tokens.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Smart contract address of the token. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMTokenDTO&gt;</returns>
        List<PANCAKESWAPV3ETHEREUMTokenDTO> PANCAKESWAPV3ETHEREUMTokensCurrent(string id = default(string), int operationIndex = 0);

        /// <summary>
        /// Tokens (current)
        /// </summary>
        /// <remarks>
        /// Gets tokens.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Smart contract address of the token. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMTokenDTO&gt;</returns>
        ApiResponse<List<PANCAKESWAPV3ETHEREUMTokenDTO>> PANCAKESWAPV3ETHEREUMTokensCurrentWithHttpInfo(string id = default(string), int operationIndex = 0);
        /// <summary>
        /// UsageMetricsDailySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets usageMetricsDailySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO&gt;</returns>
        List<PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO> PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrent(int operationIndex = 0);

        /// <summary>
        /// UsageMetricsDailySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets usageMetricsDailySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO&gt;</returns>
        ApiResponse<List<PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO>> PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrentWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// UsageMetricsHourlySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets usageMetricsHourlySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO&gt;</returns>
        List<PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO> PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrent(int operationIndex = 0);

        /// <summary>
        /// UsageMetricsHourlySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets usageMetricsHourlySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO&gt;</returns>
        ApiResponse<List<PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO>> PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrentWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Withdraws (current)
        /// </summary>
        /// <remarks>
        /// Gets withdraws.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMWithdrawDTO&gt;</returns>
        List<PANCAKESWAPV3ETHEREUMWithdrawDTO> PANCAKESWAPV3ETHEREUMWithdrawsCurrent(int operationIndex = 0);

        /// <summary>
        /// Withdraws (current)
        /// </summary>
        /// <remarks>
        /// Gets withdraws.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMWithdrawDTO&gt;</returns>
        ApiResponse<List<PANCAKESWAPV3ETHEREUMWithdrawDTO>> PANCAKESWAPV3ETHEREUMWithdrawsCurrentWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPANCAKESWAPV3ETHEREUMApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Accounts (current)
        /// </summary>
        /// <remarks>
        /// Gets accounts.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMAccountDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMAccountDTO>> PANCAKESWAPV3ETHEREUMAccountsCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Accounts (current)
        /// </summary>
        /// <remarks>
        /// Gets accounts.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMAccountDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PANCAKESWAPV3ETHEREUMAccountDTO>>> PANCAKESWAPV3ETHEREUMAccountsCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ActiveAccounts (current)
        /// </summary>
        /// <remarks>
        /// Gets activeAccounts.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMActiveAccountDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMActiveAccountDTO>> PANCAKESWAPV3ETHEREUMActiveAccountsCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ActiveAccounts (current)
        /// </summary>
        /// <remarks>
        /// Gets activeAccounts.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMActiveAccountDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PANCAKESWAPV3ETHEREUMActiveAccountDTO>>> PANCAKESWAPV3ETHEREUMActiveAccountsCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deposits (current)
        /// </summary>
        /// <remarks>
        /// Gets deposits.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMDepositDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMDepositDTO>> PANCAKESWAPV3ETHEREUMDepositsCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deposits (current)
        /// </summary>
        /// <remarks>
        /// Gets deposits.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMDepositDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PANCAKESWAPV3ETHEREUMDepositDTO>>> PANCAKESWAPV3ETHEREUMDepositsCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// DexAmmProtocols (current)
        /// </summary>
        /// <remarks>
        /// Gets dexAmmProtocols.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO>> PANCAKESWAPV3ETHEREUMDexAmmProtocolsCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DexAmmProtocols (current)
        /// </summary>
        /// <remarks>
        /// Gets dexAmmProtocols.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO>>> PANCAKESWAPV3ETHEREUMDexAmmProtocolsCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// FinancialsDailySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets financialsDailySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO>> PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotsCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// FinancialsDailySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets financialsDailySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO>>> PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotsCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// LiquidityPoolAmounts (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPoolAmounts.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Smart contract address of the pool. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO>> PANCAKESWAPV3ETHEREUMLiquidityPoolAmountsCurrentAsync(string id = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// LiquidityPoolAmounts (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPoolAmounts.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Smart contract address of the pool. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO>>> PANCAKESWAPV3ETHEREUMLiquidityPoolAmountsCurrentWithHttpInfoAsync(string id = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// LiquidityPoolDailySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPoolDailySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Pool this snapshot belongs to. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO>> PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrentAsync(string pool = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// LiquidityPoolDailySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPoolDailySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Pool this snapshot belongs to. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO>>> PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrentWithHttpInfoAsync(string pool = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// LiquidityPoolFees (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPoolFees.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO>> PANCAKESWAPV3ETHEREUMLiquidityPoolFeesCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// LiquidityPoolFees (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPoolFees.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO>>> PANCAKESWAPV3ETHEREUMLiquidityPoolFeesCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// LiquidityPoolHourlySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPoolHourlySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">The pool this snapshot belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO>> PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrentAsync(string pool = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// LiquidityPoolHourlySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPoolHourlySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">The pool this snapshot belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO>>> PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrentWithHttpInfoAsync(string pool = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// LiquidityPools (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPools.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Smart contract address of the pool. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMLiquidityPoolDTO>> PANCAKESWAPV3ETHEREUMLiquidityPoolsCurrentAsync(string id = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// LiquidityPools (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPools.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Smart contract address of the pool. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolDTO>>> PANCAKESWAPV3ETHEREUMLiquidityPoolsCurrentWithHttpInfoAsync(string id = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// PositionSnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets positionSnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMPositionSnapshotDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMPositionSnapshotDTO>> PANCAKESWAPV3ETHEREUMPositionSnapshotsCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// PositionSnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets positionSnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMPositionSnapshotDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PANCAKESWAPV3ETHEREUMPositionSnapshotDTO>>> PANCAKESWAPV3ETHEREUMPositionSnapshotsCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Positions (current)
        /// </summary>
        /// <remarks>
        /// Gets positions.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">The liquidity pool in which this position was opened (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMPositionDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMPositionDTO>> PANCAKESWAPV3ETHEREUMPositionsCurrentAsync(string pool = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Positions (current)
        /// </summary>
        /// <remarks>
        /// Gets positions.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">The liquidity pool in which this position was opened (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMPositionDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PANCAKESWAPV3ETHEREUMPositionDTO>>> PANCAKESWAPV3ETHEREUMPositionsCurrentWithHttpInfoAsync(string pool = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// RewardTokens (current)
        /// </summary>
        /// <remarks>
        /// Gets rewardTokens.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMRewardTokenDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMRewardTokenDTO>> PANCAKESWAPV3ETHEREUMRewardTokensCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// RewardTokens (current)
        /// </summary>
        /// <remarks>
        /// Gets rewardTokens.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMRewardTokenDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PANCAKESWAPV3ETHEREUMRewardTokenDTO>>> PANCAKESWAPV3ETHEREUMRewardTokensCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Swaps (current)
        /// </summary>
        /// <remarks>
        /// Gets swaps.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMSwapDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMSwapDTO>> PANCAKESWAPV3ETHEREUMSwapsCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Swaps (current)
        /// </summary>
        /// <remarks>
        /// Gets swaps.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMSwapDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PANCAKESWAPV3ETHEREUMSwapDTO>>> PANCAKESWAPV3ETHEREUMSwapsCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// TickDailySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets tickDailySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">liquidity pool this tick belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO>> PANCAKESWAPV3ETHEREUMTickDailySnapshotsCurrentAsync(string pool = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// TickDailySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets tickDailySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">liquidity pool this tick belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO>>> PANCAKESWAPV3ETHEREUMTickDailySnapshotsCurrentWithHttpInfoAsync(string pool = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// TickHourlySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets tickHourlySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">liquidity pool this tick belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO>> PANCAKESWAPV3ETHEREUMTickHourlySnapshotsCurrentAsync(string pool = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// TickHourlySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets tickHourlySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">liquidity pool this tick belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO>>> PANCAKESWAPV3ETHEREUMTickHourlySnapshotsCurrentWithHttpInfoAsync(string pool = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ticks (current)
        /// </summary>
        /// <remarks>
        /// Gets ticks.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Liquidity pool this tick belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMTickDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMTickDTO>> PANCAKESWAPV3ETHEREUMTicksCurrentAsync(string pool = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ticks (current)
        /// </summary>
        /// <remarks>
        /// Gets ticks.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Liquidity pool this tick belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMTickDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PANCAKESWAPV3ETHEREUMTickDTO>>> PANCAKESWAPV3ETHEREUMTicksCurrentWithHttpInfoAsync(string pool = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// TokenWhiteListSymbols (current)
        /// </summary>
        /// <remarks>
        /// Gets tokenWhiteListSymbols.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO>> PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolsCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// TokenWhiteListSymbols (current)
        /// </summary>
        /// <remarks>
        /// Gets tokenWhiteListSymbols.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO>>> PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolsCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// TokenWhiteLists (current)
        /// </summary>
        /// <remarks>
        /// Gets tokenWhiteLists.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMTokenWhiteListDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMTokenWhiteListDTO>> PANCAKESWAPV3ETHEREUMTokenWhiteListsCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// TokenWhiteLists (current)
        /// </summary>
        /// <remarks>
        /// Gets tokenWhiteLists.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMTokenWhiteListDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PANCAKESWAPV3ETHEREUMTokenWhiteListDTO>>> PANCAKESWAPV3ETHEREUMTokenWhiteListsCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Tokens (current)
        /// </summary>
        /// <remarks>
        /// Gets tokens.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Smart contract address of the token. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMTokenDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMTokenDTO>> PANCAKESWAPV3ETHEREUMTokensCurrentAsync(string id = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Tokens (current)
        /// </summary>
        /// <remarks>
        /// Gets tokens.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Smart contract address of the token. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMTokenDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PANCAKESWAPV3ETHEREUMTokenDTO>>> PANCAKESWAPV3ETHEREUMTokensCurrentWithHttpInfoAsync(string id = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// UsageMetricsDailySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets usageMetricsDailySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO>> PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// UsageMetricsDailySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets usageMetricsDailySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO>>> PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// UsageMetricsHourlySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets usageMetricsHourlySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO>> PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// UsageMetricsHourlySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets usageMetricsHourlySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO>>> PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Withdraws (current)
        /// </summary>
        /// <remarks>
        /// Gets withdraws.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMWithdrawDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMWithdrawDTO>> PANCAKESWAPV3ETHEREUMWithdrawsCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Withdraws (current)
        /// </summary>
        /// <remarks>
        /// Gets withdraws.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMWithdrawDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PANCAKESWAPV3ETHEREUMWithdrawDTO>>> PANCAKESWAPV3ETHEREUMWithdrawsCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPANCAKESWAPV3ETHEREUMApi : IPANCAKESWAPV3ETHEREUMApiSync, IPANCAKESWAPV3ETHEREUMApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PANCAKESWAPV3ETHEREUMApi : IPANCAKESWAPV3ETHEREUMApi
    {
        private CoinAPI.EMS.REST.V1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PANCAKESWAPV3ETHEREUMApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PANCAKESWAPV3ETHEREUMApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PANCAKESWAPV3ETHEREUMApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PANCAKESWAPV3ETHEREUMApi(string basePath)
        {
            this.Configuration = CoinAPI.EMS.REST.V1.Client.Configuration.MergeConfigurations(
                CoinAPI.EMS.REST.V1.Client.GlobalConfiguration.Instance,
                new CoinAPI.EMS.REST.V1.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CoinAPI.EMS.REST.V1.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CoinAPI.EMS.REST.V1.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CoinAPI.EMS.REST.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PANCAKESWAPV3ETHEREUMApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PANCAKESWAPV3ETHEREUMApi(CoinAPI.EMS.REST.V1.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CoinAPI.EMS.REST.V1.Client.Configuration.MergeConfigurations(
                CoinAPI.EMS.REST.V1.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CoinAPI.EMS.REST.V1.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CoinAPI.EMS.REST.V1.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CoinAPI.EMS.REST.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PANCAKESWAPV3ETHEREUMApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PANCAKESWAPV3ETHEREUMApi(CoinAPI.EMS.REST.V1.Client.ISynchronousClient client, CoinAPI.EMS.REST.V1.Client.IAsynchronousClient asyncClient, CoinAPI.EMS.REST.V1.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CoinAPI.EMS.REST.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CoinAPI.EMS.REST.V1.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CoinAPI.EMS.REST.V1.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CoinAPI.EMS.REST.V1.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CoinAPI.EMS.REST.V1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Accounts (current) Gets accounts.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMAccountDTO&gt;</returns>
        public List<PANCAKESWAPV3ETHEREUMAccountDTO> PANCAKESWAPV3ETHEREUMAccountsCurrent(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMAccountDTO>> localVarResponse = PANCAKESWAPV3ETHEREUMAccountsCurrentWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accounts (current) Gets accounts.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMAccountDTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMAccountDTO>> PANCAKESWAPV3ETHEREUMAccountsCurrentWithHttpInfo(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMAccountsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PANCAKESWAPV3ETHEREUMAccountDTO>>("/v1/dapps/pancakeswap-v3-ethereum/accounts/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMAccountsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accounts (current) Gets accounts.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMAccountDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMAccountDTO>> PANCAKESWAPV3ETHEREUMAccountsCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMAccountDTO>> localVarResponse = await PANCAKESWAPV3ETHEREUMAccountsCurrentWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accounts (current) Gets accounts.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMAccountDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMAccountDTO>>> PANCAKESWAPV3ETHEREUMAccountsCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMAccountsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PANCAKESWAPV3ETHEREUMAccountDTO>>("/v1/dapps/pancakeswap-v3-ethereum/accounts/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMAccountsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ActiveAccounts (current) Gets activeAccounts.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMActiveAccountDTO&gt;</returns>
        public List<PANCAKESWAPV3ETHEREUMActiveAccountDTO> PANCAKESWAPV3ETHEREUMActiveAccountsCurrent(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMActiveAccountDTO>> localVarResponse = PANCAKESWAPV3ETHEREUMActiveAccountsCurrentWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// ActiveAccounts (current) Gets activeAccounts.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMActiveAccountDTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMActiveAccountDTO>> PANCAKESWAPV3ETHEREUMActiveAccountsCurrentWithHttpInfo(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMActiveAccountsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PANCAKESWAPV3ETHEREUMActiveAccountDTO>>("/v1/dapps/pancakeswap-v3-ethereum/activeAccounts/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMActiveAccountsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ActiveAccounts (current) Gets activeAccounts.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMActiveAccountDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMActiveAccountDTO>> PANCAKESWAPV3ETHEREUMActiveAccountsCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMActiveAccountDTO>> localVarResponse = await PANCAKESWAPV3ETHEREUMActiveAccountsCurrentWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ActiveAccounts (current) Gets activeAccounts.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMActiveAccountDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMActiveAccountDTO>>> PANCAKESWAPV3ETHEREUMActiveAccountsCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMActiveAccountsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PANCAKESWAPV3ETHEREUMActiveAccountDTO>>("/v1/dapps/pancakeswap-v3-ethereum/activeAccounts/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMActiveAccountsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deposits (current) Gets deposits.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMDepositDTO&gt;</returns>
        public List<PANCAKESWAPV3ETHEREUMDepositDTO> PANCAKESWAPV3ETHEREUMDepositsCurrent(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMDepositDTO>> localVarResponse = PANCAKESWAPV3ETHEREUMDepositsCurrentWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deposits (current) Gets deposits.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMDepositDTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMDepositDTO>> PANCAKESWAPV3ETHEREUMDepositsCurrentWithHttpInfo(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMDepositsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PANCAKESWAPV3ETHEREUMDepositDTO>>("/v1/dapps/pancakeswap-v3-ethereum/deposits/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMDepositsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deposits (current) Gets deposits.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMDepositDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMDepositDTO>> PANCAKESWAPV3ETHEREUMDepositsCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMDepositDTO>> localVarResponse = await PANCAKESWAPV3ETHEREUMDepositsCurrentWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deposits (current) Gets deposits.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMDepositDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMDepositDTO>>> PANCAKESWAPV3ETHEREUMDepositsCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMDepositsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PANCAKESWAPV3ETHEREUMDepositDTO>>("/v1/dapps/pancakeswap-v3-ethereum/deposits/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMDepositsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DexAmmProtocols (current) Gets dexAmmProtocols.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO&gt;</returns>
        public List<PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO> PANCAKESWAPV3ETHEREUMDexAmmProtocolsCurrent(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO>> localVarResponse = PANCAKESWAPV3ETHEREUMDexAmmProtocolsCurrentWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// DexAmmProtocols (current) Gets dexAmmProtocols.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO>> PANCAKESWAPV3ETHEREUMDexAmmProtocolsCurrentWithHttpInfo(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMDexAmmProtocolsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO>>("/v1/dapps/pancakeswap-v3-ethereum/dexAmmProtocols/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMDexAmmProtocolsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DexAmmProtocols (current) Gets dexAmmProtocols.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO>> PANCAKESWAPV3ETHEREUMDexAmmProtocolsCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO>> localVarResponse = await PANCAKESWAPV3ETHEREUMDexAmmProtocolsCurrentWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DexAmmProtocols (current) Gets dexAmmProtocols.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO>>> PANCAKESWAPV3ETHEREUMDexAmmProtocolsCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMDexAmmProtocolsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO>>("/v1/dapps/pancakeswap-v3-ethereum/dexAmmProtocols/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMDexAmmProtocolsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// FinancialsDailySnapshots (current) Gets financialsDailySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO&gt;</returns>
        public List<PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO> PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotsCurrent(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO>> localVarResponse = PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotsCurrentWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// FinancialsDailySnapshots (current) Gets financialsDailySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO>> PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotsCurrentWithHttpInfo(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO>>("/v1/dapps/pancakeswap-v3-ethereum/financialsDailySnapshots/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// FinancialsDailySnapshots (current) Gets financialsDailySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO>> PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotsCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO>> localVarResponse = await PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotsCurrentWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// FinancialsDailySnapshots (current) Gets financialsDailySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO>>> PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotsCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO>>("/v1/dapps/pancakeswap-v3-ethereum/financialsDailySnapshots/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// LiquidityPoolAmounts (current) Gets liquidityPoolAmounts.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Smart contract address of the pool. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO&gt;</returns>
        public List<PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO> PANCAKESWAPV3ETHEREUMLiquidityPoolAmountsCurrent(string id = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO>> localVarResponse = PANCAKESWAPV3ETHEREUMLiquidityPoolAmountsCurrentWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// LiquidityPoolAmounts (current) Gets liquidityPoolAmounts.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Smart contract address of the pool. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO>> PANCAKESWAPV3ETHEREUMLiquidityPoolAmountsCurrentWithHttpInfo(string id = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }

            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMLiquidityPoolAmountsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO>>("/v1/dapps/pancakeswap-v3-ethereum/liquidityPoolAmounts/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMLiquidityPoolAmountsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// LiquidityPoolAmounts (current) Gets liquidityPoolAmounts.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Smart contract address of the pool. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO>> PANCAKESWAPV3ETHEREUMLiquidityPoolAmountsCurrentAsync(string id = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO>> localVarResponse = await PANCAKESWAPV3ETHEREUMLiquidityPoolAmountsCurrentWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// LiquidityPoolAmounts (current) Gets liquidityPoolAmounts.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Smart contract address of the pool. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO>>> PANCAKESWAPV3ETHEREUMLiquidityPoolAmountsCurrentWithHttpInfoAsync(string id = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }

            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMLiquidityPoolAmountsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO>>("/v1/dapps/pancakeswap-v3-ethereum/liquidityPoolAmounts/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMLiquidityPoolAmountsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// LiquidityPoolDailySnapshots (current) Gets liquidityPoolDailySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Pool this snapshot belongs to. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO&gt;</returns>
        public List<PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO> PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrent(string pool = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO>> localVarResponse = PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrentWithHttpInfo(pool);
            return localVarResponse.Data;
        }

        /// <summary>
        /// LiquidityPoolDailySnapshots (current) Gets liquidityPoolDailySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Pool this snapshot belongs to. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO>> PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrentWithHttpInfo(string pool = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pool != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "pool", pool));
            }

            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO>>("/v1/dapps/pancakeswap-v3-ethereum/liquidityPoolDailySnapshots/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// LiquidityPoolDailySnapshots (current) Gets liquidityPoolDailySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Pool this snapshot belongs to. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO>> PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrentAsync(string pool = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO>> localVarResponse = await PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrentWithHttpInfoAsync(pool, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// LiquidityPoolDailySnapshots (current) Gets liquidityPoolDailySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Pool this snapshot belongs to. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO>>> PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrentWithHttpInfoAsync(string pool = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pool != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "pool", pool));
            }

            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO>>("/v1/dapps/pancakeswap-v3-ethereum/liquidityPoolDailySnapshots/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// LiquidityPoolFees (current) Gets liquidityPoolFees.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO&gt;</returns>
        public List<PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO> PANCAKESWAPV3ETHEREUMLiquidityPoolFeesCurrent(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO>> localVarResponse = PANCAKESWAPV3ETHEREUMLiquidityPoolFeesCurrentWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// LiquidityPoolFees (current) Gets liquidityPoolFees.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO>> PANCAKESWAPV3ETHEREUMLiquidityPoolFeesCurrentWithHttpInfo(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMLiquidityPoolFeesCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO>>("/v1/dapps/pancakeswap-v3-ethereum/liquidityPoolFees/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMLiquidityPoolFeesCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// LiquidityPoolFees (current) Gets liquidityPoolFees.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO>> PANCAKESWAPV3ETHEREUMLiquidityPoolFeesCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO>> localVarResponse = await PANCAKESWAPV3ETHEREUMLiquidityPoolFeesCurrentWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// LiquidityPoolFees (current) Gets liquidityPoolFees.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO>>> PANCAKESWAPV3ETHEREUMLiquidityPoolFeesCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMLiquidityPoolFeesCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO>>("/v1/dapps/pancakeswap-v3-ethereum/liquidityPoolFees/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMLiquidityPoolFeesCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// LiquidityPoolHourlySnapshots (current) Gets liquidityPoolHourlySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">The pool this snapshot belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO&gt;</returns>
        public List<PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO> PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrent(string pool = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO>> localVarResponse = PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrentWithHttpInfo(pool);
            return localVarResponse.Data;
        }

        /// <summary>
        /// LiquidityPoolHourlySnapshots (current) Gets liquidityPoolHourlySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">The pool this snapshot belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO>> PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrentWithHttpInfo(string pool = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pool != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "pool", pool));
            }

            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO>>("/v1/dapps/pancakeswap-v3-ethereum/liquidityPoolHourlySnapshots/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// LiquidityPoolHourlySnapshots (current) Gets liquidityPoolHourlySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">The pool this snapshot belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO>> PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrentAsync(string pool = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO>> localVarResponse = await PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrentWithHttpInfoAsync(pool, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// LiquidityPoolHourlySnapshots (current) Gets liquidityPoolHourlySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">The pool this snapshot belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO>>> PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrentWithHttpInfoAsync(string pool = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pool != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "pool", pool));
            }

            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO>>("/v1/dapps/pancakeswap-v3-ethereum/liquidityPoolHourlySnapshots/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// LiquidityPools (current) Gets liquidityPools.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Smart contract address of the pool. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolDTO&gt;</returns>
        public List<PANCAKESWAPV3ETHEREUMLiquidityPoolDTO> PANCAKESWAPV3ETHEREUMLiquidityPoolsCurrent(string id = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolDTO>> localVarResponse = PANCAKESWAPV3ETHEREUMLiquidityPoolsCurrentWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// LiquidityPools (current) Gets liquidityPools.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Smart contract address of the pool. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolDTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolDTO>> PANCAKESWAPV3ETHEREUMLiquidityPoolsCurrentWithHttpInfo(string id = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }

            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMLiquidityPoolsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PANCAKESWAPV3ETHEREUMLiquidityPoolDTO>>("/v1/dapps/pancakeswap-v3-ethereum/liquidityPools/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMLiquidityPoolsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// LiquidityPools (current) Gets liquidityPools.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Smart contract address of the pool. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMLiquidityPoolDTO>> PANCAKESWAPV3ETHEREUMLiquidityPoolsCurrentAsync(string id = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolDTO>> localVarResponse = await PANCAKESWAPV3ETHEREUMLiquidityPoolsCurrentWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// LiquidityPools (current) Gets liquidityPools.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Smart contract address of the pool. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMLiquidityPoolDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMLiquidityPoolDTO>>> PANCAKESWAPV3ETHEREUMLiquidityPoolsCurrentWithHttpInfoAsync(string id = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }

            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMLiquidityPoolsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PANCAKESWAPV3ETHEREUMLiquidityPoolDTO>>("/v1/dapps/pancakeswap-v3-ethereum/liquidityPools/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMLiquidityPoolsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PositionSnapshots (current) Gets positionSnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMPositionSnapshotDTO&gt;</returns>
        public List<PANCAKESWAPV3ETHEREUMPositionSnapshotDTO> PANCAKESWAPV3ETHEREUMPositionSnapshotsCurrent(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMPositionSnapshotDTO>> localVarResponse = PANCAKESWAPV3ETHEREUMPositionSnapshotsCurrentWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// PositionSnapshots (current) Gets positionSnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMPositionSnapshotDTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMPositionSnapshotDTO>> PANCAKESWAPV3ETHEREUMPositionSnapshotsCurrentWithHttpInfo(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMPositionSnapshotsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PANCAKESWAPV3ETHEREUMPositionSnapshotDTO>>("/v1/dapps/pancakeswap-v3-ethereum/positionSnapshots/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMPositionSnapshotsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PositionSnapshots (current) Gets positionSnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMPositionSnapshotDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMPositionSnapshotDTO>> PANCAKESWAPV3ETHEREUMPositionSnapshotsCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMPositionSnapshotDTO>> localVarResponse = await PANCAKESWAPV3ETHEREUMPositionSnapshotsCurrentWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PositionSnapshots (current) Gets positionSnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMPositionSnapshotDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMPositionSnapshotDTO>>> PANCAKESWAPV3ETHEREUMPositionSnapshotsCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMPositionSnapshotsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PANCAKESWAPV3ETHEREUMPositionSnapshotDTO>>("/v1/dapps/pancakeswap-v3-ethereum/positionSnapshots/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMPositionSnapshotsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Positions (current) Gets positions.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">The liquidity pool in which this position was opened (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMPositionDTO&gt;</returns>
        public List<PANCAKESWAPV3ETHEREUMPositionDTO> PANCAKESWAPV3ETHEREUMPositionsCurrent(string pool = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMPositionDTO>> localVarResponse = PANCAKESWAPV3ETHEREUMPositionsCurrentWithHttpInfo(pool);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Positions (current) Gets positions.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">The liquidity pool in which this position was opened (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMPositionDTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMPositionDTO>> PANCAKESWAPV3ETHEREUMPositionsCurrentWithHttpInfo(string pool = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pool != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "pool", pool));
            }

            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMPositionsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PANCAKESWAPV3ETHEREUMPositionDTO>>("/v1/dapps/pancakeswap-v3-ethereum/positions/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMPositionsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Positions (current) Gets positions.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">The liquidity pool in which this position was opened (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMPositionDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMPositionDTO>> PANCAKESWAPV3ETHEREUMPositionsCurrentAsync(string pool = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMPositionDTO>> localVarResponse = await PANCAKESWAPV3ETHEREUMPositionsCurrentWithHttpInfoAsync(pool, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Positions (current) Gets positions.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">The liquidity pool in which this position was opened (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMPositionDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMPositionDTO>>> PANCAKESWAPV3ETHEREUMPositionsCurrentWithHttpInfoAsync(string pool = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pool != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "pool", pool));
            }

            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMPositionsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PANCAKESWAPV3ETHEREUMPositionDTO>>("/v1/dapps/pancakeswap-v3-ethereum/positions/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMPositionsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// RewardTokens (current) Gets rewardTokens.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMRewardTokenDTO&gt;</returns>
        public List<PANCAKESWAPV3ETHEREUMRewardTokenDTO> PANCAKESWAPV3ETHEREUMRewardTokensCurrent(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMRewardTokenDTO>> localVarResponse = PANCAKESWAPV3ETHEREUMRewardTokensCurrentWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// RewardTokens (current) Gets rewardTokens.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMRewardTokenDTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMRewardTokenDTO>> PANCAKESWAPV3ETHEREUMRewardTokensCurrentWithHttpInfo(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMRewardTokensCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PANCAKESWAPV3ETHEREUMRewardTokenDTO>>("/v1/dapps/pancakeswap-v3-ethereum/rewardTokens/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMRewardTokensCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// RewardTokens (current) Gets rewardTokens.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMRewardTokenDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMRewardTokenDTO>> PANCAKESWAPV3ETHEREUMRewardTokensCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMRewardTokenDTO>> localVarResponse = await PANCAKESWAPV3ETHEREUMRewardTokensCurrentWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// RewardTokens (current) Gets rewardTokens.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMRewardTokenDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMRewardTokenDTO>>> PANCAKESWAPV3ETHEREUMRewardTokensCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMRewardTokensCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PANCAKESWAPV3ETHEREUMRewardTokenDTO>>("/v1/dapps/pancakeswap-v3-ethereum/rewardTokens/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMRewardTokensCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Swaps (current) Gets swaps.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMSwapDTO&gt;</returns>
        public List<PANCAKESWAPV3ETHEREUMSwapDTO> PANCAKESWAPV3ETHEREUMSwapsCurrent(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMSwapDTO>> localVarResponse = PANCAKESWAPV3ETHEREUMSwapsCurrentWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Swaps (current) Gets swaps.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMSwapDTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMSwapDTO>> PANCAKESWAPV3ETHEREUMSwapsCurrentWithHttpInfo(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMSwapsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PANCAKESWAPV3ETHEREUMSwapDTO>>("/v1/dapps/pancakeswap-v3-ethereum/swaps/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMSwapsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Swaps (current) Gets swaps.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMSwapDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMSwapDTO>> PANCAKESWAPV3ETHEREUMSwapsCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMSwapDTO>> localVarResponse = await PANCAKESWAPV3ETHEREUMSwapsCurrentWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Swaps (current) Gets swaps.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMSwapDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMSwapDTO>>> PANCAKESWAPV3ETHEREUMSwapsCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMSwapsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PANCAKESWAPV3ETHEREUMSwapDTO>>("/v1/dapps/pancakeswap-v3-ethereum/swaps/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMSwapsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TickDailySnapshots (current) Gets tickDailySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">liquidity pool this tick belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO&gt;</returns>
        public List<PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO> PANCAKESWAPV3ETHEREUMTickDailySnapshotsCurrent(string pool = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO>> localVarResponse = PANCAKESWAPV3ETHEREUMTickDailySnapshotsCurrentWithHttpInfo(pool);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TickDailySnapshots (current) Gets tickDailySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">liquidity pool this tick belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO>> PANCAKESWAPV3ETHEREUMTickDailySnapshotsCurrentWithHttpInfo(string pool = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pool != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "pool", pool));
            }

            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMTickDailySnapshotsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO>>("/v1/dapps/pancakeswap-v3-ethereum/tickDailySnapshots/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMTickDailySnapshotsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TickDailySnapshots (current) Gets tickDailySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">liquidity pool this tick belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO>> PANCAKESWAPV3ETHEREUMTickDailySnapshotsCurrentAsync(string pool = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO>> localVarResponse = await PANCAKESWAPV3ETHEREUMTickDailySnapshotsCurrentWithHttpInfoAsync(pool, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TickDailySnapshots (current) Gets tickDailySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">liquidity pool this tick belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO>>> PANCAKESWAPV3ETHEREUMTickDailySnapshotsCurrentWithHttpInfoAsync(string pool = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pool != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "pool", pool));
            }

            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMTickDailySnapshotsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO>>("/v1/dapps/pancakeswap-v3-ethereum/tickDailySnapshots/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMTickDailySnapshotsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TickHourlySnapshots (current) Gets tickHourlySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">liquidity pool this tick belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO&gt;</returns>
        public List<PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO> PANCAKESWAPV3ETHEREUMTickHourlySnapshotsCurrent(string pool = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO>> localVarResponse = PANCAKESWAPV3ETHEREUMTickHourlySnapshotsCurrentWithHttpInfo(pool);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TickHourlySnapshots (current) Gets tickHourlySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">liquidity pool this tick belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO>> PANCAKESWAPV3ETHEREUMTickHourlySnapshotsCurrentWithHttpInfo(string pool = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pool != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "pool", pool));
            }

            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMTickHourlySnapshotsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO>>("/v1/dapps/pancakeswap-v3-ethereum/tickHourlySnapshots/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMTickHourlySnapshotsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TickHourlySnapshots (current) Gets tickHourlySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">liquidity pool this tick belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO>> PANCAKESWAPV3ETHEREUMTickHourlySnapshotsCurrentAsync(string pool = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO>> localVarResponse = await PANCAKESWAPV3ETHEREUMTickHourlySnapshotsCurrentWithHttpInfoAsync(pool, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TickHourlySnapshots (current) Gets tickHourlySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">liquidity pool this tick belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO>>> PANCAKESWAPV3ETHEREUMTickHourlySnapshotsCurrentWithHttpInfoAsync(string pool = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pool != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "pool", pool));
            }

            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMTickHourlySnapshotsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO>>("/v1/dapps/pancakeswap-v3-ethereum/tickHourlySnapshots/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMTickHourlySnapshotsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ticks (current) Gets ticks.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Liquidity pool this tick belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMTickDTO&gt;</returns>
        public List<PANCAKESWAPV3ETHEREUMTickDTO> PANCAKESWAPV3ETHEREUMTicksCurrent(string pool = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMTickDTO>> localVarResponse = PANCAKESWAPV3ETHEREUMTicksCurrentWithHttpInfo(pool);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ticks (current) Gets ticks.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Liquidity pool this tick belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMTickDTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMTickDTO>> PANCAKESWAPV3ETHEREUMTicksCurrentWithHttpInfo(string pool = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pool != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "pool", pool));
            }

            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMTicksCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PANCAKESWAPV3ETHEREUMTickDTO>>("/v1/dapps/pancakeswap-v3-ethereum/ticks/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMTicksCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ticks (current) Gets ticks.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Liquidity pool this tick belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMTickDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMTickDTO>> PANCAKESWAPV3ETHEREUMTicksCurrentAsync(string pool = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMTickDTO>> localVarResponse = await PANCAKESWAPV3ETHEREUMTicksCurrentWithHttpInfoAsync(pool, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ticks (current) Gets ticks.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Liquidity pool this tick belongs to (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMTickDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMTickDTO>>> PANCAKESWAPV3ETHEREUMTicksCurrentWithHttpInfoAsync(string pool = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pool != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "pool", pool));
            }

            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMTicksCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PANCAKESWAPV3ETHEREUMTickDTO>>("/v1/dapps/pancakeswap-v3-ethereum/ticks/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMTicksCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TokenWhiteListSymbols (current) Gets tokenWhiteListSymbols.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO&gt;</returns>
        public List<PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO> PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolsCurrent(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO>> localVarResponse = PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolsCurrentWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// TokenWhiteListSymbols (current) Gets tokenWhiteListSymbols.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO>> PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolsCurrentWithHttpInfo(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO>>("/v1/dapps/pancakeswap-v3-ethereum/tokenWhiteListSymbols/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TokenWhiteListSymbols (current) Gets tokenWhiteListSymbols.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO>> PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolsCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO>> localVarResponse = await PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolsCurrentWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TokenWhiteListSymbols (current) Gets tokenWhiteListSymbols.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO>>> PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolsCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO>>("/v1/dapps/pancakeswap-v3-ethereum/tokenWhiteListSymbols/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TokenWhiteLists (current) Gets tokenWhiteLists.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMTokenWhiteListDTO&gt;</returns>
        public List<PANCAKESWAPV3ETHEREUMTokenWhiteListDTO> PANCAKESWAPV3ETHEREUMTokenWhiteListsCurrent(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMTokenWhiteListDTO>> localVarResponse = PANCAKESWAPV3ETHEREUMTokenWhiteListsCurrentWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// TokenWhiteLists (current) Gets tokenWhiteLists.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMTokenWhiteListDTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMTokenWhiteListDTO>> PANCAKESWAPV3ETHEREUMTokenWhiteListsCurrentWithHttpInfo(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMTokenWhiteListsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PANCAKESWAPV3ETHEREUMTokenWhiteListDTO>>("/v1/dapps/pancakeswap-v3-ethereum/tokenWhiteLists/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMTokenWhiteListsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TokenWhiteLists (current) Gets tokenWhiteLists.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMTokenWhiteListDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMTokenWhiteListDTO>> PANCAKESWAPV3ETHEREUMTokenWhiteListsCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMTokenWhiteListDTO>> localVarResponse = await PANCAKESWAPV3ETHEREUMTokenWhiteListsCurrentWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TokenWhiteLists (current) Gets tokenWhiteLists.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMTokenWhiteListDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMTokenWhiteListDTO>>> PANCAKESWAPV3ETHEREUMTokenWhiteListsCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMTokenWhiteListsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PANCAKESWAPV3ETHEREUMTokenWhiteListDTO>>("/v1/dapps/pancakeswap-v3-ethereum/tokenWhiteLists/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMTokenWhiteListsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tokens (current) Gets tokens.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Smart contract address of the token. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMTokenDTO&gt;</returns>
        public List<PANCAKESWAPV3ETHEREUMTokenDTO> PANCAKESWAPV3ETHEREUMTokensCurrent(string id = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMTokenDTO>> localVarResponse = PANCAKESWAPV3ETHEREUMTokensCurrentWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tokens (current) Gets tokens.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Smart contract address of the token. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMTokenDTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMTokenDTO>> PANCAKESWAPV3ETHEREUMTokensCurrentWithHttpInfo(string id = default(string), int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }

            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMTokensCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PANCAKESWAPV3ETHEREUMTokenDTO>>("/v1/dapps/pancakeswap-v3-ethereum/tokens/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMTokensCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tokens (current) Gets tokens.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Smart contract address of the token. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMTokenDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMTokenDTO>> PANCAKESWAPV3ETHEREUMTokensCurrentAsync(string id = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMTokenDTO>> localVarResponse = await PANCAKESWAPV3ETHEREUMTokensCurrentWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Tokens (current) Gets tokens.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Smart contract address of the token. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMTokenDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMTokenDTO>>> PANCAKESWAPV3ETHEREUMTokensCurrentWithHttpInfoAsync(string id = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(CoinAPI.EMS.REST.V1.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }

            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMTokensCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PANCAKESWAPV3ETHEREUMTokenDTO>>("/v1/dapps/pancakeswap-v3-ethereum/tokens/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMTokensCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UsageMetricsDailySnapshots (current) Gets usageMetricsDailySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO&gt;</returns>
        public List<PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO> PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrent(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO>> localVarResponse = PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrentWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// UsageMetricsDailySnapshots (current) Gets usageMetricsDailySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO>> PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrentWithHttpInfo(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO>>("/v1/dapps/pancakeswap-v3-ethereum/usageMetricsDailySnapshots/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UsageMetricsDailySnapshots (current) Gets usageMetricsDailySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO>> PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO>> localVarResponse = await PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrentWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// UsageMetricsDailySnapshots (current) Gets usageMetricsDailySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO>>> PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO>>("/v1/dapps/pancakeswap-v3-ethereum/usageMetricsDailySnapshots/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UsageMetricsHourlySnapshots (current) Gets usageMetricsHourlySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO&gt;</returns>
        public List<PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO> PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrent(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO>> localVarResponse = PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrentWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// UsageMetricsHourlySnapshots (current) Gets usageMetricsHourlySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO>> PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrentWithHttpInfo(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO>>("/v1/dapps/pancakeswap-v3-ethereum/usageMetricsHourlySnapshots/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// UsageMetricsHourlySnapshots (current) Gets usageMetricsHourlySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO>> PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO>> localVarResponse = await PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrentWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// UsageMetricsHourlySnapshots (current) Gets usageMetricsHourlySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO>>> PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO>>("/v1/dapps/pancakeswap-v3-ethereum/usageMetricsHourlySnapshots/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Withdraws (current) Gets withdraws.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PANCAKESWAPV3ETHEREUMWithdrawDTO&gt;</returns>
        public List<PANCAKESWAPV3ETHEREUMWithdrawDTO> PANCAKESWAPV3ETHEREUMWithdrawsCurrent(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMWithdrawDTO>> localVarResponse = PANCAKESWAPV3ETHEREUMWithdrawsCurrentWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Withdraws (current) Gets withdraws.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PANCAKESWAPV3ETHEREUMWithdrawDTO&gt;</returns>
        public CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMWithdrawDTO>> PANCAKESWAPV3ETHEREUMWithdrawsCurrentWithHttpInfo(int operationIndex = 0)
        {
            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMWithdrawsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PANCAKESWAPV3ETHEREUMWithdrawDTO>>("/v1/dapps/pancakeswap-v3-ethereum/withdraws/current", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMWithdrawsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Withdraws (current) Gets withdraws.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PANCAKESWAPV3ETHEREUMWithdrawDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PANCAKESWAPV3ETHEREUMWithdrawDTO>> PANCAKESWAPV3ETHEREUMWithdrawsCurrentAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMWithdrawDTO>> localVarResponse = await PANCAKESWAPV3ETHEREUMWithdrawsCurrentWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Withdraws (current) Gets withdraws.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PANCAKESWAPV3ETHEREUMWithdrawDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<CoinAPI.EMS.REST.V1.Client.ApiResponse<List<PANCAKESWAPV3ETHEREUMWithdrawDTO>>> PANCAKESWAPV3ETHEREUMWithdrawsCurrentWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoinAPI.EMS.REST.V1.Client.RequestOptions localVarRequestOptions = new CoinAPI.EMS.REST.V1.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };

            var localVarContentType = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = CoinAPI.EMS.REST.V1.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PANCAKESWAPV3ETHEREUMApi.PANCAKESWAPV3ETHEREUMWithdrawsCurrent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PANCAKESWAPV3ETHEREUMWithdrawDTO>>("/v1/dapps/pancakeswap-v3-ethereum/withdraws/current", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PANCAKESWAPV3ETHEREUMWithdrawsCurrent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
