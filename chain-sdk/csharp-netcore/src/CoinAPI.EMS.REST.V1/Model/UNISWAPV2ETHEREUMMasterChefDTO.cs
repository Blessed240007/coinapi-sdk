/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.EMS.REST.V1.Client.OpenAPIDateConverter;

namespace CoinAPI.EMS.REST.V1.Model
{
    /// <summary>
    /// Smart contract that is used to manage the liquidity mining program on Uniswap V2.
    /// </summary>
    [DataContract(Name = "UNISWAP_V2_ETHEREUM.MasterChefDTO")]
    public partial class UNISWAPV2ETHEREUMMasterChefDTO : IEquatable<UNISWAPV2ETHEREUMMasterChefDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UNISWAPV2ETHEREUMMasterChefDTO" /> class.
        /// </summary>
        /// <param name="entryTime">entryTime.</param>
        /// <param name="recvTime">recvTime.</param>
        /// <param name="blockNumber">Number of block in which entity was recorded..</param>
        /// <param name="blockRange">blockRange.</param>
        /// <param name="id">(masterChef type) - (pid referenced in the masterchef contract).</param>
        /// <param name="address">Address of the masterchef contract.</param>
        /// <param name="totalAllocPoint">Total allocation point of all staking pools.</param>
        /// <param name="rewardTokenRate">Amount of reward tokens emitted per block or timestamp.</param>
        /// <param name="rewardTokenInterval">Indicates whether rewards are indicated by block or timestamp.</param>
        /// <param name="adjustedRewardTokenRate">Reward token rate given after you adjust for allocations either burned or not applicable.</param>
        /// <param name="lastUpdatedRewardRate">Last time the adjusted reward token rate was updated.</param>
        public UNISWAPV2ETHEREUMMasterChefDTO(DateTime entryTime = default(DateTime), DateTime recvTime = default(DateTime), long blockNumber = default(long), string blockRange = default(string), string id = default(string), string address = default(string), string totalAllocPoint = default(string), string rewardTokenRate = default(string), string rewardTokenInterval = default(string), string adjustedRewardTokenRate = default(string), string lastUpdatedRewardRate = default(string))
        {
            this.EntryTime = entryTime;
            this.RecvTime = recvTime;
            this.BlockNumber = blockNumber;
            this.BlockRange = blockRange;
            this.Id = id;
            this.Address = address;
            this.TotalAllocPoint = totalAllocPoint;
            this.RewardTokenRate = rewardTokenRate;
            this.RewardTokenInterval = rewardTokenInterval;
            this.AdjustedRewardTokenRate = adjustedRewardTokenRate;
            this.LastUpdatedRewardRate = lastUpdatedRewardRate;
        }

        /// <summary>
        /// Gets or Sets EntryTime
        /// </summary>
        [DataMember(Name = "entry_time", EmitDefaultValue = false)]
        public DateTime EntryTime { get; set; }

        /// <summary>
        /// Gets or Sets RecvTime
        /// </summary>
        [DataMember(Name = "recv_time", EmitDefaultValue = false)]
        public DateTime RecvTime { get; set; }

        /// <summary>
        /// Number of block in which entity was recorded.
        /// </summary>
        /// <value>Number of block in which entity was recorded.</value>
        [DataMember(Name = "block_number", EmitDefaultValue = false)]
        public long BlockNumber { get; set; }

        /// <summary>
        /// Gets or Sets BlockRange
        /// </summary>
        [DataMember(Name = "block_range", EmitDefaultValue = true)]
        public string BlockRange { get; set; }

        /// <summary>
        /// (masterChef type) - (pid referenced in the masterchef contract)
        /// </summary>
        /// <value>(masterChef type) - (pid referenced in the masterchef contract)</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Address of the masterchef contract
        /// </summary>
        /// <value>Address of the masterchef contract</value>
        [DataMember(Name = "address", EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// Total allocation point of all staking pools
        /// </summary>
        /// <value>Total allocation point of all staking pools</value>
        [DataMember(Name = "total_alloc_point", EmitDefaultValue = true)]
        public string TotalAllocPoint { get; set; }

        /// <summary>
        /// Amount of reward tokens emitted per block or timestamp
        /// </summary>
        /// <value>Amount of reward tokens emitted per block or timestamp</value>
        [DataMember(Name = "reward_token_rate", EmitDefaultValue = true)]
        public string RewardTokenRate { get; set; }

        /// <summary>
        /// Indicates whether rewards are indicated by block or timestamp
        /// </summary>
        /// <value>Indicates whether rewards are indicated by block or timestamp</value>
        [DataMember(Name = "reward_token_interval", EmitDefaultValue = true)]
        public string RewardTokenInterval { get; set; }

        /// <summary>
        /// Reward token rate given after you adjust for allocations either burned or not applicable
        /// </summary>
        /// <value>Reward token rate given after you adjust for allocations either burned or not applicable</value>
        [DataMember(Name = "adjusted_reward_token_rate", EmitDefaultValue = true)]
        public string AdjustedRewardTokenRate { get; set; }

        /// <summary>
        /// Last time the adjusted reward token rate was updated
        /// </summary>
        /// <value>Last time the adjusted reward token rate was updated</value>
        [DataMember(Name = "last_updated_reward_rate", EmitDefaultValue = true)]
        public string LastUpdatedRewardRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UNISWAPV2ETHEREUMMasterChefDTO {\n");
            sb.Append("  EntryTime: ").Append(EntryTime).Append("\n");
            sb.Append("  RecvTime: ").Append(RecvTime).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  BlockRange: ").Append(BlockRange).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  TotalAllocPoint: ").Append(TotalAllocPoint).Append("\n");
            sb.Append("  RewardTokenRate: ").Append(RewardTokenRate).Append("\n");
            sb.Append("  RewardTokenInterval: ").Append(RewardTokenInterval).Append("\n");
            sb.Append("  AdjustedRewardTokenRate: ").Append(AdjustedRewardTokenRate).Append("\n");
            sb.Append("  LastUpdatedRewardRate: ").Append(LastUpdatedRewardRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UNISWAPV2ETHEREUMMasterChefDTO);
        }

        /// <summary>
        /// Returns true if UNISWAPV2ETHEREUMMasterChefDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of UNISWAPV2ETHEREUMMasterChefDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UNISWAPV2ETHEREUMMasterChefDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntryTime == input.EntryTime ||
                    (this.EntryTime != null &&
                    this.EntryTime.Equals(input.EntryTime))
                ) && 
                (
                    this.RecvTime == input.RecvTime ||
                    (this.RecvTime != null &&
                    this.RecvTime.Equals(input.RecvTime))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    this.BlockNumber.Equals(input.BlockNumber)
                ) && 
                (
                    this.BlockRange == input.BlockRange ||
                    (this.BlockRange != null &&
                    this.BlockRange.Equals(input.BlockRange))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.TotalAllocPoint == input.TotalAllocPoint ||
                    (this.TotalAllocPoint != null &&
                    this.TotalAllocPoint.Equals(input.TotalAllocPoint))
                ) && 
                (
                    this.RewardTokenRate == input.RewardTokenRate ||
                    (this.RewardTokenRate != null &&
                    this.RewardTokenRate.Equals(input.RewardTokenRate))
                ) && 
                (
                    this.RewardTokenInterval == input.RewardTokenInterval ||
                    (this.RewardTokenInterval != null &&
                    this.RewardTokenInterval.Equals(input.RewardTokenInterval))
                ) && 
                (
                    this.AdjustedRewardTokenRate == input.AdjustedRewardTokenRate ||
                    (this.AdjustedRewardTokenRate != null &&
                    this.AdjustedRewardTokenRate.Equals(input.AdjustedRewardTokenRate))
                ) && 
                (
                    this.LastUpdatedRewardRate == input.LastUpdatedRewardRate ||
                    (this.LastUpdatedRewardRate != null &&
                    this.LastUpdatedRewardRate.Equals(input.LastUpdatedRewardRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntryTime != null)
                {
                    hashCode = (hashCode * 59) + this.EntryTime.GetHashCode();
                }
                if (this.RecvTime != null)
                {
                    hashCode = (hashCode * 59) + this.RecvTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BlockNumber.GetHashCode();
                if (this.BlockRange != null)
                {
                    hashCode = (hashCode * 59) + this.BlockRange.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.TotalAllocPoint != null)
                {
                    hashCode = (hashCode * 59) + this.TotalAllocPoint.GetHashCode();
                }
                if (this.RewardTokenRate != null)
                {
                    hashCode = (hashCode * 59) + this.RewardTokenRate.GetHashCode();
                }
                if (this.RewardTokenInterval != null)
                {
                    hashCode = (hashCode * 59) + this.RewardTokenInterval.GetHashCode();
                }
                if (this.AdjustedRewardTokenRate != null)
                {
                    hashCode = (hashCode * 59) + this.AdjustedRewardTokenRate.GetHashCode();
                }
                if (this.LastUpdatedRewardRate != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdatedRewardRate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
