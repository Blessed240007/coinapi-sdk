/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.EMS.REST.V1.Client.OpenAPIDateConverter;

namespace CoinAPI.EMS.REST.V1.Model
{
    /// <summary>
    /// CURVEFINANCEETHEREUMSwapDTO
    /// </summary>
    [DataContract(Name = "CURVE_FINANCE_ETHEREUM.SwapDTO")]
    public partial class CURVEFINANCEETHEREUMSwapDTO : IEquatable<CURVEFINANCEETHEREUMSwapDTO>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EvaluatedAggressor
        /// </summary>
        [DataMember(Name = "evaluated_aggressor", EmitDefaultValue = false)]
        public TransactionsETradeAggressiveSide? EvaluatedAggressor { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CURVEFINANCEETHEREUMSwapDTO" /> class.
        /// </summary>
        /// <param name="entryTime">entryTime.</param>
        /// <param name="recvTime">recvTime.</param>
        /// <param name="blockNumber">Block number of this event.</param>
        /// <param name="id">Swap-(transaction hash)-(log index).</param>
        /// <param name="hash">Transaction hash of the transaction that emitted this event.</param>
        /// <param name="logIndex">Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0.</param>
        /// <param name="protocol">The protocol this transaction belongs to.</param>
        /// <param name="to">Address that received the tokens.</param>
        /// <param name="from">Address that sent the tokens.</param>
        /// <param name="timestamp">Timestamp of this event.</param>
        /// <param name="tokenIn">Token deposited into pool.</param>
        /// <param name="amountIn">Amount of token deposited into pool in native units.</param>
        /// <param name="amountInUsd">Amount of token deposited into pool in USD.</param>
        /// <param name="tokenOut">Token withdrawn from pool.</param>
        /// <param name="amountOut">Amount of token withdrawn from pool in native units.</param>
        /// <param name="amountOutUsd">Amount of token withdrawn from pool in USD.</param>
        /// <param name="pool">The pool involving this transaction.</param>
        /// <param name="evaluatedAggressor">evaluatedAggressor.</param>
        public CURVEFINANCEETHEREUMSwapDTO(DateTime entryTime = default(DateTime), DateTime recvTime = default(DateTime), string blockNumber = default(string), string id = default(string), string hash = default(string), int logIndex = default(int), string protocol = default(string), string to = default(string), string from = default(string), string timestamp = default(string), string tokenIn = default(string), string amountIn = default(string), string amountInUsd = default(string), string tokenOut = default(string), string amountOut = default(string), string amountOutUsd = default(string), string pool = default(string), TransactionsETradeAggressiveSide? evaluatedAggressor = default(TransactionsETradeAggressiveSide?))
        {
            this.EntryTime = entryTime;
            this.RecvTime = recvTime;
            this.BlockNumber = blockNumber;
            this.Id = id;
            this.Hash = hash;
            this.LogIndex = logIndex;
            this.Protocol = protocol;
            this.To = to;
            this.From = from;
            this.Timestamp = timestamp;
            this.TokenIn = tokenIn;
            this.AmountIn = amountIn;
            this.AmountInUsd = amountInUsd;
            this.TokenOut = tokenOut;
            this.AmountOut = amountOut;
            this.AmountOutUsd = amountOutUsd;
            this.Pool = pool;
            this.EvaluatedAggressor = evaluatedAggressor;
        }

        /// <summary>
        /// Gets or Sets EntryTime
        /// </summary>
        [DataMember(Name = "entry_time", EmitDefaultValue = false)]
        public DateTime EntryTime { get; set; }

        /// <summary>
        /// Gets or Sets RecvTime
        /// </summary>
        [DataMember(Name = "recv_time", EmitDefaultValue = false)]
        public DateTime RecvTime { get; set; }

        /// <summary>
        /// Block number of this event
        /// </summary>
        /// <value>Block number of this event</value>
        [DataMember(Name = "block_number", EmitDefaultValue = true)]
        public string BlockNumber { get; set; }

        /// <summary>
        /// Swap-(transaction hash)-(log index)
        /// </summary>
        /// <value>Swap-(transaction hash)-(log index)</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Transaction hash of the transaction that emitted this event
        /// </summary>
        /// <value>Transaction hash of the transaction that emitted this event</value>
        [DataMember(Name = "hash", EmitDefaultValue = true)]
        public string Hash { get; set; }

        /// <summary>
        /// Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0
        /// </summary>
        /// <value>Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0</value>
        [DataMember(Name = "log_index", EmitDefaultValue = false)]
        public int LogIndex { get; set; }

        /// <summary>
        /// The protocol this transaction belongs to
        /// </summary>
        /// <value>The protocol this transaction belongs to</value>
        [DataMember(Name = "protocol", EmitDefaultValue = true)]
        public string Protocol { get; set; }

        /// <summary>
        /// Address that received the tokens
        /// </summary>
        /// <value>Address that received the tokens</value>
        [DataMember(Name = "to", EmitDefaultValue = true)]
        public string To { get; set; }

        /// <summary>
        /// Address that sent the tokens
        /// </summary>
        /// <value>Address that sent the tokens</value>
        [DataMember(Name = "from", EmitDefaultValue = true)]
        public string From { get; set; }

        /// <summary>
        /// Timestamp of this event
        /// </summary>
        /// <value>Timestamp of this event</value>
        [DataMember(Name = "timestamp", EmitDefaultValue = true)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Token deposited into pool
        /// </summary>
        /// <value>Token deposited into pool</value>
        [DataMember(Name = "token_in", EmitDefaultValue = true)]
        public string TokenIn { get; set; }

        /// <summary>
        /// Amount of token deposited into pool in native units
        /// </summary>
        /// <value>Amount of token deposited into pool in native units</value>
        [DataMember(Name = "amount_in", EmitDefaultValue = true)]
        public string AmountIn { get; set; }

        /// <summary>
        /// Amount of token deposited into pool in USD
        /// </summary>
        /// <value>Amount of token deposited into pool in USD</value>
        [DataMember(Name = "amount_in_usd", EmitDefaultValue = true)]
        public string AmountInUsd { get; set; }

        /// <summary>
        /// Token withdrawn from pool
        /// </summary>
        /// <value>Token withdrawn from pool</value>
        [DataMember(Name = "token_out", EmitDefaultValue = true)]
        public string TokenOut { get; set; }

        /// <summary>
        /// Amount of token withdrawn from pool in native units
        /// </summary>
        /// <value>Amount of token withdrawn from pool in native units</value>
        [DataMember(Name = "amount_out", EmitDefaultValue = true)]
        public string AmountOut { get; set; }

        /// <summary>
        /// Amount of token withdrawn from pool in USD
        /// </summary>
        /// <value>Amount of token withdrawn from pool in USD</value>
        [DataMember(Name = "amount_out_usd", EmitDefaultValue = true)]
        public string AmountOutUsd { get; set; }

        /// <summary>
        /// The pool involving this transaction
        /// </summary>
        /// <value>The pool involving this transaction</value>
        [DataMember(Name = "pool", EmitDefaultValue = true)]
        public string Pool { get; set; }

        /// <summary>
        /// Gets or Sets PoolId
        /// </summary>
        [DataMember(Name = "pool_id", EmitDefaultValue = true)]
        public string PoolId { get; private set; }

        /// <summary>
        /// Returns false as PoolId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePoolId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets TransactionId
        /// </summary>
        [DataMember(Name = "transaction_id", EmitDefaultValue = true)]
        public string TransactionId { get; private set; }

        /// <summary>
        /// Returns false as TransactionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTransactionId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets EvaluatedPrice
        /// </summary>
        [DataMember(Name = "evaluated_price", EmitDefaultValue = false)]
        public double EvaluatedPrice { get; private set; }

        /// <summary>
        /// Returns false as EvaluatedPrice should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEvaluatedPrice()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets EvaluatedAmount
        /// </summary>
        [DataMember(Name = "evaluated_amount", EmitDefaultValue = false)]
        public double EvaluatedAmount { get; private set; }

        /// <summary>
        /// Returns false as EvaluatedAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEvaluatedAmount()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CURVEFINANCEETHEREUMSwapDTO {\n");
            sb.Append("  EntryTime: ").Append(EntryTime).Append("\n");
            sb.Append("  RecvTime: ").Append(RecvTime).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  LogIndex: ").Append(LogIndex).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  TokenIn: ").Append(TokenIn).Append("\n");
            sb.Append("  AmountIn: ").Append(AmountIn).Append("\n");
            sb.Append("  AmountInUsd: ").Append(AmountInUsd).Append("\n");
            sb.Append("  TokenOut: ").Append(TokenOut).Append("\n");
            sb.Append("  AmountOut: ").Append(AmountOut).Append("\n");
            sb.Append("  AmountOutUsd: ").Append(AmountOutUsd).Append("\n");
            sb.Append("  Pool: ").Append(Pool).Append("\n");
            sb.Append("  PoolId: ").Append(PoolId).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  EvaluatedPrice: ").Append(EvaluatedPrice).Append("\n");
            sb.Append("  EvaluatedAmount: ").Append(EvaluatedAmount).Append("\n");
            sb.Append("  EvaluatedAggressor: ").Append(EvaluatedAggressor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CURVEFINANCEETHEREUMSwapDTO);
        }

        /// <summary>
        /// Returns true if CURVEFINANCEETHEREUMSwapDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of CURVEFINANCEETHEREUMSwapDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CURVEFINANCEETHEREUMSwapDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntryTime == input.EntryTime ||
                    (this.EntryTime != null &&
                    this.EntryTime.Equals(input.EntryTime))
                ) && 
                (
                    this.RecvTime == input.RecvTime ||
                    (this.RecvTime != null &&
                    this.RecvTime.Equals(input.RecvTime))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    (this.BlockNumber != null &&
                    this.BlockNumber.Equals(input.BlockNumber))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.LogIndex == input.LogIndex ||
                    this.LogIndex.Equals(input.LogIndex)
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.TokenIn == input.TokenIn ||
                    (this.TokenIn != null &&
                    this.TokenIn.Equals(input.TokenIn))
                ) && 
                (
                    this.AmountIn == input.AmountIn ||
                    (this.AmountIn != null &&
                    this.AmountIn.Equals(input.AmountIn))
                ) && 
                (
                    this.AmountInUsd == input.AmountInUsd ||
                    (this.AmountInUsd != null &&
                    this.AmountInUsd.Equals(input.AmountInUsd))
                ) && 
                (
                    this.TokenOut == input.TokenOut ||
                    (this.TokenOut != null &&
                    this.TokenOut.Equals(input.TokenOut))
                ) && 
                (
                    this.AmountOut == input.AmountOut ||
                    (this.AmountOut != null &&
                    this.AmountOut.Equals(input.AmountOut))
                ) && 
                (
                    this.AmountOutUsd == input.AmountOutUsd ||
                    (this.AmountOutUsd != null &&
                    this.AmountOutUsd.Equals(input.AmountOutUsd))
                ) && 
                (
                    this.Pool == input.Pool ||
                    (this.Pool != null &&
                    this.Pool.Equals(input.Pool))
                ) && 
                (
                    this.PoolId == input.PoolId ||
                    (this.PoolId != null &&
                    this.PoolId.Equals(input.PoolId))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.EvaluatedPrice == input.EvaluatedPrice ||
                    this.EvaluatedPrice.Equals(input.EvaluatedPrice)
                ) && 
                (
                    this.EvaluatedAmount == input.EvaluatedAmount ||
                    this.EvaluatedAmount.Equals(input.EvaluatedAmount)
                ) && 
                (
                    this.EvaluatedAggressor == input.EvaluatedAggressor ||
                    this.EvaluatedAggressor.Equals(input.EvaluatedAggressor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntryTime != null)
                {
                    hashCode = (hashCode * 59) + this.EntryTime.GetHashCode();
                }
                if (this.RecvTime != null)
                {
                    hashCode = (hashCode * 59) + this.RecvTime.GetHashCode();
                }
                if (this.BlockNumber != null)
                {
                    hashCode = (hashCode * 59) + this.BlockNumber.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Hash != null)
                {
                    hashCode = (hashCode * 59) + this.Hash.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LogIndex.GetHashCode();
                if (this.Protocol != null)
                {
                    hashCode = (hashCode * 59) + this.Protocol.GetHashCode();
                }
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                if (this.From != null)
                {
                    hashCode = (hashCode * 59) + this.From.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                if (this.TokenIn != null)
                {
                    hashCode = (hashCode * 59) + this.TokenIn.GetHashCode();
                }
                if (this.AmountIn != null)
                {
                    hashCode = (hashCode * 59) + this.AmountIn.GetHashCode();
                }
                if (this.AmountInUsd != null)
                {
                    hashCode = (hashCode * 59) + this.AmountInUsd.GetHashCode();
                }
                if (this.TokenOut != null)
                {
                    hashCode = (hashCode * 59) + this.TokenOut.GetHashCode();
                }
                if (this.AmountOut != null)
                {
                    hashCode = (hashCode * 59) + this.AmountOut.GetHashCode();
                }
                if (this.AmountOutUsd != null)
                {
                    hashCode = (hashCode * 59) + this.AmountOutUsd.GetHashCode();
                }
                if (this.Pool != null)
                {
                    hashCode = (hashCode * 59) + this.Pool.GetHashCode();
                }
                if (this.PoolId != null)
                {
                    hashCode = (hashCode * 59) + this.PoolId.GetHashCode();
                }
                if (this.TransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EvaluatedPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.EvaluatedAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.EvaluatedAggressor.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
