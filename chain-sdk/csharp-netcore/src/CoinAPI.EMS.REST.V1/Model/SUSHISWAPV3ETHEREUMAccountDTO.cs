/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.EMS.REST.V1.Client.OpenAPIDateConverter;

namespace CoinAPI.EMS.REST.V1.Model
{
    /// <summary>
    /// SUSHISWAPV3ETHEREUMAccountDTO
    /// </summary>
    [DataContract(Name = "SUSHISWAP_V3_ETHEREUM.AccountDTO")]
    public partial class SUSHISWAPV3ETHEREUMAccountDTO : IEquatable<SUSHISWAPV3ETHEREUMAccountDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SUSHISWAPV3ETHEREUMAccountDTO" /> class.
        /// </summary>
        /// <param name="entryTime">entryTime.</param>
        /// <param name="recvTime">recvTime.</param>
        /// <param name="blockNumber">Number of block in which entity was recorded..</param>
        /// <param name="blockRange">blockRange.</param>
        /// <param name="id">Account address..</param>
        /// <param name="positionCount">Number of positions this account has..</param>
        /// <param name="openPositionCount">Number of open positions this account has..</param>
        /// <param name="closedPositionCount">Number of closed positions this account has..</param>
        /// <param name="depositCount">Number of deposits this account made..</param>
        /// <param name="withdrawCount">Number of withdrawals this account made..</param>
        /// <param name="swapCount">Number of times this account has traded/swapped..</param>
        public SUSHISWAPV3ETHEREUMAccountDTO(DateTime entryTime = default(DateTime), DateTime recvTime = default(DateTime), long blockNumber = default(long), string blockRange = default(string), string id = default(string), int positionCount = default(int), int openPositionCount = default(int), int closedPositionCount = default(int), int depositCount = default(int), int withdrawCount = default(int), int swapCount = default(int))
        {
            this.EntryTime = entryTime;
            this.RecvTime = recvTime;
            this.BlockNumber = blockNumber;
            this.BlockRange = blockRange;
            this.Id = id;
            this.PositionCount = positionCount;
            this.OpenPositionCount = openPositionCount;
            this.ClosedPositionCount = closedPositionCount;
            this.DepositCount = depositCount;
            this.WithdrawCount = withdrawCount;
            this.SwapCount = swapCount;
        }

        /// <summary>
        /// Gets or Sets EntryTime
        /// </summary>
        [DataMember(Name = "entry_time", EmitDefaultValue = false)]
        public DateTime EntryTime { get; set; }

        /// <summary>
        /// Gets or Sets RecvTime
        /// </summary>
        [DataMember(Name = "recv_time", EmitDefaultValue = false)]
        public DateTime RecvTime { get; set; }

        /// <summary>
        /// Number of block in which entity was recorded.
        /// </summary>
        /// <value>Number of block in which entity was recorded.</value>
        [DataMember(Name = "block_number", EmitDefaultValue = false)]
        public long BlockNumber { get; set; }

        /// <summary>
        /// Gets or Sets BlockRange
        /// </summary>
        [DataMember(Name = "block_range", EmitDefaultValue = true)]
        public string BlockRange { get; set; }

        /// <summary>
        /// Account address.
        /// </summary>
        /// <value>Account address.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Number of positions this account has.
        /// </summary>
        /// <value>Number of positions this account has.</value>
        [DataMember(Name = "position_count", EmitDefaultValue = false)]
        public int PositionCount { get; set; }

        /// <summary>
        /// Number of open positions this account has.
        /// </summary>
        /// <value>Number of open positions this account has.</value>
        [DataMember(Name = "open_position_count", EmitDefaultValue = false)]
        public int OpenPositionCount { get; set; }

        /// <summary>
        /// Number of closed positions this account has.
        /// </summary>
        /// <value>Number of closed positions this account has.</value>
        [DataMember(Name = "closed_position_count", EmitDefaultValue = false)]
        public int ClosedPositionCount { get; set; }

        /// <summary>
        /// Number of deposits this account made.
        /// </summary>
        /// <value>Number of deposits this account made.</value>
        [DataMember(Name = "deposit_count", EmitDefaultValue = false)]
        public int DepositCount { get; set; }

        /// <summary>
        /// Number of withdrawals this account made.
        /// </summary>
        /// <value>Number of withdrawals this account made.</value>
        [DataMember(Name = "withdraw_count", EmitDefaultValue = false)]
        public int WithdrawCount { get; set; }

        /// <summary>
        /// Number of times this account has traded/swapped.
        /// </summary>
        /// <value>Number of times this account has traded/swapped.</value>
        [DataMember(Name = "swap_count", EmitDefaultValue = false)]
        public int SwapCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SUSHISWAPV3ETHEREUMAccountDTO {\n");
            sb.Append("  EntryTime: ").Append(EntryTime).Append("\n");
            sb.Append("  RecvTime: ").Append(RecvTime).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  BlockRange: ").Append(BlockRange).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PositionCount: ").Append(PositionCount).Append("\n");
            sb.Append("  OpenPositionCount: ").Append(OpenPositionCount).Append("\n");
            sb.Append("  ClosedPositionCount: ").Append(ClosedPositionCount).Append("\n");
            sb.Append("  DepositCount: ").Append(DepositCount).Append("\n");
            sb.Append("  WithdrawCount: ").Append(WithdrawCount).Append("\n");
            sb.Append("  SwapCount: ").Append(SwapCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SUSHISWAPV3ETHEREUMAccountDTO);
        }

        /// <summary>
        /// Returns true if SUSHISWAPV3ETHEREUMAccountDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of SUSHISWAPV3ETHEREUMAccountDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SUSHISWAPV3ETHEREUMAccountDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntryTime == input.EntryTime ||
                    (this.EntryTime != null &&
                    this.EntryTime.Equals(input.EntryTime))
                ) && 
                (
                    this.RecvTime == input.RecvTime ||
                    (this.RecvTime != null &&
                    this.RecvTime.Equals(input.RecvTime))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    this.BlockNumber.Equals(input.BlockNumber)
                ) && 
                (
                    this.BlockRange == input.BlockRange ||
                    (this.BlockRange != null &&
                    this.BlockRange.Equals(input.BlockRange))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PositionCount == input.PositionCount ||
                    this.PositionCount.Equals(input.PositionCount)
                ) && 
                (
                    this.OpenPositionCount == input.OpenPositionCount ||
                    this.OpenPositionCount.Equals(input.OpenPositionCount)
                ) && 
                (
                    this.ClosedPositionCount == input.ClosedPositionCount ||
                    this.ClosedPositionCount.Equals(input.ClosedPositionCount)
                ) && 
                (
                    this.DepositCount == input.DepositCount ||
                    this.DepositCount.Equals(input.DepositCount)
                ) && 
                (
                    this.WithdrawCount == input.WithdrawCount ||
                    this.WithdrawCount.Equals(input.WithdrawCount)
                ) && 
                (
                    this.SwapCount == input.SwapCount ||
                    this.SwapCount.Equals(input.SwapCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntryTime != null)
                {
                    hashCode = (hashCode * 59) + this.EntryTime.GetHashCode();
                }
                if (this.RecvTime != null)
                {
                    hashCode = (hashCode * 59) + this.RecvTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BlockNumber.GetHashCode();
                if (this.BlockRange != null)
                {
                    hashCode = (hashCode * 59) + this.BlockRange.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PositionCount.GetHashCode();
                hashCode = (hashCode * 59) + this.OpenPositionCount.GetHashCode();
                hashCode = (hashCode * 59) + this.ClosedPositionCount.GetHashCode();
                hashCode = (hashCode * 59) + this.DepositCount.GetHashCode();
                hashCode = (hashCode * 59) + this.WithdrawCount.GetHashCode();
                hashCode = (hashCode * 59) + this.SwapCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
