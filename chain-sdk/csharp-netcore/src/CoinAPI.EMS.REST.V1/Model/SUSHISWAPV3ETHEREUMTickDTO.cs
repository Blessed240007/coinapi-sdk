/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.EMS.REST.V1.Client.OpenAPIDateConverter;

namespace CoinAPI.EMS.REST.V1.Model
{
    /// <summary>
    /// SUSHISWAPV3ETHEREUMTickDTO
    /// </summary>
    [DataContract(Name = "SUSHISWAP_V3_ETHEREUM.TickDTO")]
    public partial class SUSHISWAPV3ETHEREUMTickDTO : IEquatable<SUSHISWAPV3ETHEREUMTickDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SUSHISWAPV3ETHEREUMTickDTO" /> class.
        /// </summary>
        /// <param name="entryTime">entryTime.</param>
        /// <param name="recvTime">recvTime.</param>
        /// <param name="blockNumber">Number of block in which entity was recorded..</param>
        /// <param name="id">(pool address)-(tick index).</param>
        /// <param name="index">tick index.</param>
        /// <param name="pool">Liquidity pool this tick belongs to.</param>
        /// <param name="createdTimestamp">Creation timestamp.</param>
        /// <param name="createdBlockNumber">Creation block number.</param>
        /// <param name="prices">calculated price of token0 of tick within this pool - constant.</param>
        /// <param name="liquidityGross">total liquidity pool has as tick lower or upper.</param>
        /// <param name="liquidityGrossUsd">total liquidity in USD pool has as tick lower or upper.</param>
        /// <param name="liquidityNet">how much liquidity changes when tick crossed.</param>
        /// <param name="liquidityNetUsd">how much liquidity in USD changes when tick crossed.</param>
        /// <param name="lastSnapshotDayId">Day ID of the most recent daily snapshot.</param>
        /// <param name="lastSnapshotHourId">Hour ID of the most recent hourly snapshot.</param>
        /// <param name="lastUpdateTimestamp">Timestamp of the last time this entity was updated.</param>
        /// <param name="lastUpdateBlockNumber">Block number of the last time this entity was updated.</param>
        public SUSHISWAPV3ETHEREUMTickDTO(DateTime entryTime = default(DateTime), DateTime recvTime = default(DateTime), long blockNumber = default(long), string id = default(string), string index = default(string), string pool = default(string), string createdTimestamp = default(string), string createdBlockNumber = default(string), List<string> prices = default(List<string>), string liquidityGross = default(string), string liquidityGrossUsd = default(string), string liquidityNet = default(string), string liquidityNetUsd = default(string), int lastSnapshotDayId = default(int), int lastSnapshotHourId = default(int), string lastUpdateTimestamp = default(string), string lastUpdateBlockNumber = default(string))
        {
            this.EntryTime = entryTime;
            this.RecvTime = recvTime;
            this.BlockNumber = blockNumber;
            this.Id = id;
            this.Index = index;
            this.Pool = pool;
            this.CreatedTimestamp = createdTimestamp;
            this.CreatedBlockNumber = createdBlockNumber;
            this.Prices = prices;
            this.LiquidityGross = liquidityGross;
            this.LiquidityGrossUsd = liquidityGrossUsd;
            this.LiquidityNet = liquidityNet;
            this.LiquidityNetUsd = liquidityNetUsd;
            this.LastSnapshotDayId = lastSnapshotDayId;
            this.LastSnapshotHourId = lastSnapshotHourId;
            this.LastUpdateTimestamp = lastUpdateTimestamp;
            this.LastUpdateBlockNumber = lastUpdateBlockNumber;
        }

        /// <summary>
        /// Gets or Sets EntryTime
        /// </summary>
        [DataMember(Name = "entry_time", EmitDefaultValue = false)]
        public DateTime EntryTime { get; set; }

        /// <summary>
        /// Gets or Sets RecvTime
        /// </summary>
        [DataMember(Name = "recv_time", EmitDefaultValue = false)]
        public DateTime RecvTime { get; set; }

        /// <summary>
        /// Number of block in which entity was recorded.
        /// </summary>
        /// <value>Number of block in which entity was recorded.</value>
        [DataMember(Name = "block_number", EmitDefaultValue = false)]
        public long BlockNumber { get; set; }

        /// <summary>
        /// (pool address)-(tick index)
        /// </summary>
        /// <value>(pool address)-(tick index)</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// tick index
        /// </summary>
        /// <value>tick index</value>
        [DataMember(Name = "index", EmitDefaultValue = true)]
        public string Index { get; set; }

        /// <summary>
        /// Liquidity pool this tick belongs to
        /// </summary>
        /// <value>Liquidity pool this tick belongs to</value>
        [DataMember(Name = "pool", EmitDefaultValue = true)]
        public string Pool { get; set; }

        /// <summary>
        /// Creation timestamp
        /// </summary>
        /// <value>Creation timestamp</value>
        [DataMember(Name = "created_timestamp", EmitDefaultValue = true)]
        public string CreatedTimestamp { get; set; }

        /// <summary>
        /// Creation block number
        /// </summary>
        /// <value>Creation block number</value>
        [DataMember(Name = "created_block_number", EmitDefaultValue = true)]
        public string CreatedBlockNumber { get; set; }

        /// <summary>
        /// calculated price of token0 of tick within this pool - constant
        /// </summary>
        /// <value>calculated price of token0 of tick within this pool - constant</value>
        [DataMember(Name = "prices", EmitDefaultValue = true)]
        public List<string> Prices { get; set; }

        /// <summary>
        /// total liquidity pool has as tick lower or upper
        /// </summary>
        /// <value>total liquidity pool has as tick lower or upper</value>
        [DataMember(Name = "liquidity_gross", EmitDefaultValue = true)]
        public string LiquidityGross { get; set; }

        /// <summary>
        /// total liquidity in USD pool has as tick lower or upper
        /// </summary>
        /// <value>total liquidity in USD pool has as tick lower or upper</value>
        [DataMember(Name = "liquidity_gross_usd", EmitDefaultValue = true)]
        public string LiquidityGrossUsd { get; set; }

        /// <summary>
        /// how much liquidity changes when tick crossed
        /// </summary>
        /// <value>how much liquidity changes when tick crossed</value>
        [DataMember(Name = "liquidity_net", EmitDefaultValue = true)]
        public string LiquidityNet { get; set; }

        /// <summary>
        /// how much liquidity in USD changes when tick crossed
        /// </summary>
        /// <value>how much liquidity in USD changes when tick crossed</value>
        [DataMember(Name = "liquidity_net_usd", EmitDefaultValue = true)]
        public string LiquidityNetUsd { get; set; }

        /// <summary>
        /// Day ID of the most recent daily snapshot
        /// </summary>
        /// <value>Day ID of the most recent daily snapshot</value>
        [DataMember(Name = "last_snapshot_day_id", EmitDefaultValue = false)]
        public int LastSnapshotDayId { get; set; }

        /// <summary>
        /// Hour ID of the most recent hourly snapshot
        /// </summary>
        /// <value>Hour ID of the most recent hourly snapshot</value>
        [DataMember(Name = "last_snapshot_hour_id", EmitDefaultValue = false)]
        public int LastSnapshotHourId { get; set; }

        /// <summary>
        /// Timestamp of the last time this entity was updated
        /// </summary>
        /// <value>Timestamp of the last time this entity was updated</value>
        [DataMember(Name = "last_update_timestamp", EmitDefaultValue = true)]
        public string LastUpdateTimestamp { get; set; }

        /// <summary>
        /// Block number of the last time this entity was updated
        /// </summary>
        /// <value>Block number of the last time this entity was updated</value>
        [DataMember(Name = "last_update_block_number", EmitDefaultValue = true)]
        public string LastUpdateBlockNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SUSHISWAPV3ETHEREUMTickDTO {\n");
            sb.Append("  EntryTime: ").Append(EntryTime).Append("\n");
            sb.Append("  RecvTime: ").Append(RecvTime).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Pool: ").Append(Pool).Append("\n");
            sb.Append("  CreatedTimestamp: ").Append(CreatedTimestamp).Append("\n");
            sb.Append("  CreatedBlockNumber: ").Append(CreatedBlockNumber).Append("\n");
            sb.Append("  Prices: ").Append(Prices).Append("\n");
            sb.Append("  LiquidityGross: ").Append(LiquidityGross).Append("\n");
            sb.Append("  LiquidityGrossUsd: ").Append(LiquidityGrossUsd).Append("\n");
            sb.Append("  LiquidityNet: ").Append(LiquidityNet).Append("\n");
            sb.Append("  LiquidityNetUsd: ").Append(LiquidityNetUsd).Append("\n");
            sb.Append("  LastSnapshotDayId: ").Append(LastSnapshotDayId).Append("\n");
            sb.Append("  LastSnapshotHourId: ").Append(LastSnapshotHourId).Append("\n");
            sb.Append("  LastUpdateTimestamp: ").Append(LastUpdateTimestamp).Append("\n");
            sb.Append("  LastUpdateBlockNumber: ").Append(LastUpdateBlockNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SUSHISWAPV3ETHEREUMTickDTO);
        }

        /// <summary>
        /// Returns true if SUSHISWAPV3ETHEREUMTickDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of SUSHISWAPV3ETHEREUMTickDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SUSHISWAPV3ETHEREUMTickDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntryTime == input.EntryTime ||
                    (this.EntryTime != null &&
                    this.EntryTime.Equals(input.EntryTime))
                ) && 
                (
                    this.RecvTime == input.RecvTime ||
                    (this.RecvTime != null &&
                    this.RecvTime.Equals(input.RecvTime))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    this.BlockNumber.Equals(input.BlockNumber)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Index == input.Index ||
                    (this.Index != null &&
                    this.Index.Equals(input.Index))
                ) && 
                (
                    this.Pool == input.Pool ||
                    (this.Pool != null &&
                    this.Pool.Equals(input.Pool))
                ) && 
                (
                    this.CreatedTimestamp == input.CreatedTimestamp ||
                    (this.CreatedTimestamp != null &&
                    this.CreatedTimestamp.Equals(input.CreatedTimestamp))
                ) && 
                (
                    this.CreatedBlockNumber == input.CreatedBlockNumber ||
                    (this.CreatedBlockNumber != null &&
                    this.CreatedBlockNumber.Equals(input.CreatedBlockNumber))
                ) && 
                (
                    this.Prices == input.Prices ||
                    this.Prices != null &&
                    input.Prices != null &&
                    this.Prices.SequenceEqual(input.Prices)
                ) && 
                (
                    this.LiquidityGross == input.LiquidityGross ||
                    (this.LiquidityGross != null &&
                    this.LiquidityGross.Equals(input.LiquidityGross))
                ) && 
                (
                    this.LiquidityGrossUsd == input.LiquidityGrossUsd ||
                    (this.LiquidityGrossUsd != null &&
                    this.LiquidityGrossUsd.Equals(input.LiquidityGrossUsd))
                ) && 
                (
                    this.LiquidityNet == input.LiquidityNet ||
                    (this.LiquidityNet != null &&
                    this.LiquidityNet.Equals(input.LiquidityNet))
                ) && 
                (
                    this.LiquidityNetUsd == input.LiquidityNetUsd ||
                    (this.LiquidityNetUsd != null &&
                    this.LiquidityNetUsd.Equals(input.LiquidityNetUsd))
                ) && 
                (
                    this.LastSnapshotDayId == input.LastSnapshotDayId ||
                    this.LastSnapshotDayId.Equals(input.LastSnapshotDayId)
                ) && 
                (
                    this.LastSnapshotHourId == input.LastSnapshotHourId ||
                    this.LastSnapshotHourId.Equals(input.LastSnapshotHourId)
                ) && 
                (
                    this.LastUpdateTimestamp == input.LastUpdateTimestamp ||
                    (this.LastUpdateTimestamp != null &&
                    this.LastUpdateTimestamp.Equals(input.LastUpdateTimestamp))
                ) && 
                (
                    this.LastUpdateBlockNumber == input.LastUpdateBlockNumber ||
                    (this.LastUpdateBlockNumber != null &&
                    this.LastUpdateBlockNumber.Equals(input.LastUpdateBlockNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntryTime != null)
                {
                    hashCode = (hashCode * 59) + this.EntryTime.GetHashCode();
                }
                if (this.RecvTime != null)
                {
                    hashCode = (hashCode * 59) + this.RecvTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BlockNumber.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Index != null)
                {
                    hashCode = (hashCode * 59) + this.Index.GetHashCode();
                }
                if (this.Pool != null)
                {
                    hashCode = (hashCode * 59) + this.Pool.GetHashCode();
                }
                if (this.CreatedTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedTimestamp.GetHashCode();
                }
                if (this.CreatedBlockNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBlockNumber.GetHashCode();
                }
                if (this.Prices != null)
                {
                    hashCode = (hashCode * 59) + this.Prices.GetHashCode();
                }
                if (this.LiquidityGross != null)
                {
                    hashCode = (hashCode * 59) + this.LiquidityGross.GetHashCode();
                }
                if (this.LiquidityGrossUsd != null)
                {
                    hashCode = (hashCode * 59) + this.LiquidityGrossUsd.GetHashCode();
                }
                if (this.LiquidityNet != null)
                {
                    hashCode = (hashCode * 59) + this.LiquidityNet.GetHashCode();
                }
                if (this.LiquidityNetUsd != null)
                {
                    hashCode = (hashCode * 59) + this.LiquidityNetUsd.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LastSnapshotDayId.GetHashCode();
                hashCode = (hashCode * 59) + this.LastSnapshotHourId.GetHashCode();
                if (this.LastUpdateTimestamp != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdateTimestamp.GetHashCode();
                }
                if (this.LastUpdateBlockNumber != null)
                {
                    hashCode = (hashCode * 59) + this.LastUpdateBlockNumber.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
