/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.EMS.REST.V1.Client.OpenAPIDateConverter;

namespace CoinAPI.EMS.REST.V1.Model
{
    /// <summary>
    /// PANCAKESWAPV3ETHEREUMPositionSnapshotDTO
    /// </summary>
    [DataContract(Name = "PANCAKESWAP_V3_ETHEREUM.PositionSnapshotDTO")]
    public partial class PANCAKESWAPV3ETHEREUMPositionSnapshotDTO : IEquatable<PANCAKESWAPV3ETHEREUMPositionSnapshotDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PANCAKESWAPV3ETHEREUMPositionSnapshotDTO" /> class.
        /// </summary>
        /// <param name="entryTime">entryTime.</param>
        /// <param name="recvTime">recvTime.</param>
        /// <param name="blockNumber">Number of block in which entity was recorded..</param>
        /// <param name="id"> (position id )-( transaction hash )-( log index ) .</param>
        /// <param name="hash">Transaction hash of the transaction that triggered this snapshot.</param>
        /// <param name="logIndex">Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0.</param>
        /// <param name="nonce">Nonce of the transaction that triggered this snapshot.</param>
        /// <param name="position">Position of this snapshot.</param>
        /// <param name="liquidityTokenType">Type of token used to track liquidity.</param>
        /// <param name="liquidity">total position liquidity.</param>
        /// <param name="liquidityUsd">total position liquidity in USD.</param>
        /// <param name="cumulativeDepositTokenAmounts">amount of tokens ever deposited to position.</param>
        /// <param name="cumulativeDepositUsd">amount of tokens in USD deposited to position.</param>
        /// <param name="cumulativeWithdrawTokenAmounts">amount of tokens ever withdrawn from position (without fees).</param>
        /// <param name="cumulativeWithdrawUsd">amount of tokens in USD withdrawn from position (without fees).</param>
        /// <param name="cumulativeRewardTokenAmounts">Total reward token accumulated under this position, in native amounts.</param>
        /// <param name="cumulativeRewardUsd">Total reward token accumulated under this position, in USD.</param>
        /// <param name="depositCount">Number of deposits related to this position.</param>
        /// <param name="withdrawCount">Number of withdrawals related to this position.</param>
        /// <param name="timestamp">Timestamp of this snapshot.</param>
        public PANCAKESWAPV3ETHEREUMPositionSnapshotDTO(DateTime entryTime = default(DateTime), DateTime recvTime = default(DateTime), long blockNumber = default(long), string id = default(string), string hash = default(string), int logIndex = default(int), string nonce = default(string), string position = default(string), string liquidityTokenType = default(string), string liquidity = default(string), string liquidityUsd = default(string), List<string> cumulativeDepositTokenAmounts = default(List<string>), string cumulativeDepositUsd = default(string), List<string> cumulativeWithdrawTokenAmounts = default(List<string>), string cumulativeWithdrawUsd = default(string), List<string> cumulativeRewardTokenAmounts = default(List<string>), List<string> cumulativeRewardUsd = default(List<string>), int depositCount = default(int), int withdrawCount = default(int), string timestamp = default(string))
        {
            this.EntryTime = entryTime;
            this.RecvTime = recvTime;
            this.BlockNumber = blockNumber;
            this.Id = id;
            this.Hash = hash;
            this.LogIndex = logIndex;
            this.Nonce = nonce;
            this.Position = position;
            this.LiquidityTokenType = liquidityTokenType;
            this.Liquidity = liquidity;
            this.LiquidityUsd = liquidityUsd;
            this.CumulativeDepositTokenAmounts = cumulativeDepositTokenAmounts;
            this.CumulativeDepositUsd = cumulativeDepositUsd;
            this.CumulativeWithdrawTokenAmounts = cumulativeWithdrawTokenAmounts;
            this.CumulativeWithdrawUsd = cumulativeWithdrawUsd;
            this.CumulativeRewardTokenAmounts = cumulativeRewardTokenAmounts;
            this.CumulativeRewardUsd = cumulativeRewardUsd;
            this.DepositCount = depositCount;
            this.WithdrawCount = withdrawCount;
            this.Timestamp = timestamp;
        }

        /// <summary>
        /// Gets or Sets EntryTime
        /// </summary>
        [DataMember(Name = "entry_time", EmitDefaultValue = false)]
        public DateTime EntryTime { get; set; }

        /// <summary>
        /// Gets or Sets RecvTime
        /// </summary>
        [DataMember(Name = "recv_time", EmitDefaultValue = false)]
        public DateTime RecvTime { get; set; }

        /// <summary>
        /// Number of block in which entity was recorded.
        /// </summary>
        /// <value>Number of block in which entity was recorded.</value>
        [DataMember(Name = "block_number", EmitDefaultValue = false)]
        public long BlockNumber { get; set; }

        /// <summary>
        ///  (position id )-( transaction hash )-( log index ) 
        /// </summary>
        /// <value> (position id )-( transaction hash )-( log index ) </value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Transaction hash of the transaction that triggered this snapshot
        /// </summary>
        /// <value>Transaction hash of the transaction that triggered this snapshot</value>
        [DataMember(Name = "hash", EmitDefaultValue = true)]
        public string Hash { get; set; }

        /// <summary>
        /// Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0
        /// </summary>
        /// <value>Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0</value>
        [DataMember(Name = "log_index", EmitDefaultValue = false)]
        public int LogIndex { get; set; }

        /// <summary>
        /// Nonce of the transaction that triggered this snapshot
        /// </summary>
        /// <value>Nonce of the transaction that triggered this snapshot</value>
        [DataMember(Name = "nonce", EmitDefaultValue = true)]
        public string Nonce { get; set; }

        /// <summary>
        /// Position of this snapshot
        /// </summary>
        /// <value>Position of this snapshot</value>
        [DataMember(Name = "position", EmitDefaultValue = true)]
        public string Position { get; set; }

        /// <summary>
        /// Type of token used to track liquidity
        /// </summary>
        /// <value>Type of token used to track liquidity</value>
        [DataMember(Name = "liquidity_token_type", EmitDefaultValue = true)]
        public string LiquidityTokenType { get; set; }

        /// <summary>
        /// total position liquidity
        /// </summary>
        /// <value>total position liquidity</value>
        [DataMember(Name = "liquidity", EmitDefaultValue = true)]
        public string Liquidity { get; set; }

        /// <summary>
        /// total position liquidity in USD
        /// </summary>
        /// <value>total position liquidity in USD</value>
        [DataMember(Name = "liquidity_usd", EmitDefaultValue = true)]
        public string LiquidityUsd { get; set; }

        /// <summary>
        /// amount of tokens ever deposited to position
        /// </summary>
        /// <value>amount of tokens ever deposited to position</value>
        [DataMember(Name = "cumulative_deposit_token_amounts", EmitDefaultValue = true)]
        public List<string> CumulativeDepositTokenAmounts { get; set; }

        /// <summary>
        /// amount of tokens in USD deposited to position
        /// </summary>
        /// <value>amount of tokens in USD deposited to position</value>
        [DataMember(Name = "cumulative_deposit_usd", EmitDefaultValue = true)]
        public string CumulativeDepositUsd { get; set; }

        /// <summary>
        /// amount of tokens ever withdrawn from position (without fees)
        /// </summary>
        /// <value>amount of tokens ever withdrawn from position (without fees)</value>
        [DataMember(Name = "cumulative_withdraw_token_amounts", EmitDefaultValue = true)]
        public List<string> CumulativeWithdrawTokenAmounts { get; set; }

        /// <summary>
        /// amount of tokens in USD withdrawn from position (without fees)
        /// </summary>
        /// <value>amount of tokens in USD withdrawn from position (without fees)</value>
        [DataMember(Name = "cumulative_withdraw_usd", EmitDefaultValue = true)]
        public string CumulativeWithdrawUsd { get; set; }

        /// <summary>
        /// Total reward token accumulated under this position, in native amounts
        /// </summary>
        /// <value>Total reward token accumulated under this position, in native amounts</value>
        [DataMember(Name = "cumulative_reward_token_amounts", EmitDefaultValue = true)]
        public List<string> CumulativeRewardTokenAmounts { get; set; }

        /// <summary>
        /// Total reward token accumulated under this position, in USD
        /// </summary>
        /// <value>Total reward token accumulated under this position, in USD</value>
        [DataMember(Name = "cumulative_reward_usd", EmitDefaultValue = true)]
        public List<string> CumulativeRewardUsd { get; set; }

        /// <summary>
        /// Number of deposits related to this position
        /// </summary>
        /// <value>Number of deposits related to this position</value>
        [DataMember(Name = "deposit_count", EmitDefaultValue = false)]
        public int DepositCount { get; set; }

        /// <summary>
        /// Number of withdrawals related to this position
        /// </summary>
        /// <value>Number of withdrawals related to this position</value>
        [DataMember(Name = "withdraw_count", EmitDefaultValue = false)]
        public int WithdrawCount { get; set; }

        /// <summary>
        /// Timestamp of this snapshot
        /// </summary>
        /// <value>Timestamp of this snapshot</value>
        [DataMember(Name = "timestamp", EmitDefaultValue = true)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PANCAKESWAPV3ETHEREUMPositionSnapshotDTO {\n");
            sb.Append("  EntryTime: ").Append(EntryTime).Append("\n");
            sb.Append("  RecvTime: ").Append(RecvTime).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  LogIndex: ").Append(LogIndex).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  LiquidityTokenType: ").Append(LiquidityTokenType).Append("\n");
            sb.Append("  Liquidity: ").Append(Liquidity).Append("\n");
            sb.Append("  LiquidityUsd: ").Append(LiquidityUsd).Append("\n");
            sb.Append("  CumulativeDepositTokenAmounts: ").Append(CumulativeDepositTokenAmounts).Append("\n");
            sb.Append("  CumulativeDepositUsd: ").Append(CumulativeDepositUsd).Append("\n");
            sb.Append("  CumulativeWithdrawTokenAmounts: ").Append(CumulativeWithdrawTokenAmounts).Append("\n");
            sb.Append("  CumulativeWithdrawUsd: ").Append(CumulativeWithdrawUsd).Append("\n");
            sb.Append("  CumulativeRewardTokenAmounts: ").Append(CumulativeRewardTokenAmounts).Append("\n");
            sb.Append("  CumulativeRewardUsd: ").Append(CumulativeRewardUsd).Append("\n");
            sb.Append("  DepositCount: ").Append(DepositCount).Append("\n");
            sb.Append("  WithdrawCount: ").Append(WithdrawCount).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PANCAKESWAPV3ETHEREUMPositionSnapshotDTO);
        }

        /// <summary>
        /// Returns true if PANCAKESWAPV3ETHEREUMPositionSnapshotDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of PANCAKESWAPV3ETHEREUMPositionSnapshotDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PANCAKESWAPV3ETHEREUMPositionSnapshotDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntryTime == input.EntryTime ||
                    (this.EntryTime != null &&
                    this.EntryTime.Equals(input.EntryTime))
                ) && 
                (
                    this.RecvTime == input.RecvTime ||
                    (this.RecvTime != null &&
                    this.RecvTime.Equals(input.RecvTime))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    this.BlockNumber.Equals(input.BlockNumber)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.LogIndex == input.LogIndex ||
                    this.LogIndex.Equals(input.LogIndex)
                ) && 
                (
                    this.Nonce == input.Nonce ||
                    (this.Nonce != null &&
                    this.Nonce.Equals(input.Nonce))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.LiquidityTokenType == input.LiquidityTokenType ||
                    (this.LiquidityTokenType != null &&
                    this.LiquidityTokenType.Equals(input.LiquidityTokenType))
                ) && 
                (
                    this.Liquidity == input.Liquidity ||
                    (this.Liquidity != null &&
                    this.Liquidity.Equals(input.Liquidity))
                ) && 
                (
                    this.LiquidityUsd == input.LiquidityUsd ||
                    (this.LiquidityUsd != null &&
                    this.LiquidityUsd.Equals(input.LiquidityUsd))
                ) && 
                (
                    this.CumulativeDepositTokenAmounts == input.CumulativeDepositTokenAmounts ||
                    this.CumulativeDepositTokenAmounts != null &&
                    input.CumulativeDepositTokenAmounts != null &&
                    this.CumulativeDepositTokenAmounts.SequenceEqual(input.CumulativeDepositTokenAmounts)
                ) && 
                (
                    this.CumulativeDepositUsd == input.CumulativeDepositUsd ||
                    (this.CumulativeDepositUsd != null &&
                    this.CumulativeDepositUsd.Equals(input.CumulativeDepositUsd))
                ) && 
                (
                    this.CumulativeWithdrawTokenAmounts == input.CumulativeWithdrawTokenAmounts ||
                    this.CumulativeWithdrawTokenAmounts != null &&
                    input.CumulativeWithdrawTokenAmounts != null &&
                    this.CumulativeWithdrawTokenAmounts.SequenceEqual(input.CumulativeWithdrawTokenAmounts)
                ) && 
                (
                    this.CumulativeWithdrawUsd == input.CumulativeWithdrawUsd ||
                    (this.CumulativeWithdrawUsd != null &&
                    this.CumulativeWithdrawUsd.Equals(input.CumulativeWithdrawUsd))
                ) && 
                (
                    this.CumulativeRewardTokenAmounts == input.CumulativeRewardTokenAmounts ||
                    this.CumulativeRewardTokenAmounts != null &&
                    input.CumulativeRewardTokenAmounts != null &&
                    this.CumulativeRewardTokenAmounts.SequenceEqual(input.CumulativeRewardTokenAmounts)
                ) && 
                (
                    this.CumulativeRewardUsd == input.CumulativeRewardUsd ||
                    this.CumulativeRewardUsd != null &&
                    input.CumulativeRewardUsd != null &&
                    this.CumulativeRewardUsd.SequenceEqual(input.CumulativeRewardUsd)
                ) && 
                (
                    this.DepositCount == input.DepositCount ||
                    this.DepositCount.Equals(input.DepositCount)
                ) && 
                (
                    this.WithdrawCount == input.WithdrawCount ||
                    this.WithdrawCount.Equals(input.WithdrawCount)
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntryTime != null)
                {
                    hashCode = (hashCode * 59) + this.EntryTime.GetHashCode();
                }
                if (this.RecvTime != null)
                {
                    hashCode = (hashCode * 59) + this.RecvTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BlockNumber.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Hash != null)
                {
                    hashCode = (hashCode * 59) + this.Hash.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LogIndex.GetHashCode();
                if (this.Nonce != null)
                {
                    hashCode = (hashCode * 59) + this.Nonce.GetHashCode();
                }
                if (this.Position != null)
                {
                    hashCode = (hashCode * 59) + this.Position.GetHashCode();
                }
                if (this.LiquidityTokenType != null)
                {
                    hashCode = (hashCode * 59) + this.LiquidityTokenType.GetHashCode();
                }
                if (this.Liquidity != null)
                {
                    hashCode = (hashCode * 59) + this.Liquidity.GetHashCode();
                }
                if (this.LiquidityUsd != null)
                {
                    hashCode = (hashCode * 59) + this.LiquidityUsd.GetHashCode();
                }
                if (this.CumulativeDepositTokenAmounts != null)
                {
                    hashCode = (hashCode * 59) + this.CumulativeDepositTokenAmounts.GetHashCode();
                }
                if (this.CumulativeDepositUsd != null)
                {
                    hashCode = (hashCode * 59) + this.CumulativeDepositUsd.GetHashCode();
                }
                if (this.CumulativeWithdrawTokenAmounts != null)
                {
                    hashCode = (hashCode * 59) + this.CumulativeWithdrawTokenAmounts.GetHashCode();
                }
                if (this.CumulativeWithdrawUsd != null)
                {
                    hashCode = (hashCode * 59) + this.CumulativeWithdrawUsd.GetHashCode();
                }
                if (this.CumulativeRewardTokenAmounts != null)
                {
                    hashCode = (hashCode * 59) + this.CumulativeRewardTokenAmounts.GetHashCode();
                }
                if (this.CumulativeRewardUsd != null)
                {
                    hashCode = (hashCode * 59) + this.CumulativeRewardUsd.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DepositCount.GetHashCode();
                hashCode = (hashCode * 59) + this.WithdrawCount.GetHashCode();
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
