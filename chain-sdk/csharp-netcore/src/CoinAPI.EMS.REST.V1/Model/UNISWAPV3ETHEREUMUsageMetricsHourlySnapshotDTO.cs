/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.EMS.REST.V1.Client.OpenAPIDateConverter;

namespace CoinAPI.EMS.REST.V1.Model
{
    /// <summary>
    /// UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
    /// </summary>
    [DataContract(Name = "UNISWAP_V3_ETHEREUM.UsageMetricsHourlySnapshotDTO")]
    public partial class UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO : IEquatable<UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO" /> class.
        /// </summary>
        /// <param name="entryTime">entryTime.</param>
        /// <param name="recvTime">recvTime.</param>
        /// <param name="blockNumber">Number of block in which entity was recorded..</param>
        /// <param name="id">(# of hours since Unix epoch time).</param>
        /// <param name="hour">Number of hours since Unix epoch time.</param>
        /// <param name="protocol">Protocol this snapshot is associated with.</param>
        /// <param name="hourlyActiveUsers">Number of unique hourly active users.</param>
        /// <param name="cumulativeUniqueUsers">Number of cumulative unique users.</param>
        /// <param name="hourlyTransactionCount">Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface..</param>
        /// <param name="hourlyDepositCount">Total number of deposits (add liquidity) in an hour.</param>
        /// <param name="hourlyWithdrawCount">Total number of withdrawals (remove liquidity) in an hour.</param>
        /// <param name="hourlySwapCount">Total number of trades (swaps) in an hour.</param>
        /// <param name="timestamp">Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed).</param>
        public UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO(DateTime entryTime = default(DateTime), DateTime recvTime = default(DateTime), long blockNumber = default(long), string id = default(string), int hour = default(int), string protocol = default(string), int hourlyActiveUsers = default(int), int cumulativeUniqueUsers = default(int), int hourlyTransactionCount = default(int), int hourlyDepositCount = default(int), int hourlyWithdrawCount = default(int), int hourlySwapCount = default(int), string timestamp = default(string))
        {
            this.EntryTime = entryTime;
            this.RecvTime = recvTime;
            this.BlockNumber = blockNumber;
            this.Id = id;
            this.Hour = hour;
            this.Protocol = protocol;
            this.HourlyActiveUsers = hourlyActiveUsers;
            this.CumulativeUniqueUsers = cumulativeUniqueUsers;
            this.HourlyTransactionCount = hourlyTransactionCount;
            this.HourlyDepositCount = hourlyDepositCount;
            this.HourlyWithdrawCount = hourlyWithdrawCount;
            this.HourlySwapCount = hourlySwapCount;
            this.Timestamp = timestamp;
        }

        /// <summary>
        /// Gets or Sets EntryTime
        /// </summary>
        [DataMember(Name = "entry_time", EmitDefaultValue = false)]
        public DateTime EntryTime { get; set; }

        /// <summary>
        /// Gets or Sets RecvTime
        /// </summary>
        [DataMember(Name = "recv_time", EmitDefaultValue = false)]
        public DateTime RecvTime { get; set; }

        /// <summary>
        /// Number of block in which entity was recorded.
        /// </summary>
        /// <value>Number of block in which entity was recorded.</value>
        [DataMember(Name = "block_number", EmitDefaultValue = false)]
        public long BlockNumber { get; set; }

        /// <summary>
        /// (# of hours since Unix epoch time)
        /// </summary>
        /// <value>(# of hours since Unix epoch time)</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Number of hours since Unix epoch time
        /// </summary>
        /// <value>Number of hours since Unix epoch time</value>
        [DataMember(Name = "hour", EmitDefaultValue = false)]
        public int Hour { get; set; }

        /// <summary>
        /// Protocol this snapshot is associated with
        /// </summary>
        /// <value>Protocol this snapshot is associated with</value>
        [DataMember(Name = "protocol", EmitDefaultValue = true)]
        public string Protocol { get; set; }

        /// <summary>
        /// Number of unique hourly active users
        /// </summary>
        /// <value>Number of unique hourly active users</value>
        [DataMember(Name = "hourly_active_users", EmitDefaultValue = false)]
        public int HourlyActiveUsers { get; set; }

        /// <summary>
        /// Number of cumulative unique users
        /// </summary>
        /// <value>Number of cumulative unique users</value>
        [DataMember(Name = "cumulative_unique_users", EmitDefaultValue = false)]
        public int CumulativeUniqueUsers { get; set; }

        /// <summary>
        /// Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface.
        /// </summary>
        /// <value>Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface.</value>
        [DataMember(Name = "hourly_transaction_count", EmitDefaultValue = false)]
        public int HourlyTransactionCount { get; set; }

        /// <summary>
        /// Total number of deposits (add liquidity) in an hour
        /// </summary>
        /// <value>Total number of deposits (add liquidity) in an hour</value>
        [DataMember(Name = "hourly_deposit_count", EmitDefaultValue = false)]
        public int HourlyDepositCount { get; set; }

        /// <summary>
        /// Total number of withdrawals (remove liquidity) in an hour
        /// </summary>
        /// <value>Total number of withdrawals (remove liquidity) in an hour</value>
        [DataMember(Name = "hourly_withdraw_count", EmitDefaultValue = false)]
        public int HourlyWithdrawCount { get; set; }

        /// <summary>
        /// Total number of trades (swaps) in an hour
        /// </summary>
        /// <value>Total number of trades (swaps) in an hour</value>
        [DataMember(Name = "hourly_swap_count", EmitDefaultValue = false)]
        public int HourlySwapCount { get; set; }

        /// <summary>
        /// Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)
        /// </summary>
        /// <value>Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)</value>
        [DataMember(Name = "timestamp", EmitDefaultValue = true)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO {\n");
            sb.Append("  EntryTime: ").Append(EntryTime).Append("\n");
            sb.Append("  RecvTime: ").Append(RecvTime).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Hour: ").Append(Hour).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  HourlyActiveUsers: ").Append(HourlyActiveUsers).Append("\n");
            sb.Append("  CumulativeUniqueUsers: ").Append(CumulativeUniqueUsers).Append("\n");
            sb.Append("  HourlyTransactionCount: ").Append(HourlyTransactionCount).Append("\n");
            sb.Append("  HourlyDepositCount: ").Append(HourlyDepositCount).Append("\n");
            sb.Append("  HourlyWithdrawCount: ").Append(HourlyWithdrawCount).Append("\n");
            sb.Append("  HourlySwapCount: ").Append(HourlySwapCount).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO);
        }

        /// <summary>
        /// Returns true if UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EntryTime == input.EntryTime ||
                    (this.EntryTime != null &&
                    this.EntryTime.Equals(input.EntryTime))
                ) && 
                (
                    this.RecvTime == input.RecvTime ||
                    (this.RecvTime != null &&
                    this.RecvTime.Equals(input.RecvTime))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    this.BlockNumber.Equals(input.BlockNumber)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Hour == input.Hour ||
                    this.Hour.Equals(input.Hour)
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.HourlyActiveUsers == input.HourlyActiveUsers ||
                    this.HourlyActiveUsers.Equals(input.HourlyActiveUsers)
                ) && 
                (
                    this.CumulativeUniqueUsers == input.CumulativeUniqueUsers ||
                    this.CumulativeUniqueUsers.Equals(input.CumulativeUniqueUsers)
                ) && 
                (
                    this.HourlyTransactionCount == input.HourlyTransactionCount ||
                    this.HourlyTransactionCount.Equals(input.HourlyTransactionCount)
                ) && 
                (
                    this.HourlyDepositCount == input.HourlyDepositCount ||
                    this.HourlyDepositCount.Equals(input.HourlyDepositCount)
                ) && 
                (
                    this.HourlyWithdrawCount == input.HourlyWithdrawCount ||
                    this.HourlyWithdrawCount.Equals(input.HourlyWithdrawCount)
                ) && 
                (
                    this.HourlySwapCount == input.HourlySwapCount ||
                    this.HourlySwapCount.Equals(input.HourlySwapCount)
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntryTime != null)
                {
                    hashCode = (hashCode * 59) + this.EntryTime.GetHashCode();
                }
                if (this.RecvTime != null)
                {
                    hashCode = (hashCode * 59) + this.RecvTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BlockNumber.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Hour.GetHashCode();
                if (this.Protocol != null)
                {
                    hashCode = (hashCode * 59) + this.Protocol.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HourlyActiveUsers.GetHashCode();
                hashCode = (hashCode * 59) + this.CumulativeUniqueUsers.GetHashCode();
                hashCode = (hashCode * 59) + this.HourlyTransactionCount.GetHashCode();
                hashCode = (hashCode * 59) + this.HourlyDepositCount.GetHashCode();
                hashCode = (hashCode * 59) + this.HourlyWithdrawCount.GetHashCode();
                hashCode = (hashCode * 59) + this.HourlySwapCount.GetHashCode();
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
