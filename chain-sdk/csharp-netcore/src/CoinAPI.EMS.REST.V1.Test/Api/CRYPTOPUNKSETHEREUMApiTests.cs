/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using CoinAPI.EMS.REST.V1.Client;
using CoinAPI.EMS.REST.V1.Api;
// uncomment below to import models
//using CoinAPI.EMS.REST.V1.Model;

namespace CoinAPI.EMS.REST.V1.Test.Api
{
    /// <summary>
    ///  Class for testing CRYPTOPUNKSETHEREUMApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CRYPTOPUNKSETHEREUMApiTests : IDisposable
    {
        private CRYPTOPUNKSETHEREUMApi instance;

        public CRYPTOPUNKSETHEREUMApiTests()
        {
            instance = new CRYPTOPUNKSETHEREUMApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CRYPTOPUNKSETHEREUMApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CRYPTOPUNKSETHEREUMApi
            //Assert.IsType<CRYPTOPUNKSETHEREUMApi>(instance);
        }

        /// <summary>
        /// Test CRYPTOPUNKSETHEREUMBidsCurrent
        /// </summary>
        [Fact]
        public void CRYPTOPUNKSETHEREUMBidsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CRYPTOPUNKSETHEREUMBidsCurrent();
            //Assert.IsType<List<CRYPTOPUNKSBidDTO>>(response);
        }

        /// <summary>
        /// Test CRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrent
        /// </summary>
        [Fact]
        public void CRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrent();
            //Assert.IsType<List<CRYPTOPUNKSCollectionDailySnapshotDTO>>(response);
        }

        /// <summary>
        /// Test CRYPTOPUNKSETHEREUMCollectionsCurrent
        /// </summary>
        [Fact]
        public void CRYPTOPUNKSETHEREUMCollectionsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CRYPTOPUNKSETHEREUMCollectionsCurrent();
            //Assert.IsType<List<CRYPTOPUNKSCollectionDTO>>(response);
        }

        /// <summary>
        /// Test CRYPTOPUNKSETHEREUMDataSourcesCurrent
        /// </summary>
        [Fact]
        public void CRYPTOPUNKSETHEREUMDataSourcesCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CRYPTOPUNKSETHEREUMDataSourcesCurrent();
            //Assert.IsType<List<CRYPTOPUNKSDataSourcesDTO>>(response);
        }

        /// <summary>
        /// Test CRYPTOPUNKSETHEREUMItemsCurrent
        /// </summary>
        [Fact]
        public void CRYPTOPUNKSETHEREUMItemsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CRYPTOPUNKSETHEREUMItemsCurrent();
            //Assert.IsType<List<CRYPTOPUNKSItemDTO>>(response);
        }

        /// <summary>
        /// Test CRYPTOPUNKSETHEREUMMarketPlacesCurrent
        /// </summary>
        [Fact]
        public void CRYPTOPUNKSETHEREUMMarketPlacesCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CRYPTOPUNKSETHEREUMMarketPlacesCurrent();
            //Assert.IsType<List<CRYPTOPUNKSMarketPlaceDTO>>(response);
        }

        /// <summary>
        /// Test CRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrent
        /// </summary>
        [Fact]
        public void CRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrent();
            //Assert.IsType<List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>>(response);
        }

        /// <summary>
        /// Test CRYPTOPUNKSETHEREUMTradesCurrent
        /// </summary>
        [Fact]
        public void CRYPTOPUNKSETHEREUMTradesCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CRYPTOPUNKSETHEREUMTradesCurrent();
            //Assert.IsType<List<CRYPTOPUNKSTradeDTO>>(response);
        }

        /// <summary>
        /// Test CRYPTOPUNKSETHEREUMUsersCurrent
        /// </summary>
        [Fact]
        public void CRYPTOPUNKSETHEREUMUsersCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CRYPTOPUNKSETHEREUMUsersCurrent();
            //Assert.IsType<List<CRYPTOPUNKSUserDTO>>(response);
        }
    }
}
