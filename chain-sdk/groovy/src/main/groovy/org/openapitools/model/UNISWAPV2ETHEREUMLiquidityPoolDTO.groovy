package org.openapitools.model;

import groovy.transform.Canonical
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

@Canonical
class UNISWAPV2ETHEREUMLiquidityPoolDTO {
    
    Date entryTime
    
    Date recvTime
    /* Number of block in which entity was recorded. */
    Long blockNumber
    /* . */
    Long vid
    /* Smart contract address of the pool */
    String id
    /* The protocol this pool belongs to */
    String protocol
    /* Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT) */
    String name
    /* Symbol of liquidity pool (e.g. 3CRV) */
    String symbol
    /* Tokens that need to be deposited to take a position in the protocol */
    List<String> inputTokens
    /* Token that is minted to track ownership of position in protocol */
    String outputToken
    /* Aditional tokens that are given as reward for position in a protocol */
    List<String> rewardTokens
    /* Fees per trade incurred to the user */
    List<String> fees
    /* Whether this pool is single-sided */
    Boolean isSingleSided
    /* Creation timestamp */
    String createdTimestamp
    /* Creation block number */
    String createdBlockNumber
    /* Current TVL (Total Value Locked) of this pool in USD */
    String totalValueLockedUsd
    /* All revenue generated by the liquidity pool, accrued to the supply side */
    String cumulativeSupplySideRevenueUsd
    /* All revenue generated by the liquidity pool, accrued to the protocol */
    String cumulativeProtocolSideRevenueUsd
    /* All revenue generated by the liquidity pool */
    String cumulativeTotalRevenueUsd
    /* All historical trade volume occurred in this pool, in USD */
    String cumulativeVolumeUsd
    /* Amount of input tokens in the pool */
    List<String> inputTokenBalances
    /* Weights of input tokens in the liquidity pool in percentage values */
    List<String> inputTokenWeights
    /* Total supply of output token */
    String outputTokenSupply
    /* Price per share of output token in USD */
    String outputTokenPriceUsd
    /* Total supply of output tokens that are staked */
    String stakedOutputTokenAmount
    /* Per-block reward token emission as of the current block normalized to a day, in token's native amount */
    List<String> rewardTokenEmissionsAmount
    /* Per-block reward token emission as of the current block normalized to a day, in USD value */
    List<String> rewardTokenEmissionsUsd
    /* Evaluated ask value of the liquidity pool. */
    Double evaluatedAsk
}
