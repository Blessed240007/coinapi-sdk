package org.openapitools.model;

import groovy.transform.Canonical
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

@Canonical
class PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO {
    
    Date entryTime
    
    Date recvTime
    /* Number of block in which entity was recorded. */
    Long blockNumber
    /* . */
    Long vid
    /* The Ethereum block number associated with the liquidity pool daily snapshot. */
    Integer block
    /* Identifier, format: (smart contract address of the pool)-(# of days since Unix epoch time). */
    String id
    /* Number of days since Unix epoch time. */
    Integer day
    /* Protocol associated with the liquidity pool. */
    String protocol
    /* Pool this snapshot belongs to. */
    String pool
    /* Current tick representing the price of token0/token1. */
    String tick
    /* Current TVL (Total Value Locked) of this pool. */
    String totalValueLockedUsd
    /* The sum of all active and non-active liquidity for this pool. */
    String totalLiquidity
    /* Sum of all active and non-active liquidity in USD for this pool. */
    String totalLiquidityUsd
    /* All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. */
    String activeLiquidity
    /* All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. */
    String activeLiquidityUsd
    /* All protocol-side value locked in token amounts that remains uncollected and unused in the pool. */
    List<String> uncollectedProtocolSideTokenAmounts
    /* All protocol-side value locking in USD that remains uncollected and unused in the pool. */
    List<String> uncollectedProtocolSideValuesUsd
    /* All supply-side value locked in token amounts that remains uncollected and unused in the pool. */
    List<String> uncollectedSupplySideTokenAmounts
    /* All supply-side value locked in USD that remains uncollected and unused in the pool. */
    List<String> uncollectedSupplySideValuesUsd
    /* All revenue generated by the liquidity pool, accrued to the supply side. */
    String cumulativeSupplySideRevenueUsd
    /* Daily revenue generated by the liquidity pool, accrued to the supply side. */
    String dailySupplySideRevenueUsd
    /* All revenue generated by the liquidity pool, accrued to the protocol. */
    String cumulativeProtocolSideRevenueUsd
    /* Daily revenue generated by the liquidity pool, accrued to the protocol. */
    String dailyProtocolSideRevenueUsd
    /* All revenue generated by the liquidity pool. */
    String cumulativeTotalRevenueUsd
    /* Daily revenue generated by the liquidity pool. */
    String dailyTotalRevenueUsd
    /* All historical trade volume occurred in this pool, in USD. */
    String cumulativeVolumeUsd
    /* All trade volume occurred in a given day, in USD. */
    String dailyVolumeUsd
    /* All trade volume , in native amount. The ordering should be the same as the pool's `inputTokens` field. */
    List<String> cumulativeVolumeByTokenAmount
    /* All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. */
    List<String> dailyVolumeByTokenAmount
    /* All trade volume, in USD. The ordering should be the same as the pool's `inputTokens` field. */
    List<String> cumulativeVolumeByTokenUsd
    /*  All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. */
    List<String> dailyVolumeByTokenUsd
    /* Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. */
    List<String> inputTokenBalances
    /* Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field. */
    List<String> inputTokenBalancesUsd
    /* Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool. */
    List<String> inputTokenWeights
    /* Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. */
    String stakedOutputTokenAmount
    /* Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. */
    List<String> rewardTokenEmissionsAmount
    /* Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. */
    List<String> rewardTokenEmissionsUsd
    /* Total number of deposits (add liquidity). */
    Integer cumulativeDepositCount
    /* Total number of deposits (add liquidity) in a day. */
    Integer dailyDepositCount
    /* Total number of withdrawals (remove liquidity). */
    Integer cumulativeWithdrawCount
    /* Total number of withdrawals (remove liquidity) in a day. */
    Integer dailyWithdrawCount
    /* Total number of trades (swaps). */
    Integer cumulativeSwapCount
    /* Total number of trades (swaps) in a day. */
    Integer dailySwapCount
    /* Number of positions in this market. */
    Integer positionCount
    /* Number of open positions in this market. */
    Integer openPositionCount
    /* Number of closed positions in this market. */
    Integer closedPositionCount
    /* Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed). */
    String timestamp
}
