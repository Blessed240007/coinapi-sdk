package org.openapitools.model;

import groovy.transform.Canonical
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

@Canonical
class UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO {
    
    Date entryTime
    
    Date recvTime
    /* Number of block in which entity was recorded. */
    Long blockNumber
    /*  */
    String blockRange
    /* (smart contract address of the pool)-(# of hours since Unix epoch time) */
    String id
    /* The protocol this snapshot belongs to */
    String protocol
    /* The pool this snapshot belongs to */
    String pool
    /* Timestamp of this snapshot */
    String timestamp
    /* Current TVL (Total Value Locked) of this pool */
    String totalValueLockedUsd
    /* All revenue generated by the liquidity pool, accrued to the supply side. */
    String cumulativeSupplySideRevenueUsd
    /* Hourly revenue generated by the liquidity pool, accrued to the supply side. */
    String hourlySupplySideRevenueUsd
    /* All revenue generated by the liquidity pool, accrued to the protocol. */
    String cumulativeProtocolSideRevenueUsd
    /* Hourly revenue generated by the liquidity pool, accrued to the protocol. */
    String hourlyProtocolSideRevenueUsd
    /* All revenue generated by the liquidity pool. */
    String cumulativeTotalRevenueUsd
    /* Hourly revenue generated by the liquidity pool. */
    String hourlyTotalRevenueUsd
    /* All trade volume occurred in a given hour, in USD */
    String hourlyVolumeUsd
    /* All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool's 'inputTokens' field. */
    List<String> hourlyVolumeByTokenAmount
    /* All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool's 'inputTokens' field. */
    List<String> hourlyVolumeByTokenUsd
    /* All historical trade volume occurred in this pool, in USD */
    String cumulativeVolumeUsd
    /* Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field */
    List<String> inputTokenBalances
    /* Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool */
    List<String> inputTokenWeights
    /* Total supply of output token. Note that certain DEXes don't have an output token (e.g. Bancor) */
    String outputTokenSupply
    /* Price per share of output token in USD */
    String outputTokenPriceUsd
    /* Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. */
    String stakedOutputTokenAmount
    /* Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. */
    List<String> rewardTokenEmissionsAmount
    /* Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. */
    List<String> rewardTokenEmissionsUsd
}
