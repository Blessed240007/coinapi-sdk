/*
 * CURVE_FINANCE_ETHEREUM.LiquidityPoolDailySnapshotDTO.h
 *
 * 
 */

#ifndef _CURVE_FINANCE_ETHEREUM.LiquidityPoolDailySnapshotDTO_H_
#define _CURVE_FINANCE_ETHEREUM.LiquidityPoolDailySnapshotDTO_H_


#include <string>
#include <list>
#include "Object.h"

/** \defgroup Models Data Structures for API
 *  Classes containing all the Data Structures needed for calling/returned by API endpoints
 *
 */

namespace Tizen {
namespace ArtikCloud {


/*! \brief 
 *
 *  \ingroup Models
 *
 */

class CURVE_FINANCE_ETHEREUM.LiquidityPoolDailySnapshotDTO : public Object {
public:
	/*! \brief Constructor.
	 */
	CURVE_FINANCE_ETHEREUM.LiquidityPoolDailySnapshotDTO();
	CURVE_FINANCE_ETHEREUM.LiquidityPoolDailySnapshotDTO(char* str);

	/*! \brief Destructor.
	 */
	virtual ~CURVE_FINANCE_ETHEREUM.LiquidityPoolDailySnapshotDTO();

	/*! \brief Retrieve a string JSON representation of this class.
	 */
	char* toJson();

	/*! \brief Fills in members of this class from JSON string representing it.
	 */
	void fromJson(char* jsonStr);

	/*! \brief Get 
	 */
	std::string getEntryTime();

	/*! \brief Set 
	 */
	void setEntryTime(std::string  entry_time);
	/*! \brief Get 
	 */
	std::string getRecvTime();

	/*! \brief Set 
	 */
	void setRecvTime(std::string  recv_time);
	/*! \brief Get Number of block in which entity was recorded.
	 */
	long long getBlockNumber();

	/*! \brief Set Number of block in which entity was recorded.
	 */
	void setBlockNumber(long long  block_number);
	/*! \brief Get 
	 */
	std::string getBlockRange();

	/*! \brief Set 
	 */
	void setBlockRange(std::string  block_range);
	/*! \brief Get Identifier, format: (smart contract address of the pool)-(# of days since Unix epoch time)
	 */
	std::string getId();

	/*! \brief Set Identifier, format: (smart contract address of the pool)-(# of days since Unix epoch time)
	 */
	void setId(std::string  id);
	/*! \brief Get The protocol this snapshot belongs to
	 */
	std::string getProtocol();

	/*! \brief Set The protocol this snapshot belongs to
	 */
	void setProtocol(std::string  protocol);
	/*! \brief Get The pool this snapshot belongs to
	 */
	std::string getPool();

	/*! \brief Set The pool this snapshot belongs to
	 */
	void setPool(std::string  pool);
	/*! \brief Get Timestamp of this snapshot
	 */
	std::string getTimestamp();

	/*! \brief Set Timestamp of this snapshot
	 */
	void setTimestamp(std::string  timestamp);
	/*! \brief Get Current TVL (Total Value Locked) of this pool
	 */
	std::string getTotalValueLockedUsd();

	/*! \brief Set Current TVL (Total Value Locked) of this pool
	 */
	void setTotalValueLockedUsd(std::string  total_value_locked_usd);
	/*! \brief Get All revenue generated by the liquidity pool, accrued to the supply side.
	 */
	std::string getCumulativeSupplySideRevenueUsd();

	/*! \brief Set All revenue generated by the liquidity pool, accrued to the supply side.
	 */
	void setCumulativeSupplySideRevenueUsd(std::string  cumulative_supply_side_revenue_usd);
	/*! \brief Get 
	 */
	std::string getDailySupplySideRevenueUsd();

	/*! \brief Set 
	 */
	void setDailySupplySideRevenueUsd(std::string  daily_supply_side_revenue_usd);
	/*! \brief Get Daily revenue generated by the liquidity pool, accrued to the supply side.
	 */
	std::string getCumulativeProtocolSideRevenueUsd();

	/*! \brief Set Daily revenue generated by the liquidity pool, accrued to the supply side.
	 */
	void setCumulativeProtocolSideRevenueUsd(std::string  cumulative_protocol_side_revenue_usd);
	/*! \brief Get All revenue generated by the liquidity pool, accrued to the protocol.
	 */
	std::string getDailyProtocolSideRevenueUsd();

	/*! \brief Set All revenue generated by the liquidity pool, accrued to the protocol.
	 */
	void setDailyProtocolSideRevenueUsd(std::string  daily_protocol_side_revenue_usd);
	/*! \brief Get All revenue generated by the liquidity pool.
	 */
	std::string getCumulativeTotalRevenueUsd();

	/*! \brief Set All revenue generated by the liquidity pool.
	 */
	void setCumulativeTotalRevenueUsd(std::string  cumulative_total_revenue_usd);
	/*! \brief Get Daily revenue generated by the liquidity pool.
	 */
	std::string getDailyTotalRevenueUsd();

	/*! \brief Set Daily revenue generated by the liquidity pool.
	 */
	void setDailyTotalRevenueUsd(std::string  daily_total_revenue_usd);
	/*! \brief Get All trade volume occurred in a given day, in USD
	 */
	std::string getDailyVolumeUsd();

	/*! \brief Set All trade volume occurred in a given day, in USD
	 */
	void setDailyVolumeUsd(std::string  daily_volume_usd);
	/*! \brief Get 
	 */
	std::list<std::string> getDailyVolumeByTokenAmount();

	/*! \brief Set 
	 */
	void setDailyVolumeByTokenAmount(std::list <std::string> daily_volume_by_token_amount);
	/*! \brief Get All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool's 'inputTokens' field.
	 */
	std::list<std::string> getDailyVolumeByTokenUsd();

	/*! \brief Set All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool's 'inputTokens' field.
	 */
	void setDailyVolumeByTokenUsd(std::list <std::string> daily_volume_by_token_usd);
	/*! \brief Get All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool's 'inputTokens' field.
	 */
	std::string getCumulativeVolumeUsd();

	/*! \brief Set All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool's 'inputTokens' field.
	 */
	void setCumulativeVolumeUsd(std::string  cumulative_volume_usd);
	/*! \brief Get Amount of input tokens in the pool. The ordering should be the same as the pool's 'inputTokens' field.
	 */
	std::list<std::string> getInputTokenBalances();

	/*! \brief Set Amount of input tokens in the pool. The ordering should be the same as the pool's 'inputTokens' field.
	 */
	void setInputTokenBalances(std::list <std::string> input_token_balances);
	/*! \brief Get Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool
	 */
	std::list<std::string> getInputTokenWeights();

	/*! \brief Set Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool
	 */
	void setInputTokenWeights(std::list <std::string> input_token_weights);
	/*! \brief Get Total supply of output token. Note that certain DEXes don't have an output token (e.g. Bancor)
	 */
	std::string getOutputTokenSupply();

	/*! \brief Set Total supply of output token. Note that certain DEXes don't have an output token (e.g. Bancor)
	 */
	void setOutputTokenSupply(std::string  output_token_supply);
	/*! \brief Get Price per share of output token in USD
	 */
	std::string getOutputTokenPriceUsd();

	/*! \brief Set Price per share of output token in USD
	 */
	void setOutputTokenPriceUsd(std::string  output_token_price_usd);
	/*! \brief Get Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
	 */
	std::string getStakedOutputTokenAmount();

	/*! \brief Set Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
	 */
	void setStakedOutputTokenAmount(std::string  staked_output_token_amount);
	/*! \brief Get Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
	 */
	std::list<std::string> getRewardTokenEmissionsAmount();

	/*! \brief Set Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
	 */
	void setRewardTokenEmissionsAmount(std::list <std::string> reward_token_emissions_amount);
	/*! \brief Get Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
	 */
	std::list<std::string> getRewardTokenEmissionsUsd();

	/*! \brief Set Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
	 */
	void setRewardTokenEmissionsUsd(std::list <std::string> reward_token_emissions_usd);

private:
	std::string entry_time;
	std::string recv_time;
	long long block_number;
	std::string block_range;
	std::string id;
	std::string protocol;
	std::string pool;
	std::string timestamp;
	std::string total_value_locked_usd;
	std::string cumulative_supply_side_revenue_usd;
	std::string daily_supply_side_revenue_usd;
	std::string cumulative_protocol_side_revenue_usd;
	std::string daily_protocol_side_revenue_usd;
	std::string cumulative_total_revenue_usd;
	std::string daily_total_revenue_usd;
	std::string daily_volume_usd;
	std::list <std::string>daily_volume_by_token_amount;
	std::list <std::string>daily_volume_by_token_usd;
	std::string cumulative_volume_usd;
	std::list <std::string>input_token_balances;
	std::list <std::string>input_token_weights;
	std::string output_token_supply;
	std::string output_token_price_usd;
	std::string staked_output_token_amount;
	std::list <std::string>reward_token_emissions_amount;
	std::list <std::string>reward_token_emissions_usd;
	void __init();
	void __cleanup();

};
}
}

#endif /* _CURVE_FINANCE_ETHEREUM.LiquidityPoolDailySnapshotDTO_H_ */
