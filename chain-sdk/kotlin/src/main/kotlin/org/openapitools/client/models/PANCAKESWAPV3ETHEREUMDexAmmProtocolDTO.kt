/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 *  Decentralized exchange (Dex) automated market maker (Amm) protocol. It's an entity that represents a protocol involving a smart contract that use automated market makers.
 *
 * @param entryTime 
 * @param recvTime 
 * @param blockNumber Number of block in which entity was recorded.
 * @param blockRange 
 * @param id Smart contract address of the protocol's main contract (Factory, Registry, etc).
 * @param name Name of the protocol, including version. e.g. Uniswap v3.
 * @param slug Slug of protocol, including version. e.g. uniswap-v3.
 * @param schemaVersion Version of the subgraph schema, in SemVer format (e.g. 1.0.0).
 * @param subgraphVersion Version of the subgraph implementation, in SemVer format (e.g. 1.0.0).
 * @param methodologyVersion Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0).
 * @param totalValueLockedUsd Current TVL (Total Value Locked) of the entire protocol.
 * @param totalLiquidityUsd The sum of all active and non-active liquidity in USD for this pool.
 * @param activeLiquidityUsd All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
 * @param uncollectedProtocolSideValueUsd All protocol-side value locking in USD that remains uncollected and unused in the protocol.
 * @param uncollectedSupplySideValueUsd All supply-side value locking in USD that remains uncollected and unused in the protocol.
 * @param protocolControlledValueUsd Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.
 * @param cumulativeVolumeUsd All historical volume in USD.
 * @param cumulativeSupplySideRevenueUsd Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
 * @param cumulativeProtocolSideRevenueUsd Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
 * @param cumulativeTotalRevenueUsd All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
 * @param cumulativeUniqueUsers Number of cumulative unique users.
 * @param cumulativeUniqueLPs Number of cumulative liquidity providers.
 * @param cumulativeUniqueTraders Number of cumulative traders
 * @param totalPoolCount Total number of pools.
 * @param openPositionCount Total number of open positions.
 * @param cumulativePositionCount Total number of positions (open and closed).
 * @param lastSnapshotDayId Day ID of the most recent daily snapshot.
 * @param lastUpdateTimestamp Timestamp of the last time this entity was updated
 * @param lastUpdateBlockNumber Block number of the last time this entity was updated.
 * @param regenesis This is a boolean to indicate whether or not the pools have been instantiated the were initialized before Optimism regenesis.
 */


data class PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO (

    @Json(name = "entry_time")
    val entryTime: java.time.OffsetDateTime? = null,

    @Json(name = "recv_time")
    val recvTime: java.time.OffsetDateTime? = null,

    /* Number of block in which entity was recorded. */
    @Json(name = "block_number")
    val blockNumber: kotlin.Long? = null,

    /*  */
    @Json(name = "block_range")
    val blockRange: kotlin.String? = null,

    /* Smart contract address of the protocol's main contract (Factory, Registry, etc). */
    @Json(name = "id")
    val id: kotlin.String? = null,

    /* Name of the protocol, including version. e.g. Uniswap v3. */
    @Json(name = "name")
    val name: kotlin.String? = null,

    /* Slug of protocol, including version. e.g. uniswap-v3. */
    @Json(name = "slug")
    val slug: kotlin.String? = null,

    /* Version of the subgraph schema, in SemVer format (e.g. 1.0.0). */
    @Json(name = "schema_version")
    val schemaVersion: kotlin.String? = null,

    /* Version of the subgraph implementation, in SemVer format (e.g. 1.0.0). */
    @Json(name = "subgraph_version")
    val subgraphVersion: kotlin.String? = null,

    /* Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0). */
    @Json(name = "methodology_version")
    val methodologyVersion: kotlin.String? = null,

    /* Current TVL (Total Value Locked) of the entire protocol. */
    @Json(name = "total_value_locked_usd")
    val totalValueLockedUsd: kotlin.String? = null,

    /* The sum of all active and non-active liquidity in USD for this pool. */
    @Json(name = "total_liquidity_usd")
    val totalLiquidityUsd: kotlin.String? = null,

    /* All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. */
    @Json(name = "active_liquidity_usd")
    val activeLiquidityUsd: kotlin.String? = null,

    /* All protocol-side value locking in USD that remains uncollected and unused in the protocol. */
    @Json(name = "uncollected_protocol_side_value_usd")
    val uncollectedProtocolSideValueUsd: kotlin.String? = null,

    /* All supply-side value locking in USD that remains uncollected and unused in the protocol. */
    @Json(name = "uncollected_supply_side_value_usd")
    val uncollectedSupplySideValueUsd: kotlin.String? = null,

    /* Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV. */
    @Json(name = "protocol_controlled_value_usd")
    val protocolControlledValueUsd: kotlin.String? = null,

    /* All historical volume in USD. */
    @Json(name = "cumulative_volume_usd")
    val cumulativeVolumeUsd: kotlin.String? = null,

    /* Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea. */
    @Json(name = "cumulative_supply_side_revenue_usd")
    val cumulativeSupplySideRevenueUsd: kotlin.String? = null,

    /* Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee. */
    @Json(name = "cumulative_protocol_side_revenue_usd")
    val cumulativeProtocolSideRevenueUsd: kotlin.String? = null,

    /* All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn. */
    @Json(name = "cumulative_total_revenue_usd")
    val cumulativeTotalRevenueUsd: kotlin.String? = null,

    /* Number of cumulative unique users. */
    @Json(name = "cumulative_unique_users")
    val cumulativeUniqueUsers: kotlin.Int? = null,

    /* Number of cumulative liquidity providers. */
    @Json(name = "cumulative_unique_l_ps")
    val cumulativeUniqueLPs: kotlin.Int? = null,

    /* Number of cumulative traders */
    @Json(name = "cumulative_unique_traders")
    val cumulativeUniqueTraders: kotlin.Int? = null,

    /* Total number of pools. */
    @Json(name = "total_pool_count")
    val totalPoolCount: kotlin.Int? = null,

    /* Total number of open positions. */
    @Json(name = "open_position_count")
    val openPositionCount: kotlin.Int? = null,

    /* Total number of positions (open and closed). */
    @Json(name = "cumulative_position_count")
    val cumulativePositionCount: kotlin.Int? = null,

    /* Day ID of the most recent daily snapshot. */
    @Json(name = "last_snapshot_day_id")
    val lastSnapshotDayId: kotlin.Int? = null,

    /* Timestamp of the last time this entity was updated */
    @Json(name = "last_update_timestamp")
    val lastUpdateTimestamp: kotlin.String? = null,

    /* Block number of the last time this entity was updated. */
    @Json(name = "last_update_block_number")
    val lastUpdateBlockNumber: kotlin.String? = null,

    /* This is a boolean to indicate whether or not the pools have been instantiated the were initialized before Optimism regenesis. */
    @Json(name = "regenesis")
    val regenesis: kotlin.Boolean? = null

)

