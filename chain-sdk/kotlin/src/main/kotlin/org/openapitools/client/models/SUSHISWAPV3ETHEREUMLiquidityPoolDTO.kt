/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Pool-level metadata.
 *
 * @param entryTime 
 * @param recvTime 
 * @param blockNumber Number of block in which entity was recorded.
 * @param vid .
 * @param blockRange Block range of the liquidity pool.
 * @param id Smart contract address of the pool.
 * @param protocol Protocol this pool belongs to.
 * @param name Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT).
 * @param symbol Symbol of liquidity pool (e.g. 3CRV).
 * @param liquidityToken Token that is to represent ownership of liquidity.
 * @param inputTokens Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer.
 * @param rewardTokens Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon.
 * @param fees Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee.).
 * @param isSingleSided Specifies whether this pool is single-sided (e.g. Bancor, Platypus's Alternative Pool). The specifics of the implementation depends on the protocol.
 * @param createdTimestamp Timestamp when the liquidity pool was created.
 * @param createdBlockNumber Block number when the liquidity pool was created.
 * @param tick Current tick representing the price of token0/token1.
 * @param totalValueLockedUsd Current TVL (Total Value Locked) of this pool in USD.
 * @param totalLiquidity Sum of all active and non-active liquidity for this pool.
 * @param totalLiquidityUsd Sum of all active and non-active liquidity in USD for this pool.
 * @param activeLiquidity All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
 * @param activeLiquidityUsd All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
 * @param uncollectedProtocolSideTokenAmounts All protocol-side value locked in token amounts that remains uncollected and unused in the pool.
 * @param uncollectedProtocolSideValuesUsd All protocol-side value locking in USD that remains uncollected and unused in the pool.
 * @param uncollectedSupplySideTokenAmounts All supply-side value locked in token amounts that remains uncollected and unused in the pool.
 * @param uncollectedSupplySideValuesUsd All supply-side value locked in USD that remains uncollected and unused in the pool.
 * @param cumulativeSupplySideRevenueUsd All revenue generated by the liquidity pool, accrued to the supply side.
 * @param cumulativeProtocolSideRevenueUsd All revenue generated by the liquidity pool, accrued to the protocol.
 * @param cumulativeTotalRevenueUsd  All revenue generated by the liquidity pool.
 * @param cumulativeVolumeByTokenAmount All trade volume occurred for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field.
 * @param cumulativeVolumeByTokenUsd All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.
 * @param cumulativeVolumeUsd All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.
 * @param inputTokenBalances Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.
 * @param inputTokenBalancesUsd Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field.
 * @param inputTokenWeights Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
 * @param stakedOutputTokenAmount Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
 * @param rewardTokenEmissionsAmount Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
 * @param rewardTokenEmissionsUsd Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
 * @param cumulativeDepositCount Total number of deposits (add liquidity).
 * @param cumulativeWithdrawCount Total number of withdrawals (remove liquidity).
 * @param cumulativeSwapCount Total number of trades (swaps).
 * @param positionCount Number of positions in this market.
 * @param openPositionCount Number of open positions in this market.
 * @param closedPositionCount Number of closed positions in this market.
 * @param lastSnapshotDayId Day ID of the most recent daily snapshot.
 * @param lastSnapshotHourId Hour ID of the most recent hourly snapshot.
 * @param lastUpdateTimestamp Timestamp of the last time this entity was updated.
 * @param lastUpdateBlockNumber Block number of the last time this entity was updated.
 * @param evaluatedAsk 
 */


data class SUSHISWAPV3ETHEREUMLiquidityPoolDTO (

    @Json(name = "entry_time")
    val entryTime: java.time.OffsetDateTime? = null,

    @Json(name = "recv_time")
    val recvTime: java.time.OffsetDateTime? = null,

    /* Number of block in which entity was recorded. */
    @Json(name = "block_number")
    val blockNumber: kotlin.Long? = null,

    /* . */
    @Json(name = "vid")
    val vid: kotlin.Long? = null,

    /* Block range of the liquidity pool. */
    @Json(name = "block_range")
    val blockRange: kotlin.String? = null,

    /* Smart contract address of the pool. */
    @Json(name = "id")
    val id: kotlin.String? = null,

    /* Protocol this pool belongs to. */
    @Json(name = "protocol")
    val protocol: kotlin.String? = null,

    /* Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT). */
    @Json(name = "name")
    val name: kotlin.String? = null,

    /* Symbol of liquidity pool (e.g. 3CRV). */
    @Json(name = "symbol")
    val symbol: kotlin.String? = null,

    /* Token that is to represent ownership of liquidity. */
    @Json(name = "liquidity_token")
    val liquidityToken: kotlin.String? = null,

    /* Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer. */
    @Json(name = "input_tokens")
    val inputTokens: kotlin.collections.List<kotlin.String>? = null,

    /* Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon. */
    @Json(name = "reward_tokens")
    val rewardTokens: kotlin.collections.List<kotlin.String>? = null,

    /* Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee.). */
    @Json(name = "fees")
    val fees: kotlin.collections.List<kotlin.String>? = null,

    /* Specifies whether this pool is single-sided (e.g. Bancor, Platypus's Alternative Pool). The specifics of the implementation depends on the protocol. */
    @Json(name = "is_single_sided")
    val isSingleSided: kotlin.Boolean? = null,

    /* Timestamp when the liquidity pool was created. */
    @Json(name = "created_timestamp")
    val createdTimestamp: kotlin.String? = null,

    /* Block number when the liquidity pool was created. */
    @Json(name = "created_block_number")
    val createdBlockNumber: kotlin.String? = null,

    /* Current tick representing the price of token0/token1. */
    @Json(name = "tick")
    val tick: kotlin.String? = null,

    /* Current TVL (Total Value Locked) of this pool in USD. */
    @Json(name = "total_value_locked_usd")
    val totalValueLockedUsd: kotlin.String? = null,

    /* Sum of all active and non-active liquidity for this pool. */
    @Json(name = "total_liquidity")
    val totalLiquidity: kotlin.String? = null,

    /* Sum of all active and non-active liquidity in USD for this pool. */
    @Json(name = "total_liquidity_usd")
    val totalLiquidityUsd: kotlin.String? = null,

    /* All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. */
    @Json(name = "active_liquidity")
    val activeLiquidity: kotlin.String? = null,

    /* All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick. */
    @Json(name = "active_liquidity_usd")
    val activeLiquidityUsd: kotlin.String? = null,

    /* All protocol-side value locked in token amounts that remains uncollected and unused in the pool. */
    @Json(name = "uncollected_protocol_side_token_amounts")
    val uncollectedProtocolSideTokenAmounts: kotlin.collections.List<kotlin.String>? = null,

    /* All protocol-side value locking in USD that remains uncollected and unused in the pool. */
    @Json(name = "uncollected_protocol_side_values_usd")
    val uncollectedProtocolSideValuesUsd: kotlin.collections.List<kotlin.String>? = null,

    /* All supply-side value locked in token amounts that remains uncollected and unused in the pool. */
    @Json(name = "uncollected_supply_side_token_amounts")
    val uncollectedSupplySideTokenAmounts: kotlin.collections.List<kotlin.String>? = null,

    /* All supply-side value locked in USD that remains uncollected and unused in the pool. */
    @Json(name = "uncollected_supply_side_values_usd")
    val uncollectedSupplySideValuesUsd: kotlin.collections.List<kotlin.String>? = null,

    /* All revenue generated by the liquidity pool, accrued to the supply side. */
    @Json(name = "cumulative_supply_side_revenue_usd")
    val cumulativeSupplySideRevenueUsd: kotlin.String? = null,

    /* All revenue generated by the liquidity pool, accrued to the protocol. */
    @Json(name = "cumulative_protocol_side_revenue_usd")
    val cumulativeProtocolSideRevenueUsd: kotlin.String? = null,

    /*  All revenue generated by the liquidity pool. */
    @Json(name = "cumulative_total_revenue_usd")
    val cumulativeTotalRevenueUsd: kotlin.String? = null,

    /* All trade volume occurred for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field. */
    @Json(name = "cumulative_volume_by_token_amount")
    val cumulativeVolumeByTokenAmount: kotlin.collections.List<kotlin.String>? = null,

    /* All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. */
    @Json(name = "cumulative_volume_by_token_usd")
    val cumulativeVolumeByTokenUsd: kotlin.collections.List<kotlin.String>? = null,

    /* All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field. */
    @Json(name = "cumulative_volume_usd")
    val cumulativeVolumeUsd: kotlin.String? = null,

    /* Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field. */
    @Json(name = "input_token_balances")
    val inputTokenBalances: kotlin.collections.List<kotlin.String>? = null,

    /* Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field. */
    @Json(name = "input_token_balances_usd")
    val inputTokenBalancesUsd: kotlin.collections.List<kotlin.String>? = null,

    /* Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool. */
    @Json(name = "input_token_weights")
    val inputTokenWeights: kotlin.collections.List<kotlin.String>? = null,

    /* Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. */
    @Json(name = "staked_output_token_amount")
    val stakedOutputTokenAmount: kotlin.String? = null,

    /* Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. */
    @Json(name = "reward_token_emissions_amount")
    val rewardTokenEmissionsAmount: kotlin.collections.List<kotlin.String>? = null,

    /* Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. */
    @Json(name = "reward_token_emissions_usd")
    val rewardTokenEmissionsUsd: kotlin.collections.List<kotlin.String>? = null,

    /* Total number of deposits (add liquidity). */
    @Json(name = "cumulative_deposit_count")
    val cumulativeDepositCount: kotlin.Int? = null,

    /* Total number of withdrawals (remove liquidity). */
    @Json(name = "cumulative_withdraw_count")
    val cumulativeWithdrawCount: kotlin.Int? = null,

    /* Total number of trades (swaps). */
    @Json(name = "cumulative_swap_count")
    val cumulativeSwapCount: kotlin.Int? = null,

    /* Number of positions in this market. */
    @Json(name = "position_count")
    val positionCount: kotlin.Int? = null,

    /* Number of open positions in this market. */
    @Json(name = "open_position_count")
    val openPositionCount: kotlin.Int? = null,

    /* Number of closed positions in this market. */
    @Json(name = "closed_position_count")
    val closedPositionCount: kotlin.Int? = null,

    /* Day ID of the most recent daily snapshot. */
    @Json(name = "last_snapshot_day_id")
    val lastSnapshotDayId: kotlin.Int? = null,

    /* Hour ID of the most recent hourly snapshot. */
    @Json(name = "last_snapshot_hour_id")
    val lastSnapshotHourId: kotlin.Int? = null,

    /* Timestamp of the last time this entity was updated. */
    @Json(name = "last_update_timestamp")
    val lastUpdateTimestamp: kotlin.String? = null,

    /* Block number of the last time this entity was updated. */
    @Json(name = "last_update_block_number")
    val lastUpdateBlockNumber: kotlin.String? = null,

    /*  */
    @Json(name = "evaluated_ask")
    val evaluatedAsk: kotlin.Double? = null

)

