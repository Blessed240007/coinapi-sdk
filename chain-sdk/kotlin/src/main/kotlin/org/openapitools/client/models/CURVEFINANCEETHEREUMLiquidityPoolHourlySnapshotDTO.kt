/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param entryTime 
 * @param recvTime 
 * @param blockNumber Number of block in which entity was recorded.
 * @param blockRange 
 * @param id (smart contract address of the pool)-(# of hours since unix epoch time)
 * @param protocol The protocol this snapshot belongs to
 * @param pool The pool this snapshot belongs to
 * @param timestamp Timestamp of this snapshot
 * @param totalValueLockedUsd Current TVL (Total Value Locked) of this pool
 * @param cumulativeSupplySideRevenueUsd All revenue generated by the liquidity pool, accrued to the supply side.
 * @param hourlySupplySideRevenueUsd Hourly revenue generated by the liquidity pool, accrued to the supply side.
 * @param cumulativeProtocolSideRevenueUsd All revenue generated by the liquidity pool, accrued to the protocol.
 * @param hourlyProtocolSideRevenueUsd Hourly revenue generated by the liquidity pool, accrued to the protocol.
 * @param cumulativeTotalRevenueUsd All revenue generated by the liquidity pool.
 * @param hourlyTotalRevenueUsd Hourly revenue generated by the liquidity pool.
 * @param hourlyVolumeUsd All trade volume occurred in a given hour, in USD
 * @param hourlyVolumeByTokenAmount All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool's 'inputTokens' field.
 * @param hourlyVolumeByTokenUsd All trade volume occurred in a given hour for a specific input token, in USD. The ordering should be the same as the pool's 'inputTokens' field.
 * @param cumulativeVolumeUsd All historical trade volume occurred in this pool, in USD
 * @param inputTokenBalances Amount of input tokens in the pool. The ordering should be the same as the pool's 'inputTokens' field.
 * @param inputTokenWeights Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool
 * @param outputTokenSupply Total supply of output token. Note that certain DEXes don't have an output token (e.g. Bancor)
 * @param outputTokenPriceUsd Price per share of output token in USD
 * @param stakedOutputTokenAmount Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
 * @param rewardTokenEmissionsAmount Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
 * @param rewardTokenEmissionsUsd Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
 */


data class CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO (

    @Json(name = "entry_time")
    val entryTime: java.time.OffsetDateTime? = null,

    @Json(name = "recv_time")
    val recvTime: java.time.OffsetDateTime? = null,

    /* Number of block in which entity was recorded. */
    @Json(name = "block_number")
    val blockNumber: kotlin.Long? = null,

    /*  */
    @Json(name = "block_range")
    val blockRange: kotlin.String? = null,

    /* (smart contract address of the pool)-(# of hours since unix epoch time) */
    @Json(name = "id")
    val id: kotlin.String? = null,

    /* The protocol this snapshot belongs to */
    @Json(name = "protocol")
    val protocol: kotlin.String? = null,

    /* The pool this snapshot belongs to */
    @Json(name = "pool")
    val pool: kotlin.String? = null,

    /* Timestamp of this snapshot */
    @Json(name = "timestamp")
    val timestamp: kotlin.String? = null,

    /* Current TVL (Total Value Locked) of this pool */
    @Json(name = "total_value_locked_usd")
    val totalValueLockedUsd: kotlin.String? = null,

    /* All revenue generated by the liquidity pool, accrued to the supply side. */
    @Json(name = "cumulative_supply_side_revenue_usd")
    val cumulativeSupplySideRevenueUsd: kotlin.String? = null,

    /* Hourly revenue generated by the liquidity pool, accrued to the supply side. */
    @Json(name = "hourly_supply_side_revenue_usd")
    val hourlySupplySideRevenueUsd: kotlin.String? = null,

    /* All revenue generated by the liquidity pool, accrued to the protocol. */
    @Json(name = "cumulative_protocol_side_revenue_usd")
    val cumulativeProtocolSideRevenueUsd: kotlin.String? = null,

    /* Hourly revenue generated by the liquidity pool, accrued to the protocol. */
    @Json(name = "hourly_protocol_side_revenue_usd")
    val hourlyProtocolSideRevenueUsd: kotlin.String? = null,

    /* All revenue generated by the liquidity pool. */
    @Json(name = "cumulative_total_revenue_usd")
    val cumulativeTotalRevenueUsd: kotlin.String? = null,

    /* Hourly revenue generated by the liquidity pool. */
    @Json(name = "hourly_total_revenue_usd")
    val hourlyTotalRevenueUsd: kotlin.String? = null,

    /* All trade volume occurred in a given hour, in USD */
    @Json(name = "hourly_volume_usd")
    val hourlyVolumeUsd: kotlin.String? = null,

    /* All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool's 'inputTokens' field. */
    @Json(name = "hourly_volume_by_token_amount")
    val hourlyVolumeByTokenAmount: kotlin.collections.List<kotlin.String>? = null,

    /* All trade volume occurred in a given hour for a specific input token, in USD. The ordering should be the same as the pool's 'inputTokens' field. */
    @Json(name = "hourly_volume_by_token_usd")
    val hourlyVolumeByTokenUsd: kotlin.collections.List<kotlin.String>? = null,

    /* All historical trade volume occurred in this pool, in USD */
    @Json(name = "cumulative_volume_usd")
    val cumulativeVolumeUsd: kotlin.String? = null,

    /* Amount of input tokens in the pool. The ordering should be the same as the pool's 'inputTokens' field. */
    @Json(name = "input_token_balances")
    val inputTokenBalances: kotlin.collections.List<kotlin.String>? = null,

    /* Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool */
    @Json(name = "input_token_weights")
    val inputTokenWeights: kotlin.collections.List<kotlin.String>? = null,

    /* Total supply of output token. Note that certain DEXes don't have an output token (e.g. Bancor) */
    @Json(name = "output_token_supply")
    val outputTokenSupply: kotlin.String? = null,

    /* Price per share of output token in USD */
    @Json(name = "output_token_price_usd")
    val outputTokenPriceUsd: kotlin.String? = null,

    /* Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY. */
    @Json(name = "staked_output_token_amount")
    val stakedOutputTokenAmount: kotlin.String? = null,

    /* Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount. */
    @Json(name = "reward_token_emissions_amount")
    val rewardTokenEmissionsAmount: kotlin.collections.List<kotlin.String>? = null,

    /* Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount. */
    @Json(name = "reward_token_emissions_usd")
    val rewardTokenEmissionsUsd: kotlin.collections.List<kotlin.String>? = null

)

