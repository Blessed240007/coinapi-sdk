/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param entryTime 
 * @param recvTime 
 * @param blockNumber Number of block in which entity was recorded.
 * @param id (pool address)-(tick index)-(hour ID)
 * @param hourId Number of hours since Unix epoch time
 * @param tick tick index
 * @param pool liquidity pool this tick belongs to
 * @param liquidityGross total liquidity pool has as tick lower or upper
 * @param liquidityGrossUsd total liquidity in USD pool has as tick lower or upper
 * @param liquidityNet how much liquidity changes when tick crossed
 * @param liquidityNetUsd how much liquidity in USD changes when tick crossed
 * @param timestamp Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)
 */


data class PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO (

    @Json(name = "entry_time")
    val entryTime: java.time.OffsetDateTime? = null,

    @Json(name = "recv_time")
    val recvTime: java.time.OffsetDateTime? = null,

    /* Number of block in which entity was recorded. */
    @Json(name = "block_number")
    val blockNumber: kotlin.Long? = null,

    /* (pool address)-(tick index)-(hour ID) */
    @Json(name = "id")
    val id: kotlin.String? = null,

    /* Number of hours since Unix epoch time */
    @Json(name = "hour_id")
    val hourId: kotlin.Int? = null,

    /* tick index */
    @Json(name = "tick")
    val tick: kotlin.String? = null,

    /* liquidity pool this tick belongs to */
    @Json(name = "pool")
    val pool: kotlin.String? = null,

    /* total liquidity pool has as tick lower or upper */
    @Json(name = "liquidity_gross")
    val liquidityGross: kotlin.String? = null,

    /* total liquidity in USD pool has as tick lower or upper */
    @Json(name = "liquidity_gross_usd")
    val liquidityGrossUsd: kotlin.String? = null,

    /* how much liquidity changes when tick crossed */
    @Json(name = "liquidity_net")
    val liquidityNet: kotlin.String? = null,

    /* how much liquidity in USD changes when tick crossed */
    @Json(name = "liquidity_net_usd")
    val liquidityNetUsd: kotlin.String? = null,

    /* Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed) */
    @Json(name = "timestamp")
    val timestamp: kotlin.String? = null

)

