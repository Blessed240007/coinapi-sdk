/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param entryTime 
 * @param recvTime 
 * @param blockNumber Number of block in which entity was recorded.
 * @param id  (position id )-( transaction hash )-( log index ) 
 * @param hash Transaction hash of the transaction that triggered this snapshot
 * @param logIndex Event log index. For transactions that don't emit event, create arbitrary index starting from 0
 * @param nonce Nonce of the transaction that triggered this snapshot
 * @param position Position of this snapshot
 * @param liquidityTokenType Type of token used to track liquidity
 * @param liquidity total position liquidity
 * @param liquidityUsd total position liquidity in USD
 * @param cumulativeDepositTokenAmounts amount of tokens ever deposited to position
 * @param cumulativeDepositUsd amount of tokens in USD deposited to position
 * @param cumulativeWithdrawTokenAmounts amount of tokens ever withdrawn from position (without fees)
 * @param cumulativeWithdrawUsd amount of tokens in USD withdrawn from position (without fees)
 * @param cumulativeRewardTokenAmounts Total reward token accumulated under this position, in native amounts
 * @param cumulativeRewardUsd Total reward token accumulated under this position, in USD
 * @param depositCount Number of deposits related to this position
 * @param withdrawCount Number of withdrawals related to this position
 * @param timestamp Timestamp of this snapshot
 */


data class SUSHISWAPV3ETHEREUMPositionSnapshotDTO (

    @Json(name = "entry_time")
    val entryTime: java.time.OffsetDateTime? = null,

    @Json(name = "recv_time")
    val recvTime: java.time.OffsetDateTime? = null,

    /* Number of block in which entity was recorded. */
    @Json(name = "block_number")
    val blockNumber: kotlin.Long? = null,

    /*  (position id )-( transaction hash )-( log index )  */
    @Json(name = "id")
    val id: kotlin.String? = null,

    /* Transaction hash of the transaction that triggered this snapshot */
    @Json(name = "hash")
    val hash: kotlin.String? = null,

    /* Event log index. For transactions that don't emit event, create arbitrary index starting from 0 */
    @Json(name = "log_index")
    val logIndex: kotlin.Int? = null,

    /* Nonce of the transaction that triggered this snapshot */
    @Json(name = "nonce")
    val nonce: kotlin.String? = null,

    /* Position of this snapshot */
    @Json(name = "position")
    val position: kotlin.String? = null,

    /* Type of token used to track liquidity */
    @Json(name = "liquidity_token_type")
    val liquidityTokenType: kotlin.String? = null,

    /* total position liquidity */
    @Json(name = "liquidity")
    val liquidity: kotlin.String? = null,

    /* total position liquidity in USD */
    @Json(name = "liquidity_usd")
    val liquidityUsd: kotlin.String? = null,

    /* amount of tokens ever deposited to position */
    @Json(name = "cumulative_deposit_token_amounts")
    val cumulativeDepositTokenAmounts: kotlin.collections.List<kotlin.String>? = null,

    /* amount of tokens in USD deposited to position */
    @Json(name = "cumulative_deposit_usd")
    val cumulativeDepositUsd: kotlin.String? = null,

    /* amount of tokens ever withdrawn from position (without fees) */
    @Json(name = "cumulative_withdraw_token_amounts")
    val cumulativeWithdrawTokenAmounts: kotlin.collections.List<kotlin.String>? = null,

    /* amount of tokens in USD withdrawn from position (without fees) */
    @Json(name = "cumulative_withdraw_usd")
    val cumulativeWithdrawUsd: kotlin.String? = null,

    /* Total reward token accumulated under this position, in native amounts */
    @Json(name = "cumulative_reward_token_amounts")
    val cumulativeRewardTokenAmounts: kotlin.collections.List<kotlin.String>? = null,

    /* Total reward token accumulated under this position, in USD */
    @Json(name = "cumulative_reward_usd")
    val cumulativeRewardUsd: kotlin.collections.List<kotlin.String>? = null,

    /* Number of deposits related to this position */
    @Json(name = "deposit_count")
    val depositCount: kotlin.Int? = null,

    /* Number of withdrawals related to this position */
    @Json(name = "withdraw_count")
    val withdrawCount: kotlin.Int? = null,

    /* Timestamp of this snapshot */
    @Json(name = "timestamp")
    val timestamp: kotlin.String? = null

)

