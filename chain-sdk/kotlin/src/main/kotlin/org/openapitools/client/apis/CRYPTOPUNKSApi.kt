/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.CRYPTOPUNKSBidDTO
import org.openapitools.client.models.CRYPTOPUNKSCollectionDTO
import org.openapitools.client.models.CRYPTOPUNKSCollectionDailySnapshotDTO
import org.openapitools.client.models.CRYPTOPUNKSDataSourcesDTO
import org.openapitools.client.models.CRYPTOPUNKSItemDTO
import org.openapitools.client.models.CRYPTOPUNKSMarketPlaceDTO
import org.openapitools.client.models.CRYPTOPUNKSMarketplaceDailySnapshotDTO
import org.openapitools.client.models.CRYPTOPUNKSTradeDTO
import org.openapitools.client.models.CRYPTOPUNKSUserDTO

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class CRYPTOPUNKSApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://onchain.coinapi.io")
        }
    }

    /**
     * Bids (current)
     * Gets bids.
     * @return kotlin.collections.List<CRYPTOPUNKSBidDTO>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cRYPTOPUNKSBidsCurrent() : kotlin.collections.List<CRYPTOPUNKSBidDTO> {
        val localVarResponse = cRYPTOPUNKSBidsCurrentWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CRYPTOPUNKSBidDTO>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Bids (current)
     * Gets bids.
     * @return ApiResponse<kotlin.collections.List<CRYPTOPUNKSBidDTO>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cRYPTOPUNKSBidsCurrentWithHttpInfo() : ApiResponse<kotlin.collections.List<CRYPTOPUNKSBidDTO>?> {
        val localVariableConfig = cRYPTOPUNKSBidsCurrentRequestConfig()

        return request<Unit, kotlin.collections.List<CRYPTOPUNKSBidDTO>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cRYPTOPUNKSBidsCurrent
     *
     * @return RequestConfig
     */
    fun cRYPTOPUNKSBidsCurrentRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/dapps/cryptopunks/bids/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * CollectionDailySnapshots (current)
     * Gets collectionDailySnapshots.
     * @return kotlin.collections.List<CRYPTOPUNKSCollectionDailySnapshotDTO>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cRYPTOPUNKSCollectionDailySnapshotsCurrent() : kotlin.collections.List<CRYPTOPUNKSCollectionDailySnapshotDTO> {
        val localVarResponse = cRYPTOPUNKSCollectionDailySnapshotsCurrentWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CRYPTOPUNKSCollectionDailySnapshotDTO>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * CollectionDailySnapshots (current)
     * Gets collectionDailySnapshots.
     * @return ApiResponse<kotlin.collections.List<CRYPTOPUNKSCollectionDailySnapshotDTO>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cRYPTOPUNKSCollectionDailySnapshotsCurrentWithHttpInfo() : ApiResponse<kotlin.collections.List<CRYPTOPUNKSCollectionDailySnapshotDTO>?> {
        val localVariableConfig = cRYPTOPUNKSCollectionDailySnapshotsCurrentRequestConfig()

        return request<Unit, kotlin.collections.List<CRYPTOPUNKSCollectionDailySnapshotDTO>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cRYPTOPUNKSCollectionDailySnapshotsCurrent
     *
     * @return RequestConfig
     */
    fun cRYPTOPUNKSCollectionDailySnapshotsCurrentRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/dapps/cryptopunks/collectionDailySnapshots/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Collections (current)
     * Gets collections.
     * @return kotlin.collections.List<CRYPTOPUNKSCollectionDTO>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cRYPTOPUNKSCollectionsCurrent() : kotlin.collections.List<CRYPTOPUNKSCollectionDTO> {
        val localVarResponse = cRYPTOPUNKSCollectionsCurrentWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CRYPTOPUNKSCollectionDTO>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Collections (current)
     * Gets collections.
     * @return ApiResponse<kotlin.collections.List<CRYPTOPUNKSCollectionDTO>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cRYPTOPUNKSCollectionsCurrentWithHttpInfo() : ApiResponse<kotlin.collections.List<CRYPTOPUNKSCollectionDTO>?> {
        val localVariableConfig = cRYPTOPUNKSCollectionsCurrentRequestConfig()

        return request<Unit, kotlin.collections.List<CRYPTOPUNKSCollectionDTO>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cRYPTOPUNKSCollectionsCurrent
     *
     * @return RequestConfig
     */
    fun cRYPTOPUNKSCollectionsCurrentRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/dapps/cryptopunks/collections/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DataSources (current)
     * Gets dataSources.
     * @return kotlin.collections.List<CRYPTOPUNKSDataSourcesDTO>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cRYPTOPUNKSDataSourcesCurrent() : kotlin.collections.List<CRYPTOPUNKSDataSourcesDTO> {
        val localVarResponse = cRYPTOPUNKSDataSourcesCurrentWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CRYPTOPUNKSDataSourcesDTO>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DataSources (current)
     * Gets dataSources.
     * @return ApiResponse<kotlin.collections.List<CRYPTOPUNKSDataSourcesDTO>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cRYPTOPUNKSDataSourcesCurrentWithHttpInfo() : ApiResponse<kotlin.collections.List<CRYPTOPUNKSDataSourcesDTO>?> {
        val localVariableConfig = cRYPTOPUNKSDataSourcesCurrentRequestConfig()

        return request<Unit, kotlin.collections.List<CRYPTOPUNKSDataSourcesDTO>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cRYPTOPUNKSDataSourcesCurrent
     *
     * @return RequestConfig
     */
    fun cRYPTOPUNKSDataSourcesCurrentRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/dapps/cryptopunks/dataSources/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Items (current)
     * Gets items.
     * @return kotlin.collections.List<CRYPTOPUNKSItemDTO>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cRYPTOPUNKSItemsCurrent() : kotlin.collections.List<CRYPTOPUNKSItemDTO> {
        val localVarResponse = cRYPTOPUNKSItemsCurrentWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CRYPTOPUNKSItemDTO>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Items (current)
     * Gets items.
     * @return ApiResponse<kotlin.collections.List<CRYPTOPUNKSItemDTO>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cRYPTOPUNKSItemsCurrentWithHttpInfo() : ApiResponse<kotlin.collections.List<CRYPTOPUNKSItemDTO>?> {
        val localVariableConfig = cRYPTOPUNKSItemsCurrentRequestConfig()

        return request<Unit, kotlin.collections.List<CRYPTOPUNKSItemDTO>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cRYPTOPUNKSItemsCurrent
     *
     * @return RequestConfig
     */
    fun cRYPTOPUNKSItemsCurrentRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/dapps/cryptopunks/items/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * MarketPlaces (current)
     * Gets marketPlaces.
     * @return kotlin.collections.List<CRYPTOPUNKSMarketPlaceDTO>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cRYPTOPUNKSMarketPlacesCurrent() : kotlin.collections.List<CRYPTOPUNKSMarketPlaceDTO> {
        val localVarResponse = cRYPTOPUNKSMarketPlacesCurrentWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CRYPTOPUNKSMarketPlaceDTO>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * MarketPlaces (current)
     * Gets marketPlaces.
     * @return ApiResponse<kotlin.collections.List<CRYPTOPUNKSMarketPlaceDTO>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cRYPTOPUNKSMarketPlacesCurrentWithHttpInfo() : ApiResponse<kotlin.collections.List<CRYPTOPUNKSMarketPlaceDTO>?> {
        val localVariableConfig = cRYPTOPUNKSMarketPlacesCurrentRequestConfig()

        return request<Unit, kotlin.collections.List<CRYPTOPUNKSMarketPlaceDTO>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cRYPTOPUNKSMarketPlacesCurrent
     *
     * @return RequestConfig
     */
    fun cRYPTOPUNKSMarketPlacesCurrentRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/dapps/cryptopunks/marketPlaces/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * MarketplaceDailySnapshots (current)
     * Gets marketplaceDailySnapshots.
     * @return kotlin.collections.List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cRYPTOPUNKSMarketplaceDailySnapshotsCurrent() : kotlin.collections.List<CRYPTOPUNKSMarketplaceDailySnapshotDTO> {
        val localVarResponse = cRYPTOPUNKSMarketplaceDailySnapshotsCurrentWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * MarketplaceDailySnapshots (current)
     * Gets marketplaceDailySnapshots.
     * @return ApiResponse<kotlin.collections.List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cRYPTOPUNKSMarketplaceDailySnapshotsCurrentWithHttpInfo() : ApiResponse<kotlin.collections.List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>?> {
        val localVariableConfig = cRYPTOPUNKSMarketplaceDailySnapshotsCurrentRequestConfig()

        return request<Unit, kotlin.collections.List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cRYPTOPUNKSMarketplaceDailySnapshotsCurrent
     *
     * @return RequestConfig
     */
    fun cRYPTOPUNKSMarketplaceDailySnapshotsCurrentRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/dapps/cryptopunks/marketplaceDailySnapshots/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Trades (current)
     * Gets trades.
     * @return kotlin.collections.List<CRYPTOPUNKSTradeDTO>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cRYPTOPUNKSTradesCurrent() : kotlin.collections.List<CRYPTOPUNKSTradeDTO> {
        val localVarResponse = cRYPTOPUNKSTradesCurrentWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CRYPTOPUNKSTradeDTO>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Trades (current)
     * Gets trades.
     * @return ApiResponse<kotlin.collections.List<CRYPTOPUNKSTradeDTO>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cRYPTOPUNKSTradesCurrentWithHttpInfo() : ApiResponse<kotlin.collections.List<CRYPTOPUNKSTradeDTO>?> {
        val localVariableConfig = cRYPTOPUNKSTradesCurrentRequestConfig()

        return request<Unit, kotlin.collections.List<CRYPTOPUNKSTradeDTO>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cRYPTOPUNKSTradesCurrent
     *
     * @return RequestConfig
     */
    fun cRYPTOPUNKSTradesCurrentRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/dapps/cryptopunks/trades/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Users (current)
     * Gets users.
     * @return kotlin.collections.List<CRYPTOPUNKSUserDTO>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cRYPTOPUNKSUsersCurrent() : kotlin.collections.List<CRYPTOPUNKSUserDTO> {
        val localVarResponse = cRYPTOPUNKSUsersCurrentWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CRYPTOPUNKSUserDTO>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Users (current)
     * Gets users.
     * @return ApiResponse<kotlin.collections.List<CRYPTOPUNKSUserDTO>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cRYPTOPUNKSUsersCurrentWithHttpInfo() : ApiResponse<kotlin.collections.List<CRYPTOPUNKSUserDTO>?> {
        val localVariableConfig = cRYPTOPUNKSUsersCurrentRequestConfig()

        return request<Unit, kotlin.collections.List<CRYPTOPUNKSUserDTO>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cRYPTOPUNKSUsersCurrent
     *
     * @return RequestConfig
     */
    fun cRYPTOPUNKSUsersCurrentRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/dapps/cryptopunks/users/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
