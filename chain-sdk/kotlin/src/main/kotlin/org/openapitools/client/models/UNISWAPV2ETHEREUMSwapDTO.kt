/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.TransactionsETradeAggressiveSide

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Trade (swap) event which occurred in a pool.
 *
 * @param entryTime 
 * @param recvTime 
 * @param blockNumber Number of block in which entity was recorded.
 * @param block 
 * @param id swap-(Transaction hash)-(Log index)
 * @param hash Transaction hash of the transaction that emitted this event
 * @param logIndex Event log index. For transactions that don't emit event, create arbitrary index starting from 0
 * @param protocol The protocol this transaction belongs to
 * @param to Address that received the tokens
 * @param from Address that sent the tokens
 * @param timestamp Timestamp of this event
 * @param tokenIn Token deposited into pool
 * @param amountIn Amount of token deposited into pool in native units
 * @param amountInUsd Amount of token deposited into pool in USD
 * @param tokenOut Token withdrawn from pool
 * @param amountOut Amount of token withdrawn from pool in native units
 * @param amountOutUsd Amount of token withdrawn from pool in USD
 * @param reserveAmounts Amount of input tokens in the liquidity pool
 * @param pool The pool involving this transaction
 * @param blockRange 
 * @param poolId 
 * @param transactionId 
 * @param evaluatedPrice 
 * @param evaluatedAmount 
 * @param evaluatedAggressor 
 */


data class UNISWAPV2ETHEREUMSwapDTO (

    @Json(name = "entry_time")
    val entryTime: java.time.OffsetDateTime? = null,

    @Json(name = "recv_time")
    val recvTime: java.time.OffsetDateTime? = null,

    /* Number of block in which entity was recorded. */
    @Json(name = "block_number")
    val blockNumber: kotlin.Long? = null,

    /*  */
    @Json(name = "block_")
    val block: kotlin.Int? = null,

    /* swap-(Transaction hash)-(Log index) */
    @Json(name = "id")
    val id: kotlin.String? = null,

    /* Transaction hash of the transaction that emitted this event */
    @Json(name = "hash")
    val hash: kotlin.String? = null,

    /* Event log index. For transactions that don't emit event, create arbitrary index starting from 0 */
    @Json(name = "log_index")
    val logIndex: kotlin.Int? = null,

    /* The protocol this transaction belongs to */
    @Json(name = "protocol")
    val protocol: kotlin.String? = null,

    /* Address that received the tokens */
    @Json(name = "to")
    val to: kotlin.String? = null,

    /* Address that sent the tokens */
    @Json(name = "from")
    val from: kotlin.String? = null,

    /* Timestamp of this event */
    @Json(name = "timestamp")
    val timestamp: kotlin.String? = null,

    /* Token deposited into pool */
    @Json(name = "token_in")
    val tokenIn: kotlin.String? = null,

    /* Amount of token deposited into pool in native units */
    @Json(name = "amount_in")
    val amountIn: kotlin.String? = null,

    /* Amount of token deposited into pool in USD */
    @Json(name = "amount_in_usd")
    val amountInUsd: kotlin.String? = null,

    /* Token withdrawn from pool */
    @Json(name = "token_out")
    val tokenOut: kotlin.String? = null,

    /* Amount of token withdrawn from pool in native units */
    @Json(name = "amount_out")
    val amountOut: kotlin.String? = null,

    /* Amount of token withdrawn from pool in USD */
    @Json(name = "amount_out_usd")
    val amountOutUsd: kotlin.String? = null,

    /* Amount of input tokens in the liquidity pool */
    @Json(name = "reserve_amounts")
    val reserveAmounts: kotlin.collections.List<kotlin.String>? = null,

    /* The pool involving this transaction */
    @Json(name = "pool")
    val pool: kotlin.String? = null,

    @Json(name = "block_range")
    val blockRange: kotlin.String? = null,

    @Json(name = "pool_id")
    val poolId: kotlin.String? = null,

    @Json(name = "transaction_id")
    val transactionId: kotlin.String? = null,

    @Json(name = "evaluated_price")
    val evaluatedPrice: kotlin.Double? = null,

    @Json(name = "evaluated_amount")
    val evaluatedAmount: kotlin.Double? = null,

    @Json(name = "evaluated_aggressor")
    val evaluatedAggressor: TransactionsETradeAggressiveSide? = null

)

