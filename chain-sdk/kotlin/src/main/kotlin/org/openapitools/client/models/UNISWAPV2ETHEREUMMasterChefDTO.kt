/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Smart contract that is used to manage the liquidity mining program on Uniswap V2.
 *
 * @param entryTime 
 * @param recvTime 
 * @param blockNumber Number of block in which entity was recorded.
 * @param blockRange 
 * @param id (masterChef type) - (pid referenced in the masterchef contract)
 * @param address Address of the masterchef contract
 * @param totalAllocPoint Total allocation point of all staking pools
 * @param rewardTokenRate Amount of reward tokens emitted per block or timestamp
 * @param rewardTokenInterval Indicates whether rewards are indicated by block or timestamp
 * @param adjustedRewardTokenRate Reward token rate given after you adjust for allocations either burned or not applicable
 * @param lastUpdatedRewardRate Last time the adjusted reward token rate was updated
 */


data class UNISWAPV2ETHEREUMMasterChefDTO (

    @Json(name = "entry_time")
    val entryTime: java.time.OffsetDateTime? = null,

    @Json(name = "recv_time")
    val recvTime: java.time.OffsetDateTime? = null,

    /* Number of block in which entity was recorded. */
    @Json(name = "block_number")
    val blockNumber: kotlin.Long? = null,

    /*  */
    @Json(name = "block_range")
    val blockRange: kotlin.String? = null,

    /* (masterChef type) - (pid referenced in the masterchef contract) */
    @Json(name = "id")
    val id: kotlin.String? = null,

    /* Address of the masterchef contract */
    @Json(name = "address")
    val address: kotlin.String? = null,

    /* Total allocation point of all staking pools */
    @Json(name = "total_alloc_point")
    val totalAllocPoint: kotlin.String? = null,

    /* Amount of reward tokens emitted per block or timestamp */
    @Json(name = "reward_token_rate")
    val rewardTokenRate: kotlin.String? = null,

    /* Indicates whether rewards are indicated by block or timestamp */
    @Json(name = "reward_token_interval")
    val rewardTokenInterval: kotlin.String? = null,

    /* Reward token rate given after you adjust for allocations either burned or not applicable */
    @Json(name = "adjusted_reward_token_rate")
    val adjustedRewardTokenRate: kotlin.String? = null,

    /* Last time the adjusted reward token rate was updated */
    @Json(name = "last_updated_reward_rate")
    val lastUpdatedRewardRate: kotlin.String? = null

)

