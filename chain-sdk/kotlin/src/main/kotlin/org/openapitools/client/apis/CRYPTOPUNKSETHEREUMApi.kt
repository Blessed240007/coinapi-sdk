/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.CRYPTOPUNKSBidDTO
import org.openapitools.client.models.CRYPTOPUNKSCollectionDTO
import org.openapitools.client.models.CRYPTOPUNKSCollectionDailySnapshotDTO
import org.openapitools.client.models.CRYPTOPUNKSDataSourcesDTO
import org.openapitools.client.models.CRYPTOPUNKSItemDTO
import org.openapitools.client.models.CRYPTOPUNKSMarketPlaceDTO
import org.openapitools.client.models.CRYPTOPUNKSMarketplaceDailySnapshotDTO
import org.openapitools.client.models.CRYPTOPUNKSTradeDTO
import org.openapitools.client.models.CRYPTOPUNKSUserDTO

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class CRYPTOPUNKSETHEREUMApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://onchain.coinapi.io")
        }
    }

    /**
     * Bids (current)
     * Gets bids.
     * @return kotlin.collections.List<CRYPTOPUNKSBidDTO>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cRYPTOPUNKSETHEREUMBidsCurrent() : kotlin.collections.List<CRYPTOPUNKSBidDTO> {
        val localVarResponse = cRYPTOPUNKSETHEREUMBidsCurrentWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CRYPTOPUNKSBidDTO>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Bids (current)
     * Gets bids.
     * @return ApiResponse<kotlin.collections.List<CRYPTOPUNKSBidDTO>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cRYPTOPUNKSETHEREUMBidsCurrentWithHttpInfo() : ApiResponse<kotlin.collections.List<CRYPTOPUNKSBidDTO>?> {
        val localVariableConfig = cRYPTOPUNKSETHEREUMBidsCurrentRequestConfig()

        return request<Unit, kotlin.collections.List<CRYPTOPUNKSBidDTO>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cRYPTOPUNKSETHEREUMBidsCurrent
     *
     * @return RequestConfig
     */
    fun cRYPTOPUNKSETHEREUMBidsCurrentRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/dapps/cryptopunks-ethereum/bids/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * CollectionDailySnapshots (current)
     * Gets collectionDailySnapshots.
     * @return kotlin.collections.List<CRYPTOPUNKSCollectionDailySnapshotDTO>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrent() : kotlin.collections.List<CRYPTOPUNKSCollectionDailySnapshotDTO> {
        val localVarResponse = cRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CRYPTOPUNKSCollectionDailySnapshotDTO>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * CollectionDailySnapshots (current)
     * Gets collectionDailySnapshots.
     * @return ApiResponse<kotlin.collections.List<CRYPTOPUNKSCollectionDailySnapshotDTO>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentWithHttpInfo() : ApiResponse<kotlin.collections.List<CRYPTOPUNKSCollectionDailySnapshotDTO>?> {
        val localVariableConfig = cRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentRequestConfig()

        return request<Unit, kotlin.collections.List<CRYPTOPUNKSCollectionDailySnapshotDTO>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrent
     *
     * @return RequestConfig
     */
    fun cRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/dapps/cryptopunks-ethereum/collectionDailySnapshots/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Collections (current)
     * Gets collections.
     * @return kotlin.collections.List<CRYPTOPUNKSCollectionDTO>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cRYPTOPUNKSETHEREUMCollectionsCurrent() : kotlin.collections.List<CRYPTOPUNKSCollectionDTO> {
        val localVarResponse = cRYPTOPUNKSETHEREUMCollectionsCurrentWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CRYPTOPUNKSCollectionDTO>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Collections (current)
     * Gets collections.
     * @return ApiResponse<kotlin.collections.List<CRYPTOPUNKSCollectionDTO>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cRYPTOPUNKSETHEREUMCollectionsCurrentWithHttpInfo() : ApiResponse<kotlin.collections.List<CRYPTOPUNKSCollectionDTO>?> {
        val localVariableConfig = cRYPTOPUNKSETHEREUMCollectionsCurrentRequestConfig()

        return request<Unit, kotlin.collections.List<CRYPTOPUNKSCollectionDTO>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cRYPTOPUNKSETHEREUMCollectionsCurrent
     *
     * @return RequestConfig
     */
    fun cRYPTOPUNKSETHEREUMCollectionsCurrentRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/dapps/cryptopunks-ethereum/collections/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * DataSources (current)
     * Gets dataSources.
     * @return kotlin.collections.List<CRYPTOPUNKSDataSourcesDTO>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cRYPTOPUNKSETHEREUMDataSourcesCurrent() : kotlin.collections.List<CRYPTOPUNKSDataSourcesDTO> {
        val localVarResponse = cRYPTOPUNKSETHEREUMDataSourcesCurrentWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CRYPTOPUNKSDataSourcesDTO>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * DataSources (current)
     * Gets dataSources.
     * @return ApiResponse<kotlin.collections.List<CRYPTOPUNKSDataSourcesDTO>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cRYPTOPUNKSETHEREUMDataSourcesCurrentWithHttpInfo() : ApiResponse<kotlin.collections.List<CRYPTOPUNKSDataSourcesDTO>?> {
        val localVariableConfig = cRYPTOPUNKSETHEREUMDataSourcesCurrentRequestConfig()

        return request<Unit, kotlin.collections.List<CRYPTOPUNKSDataSourcesDTO>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cRYPTOPUNKSETHEREUMDataSourcesCurrent
     *
     * @return RequestConfig
     */
    fun cRYPTOPUNKSETHEREUMDataSourcesCurrentRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/dapps/cryptopunks-ethereum/dataSources/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Items (current)
     * Gets items.
     * @return kotlin.collections.List<CRYPTOPUNKSItemDTO>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cRYPTOPUNKSETHEREUMItemsCurrent() : kotlin.collections.List<CRYPTOPUNKSItemDTO> {
        val localVarResponse = cRYPTOPUNKSETHEREUMItemsCurrentWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CRYPTOPUNKSItemDTO>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Items (current)
     * Gets items.
     * @return ApiResponse<kotlin.collections.List<CRYPTOPUNKSItemDTO>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cRYPTOPUNKSETHEREUMItemsCurrentWithHttpInfo() : ApiResponse<kotlin.collections.List<CRYPTOPUNKSItemDTO>?> {
        val localVariableConfig = cRYPTOPUNKSETHEREUMItemsCurrentRequestConfig()

        return request<Unit, kotlin.collections.List<CRYPTOPUNKSItemDTO>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cRYPTOPUNKSETHEREUMItemsCurrent
     *
     * @return RequestConfig
     */
    fun cRYPTOPUNKSETHEREUMItemsCurrentRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/dapps/cryptopunks-ethereum/items/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * MarketPlaces (current)
     * Gets marketPlaces.
     * @return kotlin.collections.List<CRYPTOPUNKSMarketPlaceDTO>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cRYPTOPUNKSETHEREUMMarketPlacesCurrent() : kotlin.collections.List<CRYPTOPUNKSMarketPlaceDTO> {
        val localVarResponse = cRYPTOPUNKSETHEREUMMarketPlacesCurrentWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CRYPTOPUNKSMarketPlaceDTO>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * MarketPlaces (current)
     * Gets marketPlaces.
     * @return ApiResponse<kotlin.collections.List<CRYPTOPUNKSMarketPlaceDTO>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cRYPTOPUNKSETHEREUMMarketPlacesCurrentWithHttpInfo() : ApiResponse<kotlin.collections.List<CRYPTOPUNKSMarketPlaceDTO>?> {
        val localVariableConfig = cRYPTOPUNKSETHEREUMMarketPlacesCurrentRequestConfig()

        return request<Unit, kotlin.collections.List<CRYPTOPUNKSMarketPlaceDTO>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cRYPTOPUNKSETHEREUMMarketPlacesCurrent
     *
     * @return RequestConfig
     */
    fun cRYPTOPUNKSETHEREUMMarketPlacesCurrentRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/dapps/cryptopunks-ethereum/marketPlaces/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * MarketplaceDailySnapshots (current)
     * Gets marketplaceDailySnapshots.
     * @return kotlin.collections.List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrent() : kotlin.collections.List<CRYPTOPUNKSMarketplaceDailySnapshotDTO> {
        val localVarResponse = cRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * MarketplaceDailySnapshots (current)
     * Gets marketplaceDailySnapshots.
     * @return ApiResponse<kotlin.collections.List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentWithHttpInfo() : ApiResponse<kotlin.collections.List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>?> {
        val localVariableConfig = cRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentRequestConfig()

        return request<Unit, kotlin.collections.List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrent
     *
     * @return RequestConfig
     */
    fun cRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/dapps/cryptopunks-ethereum/marketplaceDailySnapshots/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Trades (current)
     * Gets trades.
     * @return kotlin.collections.List<CRYPTOPUNKSTradeDTO>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cRYPTOPUNKSETHEREUMTradesCurrent() : kotlin.collections.List<CRYPTOPUNKSTradeDTO> {
        val localVarResponse = cRYPTOPUNKSETHEREUMTradesCurrentWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CRYPTOPUNKSTradeDTO>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Trades (current)
     * Gets trades.
     * @return ApiResponse<kotlin.collections.List<CRYPTOPUNKSTradeDTO>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cRYPTOPUNKSETHEREUMTradesCurrentWithHttpInfo() : ApiResponse<kotlin.collections.List<CRYPTOPUNKSTradeDTO>?> {
        val localVariableConfig = cRYPTOPUNKSETHEREUMTradesCurrentRequestConfig()

        return request<Unit, kotlin.collections.List<CRYPTOPUNKSTradeDTO>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cRYPTOPUNKSETHEREUMTradesCurrent
     *
     * @return RequestConfig
     */
    fun cRYPTOPUNKSETHEREUMTradesCurrentRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/dapps/cryptopunks-ethereum/trades/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Users (current)
     * Gets users.
     * @return kotlin.collections.List<CRYPTOPUNKSUserDTO>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun cRYPTOPUNKSETHEREUMUsersCurrent() : kotlin.collections.List<CRYPTOPUNKSUserDTO> {
        val localVarResponse = cRYPTOPUNKSETHEREUMUsersCurrentWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<CRYPTOPUNKSUserDTO>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Users (current)
     * Gets users.
     * @return ApiResponse<kotlin.collections.List<CRYPTOPUNKSUserDTO>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun cRYPTOPUNKSETHEREUMUsersCurrentWithHttpInfo() : ApiResponse<kotlin.collections.List<CRYPTOPUNKSUserDTO>?> {
        val localVariableConfig = cRYPTOPUNKSETHEREUMUsersCurrentRequestConfig()

        return request<Unit, kotlin.collections.List<CRYPTOPUNKSUserDTO>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation cRYPTOPUNKSETHEREUMUsersCurrent
     *
     * @return RequestConfig
     */
    fun cRYPTOPUNKSETHEREUMUsersCurrentRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/dapps/cryptopunks-ethereum/users/current",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
