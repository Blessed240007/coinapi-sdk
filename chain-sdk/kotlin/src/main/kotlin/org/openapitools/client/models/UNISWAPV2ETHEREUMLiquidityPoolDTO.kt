/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Pool-level metadata.
 *
 * @param entryTime 
 * @param recvTime 
 * @param blockNumber Number of block in which entity was recorded.
 * @param vid .
 * @param id Smart contract address of the pool
 * @param protocol The protocol this pool belongs to
 * @param name Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT)
 * @param symbol Symbol of liquidity pool (e.g. 3CRV)
 * @param inputTokens Tokens that need to be deposited to take a position in the protocol
 * @param outputToken Token that is minted to track ownership of position in protocol
 * @param rewardTokens Aditional tokens that are given as reward for position in a protocol
 * @param fees Fees per trade incurred to the user
 * @param isSingleSided Whether this pool is single-sided
 * @param createdTimestamp Creation timestamp
 * @param createdBlockNumber Creation block number
 * @param totalValueLockedUsd Current TVL (Total Value Locked) of this pool in USD
 * @param cumulativeSupplySideRevenueUsd All revenue generated by the liquidity pool, accrued to the supply side
 * @param cumulativeProtocolSideRevenueUsd All revenue generated by the liquidity pool, accrued to the protocol
 * @param cumulativeTotalRevenueUsd All revenue generated by the liquidity pool
 * @param cumulativeVolumeUsd All historical trade volume occurred in this pool, in USD
 * @param inputTokenBalances Amount of input tokens in the pool
 * @param inputTokenWeights Weights of input tokens in the liquidity pool in percentage values
 * @param outputTokenSupply Total supply of output token
 * @param outputTokenPriceUsd Price per share of output token in USD
 * @param stakedOutputTokenAmount Total supply of output tokens that are staked
 * @param rewardTokenEmissionsAmount Per-block reward token emission as of the current block normalized to a day, in token's native amount
 * @param rewardTokenEmissionsUsd Per-block reward token emission as of the current block normalized to a day, in USD value
 * @param evaluatedAsk Evaluated ask value of the liquidity pool.
 */


data class UNISWAPV2ETHEREUMLiquidityPoolDTO (

    @Json(name = "entry_time")
    val entryTime: java.time.OffsetDateTime? = null,

    @Json(name = "recv_time")
    val recvTime: java.time.OffsetDateTime? = null,

    /* Number of block in which entity was recorded. */
    @Json(name = "block_number")
    val blockNumber: kotlin.Long? = null,

    /* . */
    @Json(name = "vid")
    val vid: kotlin.Long? = null,

    /* Smart contract address of the pool */
    @Json(name = "id")
    val id: kotlin.String? = null,

    /* The protocol this pool belongs to */
    @Json(name = "protocol")
    val protocol: kotlin.String? = null,

    /* Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT) */
    @Json(name = "name")
    val name: kotlin.String? = null,

    /* Symbol of liquidity pool (e.g. 3CRV) */
    @Json(name = "symbol")
    val symbol: kotlin.String? = null,

    /* Tokens that need to be deposited to take a position in the protocol */
    @Json(name = "input_tokens")
    val inputTokens: kotlin.collections.List<kotlin.String>? = null,

    /* Token that is minted to track ownership of position in protocol */
    @Json(name = "output_token")
    val outputToken: kotlin.String? = null,

    /* Aditional tokens that are given as reward for position in a protocol */
    @Json(name = "reward_tokens")
    val rewardTokens: kotlin.collections.List<kotlin.String>? = null,

    /* Fees per trade incurred to the user */
    @Json(name = "fees")
    val fees: kotlin.collections.List<kotlin.String>? = null,

    /* Whether this pool is single-sided */
    @Json(name = "is_single_sided")
    val isSingleSided: kotlin.Boolean? = null,

    /* Creation timestamp */
    @Json(name = "created_timestamp")
    val createdTimestamp: kotlin.String? = null,

    /* Creation block number */
    @Json(name = "created_block_number")
    val createdBlockNumber: kotlin.String? = null,

    /* Current TVL (Total Value Locked) of this pool in USD */
    @Json(name = "total_value_locked_usd")
    val totalValueLockedUsd: kotlin.String? = null,

    /* All revenue generated by the liquidity pool, accrued to the supply side */
    @Json(name = "cumulative_supply_side_revenue_usd")
    val cumulativeSupplySideRevenueUsd: kotlin.String? = null,

    /* All revenue generated by the liquidity pool, accrued to the protocol */
    @Json(name = "cumulative_protocol_side_revenue_usd")
    val cumulativeProtocolSideRevenueUsd: kotlin.String? = null,

    /* All revenue generated by the liquidity pool */
    @Json(name = "cumulative_total_revenue_usd")
    val cumulativeTotalRevenueUsd: kotlin.String? = null,

    /* All historical trade volume occurred in this pool, in USD */
    @Json(name = "cumulative_volume_usd")
    val cumulativeVolumeUsd: kotlin.String? = null,

    /* Amount of input tokens in the pool */
    @Json(name = "input_token_balances")
    val inputTokenBalances: kotlin.collections.List<kotlin.String>? = null,

    /* Weights of input tokens in the liquidity pool in percentage values */
    @Json(name = "input_token_weights")
    val inputTokenWeights: kotlin.collections.List<kotlin.String>? = null,

    /* Total supply of output token */
    @Json(name = "output_token_supply")
    val outputTokenSupply: kotlin.String? = null,

    /* Price per share of output token in USD */
    @Json(name = "output_token_price_usd")
    val outputTokenPriceUsd: kotlin.String? = null,

    /* Total supply of output tokens that are staked */
    @Json(name = "staked_output_token_amount")
    val stakedOutputTokenAmount: kotlin.String? = null,

    /* Per-block reward token emission as of the current block normalized to a day, in token's native amount */
    @Json(name = "reward_token_emissions_amount")
    val rewardTokenEmissionsAmount: kotlin.collections.List<kotlin.String>? = null,

    /* Per-block reward token emission as of the current block normalized to a day, in USD value */
    @Json(name = "reward_token_emissions_usd")
    val rewardTokenEmissionsUsd: kotlin.collections.List<kotlin.String>? = null,

    /* Evaluated ask value of the liquidity pool. */
    @Json(name = "evaluated_ask")
    val evaluatedAsk: kotlin.Double? = null

)

