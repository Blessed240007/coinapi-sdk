--  On Chain Dapps _ REST API
--   This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
--
--  The version of the OpenAPI document: v1
--  Contact: support@coinapi.io
--
--  NOTE: This package is auto generated by OpenAPI-Generator 6.6.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

with Swagger.Streams;
with Ada.Containers.Vectors;
package .Models is
   pragma Style_Checks ("-mr");



   type UNISWAPV3ETHEREUMWithdrawDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Hash : Swagger.Nullable_UString;
       Nonce : Swagger.Nullable_UString;
       Log_Index : Swagger.Nullable_Integer;
       Gas_Limit : Swagger.Nullable_UString;
       Gas_Used : Swagger.Nullable_UString;
       Gas_Price : Swagger.Nullable_UString;
       Protocol : Swagger.Nullable_UString;
       Account : Swagger.Nullable_UString;
       Position : Swagger.Nullable_UString;
       Tick_Lower : Swagger.Nullable_UString;
       Tick_Upper : Swagger.Nullable_UString;
       Pool : Swagger.Nullable_UString;
       Timestamp : Swagger.Nullable_UString;
       Liquidity : Swagger.Nullable_UString;
       Input_Tokens : Swagger.UString_Vectors.Vector;
       Input_Token_Amounts : Swagger.UString_Vectors.Vector;
       Reserve_Amounts : Swagger.UString_Vectors.Vector;
       Amount_Usd : Swagger.Nullable_UString;
     end record;

   package UNISWAPV3ETHEREUMWithdrawDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV3ETHEREUMWithdrawDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMWithdrawDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMWithdrawDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMWithdrawDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMWithdrawDTO_Type_Vectors.Vector);




   type UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Day : Swagger.Nullable_Integer;
       Protocol : Swagger.Nullable_UString;
       Daily_Active_Users : Swagger.Nullable_Integer;
       Cumulative_Unique_Users : Swagger.Nullable_Integer;
       Daily_Transaction_Count : Swagger.Nullable_Integer;
       Total_Pool_Count : Swagger.Nullable_Integer;
       Daily_Deposit_Count : Swagger.Nullable_Integer;
       Daily_Withdraw_Count : Swagger.Nullable_Integer;
       Daily_Swap_Count : Swagger.Nullable_Integer;
       Timestamp : Swagger.Nullable_UString;
     end record;

   package UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO_Type_Vectors.Vector);




   type UNISWAPV3ETHEREUMTokenWhiteListDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Whitelist_Pools : Swagger.UString_Vectors.Vector;
     end record;

   package UNISWAPV3ETHEREUMTokenWhiteListDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV3ETHEREUMTokenWhiteListDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMTokenWhiteListDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMTokenWhiteListDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMTokenWhiteListDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMTokenWhiteListDTO_Type_Vectors.Vector);




   type UNISWAPV3ETHEREUMTickHourlySnapshotDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Hour_Id : Swagger.Nullable_Integer;
       Tick : Swagger.Nullable_UString;
       Pool : Swagger.Nullable_UString;
       Liquidity_Gross : Swagger.Nullable_UString;
       Liquidity_Gross_Usd : Swagger.Nullable_UString;
       Liquidity_Net : Swagger.Nullable_UString;
       Liquidity_Net_Usd : Swagger.Nullable_UString;
       Timestamp : Swagger.Nullable_UString;
     end record;

   package UNISWAPV3ETHEREUMTickHourlySnapshotDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV3ETHEREUMTickHourlySnapshotDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMTickHourlySnapshotDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMTickHourlySnapshotDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMTickHourlySnapshotDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMTickHourlySnapshotDTO_Type_Vectors.Vector);




   type UNISWAPV3ETHEREUMTickDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Index : Swagger.Nullable_UString;
       Pool : Swagger.Nullable_UString;
       Created_Timestamp : Swagger.Nullable_UString;
       Created_Block_Number : Swagger.Nullable_UString;
       Prices : Swagger.UString_Vectors.Vector;
       Liquidity_Gross : Swagger.Nullable_UString;
       Liquidity_Gross_Usd : Swagger.Nullable_UString;
       Liquidity_Net : Swagger.Nullable_UString;
       Liquidity_Net_Usd : Swagger.Nullable_UString;
       Last_Snapshot_Day_Id : Swagger.Nullable_Integer;
       Last_Snapshot_Hour_Id : Swagger.Nullable_Integer;
       Last_Update_Timestamp : Swagger.Nullable_UString;
       Last_Update_Block_Number : Swagger.Nullable_UString;
     end record;

   package UNISWAPV3ETHEREUMTickDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV3ETHEREUMTickDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMTickDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMTickDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMTickDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMTickDTO_Type_Vectors.Vector);




   type UNISWAPV3ETHEREUMRewardTokenDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Token : Swagger.Nullable_UString;
     end record;

   package UNISWAPV3ETHEREUMRewardTokenDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV3ETHEREUMRewardTokenDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMRewardTokenDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMRewardTokenDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMRewardTokenDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMRewardTokenDTO_Type_Vectors.Vector);




   type UNISWAPV3ETHEREUMPositionDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Account : Swagger.Nullable_UString;
       Pool : Swagger.Nullable_UString;
       Hash_Opened : Swagger.Nullable_UString;
       Hash_Closed : Swagger.Nullable_UString;
       Block_Number_Opened : Swagger.Nullable_UString;
       Timestamp_Opened : Swagger.Nullable_UString;
       Block_Number_Closed : Swagger.Nullable_UString;
       Timestamp_Closed : Swagger.Nullable_UString;
       Tick_Lower : Swagger.Nullable_UString;
       Tick_Upper : Swagger.Nullable_UString;
       Liquidity_Token : Swagger.Nullable_UString;
       Liquidity_Token_Type : Swagger.Nullable_UString;
       Liquidity : Swagger.Nullable_UString;
       Liquidity_Usd : Swagger.Nullable_UString;
       Cumulative_Deposit_Token_Amounts : Swagger.UString_Vectors.Vector;
       Cumulative_Deposit_Usd : Swagger.Nullable_UString;
       Cumulative_Withdraw_Token_Amounts : Swagger.UString_Vectors.Vector;
       Cumulative_Withdraw_Usd : Swagger.Nullable_UString;
       Cumulative_Reward_Usd : Swagger.UString_Vectors.Vector;
       Deposit_Count : Swagger.Nullable_Integer;
       Withdraw_Count : Swagger.Nullable_Integer;
     end record;

   package UNISWAPV3ETHEREUMPositionDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV3ETHEREUMPositionDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMPositionDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMPositionDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMPositionDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMPositionDTO_Type_Vectors.Vector);




   type UNISWAPV3ETHEREUMLiquidityPoolFeeDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Block_Range : Swagger.Nullable_UString;
       Id : Swagger.Nullable_UString;
       Fee_Percentage : Swagger.Nullable_UString;
     end record;

   package UNISWAPV3ETHEREUMLiquidityPoolFeeDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV3ETHEREUMLiquidityPoolFeeDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMLiquidityPoolFeeDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMLiquidityPoolFeeDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMLiquidityPoolFeeDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMLiquidityPoolFeeDTO_Type_Vectors.Vector);




   type UNISWAPV3ETHEREUMLiquidityPoolDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Block_Range : Swagger.Nullable_UString;
       Id : Swagger.Nullable_UString;
       Protocol : Swagger.Nullable_UString;
       Name : Swagger.Nullable_UString;
       Symbol : Swagger.Nullable_UString;
       Liquidity_Token : Swagger.Nullable_UString;
       Input_Tokens : Swagger.UString_Vectors.Vector;
       Reward_Tokens : Swagger.UString_Vectors.Vector;
       Fees : Swagger.UString_Vectors.Vector;
       Is_Single_Sided : Swagger.Nullable_Boolean;
       Created_Timestamp : Swagger.Nullable_UString;
       Created_Block_Number : Swagger.Nullable_UString;
       Tick : Swagger.Nullable_UString;
       Total_Value_Locked_Usd : Swagger.Nullable_UString;
       Total_Liquidity : Swagger.Nullable_UString;
       Total_Liquidity_Usd : Swagger.Nullable_UString;
       Active_Liquidity : Swagger.Nullable_UString;
       Active_Liquidity_Usd : Swagger.Nullable_UString;
       Uncollected_Protocol_Side_Token_Amounts : Swagger.UString_Vectors.Vector;
       Uncollected_Protocol_Side_Values_Usd : Swagger.UString_Vectors.Vector;
       Uncollected_Supply_Side_Token_Amounts : Swagger.UString_Vectors.Vector;
       Uncollected_Supply_Side_Values_Usd : Swagger.UString_Vectors.Vector;
       Cumulative_Supply_Side_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Protocol_Side_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Total_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Volume_By_Token_Amount : Swagger.UString_Vectors.Vector;
       Cumulative_Volume_By_Token_Usd : Swagger.UString_Vectors.Vector;
       Cumulative_Volume_Usd : Swagger.Nullable_UString;
       Input_Token_Balances : Swagger.UString_Vectors.Vector;
       Input_Token_Balances_Usd : Swagger.UString_Vectors.Vector;
       Input_Token_Weights : Swagger.UString_Vectors.Vector;
       Staked_Output_Token_Amount : Swagger.Nullable_UString;
       Reward_Token_Emissions_Amount : Swagger.UString_Vectors.Vector;
       Reward_Token_Emissions_Usd : Swagger.UString_Vectors.Vector;
       Cumulative_Deposit_Count : Swagger.Nullable_Integer;
       Cumulative_Withdraw_Count : Swagger.Nullable_Integer;
       Cumulative_Swap_Count : Swagger.Nullable_Integer;
       Position_Count : Swagger.Nullable_Integer;
       Open_Position_Count : Swagger.Nullable_Integer;
       Closed_Position_Count : Swagger.Nullable_Integer;
       Last_Snapshot_Day_Id : Swagger.Nullable_Integer;
       Last_Snapshot_Hour_Id : Swagger.Nullable_Integer;
       Last_Update_Timestamp : Swagger.Nullable_UString;
       Last_Update_Block_Number : Swagger.Nullable_UString;
       Evaluated_Ask : double;
     end record;

   package UNISWAPV3ETHEREUMLiquidityPoolDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV3ETHEREUMLiquidityPoolDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMLiquidityPoolDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMLiquidityPoolDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMLiquidityPoolDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMLiquidityPoolDTO_Type_Vectors.Vector);




   type UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Integer;
       Id : Swagger.Nullable_UString;
       Day : Swagger.Nullable_Integer;
       Protocol : Swagger.Nullable_UString;
       Total_Value_Locked_Usd : Swagger.Nullable_UString;
       Total_Liquidity_Usd : Swagger.Nullable_UString;
       Active_Liquidity_Usd : Swagger.Nullable_UString;
       Uncollected_Protocol_Side_Value_Usd : Swagger.Nullable_UString;
       Uncollected_Supply_Side_Value_Usd : Swagger.Nullable_UString;
       Protocol_Controlled_Value_Usd : Swagger.Nullable_UString;
       Daily_Volume_Usd : Swagger.Nullable_UString;
       Cumulative_Volume_Usd : Swagger.Nullable_UString;
       Daily_Supply_Side_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Supply_Side_Revenue_Usd : Swagger.Nullable_UString;
       Daily_Protocol_Side_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Protocol_Side_Revenue_Usd : Swagger.Nullable_UString;
       Daily_Total_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Total_Revenue_Usd : Swagger.Nullable_UString;
       Timestamp : Swagger.Nullable_UString;
     end record;

   package UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO_Type_Vectors.Vector);




   type UNISWAPV3ETHEREUMDepositDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Block_ : Swagger.Nullable_Integer;
       Id : Swagger.Nullable_UString;
       Hash : Swagger.Nullable_UString;
       Nonce : Swagger.Nullable_UString;
       Log_Index : Swagger.Nullable_Integer;
       Gas_Limit : Swagger.Nullable_UString;
       Gas_Used : Swagger.Nullable_UString;
       Gas_Price : Swagger.Nullable_UString;
       Protocol : Swagger.Nullable_UString;
       Account : Swagger.Nullable_UString;
       Position : Swagger.Nullable_UString;
       Pool : Swagger.Nullable_UString;
       Tick_Lower : Swagger.Nullable_UString;
       Tick_Upper : Swagger.Nullable_UString;
       Timestamp : Swagger.Nullable_UString;
       Liquidity : Swagger.Nullable_UString;
       Input_Tokens : Swagger.UString_Vectors.Vector;
       Input_Token_Amounts : Swagger.UString_Vectors.Vector;
       Reserve_Amounts : Swagger.UString_Vectors.Vector;
       Amount_Usd : Swagger.Nullable_UString;
       Block_Range : Swagger.Nullable_UString;
     end record;

   package UNISWAPV3ETHEREUMDepositDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV3ETHEREUMDepositDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMDepositDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMDepositDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMDepositDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMDepositDTO_Type_Vectors.Vector);




   type UNISWAPV3ETHEREUMAccountDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Block_Range : Swagger.Nullable_UString;
       Id : Swagger.Nullable_UString;
       Position_Count : Swagger.Nullable_Integer;
       Open_Position_Count : Swagger.Nullable_Integer;
       Closed_Position_Count : Swagger.Nullable_Integer;
       Deposit_Count : Swagger.Nullable_Integer;
       Withdraw_Count : Swagger.Nullable_Integer;
       Swap_Count : Swagger.Nullable_Integer;
     end record;

   package UNISWAPV3ETHEREUMAccountDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV3ETHEREUMAccountDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMAccountDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMAccountDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMAccountDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMAccountDTO_Type_Vectors.Vector);




   type TransactionsETradeAggressiveSide_Type is
     record
     end record;

   package TransactionsETradeAggressiveSide_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => TransactionsETradeAggressiveSide_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TransactionsETradeAggressiveSide_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TransactionsETradeAggressiveSide_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out TransactionsETradeAggressiveSide_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out TransactionsETradeAggressiveSide_Type_Vectors.Vector);




   type UNISWAPV2ETHEREUMSwapDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Block_ : Swagger.Nullable_Integer;
       Id : Swagger.Nullable_UString;
       Hash : Swagger.Nullable_UString;
       Log_Index : Swagger.Nullable_Integer;
       Protocol : Swagger.Nullable_UString;
       To : Swagger.Nullable_UString;
       From : Swagger.Nullable_UString;
       Timestamp : Swagger.Nullable_UString;
       Token_In : Swagger.Nullable_UString;
       Amount_In : Swagger.Nullable_UString;
       Amount_In_Usd : Swagger.Nullable_UString;
       Token_Out : Swagger.Nullable_UString;
       Amount_Out : Swagger.Nullable_UString;
       Amount_Out_Usd : Swagger.Nullable_UString;
       Reserve_Amounts : Swagger.UString_Vectors.Vector;
       Pool : Swagger.Nullable_UString;
       Block_Range : Swagger.Nullable_UString;
       Pool_Id : Swagger.Nullable_UString;
       Transaction_Id : Swagger.Nullable_UString;
       Evaluated_Price : double;
       Evaluated_Amount : double;
       Evaluated_Aggressor : .Models.TransactionsETradeAggressiveSide_Type;
     end record;

   package UNISWAPV2ETHEREUMSwapDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV2ETHEREUMSwapDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV2ETHEREUMSwapDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV2ETHEREUMSwapDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV2ETHEREUMSwapDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV2ETHEREUMSwapDTO_Type_Vectors.Vector);




   type SUSHISWAPV3ETHEREUMSwapDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Block_ : Swagger.Nullable_Integer;
       Id : Swagger.Nullable_UString;
       Hash : Swagger.Nullable_UString;
       Nonce : Swagger.Nullable_UString;
       Log_Index : Swagger.Nullable_Integer;
       Gas_Limit : Swagger.Nullable_UString;
       Gas_Used : Swagger.Nullable_UString;
       Gas_Price : Swagger.Nullable_UString;
       Protocol : Swagger.Nullable_UString;
       Account : Swagger.Nullable_UString;
       Pool : Swagger.Nullable_UString;
       Timestamp : Swagger.Nullable_UString;
       Tick : Swagger.Nullable_UString;
       Token_In : Swagger.Nullable_UString;
       Amount_In : Swagger.Nullable_UString;
       Amount_In_Usd : Swagger.Nullable_UString;
       Token_Out : Swagger.Nullable_UString;
       Amount_Out : Swagger.Nullable_UString;
       Amount_Out_Usd : Swagger.Nullable_UString;
       Reserve_Amounts : Swagger.UString_Vectors.Vector;
       Pool_Id : Swagger.Nullable_UString;
       Transaction_Id : Swagger.Nullable_UString;
       Evaluated_Price : double;
       Evaluated_Amount : double;
       Evaluated_Aggressor : .Models.TransactionsETradeAggressiveSide_Type;
     end record;

   package SUSHISWAPV3ETHEREUMSwapDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => SUSHISWAPV3ETHEREUMSwapDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SUSHISWAPV3ETHEREUMSwapDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SUSHISWAPV3ETHEREUMSwapDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out SUSHISWAPV3ETHEREUMSwapDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out SUSHISWAPV3ETHEREUMSwapDTO_Type_Vectors.Vector);




   type PANCAKESWAPV3ETHEREUMSwapDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Block_ : Swagger.Nullable_Integer;
       Id : Swagger.Nullable_UString;
       Hash : Swagger.Nullable_UString;
       Nonce : Swagger.Nullable_UString;
       Log_Index : Swagger.Nullable_Integer;
       Gas_Limit : Swagger.Nullable_UString;
       Gas_Used : Swagger.Nullable_UString;
       Gas_Price : Swagger.Nullable_UString;
       Protocol : Swagger.Nullable_UString;
       Account : Swagger.Nullable_UString;
       Pool : Swagger.Nullable_UString;
       Timestamp : Swagger.Nullable_UString;
       Tick : Swagger.Nullable_UString;
       Token_In : Swagger.Nullable_UString;
       Amount_In : Swagger.Nullable_UString;
       Amount_In_Usd : Swagger.Nullable_UString;
       Token_Out : Swagger.Nullable_UString;
       Amount_Out : Swagger.Nullable_UString;
       Amount_Out_Usd : Swagger.Nullable_UString;
       Reserve_Amounts : Swagger.UString_Vectors.Vector;
       Pool_Id : Swagger.Nullable_UString;
       Transaction_Id : Swagger.Nullable_UString;
       Evaluated_Price : double;
       Evaluated_Amount : double;
       Evaluated_Aggressor : .Models.TransactionsETradeAggressiveSide_Type;
     end record;

   package PANCAKESWAPV3ETHEREUMSwapDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => PANCAKESWAPV3ETHEREUMSwapDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PANCAKESWAPV3ETHEREUMSwapDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PANCAKESWAPV3ETHEREUMSwapDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out PANCAKESWAPV3ETHEREUMSwapDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out PANCAKESWAPV3ETHEREUMSwapDTO_Type_Vectors.Vector);




   type CURVEFINANCEETHEREUMSwapDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_UString;
       Id : Swagger.Nullable_UString;
       Hash : Swagger.Nullable_UString;
       Log_Index : Swagger.Nullable_Integer;
       Protocol : Swagger.Nullable_UString;
       To : Swagger.Nullable_UString;
       From : Swagger.Nullable_UString;
       Timestamp : Swagger.Nullable_UString;
       Token_In : Swagger.Nullable_UString;
       Amount_In : Swagger.Nullable_UString;
       Amount_In_Usd : Swagger.Nullable_UString;
       Token_Out : Swagger.Nullable_UString;
       Amount_Out : Swagger.Nullable_UString;
       Amount_Out_Usd : Swagger.Nullable_UString;
       Pool : Swagger.Nullable_UString;
       Pool_Id : Swagger.Nullable_UString;
       Transaction_Id : Swagger.Nullable_UString;
       Evaluated_Price : double;
       Evaluated_Amount : double;
       Evaluated_Aggressor : .Models.TransactionsETradeAggressiveSide_Type;
     end record;

   package CURVEFINANCEETHEREUMSwapDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => CURVEFINANCEETHEREUMSwapDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CURVEFINANCEETHEREUMSwapDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CURVEFINANCEETHEREUMSwapDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CURVEFINANCEETHEREUMSwapDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CURVEFINANCEETHEREUMSwapDTO_Type_Vectors.Vector);




   type UNISWAPV3ETHEREUMSwapDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Block_ : Swagger.Nullable_Integer;
       Id : Swagger.Nullable_UString;
       Hash : Swagger.Nullable_UString;
       Nonce : Swagger.Nullable_UString;
       Log_Index : Swagger.Nullable_Integer;
       Gas_Limit : Swagger.Nullable_UString;
       Gas_Used : Swagger.Nullable_UString;
       Gas_Price : Swagger.Nullable_UString;
       Protocol : Swagger.Nullable_UString;
       Account : Swagger.Nullable_UString;
       Pool : Swagger.Nullable_UString;
       Timestamp : Swagger.Nullable_UString;
       Tick : Swagger.Nullable_UString;
       Token_In : Swagger.Nullable_UString;
       Amount_In : Swagger.Nullable_UString;
       Amount_In_Usd : Swagger.Nullable_UString;
       Token_Out : Swagger.Nullable_UString;
       Amount_Out : Swagger.Nullable_UString;
       Amount_Out_Usd : Swagger.Nullable_UString;
       Reserve_Amounts : Swagger.UString_Vectors.Vector;
       Pool_Id : Swagger.Nullable_UString;
       Transaction_Id : Swagger.Nullable_UString;
       Evaluated_Price : double;
       Evaluated_Amount : double;
       Evaluated_Aggressor : .Models.TransactionsETradeAggressiveSide_Type;
     end record;

   package UNISWAPV3ETHEREUMSwapDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV3ETHEREUMSwapDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMSwapDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMSwapDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMSwapDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMSwapDTO_Type_Vectors.Vector);




   type PANCAKESWAPV3ETHEREUMTokenDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Block_Range : Swagger.Nullable_UString;
       Id : Swagger.Nullable_UString;
       Name : Swagger.Nullable_UString;
       Symbol : Swagger.Nullable_UString;
       Decimals : Swagger.Nullable_Integer;
       Last_Price_Usd : Swagger.Nullable_UString;
       Last_Price_Block_Number : Swagger.Nullable_UString;
       Last_Price_Pool : Swagger.Nullable_UString;
       Total_Supply : Swagger.Nullable_UString;
       Total_Value_Locked_Usd : Swagger.Nullable_UString;
       Large_Price_Change_Buffer : Swagger.Nullable_Integer;
       Large_Tvl_Impact_Buffer : Swagger.Nullable_Integer;
       Token_Symbol : Swagger.Nullable_UString;
     end record;

   package PANCAKESWAPV3ETHEREUMTokenDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => PANCAKESWAPV3ETHEREUMTokenDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PANCAKESWAPV3ETHEREUMTokenDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PANCAKESWAPV3ETHEREUMTokenDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out PANCAKESWAPV3ETHEREUMTokenDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out PANCAKESWAPV3ETHEREUMTokenDTO_Type_Vectors.Vector);




   type PANCAKESWAPV3ETHEREUMLiquidityPoolDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Block_Range : Swagger.Nullable_UString;
       Id : Swagger.Nullable_UString;
       Protocol : Swagger.Nullable_UString;
       Name : Swagger.Nullable_UString;
       Symbol : Swagger.Nullable_UString;
       Liquidity_Token : Swagger.Nullable_UString;
       Input_Tokens : Swagger.UString_Vectors.Vector;
       Reward_Tokens : Swagger.UString_Vectors.Vector;
       Fees : Swagger.UString_Vectors.Vector;
       Is_Single_Sided : Swagger.Nullable_Boolean;
       Created_Timestamp : Swagger.Nullable_UString;
       Created_Block_Number : Swagger.Nullable_UString;
       Tick : Swagger.Nullable_UString;
       Total_Value_Locked_Usd : Swagger.Nullable_UString;
       Total_Liquidity : Swagger.Nullable_UString;
       Total_Liquidity_Usd : Swagger.Nullable_UString;
       Active_Liquidity : Swagger.Nullable_UString;
       Active_Liquidity_Usd : Swagger.Nullable_UString;
       Uncollected_Protocol_Side_Token_Amounts : Swagger.UString_Vectors.Vector;
       Uncollected_Protocol_Side_Values_Usd : Swagger.UString_Vectors.Vector;
       Uncollected_Supply_Side_Token_Amounts : Swagger.UString_Vectors.Vector;
       Uncollected_Supply_Side_Values_Usd : Swagger.UString_Vectors.Vector;
       Cumulative_Supply_Side_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Protocol_Side_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Total_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Volume_By_Token_Amount : Swagger.UString_Vectors.Vector;
       Cumulative_Volume_By_Token_Usd : Swagger.UString_Vectors.Vector;
       Cumulative_Volume_Usd : Swagger.Nullable_UString;
       Input_Token_Balances : Swagger.UString_Vectors.Vector;
       Input_Token_Balances_Usd : Swagger.UString_Vectors.Vector;
       Input_Token_Weights : Swagger.UString_Vectors.Vector;
       Staked_Output_Token_Amount : Swagger.Nullable_UString;
       Reward_Token_Emissions_Amount : Swagger.UString_Vectors.Vector;
       Reward_Token_Emissions_Usd : Swagger.UString_Vectors.Vector;
       Cumulative_Deposit_Count : Swagger.Nullable_Integer;
       Cumulative_Withdraw_Count : Swagger.Nullable_Integer;
       Cumulative_Swap_Count : Swagger.Nullable_Integer;
       Position_Count : Swagger.Nullable_Integer;
       Open_Position_Count : Swagger.Nullable_Integer;
       Closed_Position_Count : Swagger.Nullable_Integer;
       Last_Snapshot_Day_Id : Swagger.Nullable_Integer;
       Last_Snapshot_Hour_Id : Swagger.Nullable_Integer;
       Last_Update_Timestamp : Swagger.Nullable_UString;
       Last_Update_Block_Number : Swagger.Nullable_UString;
       Evaluated_Ask : double;
     end record;

   package PANCAKESWAPV3ETHEREUMLiquidityPoolDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => PANCAKESWAPV3ETHEREUMLiquidityPoolDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PANCAKESWAPV3ETHEREUMLiquidityPoolDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PANCAKESWAPV3ETHEREUMLiquidityPoolDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out PANCAKESWAPV3ETHEREUMLiquidityPoolDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out PANCAKESWAPV3ETHEREUMLiquidityPoolDTO_Type_Vectors.Vector);




   type CRYPTOPUNKSUserDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Block_Range : Swagger.Nullable_UString;
       Id : Swagger.Nullable_UString;
     end record;

   package CRYPTOPUNKSUserDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => CRYPTOPUNKSUserDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CRYPTOPUNKSUserDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CRYPTOPUNKSUserDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CRYPTOPUNKSUserDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CRYPTOPUNKSUserDTO_Type_Vectors.Vector);




   type CRYPTOPUNKSMarketplaceDailySnapshotDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Block_Range : Swagger.Nullable_UString;
       Id : Swagger.Nullable_UString;
       Marketplace : Swagger.Nullable_UString;
       Timestamp : Swagger.Nullable_UString;
       Collection_Count : Swagger.Nullable_Integer;
       Cumulative_Trade_Volume_Eth : Swagger.Nullable_UString;
       Marketplace_Revenue_Eth : Swagger.Nullable_UString;
       Creator_Revenue_Eth : Swagger.Nullable_UString;
       Total_Revenue_Eth : Swagger.Nullable_UString;
       Trade_Count : Swagger.Nullable_Integer;
       Cumulative_Unique_Traders : Swagger.Nullable_Integer;
       Daily_Active_Traders : Swagger.Nullable_Integer;
       Daily_Traded_Collection_Count : Swagger.Nullable_Integer;
       Daily_Traded_Item_Count : Swagger.Nullable_Integer;
     end record;

   package CRYPTOPUNKSMarketplaceDailySnapshotDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => CRYPTOPUNKSMarketplaceDailySnapshotDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CRYPTOPUNKSMarketplaceDailySnapshotDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CRYPTOPUNKSMarketplaceDailySnapshotDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CRYPTOPUNKSMarketplaceDailySnapshotDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CRYPTOPUNKSMarketplaceDailySnapshotDTO_Type_Vectors.Vector);




   type CRYPTOPUNKSItemDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Block_Range : Swagger.Nullable_UString;
       Id : Swagger.Nullable_UString;
     end record;

   package CRYPTOPUNKSItemDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => CRYPTOPUNKSItemDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CRYPTOPUNKSItemDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CRYPTOPUNKSItemDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CRYPTOPUNKSItemDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CRYPTOPUNKSItemDTO_Type_Vectors.Vector);




   type CRYPTOPUNKSCollectionDailySnapshotDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_UString;
       Vid : Swagger.Nullable_Long;
       Block_Range : Swagger.Nullable_UString;
       Id : Swagger.Nullable_UString;
       Collection : Swagger.Nullable_UString;
       Timestamp : Swagger.Nullable_UString;
       Royalty_Fee : Swagger.Nullable_UString;
       Daily_Min_Sale_Price : Swagger.Nullable_UString;
       Daily_Max_Sale_Price : Swagger.Nullable_UString;
       Cumulative_Trade_Volume_Eth : Swagger.Nullable_UString;
       Daily_Trade_Volume_Eth : Swagger.Nullable_UString;
       Marketplace_Revenue_Eth : Swagger.Nullable_UString;
       Creator_Revenue_Eth : Swagger.Nullable_UString;
       Total_Revenue_Eth : Swagger.Nullable_UString;
       Trade_Count : Swagger.Nullable_Integer;
       Daily_Traded_Item_Count : Swagger.Nullable_Integer;
     end record;

   package CRYPTOPUNKSCollectionDailySnapshotDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => CRYPTOPUNKSCollectionDailySnapshotDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CRYPTOPUNKSCollectionDailySnapshotDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CRYPTOPUNKSCollectionDailySnapshotDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CRYPTOPUNKSCollectionDailySnapshotDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CRYPTOPUNKSCollectionDailySnapshotDTO_Type_Vectors.Vector);




   type CRYPTOPUNKSBidDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_UString;
       Vid : Swagger.Nullable_Long;
       Block_Range : Swagger.Nullable_UString;
       Id : Swagger.Nullable_UString;
       Tokens_Bid : Swagger.Nullable_UString;
       Token_Id : Swagger.Nullable_UString;
       Timestamp : Swagger.Nullable_UString;
       Bidder : Swagger.Nullable_UString;
     end record;

   package CRYPTOPUNKSBidDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => CRYPTOPUNKSBidDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CRYPTOPUNKSBidDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CRYPTOPUNKSBidDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CRYPTOPUNKSBidDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CRYPTOPUNKSBidDTO_Type_Vectors.Vector);




   type CRYPTOPUNKSCollectionDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Block_Range : Swagger.Nullable_UString;
       Id : Swagger.Nullable_UString;
       Name : Swagger.Nullable_UString;
       Symbol : Swagger.Nullable_UString;
       Total_Supply : Swagger.Nullable_UString;
       Royalty_Fee : Swagger.Nullable_UString;
       Cumulative_Trade_Volume_Eth : Swagger.Nullable_UString;
       Marketplace_Revenue_Eth : Swagger.Nullable_UString;
       Creator_Revenue_Eth : Swagger.Nullable_UString;
       Total_Revenue_Eth : Swagger.Nullable_UString;
       Trade_Count : Swagger.Nullable_Integer;
       Buyer_Count : Swagger.Nullable_Integer;
       Seller_Count : Swagger.Nullable_Integer;
     end record;

   package CRYPTOPUNKSCollectionDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => CRYPTOPUNKSCollectionDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CRYPTOPUNKSCollectionDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CRYPTOPUNKSCollectionDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CRYPTOPUNKSCollectionDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CRYPTOPUNKSCollectionDTO_Type_Vectors.Vector);




   type CRYPTOPUNKSDataSourcesDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Integer;
       Block_Range : Swagger.Nullable_UString;
       Causality_Region : Swagger.Nullable_Integer;
       Manifest_Idx : Swagger.Nullable_Integer;
       Parent : Swagger.Nullable_Integer;
       Id : Swagger.Nullable_UString;
       Param : Swagger.Nullable_UString;
       Context : Swagger.Nullable_UString;
       Done_At : Swagger.Nullable_Integer;
     end record;

   package CRYPTOPUNKSDataSourcesDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => CRYPTOPUNKSDataSourcesDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CRYPTOPUNKSDataSourcesDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CRYPTOPUNKSDataSourcesDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CRYPTOPUNKSDataSourcesDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CRYPTOPUNKSDataSourcesDTO_Type_Vectors.Vector);




   type CRYPTOPUNKSMarketPlaceDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Block_Range : Swagger.Nullable_UString;
       Id : Swagger.Nullable_UString;
       Name : Swagger.Nullable_UString;
       Slug : Swagger.Nullable_UString;
       Schema_Version : Swagger.Nullable_UString;
       Subgraph_Version : Swagger.Nullable_UString;
       Methodology_Version : Swagger.Nullable_UString;
       Collection_Count : Swagger.Nullable_Integer;
       Trade_Count : Swagger.Nullable_Integer;
       Cumulative_Trade_Volume_Eth : Swagger.Nullable_UString;
       Marketplace_Revenue_Eth : Swagger.Nullable_UString;
       Creator_Revenue_Eth : Swagger.Nullable_UString;
       Total_Revenue_Eth : Swagger.Nullable_UString;
       Cumulative_Unique_Traders : Swagger.Nullable_Integer;
     end record;

   package CRYPTOPUNKSMarketPlaceDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => CRYPTOPUNKSMarketPlaceDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CRYPTOPUNKSMarketPlaceDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CRYPTOPUNKSMarketPlaceDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CRYPTOPUNKSMarketPlaceDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CRYPTOPUNKSMarketPlaceDTO_Type_Vectors.Vector);




   type CRYPTOPUNKSTradeDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_UString;
       Vid : Swagger.Nullable_Long;
       Block_Range : Swagger.Nullable_UString;
       Id : Swagger.Nullable_UString;
       Transaction_Hash : Swagger.Nullable_UString;
       Log_Index : Swagger.Nullable_Integer;
       Timestamp : Swagger.Nullable_UString;
       Is_Bundle : Swagger.Nullable_Boolean;
       Collection : Swagger.Nullable_UString;
       Token_Id : Swagger.Nullable_UString;
       Amount : Swagger.Nullable_UString;
       Price_Eth : Swagger.Nullable_UString;
       Buyer : Swagger.Nullable_UString;
       Seller : Swagger.Nullable_UString;
     end record;

   package CRYPTOPUNKSTradeDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => CRYPTOPUNKSTradeDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CRYPTOPUNKSTradeDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CRYPTOPUNKSTradeDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CRYPTOPUNKSTradeDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CRYPTOPUNKSTradeDTO_Type_Vectors.Vector);




   type CURVEFINANCEETHEREUMLiquidityPoolDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Protocol : Swagger.Nullable_UString;
       Name : Swagger.Nullable_UString;
       Symbol : Swagger.Nullable_UString;
       Input_Tokens : Swagger.UString_Vectors.Vector;
       Input_Tokens_Ordered : Swagger.UString_Vectors.Vector;
       Output_Token : Swagger.Nullable_UString;
       Reward_Tokens : Swagger.UString_Vectors.Vector;
       Fees : Swagger.UString_Vectors.Vector;
       Is_Single_Sided : Swagger.Nullable_Boolean;
       Created_Timestamp : Swagger.Nullable_UString;
       Created_Block_Number : Swagger.Nullable_UString;
       Total_Value_Locked_Usd : Swagger.Nullable_UString;
       Cumulative_Supply_Side_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Protocol_Side_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Total_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Volume_Usd : Swagger.Nullable_UString;
       Input_Token_Balances : Swagger.UString_Vectors.Vector;
       Input_Token_Weights : Swagger.UString_Vectors.Vector;
       Output_Token_Supply : Swagger.Nullable_UString;
       Output_Token_Price_Usd : Swagger.Nullable_UString;
       Staked_Output_Token_Amount : Swagger.Nullable_UString;
       Reward_Token_Emissions_Amount : Swagger.UString_Vectors.Vector;
       Reward_Token_Emissions_Usd : Swagger.UString_Vectors.Vector;
       Registry_Address : Swagger.Nullable_UString;
       Gauge_Address : Swagger.Nullable_UString;
       Evaluated_Ask : double;
     end record;

   package CURVEFINANCEETHEREUMLiquidityPoolDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => CURVEFINANCEETHEREUMLiquidityPoolDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CURVEFINANCEETHEREUMLiquidityPoolDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CURVEFINANCEETHEREUMLiquidityPoolDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CURVEFINANCEETHEREUMLiquidityPoolDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CURVEFINANCEETHEREUMLiquidityPoolDTO_Type_Vectors.Vector);




   type CURVEFINANCEETHEREUMTokenDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Name : Swagger.Nullable_UString;
       Symbol : Swagger.Nullable_UString;
       Decimals : Swagger.Nullable_Integer;
       Last_Price_Usd : Swagger.Nullable_UString;
       Last_Price_Block_Number : Swagger.Nullable_UString;
       Token_Symbol : Swagger.Nullable_UString;
     end record;

   package CURVEFINANCEETHEREUMTokenDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => CURVEFINANCEETHEREUMTokenDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CURVEFINANCEETHEREUMTokenDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CURVEFINANCEETHEREUMTokenDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CURVEFINANCEETHEREUMTokenDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out CURVEFINANCEETHEREUMTokenDTO_Type_Vectors.Vector);




   type SUSHISWAPV3ETHEREUMLiquidityPoolDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Block_Range : Swagger.Nullable_UString;
       Id : Swagger.Nullable_UString;
       Protocol : Swagger.Nullable_UString;
       Name : Swagger.Nullable_UString;
       Symbol : Swagger.Nullable_UString;
       Liquidity_Token : Swagger.Nullable_UString;
       Input_Tokens : Swagger.UString_Vectors.Vector;
       Reward_Tokens : Swagger.UString_Vectors.Vector;
       Fees : Swagger.UString_Vectors.Vector;
       Is_Single_Sided : Swagger.Nullable_Boolean;
       Created_Timestamp : Swagger.Nullable_UString;
       Created_Block_Number : Swagger.Nullable_UString;
       Tick : Swagger.Nullable_UString;
       Total_Value_Locked_Usd : Swagger.Nullable_UString;
       Total_Liquidity : Swagger.Nullable_UString;
       Total_Liquidity_Usd : Swagger.Nullable_UString;
       Active_Liquidity : Swagger.Nullable_UString;
       Active_Liquidity_Usd : Swagger.Nullable_UString;
       Uncollected_Protocol_Side_Token_Amounts : Swagger.UString_Vectors.Vector;
       Uncollected_Protocol_Side_Values_Usd : Swagger.UString_Vectors.Vector;
       Uncollected_Supply_Side_Token_Amounts : Swagger.UString_Vectors.Vector;
       Uncollected_Supply_Side_Values_Usd : Swagger.UString_Vectors.Vector;
       Cumulative_Supply_Side_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Protocol_Side_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Total_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Volume_By_Token_Amount : Swagger.UString_Vectors.Vector;
       Cumulative_Volume_By_Token_Usd : Swagger.UString_Vectors.Vector;
       Cumulative_Volume_Usd : Swagger.Nullable_UString;
       Input_Token_Balances : Swagger.UString_Vectors.Vector;
       Input_Token_Balances_Usd : Swagger.UString_Vectors.Vector;
       Input_Token_Weights : Swagger.UString_Vectors.Vector;
       Staked_Output_Token_Amount : Swagger.Nullable_UString;
       Reward_Token_Emissions_Amount : Swagger.UString_Vectors.Vector;
       Reward_Token_Emissions_Usd : Swagger.UString_Vectors.Vector;
       Cumulative_Deposit_Count : Swagger.Nullable_Integer;
       Cumulative_Withdraw_Count : Swagger.Nullable_Integer;
       Cumulative_Swap_Count : Swagger.Nullable_Integer;
       Position_Count : Swagger.Nullable_Integer;
       Open_Position_Count : Swagger.Nullable_Integer;
       Closed_Position_Count : Swagger.Nullable_Integer;
       Last_Snapshot_Day_Id : Swagger.Nullable_Integer;
       Last_Snapshot_Hour_Id : Swagger.Nullable_Integer;
       Last_Update_Timestamp : Swagger.Nullable_UString;
       Last_Update_Block_Number : Swagger.Nullable_UString;
       Evaluated_Ask : double;
     end record;

   package SUSHISWAPV3ETHEREUMLiquidityPoolDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => SUSHISWAPV3ETHEREUMLiquidityPoolDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SUSHISWAPV3ETHEREUMLiquidityPoolDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SUSHISWAPV3ETHEREUMLiquidityPoolDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out SUSHISWAPV3ETHEREUMLiquidityPoolDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out SUSHISWAPV3ETHEREUMLiquidityPoolDTO_Type_Vectors.Vector);




   type SUSHISWAPV3ETHEREUMTokenDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Block_Range : Swagger.Nullable_UString;
       Id : Swagger.Nullable_UString;
       Name : Swagger.Nullable_UString;
       Symbol : Swagger.Nullable_UString;
       Decimals : Swagger.Nullable_Integer;
       Last_Price_Usd : Swagger.Nullable_UString;
       Last_Price_Block_Number : Swagger.Nullable_UString;
       Last_Price_Pool : Swagger.Nullable_UString;
       Total_Supply : Swagger.Nullable_UString;
       Total_Value_Locked_Usd : Swagger.Nullable_UString;
       Large_Price_Change_Buffer : Swagger.Nullable_Integer;
       Large_Tvl_Impact_Buffer : Swagger.Nullable_Integer;
       Token_Symbol : Swagger.Nullable_UString;
     end record;

   package SUSHISWAPV3ETHEREUMTokenDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => SUSHISWAPV3ETHEREUMTokenDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SUSHISWAPV3ETHEREUMTokenDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SUSHISWAPV3ETHEREUMTokenDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out SUSHISWAPV3ETHEREUMTokenDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out SUSHISWAPV3ETHEREUMTokenDTO_Type_Vectors.Vector);




   type UNISWAPV2ETHEREUMLiquidityPoolDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Protocol : Swagger.Nullable_UString;
       Name : Swagger.Nullable_UString;
       Symbol : Swagger.Nullable_UString;
       Input_Tokens : Swagger.UString_Vectors.Vector;
       Output_Token : Swagger.Nullable_UString;
       Reward_Tokens : Swagger.UString_Vectors.Vector;
       Fees : Swagger.UString_Vectors.Vector;
       Is_Single_Sided : Swagger.Nullable_Boolean;
       Created_Timestamp : Swagger.Nullable_UString;
       Created_Block_Number : Swagger.Nullable_UString;
       Total_Value_Locked_Usd : Swagger.Nullable_UString;
       Cumulative_Supply_Side_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Protocol_Side_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Total_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Volume_Usd : Swagger.Nullable_UString;
       Input_Token_Balances : Swagger.UString_Vectors.Vector;
       Input_Token_Weights : Swagger.UString_Vectors.Vector;
       Output_Token_Supply : Swagger.Nullable_UString;
       Output_Token_Price_Usd : Swagger.Nullable_UString;
       Staked_Output_Token_Amount : Swagger.Nullable_UString;
       Reward_Token_Emissions_Amount : Swagger.UString_Vectors.Vector;
       Reward_Token_Emissions_Usd : Swagger.UString_Vectors.Vector;
       Evaluated_Ask : double;
     end record;

   package UNISWAPV2ETHEREUMLiquidityPoolDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV2ETHEREUMLiquidityPoolDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV2ETHEREUMLiquidityPoolDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV2ETHEREUMLiquidityPoolDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV2ETHEREUMLiquidityPoolDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV2ETHEREUMLiquidityPoolDTO_Type_Vectors.Vector);




   type UNISWAPV2ETHEREUMTokenDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Name : Swagger.Nullable_UString;
       Symbol : Swagger.Nullable_UString;
       Decimals : Swagger.Nullable_Integer;
       Last_Price_Usd : Swagger.Nullable_UString;
       Last_Price_Block_Number : Swagger.Nullable_UString;
       Total_Supply : Swagger.Nullable_UString;
       Total_Value_Locked_Usd : Swagger.Nullable_UString;
       Large_Price_Change_Buffer : Swagger.Nullable_Integer;
       Large_Tvl_Impact_Buffer : Swagger.Nullable_Integer;
       Token_Symbol : Swagger.Nullable_UString;
     end record;

   package UNISWAPV2ETHEREUMTokenDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV2ETHEREUMTokenDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV2ETHEREUMTokenDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV2ETHEREUMTokenDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV2ETHEREUMTokenDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV2ETHEREUMTokenDTO_Type_Vectors.Vector);




   type UNISWAPV3ETHEREUMActiveAccountDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Block_Range : Swagger.Nullable_UString;
     end record;

   package UNISWAPV3ETHEREUMActiveAccountDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV3ETHEREUMActiveAccountDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMActiveAccountDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMActiveAccountDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMActiveAccountDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMActiveAccountDTO_Type_Vectors.Vector);




   type UNISWAPV3ETHEREUMDexAmmProtocolDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Block_Range : Swagger.Nullable_UString;
       Id : Swagger.Nullable_UString;
       Name : Swagger.Nullable_UString;
       Slug : Swagger.Nullable_UString;
       Schema_Version : Swagger.Nullable_UString;
       Subgraph_Version : Swagger.Nullable_UString;
       Methodology_Version : Swagger.Nullable_UString;
       Total_Value_Locked_Usd : Swagger.Nullable_UString;
       Total_Liquidity_Usd : Swagger.Nullable_UString;
       Active_Liquidity_Usd : Swagger.Nullable_UString;
       Uncollected_Protocol_Side_Value_Usd : Swagger.Nullable_UString;
       Uncollected_Supply_Side_Value_Usd : Swagger.Nullable_UString;
       Protocol_Controlled_Value_Usd : Swagger.Nullable_UString;
       Cumulative_Volume_Usd : Swagger.Nullable_UString;
       Cumulative_Supply_Side_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Protocol_Side_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Total_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Unique_Users : Swagger.Nullable_Integer;
       Cumulative_Unique_L_Ps : Swagger.Nullable_Integer;
       Cumulative_Unique_Traders : Swagger.Nullable_Integer;
       Total_Pool_Count : Swagger.Nullable_Integer;
       Open_Position_Count : Swagger.Nullable_Integer;
       Cumulative_Position_Count : Swagger.Nullable_Integer;
       Last_Snapshot_Day_Id : Swagger.Nullable_Integer;
       Last_Update_Timestamp : Swagger.Nullable_UString;
       Last_Update_Block_Number : Swagger.Nullable_UString;
       Regenesis : Swagger.Nullable_Boolean;
     end record;

   package UNISWAPV3ETHEREUMDexAmmProtocolDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV3ETHEREUMDexAmmProtocolDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMDexAmmProtocolDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMDexAmmProtocolDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMDexAmmProtocolDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMDexAmmProtocolDTO_Type_Vectors.Vector);




   type UNISWAPV3ETHEREUMLiquidityPoolAmountDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Block_Range : Swagger.Nullable_UString;
       Id : Swagger.Nullable_UString;
       Input_Tokens : Swagger.UString_Vectors.Vector;
       Input_Token_Balances : Swagger.UString_Vectors.Vector;
       Token_Prices : Swagger.UString_Vectors.Vector;
     end record;

   package UNISWAPV3ETHEREUMLiquidityPoolAmountDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV3ETHEREUMLiquidityPoolAmountDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMLiquidityPoolAmountDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMLiquidityPoolAmountDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMLiquidityPoolAmountDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMLiquidityPoolAmountDTO_Type_Vectors.Vector);




   type UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Block_ : Swagger.Nullable_Integer;
       Id : Swagger.Nullable_UString;
       Day : Swagger.Nullable_Integer;
       Protocol : Swagger.Nullable_UString;
       Pool : Swagger.Nullable_UString;
       Tick : Swagger.Nullable_UString;
       Total_Value_Locked_Usd : Swagger.Nullable_UString;
       Total_Liquidity : Swagger.Nullable_UString;
       Total_Liquidity_Usd : Swagger.Nullable_UString;
       Active_Liquidity : Swagger.Nullable_UString;
       Active_Liquidity_Usd : Swagger.Nullable_UString;
       Uncollected_Protocol_Side_Token_Amounts : Swagger.UString_Vectors.Vector;
       Uncollected_Protocol_Side_Values_Usd : Swagger.UString_Vectors.Vector;
       Uncollected_Supply_Side_Token_Amounts : Swagger.UString_Vectors.Vector;
       Uncollected_Supply_Side_Values_Usd : Swagger.UString_Vectors.Vector;
       Cumulative_Supply_Side_Revenue_Usd : Swagger.Nullable_UString;
       Daily_Supply_Side_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Protocol_Side_Revenue_Usd : Swagger.Nullable_UString;
       Daily_Protocol_Side_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Total_Revenue_Usd : Swagger.Nullable_UString;
       Daily_Total_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Volume_Usd : Swagger.Nullable_UString;
       Daily_Volume_Usd : Swagger.Nullable_UString;
       Cumulative_Volume_By_Token_Amount : Swagger.UString_Vectors.Vector;
       Daily_Volume_By_Token_Amount : Swagger.UString_Vectors.Vector;
       Cumulative_Volume_By_Token_Usd : Swagger.UString_Vectors.Vector;
       Daily_Volume_By_Token_Usd : Swagger.UString_Vectors.Vector;
       Input_Token_Balances : Swagger.UString_Vectors.Vector;
       Input_Token_Balances_Usd : Swagger.UString_Vectors.Vector;
       Input_Token_Weights : Swagger.UString_Vectors.Vector;
       Staked_Output_Token_Amount : Swagger.Nullable_UString;
       Reward_Token_Emissions_Amount : Swagger.UString_Vectors.Vector;
       Reward_Token_Emissions_Usd : Swagger.UString_Vectors.Vector;
       Cumulative_Deposit_Count : Swagger.Nullable_Integer;
       Daily_Deposit_Count : Swagger.Nullable_Integer;
       Cumulative_Withdraw_Count : Swagger.Nullable_Integer;
       Daily_Withdraw_Count : Swagger.Nullable_Integer;
       Cumulative_Swap_Count : Swagger.Nullable_Integer;
       Daily_Swap_Count : Swagger.Nullable_Integer;
       Position_Count : Swagger.Nullable_Integer;
       Open_Position_Count : Swagger.Nullable_Integer;
       Closed_Position_Count : Swagger.Nullable_Integer;
       Timestamp : Swagger.Nullable_UString;
     end record;

   package UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO_Type_Vectors.Vector);




   type UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Hour : Swagger.Nullable_Integer;
       Protocol : Swagger.Nullable_UString;
       Pool : Swagger.Nullable_UString;
       Tick : Swagger.Nullable_UString;
       Total_Value_Locked_Usd : Swagger.Nullable_UString;
       Total_Liquidity : Swagger.Nullable_UString;
       Total_Liquidity_Usd : Swagger.Nullable_UString;
       Active_Liquidity : Swagger.Nullable_UString;
       Active_Liquidity_Usd : Swagger.Nullable_UString;
       Uncollected_Protocol_Side_Token_Amounts : Swagger.UString_Vectors.Vector;
       Uncollected_Protocol_Side_Values_Usd : Swagger.UString_Vectors.Vector;
       Uncollected_Supply_Side_Token_Amounts : Swagger.UString_Vectors.Vector;
       Uncollected_Supply_Side_Values_Usd : Swagger.UString_Vectors.Vector;
       Cumulative_Supply_Side_Revenue_Usd : Swagger.Nullable_UString;
       Hourly_Supply_Side_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Protocol_Side_Revenue_Usd : Swagger.Nullable_UString;
       Hourly_Protocol_Side_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Total_Revenue_Usd : Swagger.Nullable_UString;
       Hourly_Total_Revenue_Usd : Swagger.Nullable_UString;
       Cumulative_Volume_Usd : Swagger.Nullable_UString;
       Hourly_Volume_Usd : Swagger.Nullable_UString;
       Cumulative_Volume_By_Token_Amount : Swagger.UString_Vectors.Vector;
       Hourly_Volume_By_Token_Amount : Swagger.UString_Vectors.Vector;
       Cumulative_Volume_By_Token_Usd : Swagger.UString_Vectors.Vector;
       Hourly_Volume_By_Token_Usd : Swagger.UString_Vectors.Vector;
       Input_Token_Balances : Swagger.UString_Vectors.Vector;
       Input_Token_Balances_Usd : Swagger.UString_Vectors.Vector;
       Input_Token_Weights : Swagger.UString_Vectors.Vector;
       Staked_Output_Token_Amount : Swagger.Nullable_UString;
       Reward_Token_Emissions_Amount : Swagger.UString_Vectors.Vector;
       Reward_Token_Emissions_Usd : Swagger.UString_Vectors.Vector;
       Cumulative_Deposit_Count : Swagger.Nullable_Integer;
       Hourly_Deposit_Count : Swagger.Nullable_Integer;
       Cumulative_Withdraw_Count : Swagger.Nullable_Integer;
       Hourly_Withdraw_Count : Swagger.Nullable_Integer;
       Cumulative_Swap_Count : Swagger.Nullable_Integer;
       Hourly_Swap_Count : Swagger.Nullable_Integer;
       Position_Count : Swagger.Nullable_Integer;
       Open_Position_Count : Swagger.Nullable_Integer;
       Closed_Position_Count : Swagger.Nullable_Integer;
       Timestamp : Swagger.Nullable_UString;
     end record;

   package UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO_Type_Vectors.Vector);




   type UNISWAPV3ETHEREUMPositionSnapshotDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Hash : Swagger.Nullable_UString;
       Log_Index : Swagger.Nullable_Integer;
       Nonce : Swagger.Nullable_UString;
       Position : Swagger.Nullable_UString;
       Liquidity_Token_Type : Swagger.Nullable_UString;
       Liquidity : Swagger.Nullable_UString;
       Liquidity_Usd : Swagger.Nullable_UString;
       Cumulative_Deposit_Token_Amounts : Swagger.UString_Vectors.Vector;
       Cumulative_Deposit_Usd : Swagger.Nullable_UString;
       Cumulative_Withdraw_Token_Amounts : Swagger.UString_Vectors.Vector;
       Cumulative_Withdraw_Usd : Swagger.Nullable_UString;
       Cumulative_Reward_Token_Amounts : Swagger.UString_Vectors.Vector;
       Cumulative_Reward_Usd : Swagger.UString_Vectors.Vector;
       Deposit_Count : Swagger.Nullable_Integer;
       Withdraw_Count : Swagger.Nullable_Integer;
       Timestamp : Swagger.Nullable_UString;
     end record;

   package UNISWAPV3ETHEREUMPositionSnapshotDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV3ETHEREUMPositionSnapshotDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMPositionSnapshotDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMPositionSnapshotDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMPositionSnapshotDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMPositionSnapshotDTO_Type_Vectors.Vector);




   type UNISWAPV3ETHEREUMTickDailySnapshotDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Day_Id : Swagger.Nullable_Integer;
       Tick : Swagger.Nullable_UString;
       Pool : Swagger.Nullable_UString;
       Liquidity_Gross : Swagger.Nullable_UString;
       Liquidity_Gross_Usd : Swagger.Nullable_UString;
       Liquidity_Net : Swagger.Nullable_UString;
       Liquidity_Net_Usd : Swagger.Nullable_UString;
       Timestamp : Swagger.Nullable_UString;
     end record;

   package UNISWAPV3ETHEREUMTickDailySnapshotDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV3ETHEREUMTickDailySnapshotDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMTickDailySnapshotDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMTickDailySnapshotDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMTickDailySnapshotDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMTickDailySnapshotDTO_Type_Vectors.Vector);




   type UNISWAPV3ETHEREUMTokenDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Vid : Swagger.Nullable_Long;
       Block_Range : Swagger.Nullable_UString;
       Id : Swagger.Nullable_UString;
       Name : Swagger.Nullable_UString;
       Symbol : Swagger.Nullable_UString;
       Decimals : Swagger.Nullable_Integer;
       Last_Price_Usd : Swagger.Nullable_UString;
       Last_Price_Block_Number : Swagger.Nullable_UString;
       Last_Price_Pool : Swagger.Nullable_UString;
       Total_Supply : Swagger.Nullable_UString;
       Total_Value_Locked_Usd : Swagger.Nullable_UString;
       Large_Price_Change_Buffer : Swagger.Nullable_Integer;
       Large_Tvl_Impact_Buffer : Swagger.Nullable_Integer;
       Token_Symbol : Swagger.Nullable_UString;
     end record;

   package UNISWAPV3ETHEREUMTokenDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV3ETHEREUMTokenDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMTokenDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMTokenDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMTokenDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMTokenDTO_Type_Vectors.Vector);




   type UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Address : Swagger.Nullable_UString;
     end record;

   package UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO_Type_Vectors.Vector);




   type UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO_Type is
     record
       Entry_Time : Swagger.Nullable_Date;
       Recv_Time : Swagger.Nullable_Date;
       Block_Number : Swagger.Nullable_Long;
       Id : Swagger.Nullable_UString;
       Hour : Swagger.Nullable_Integer;
       Protocol : Swagger.Nullable_UString;
       Hourly_Active_Users : Swagger.Nullable_Integer;
       Cumulative_Unique_Users : Swagger.Nullable_Integer;
       Hourly_Transaction_Count : Swagger.Nullable_Integer;
       Hourly_Deposit_Count : Swagger.Nullable_Integer;
       Hourly_Withdraw_Count : Swagger.Nullable_Integer;
       Hourly_Swap_Count : Swagger.Nullable_Integer;
       Timestamp : Swagger.Nullable_UString;
     end record;

   package UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO_Type_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Positive,
                                  Element_Type => UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO_Type);

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO_Type_Vectors.Vector);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO_Type);

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO_Type_Vectors.Vector);



end .Models;
