//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//

// ignore_for_file: unused_element
import 'package:built_collection/built_collection.dart';
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';

part 'uniswapv2_ethereum_liquidity_pool_hourly_snapshot_dto.g.dart';

/// 
///
/// Properties:
/// * [entryTime] 
/// * [recvTime] 
/// * [blockNumber] - Number of block in which entity was recorded.
/// * [blockRange] - 
/// * [id] - (smart contract address of the pool)-(# of hours since Unix epoch time)
/// * [protocol] - The protocol this snapshot belongs to
/// * [pool] - The pool this snapshot belongs to
/// * [timestamp] - Timestamp of this snapshot
/// * [totalValueLockedUsd] - Current TVL (Total Value Locked) of this pool
/// * [cumulativeSupplySideRevenueUsd] - All revenue generated by the liquidity pool, accrued to the supply side.
/// * [hourlySupplySideRevenueUsd] - Hourly revenue generated by the liquidity pool, accrued to the supply side.
/// * [cumulativeProtocolSideRevenueUsd] - All revenue generated by the liquidity pool, accrued to the protocol.
/// * [hourlyProtocolSideRevenueUsd] - Hourly revenue generated by the liquidity pool, accrued to the protocol.
/// * [cumulativeTotalRevenueUsd] - All revenue generated by the liquidity pool.
/// * [hourlyTotalRevenueUsd] - Hourly revenue generated by the liquidity pool.
/// * [hourlyVolumeUsd] - All trade volume occurred in a given hour, in USD
/// * [hourlyVolumeByTokenAmount] - All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool's 'inputTokens' field.
/// * [hourlyVolumeByTokenUsd] - All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool's 'inputTokens' field.
/// * [cumulativeVolumeUsd] - All historical trade volume occurred in this pool, in USD
/// * [inputTokenBalances] - Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field
/// * [inputTokenWeights] - Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool
/// * [outputTokenSupply] - Total supply of output token. Note that certain DEXes don't have an output token (e.g. Bancor)
/// * [outputTokenPriceUsd] - Price per share of output token in USD
/// * [stakedOutputTokenAmount] - Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
/// * [rewardTokenEmissionsAmount] - Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
/// * [rewardTokenEmissionsUsd] - Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
@BuiltValue()
abstract class UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO implements Built<UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO, UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOBuilder> {
  @BuiltValueField(wireName: r'entry_time')
  DateTime? get entryTime;

  @BuiltValueField(wireName: r'recv_time')
  DateTime? get recvTime;

  /// Number of block in which entity was recorded.
  @BuiltValueField(wireName: r'block_number')
  int? get blockNumber;

  /// 
  @BuiltValueField(wireName: r'block_range')
  String? get blockRange;

  /// (smart contract address of the pool)-(# of hours since Unix epoch time)
  @BuiltValueField(wireName: r'id')
  String? get id;

  /// The protocol this snapshot belongs to
  @BuiltValueField(wireName: r'protocol')
  String? get protocol;

  /// The pool this snapshot belongs to
  @BuiltValueField(wireName: r'pool')
  String? get pool;

  /// Timestamp of this snapshot
  @BuiltValueField(wireName: r'timestamp')
  String? get timestamp;

  /// Current TVL (Total Value Locked) of this pool
  @BuiltValueField(wireName: r'total_value_locked_usd')
  String? get totalValueLockedUsd;

  /// All revenue generated by the liquidity pool, accrued to the supply side.
  @BuiltValueField(wireName: r'cumulative_supply_side_revenue_usd')
  String? get cumulativeSupplySideRevenueUsd;

  /// Hourly revenue generated by the liquidity pool, accrued to the supply side.
  @BuiltValueField(wireName: r'hourly_supply_side_revenue_usd')
  String? get hourlySupplySideRevenueUsd;

  /// All revenue generated by the liquidity pool, accrued to the protocol.
  @BuiltValueField(wireName: r'cumulative_protocol_side_revenue_usd')
  String? get cumulativeProtocolSideRevenueUsd;

  /// Hourly revenue generated by the liquidity pool, accrued to the protocol.
  @BuiltValueField(wireName: r'hourly_protocol_side_revenue_usd')
  String? get hourlyProtocolSideRevenueUsd;

  /// All revenue generated by the liquidity pool.
  @BuiltValueField(wireName: r'cumulative_total_revenue_usd')
  String? get cumulativeTotalRevenueUsd;

  /// Hourly revenue generated by the liquidity pool.
  @BuiltValueField(wireName: r'hourly_total_revenue_usd')
  String? get hourlyTotalRevenueUsd;

  /// All trade volume occurred in a given hour, in USD
  @BuiltValueField(wireName: r'hourly_volume_usd')
  String? get hourlyVolumeUsd;

  /// All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool's 'inputTokens' field.
  @BuiltValueField(wireName: r'hourly_volume_by_token_amount')
  BuiltList<String>? get hourlyVolumeByTokenAmount;

  /// All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool's 'inputTokens' field.
  @BuiltValueField(wireName: r'hourly_volume_by_token_usd')
  BuiltList<String>? get hourlyVolumeByTokenUsd;

  /// All historical trade volume occurred in this pool, in USD
  @BuiltValueField(wireName: r'cumulative_volume_usd')
  String? get cumulativeVolumeUsd;

  /// Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field
  @BuiltValueField(wireName: r'input_token_balances')
  BuiltList<String>? get inputTokenBalances;

  /// Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool
  @BuiltValueField(wireName: r'input_token_weights')
  BuiltList<String>? get inputTokenWeights;

  /// Total supply of output token. Note that certain DEXes don't have an output token (e.g. Bancor)
  @BuiltValueField(wireName: r'output_token_supply')
  String? get outputTokenSupply;

  /// Price per share of output token in USD
  @BuiltValueField(wireName: r'output_token_price_usd')
  String? get outputTokenPriceUsd;

  /// Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
  @BuiltValueField(wireName: r'staked_output_token_amount')
  String? get stakedOutputTokenAmount;

  /// Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
  @BuiltValueField(wireName: r'reward_token_emissions_amount')
  BuiltList<String>? get rewardTokenEmissionsAmount;

  /// Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
  @BuiltValueField(wireName: r'reward_token_emissions_usd')
  BuiltList<String>? get rewardTokenEmissionsUsd;

  UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO._();

  factory UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO([void updates(UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOBuilder b)]) = _$UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO;

  @BuiltValueHook(initializeBuilder: true)
  static void _defaults(UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOBuilder b) => b;

  @BuiltValueSerializer(custom: true)
  static Serializer<UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO> get serializer => _$UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOSerializer();
}

class _$UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOSerializer implements PrimitiveSerializer<UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO> {
  @override
  final Iterable<Type> types = const [UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO, _$UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO];

  @override
  final String wireName = r'UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO';

  Iterable<Object?> _serializeProperties(
    Serializers serializers,
    UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO object, {
    FullType specifiedType = FullType.unspecified,
  }) sync* {
    if (object.entryTime != null) {
      yield r'entry_time';
      yield serializers.serialize(
        object.entryTime,
        specifiedType: const FullType(DateTime),
      );
    }
    if (object.recvTime != null) {
      yield r'recv_time';
      yield serializers.serialize(
        object.recvTime,
        specifiedType: const FullType(DateTime),
      );
    }
    if (object.blockNumber != null) {
      yield r'block_number';
      yield serializers.serialize(
        object.blockNumber,
        specifiedType: const FullType(int),
      );
    }
    if (object.blockRange != null) {
      yield r'block_range';
      yield serializers.serialize(
        object.blockRange,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.id != null) {
      yield r'id';
      yield serializers.serialize(
        object.id,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.protocol != null) {
      yield r'protocol';
      yield serializers.serialize(
        object.protocol,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.pool != null) {
      yield r'pool';
      yield serializers.serialize(
        object.pool,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.timestamp != null) {
      yield r'timestamp';
      yield serializers.serialize(
        object.timestamp,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.totalValueLockedUsd != null) {
      yield r'total_value_locked_usd';
      yield serializers.serialize(
        object.totalValueLockedUsd,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.cumulativeSupplySideRevenueUsd != null) {
      yield r'cumulative_supply_side_revenue_usd';
      yield serializers.serialize(
        object.cumulativeSupplySideRevenueUsd,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.hourlySupplySideRevenueUsd != null) {
      yield r'hourly_supply_side_revenue_usd';
      yield serializers.serialize(
        object.hourlySupplySideRevenueUsd,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.cumulativeProtocolSideRevenueUsd != null) {
      yield r'cumulative_protocol_side_revenue_usd';
      yield serializers.serialize(
        object.cumulativeProtocolSideRevenueUsd,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.hourlyProtocolSideRevenueUsd != null) {
      yield r'hourly_protocol_side_revenue_usd';
      yield serializers.serialize(
        object.hourlyProtocolSideRevenueUsd,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.cumulativeTotalRevenueUsd != null) {
      yield r'cumulative_total_revenue_usd';
      yield serializers.serialize(
        object.cumulativeTotalRevenueUsd,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.hourlyTotalRevenueUsd != null) {
      yield r'hourly_total_revenue_usd';
      yield serializers.serialize(
        object.hourlyTotalRevenueUsd,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.hourlyVolumeUsd != null) {
      yield r'hourly_volume_usd';
      yield serializers.serialize(
        object.hourlyVolumeUsd,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.hourlyVolumeByTokenAmount != null) {
      yield r'hourly_volume_by_token_amount';
      yield serializers.serialize(
        object.hourlyVolumeByTokenAmount,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.hourlyVolumeByTokenUsd != null) {
      yield r'hourly_volume_by_token_usd';
      yield serializers.serialize(
        object.hourlyVolumeByTokenUsd,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.cumulativeVolumeUsd != null) {
      yield r'cumulative_volume_usd';
      yield serializers.serialize(
        object.cumulativeVolumeUsd,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.inputTokenBalances != null) {
      yield r'input_token_balances';
      yield serializers.serialize(
        object.inputTokenBalances,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.inputTokenWeights != null) {
      yield r'input_token_weights';
      yield serializers.serialize(
        object.inputTokenWeights,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.outputTokenSupply != null) {
      yield r'output_token_supply';
      yield serializers.serialize(
        object.outputTokenSupply,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.outputTokenPriceUsd != null) {
      yield r'output_token_price_usd';
      yield serializers.serialize(
        object.outputTokenPriceUsd,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.stakedOutputTokenAmount != null) {
      yield r'staked_output_token_amount';
      yield serializers.serialize(
        object.stakedOutputTokenAmount,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.rewardTokenEmissionsAmount != null) {
      yield r'reward_token_emissions_amount';
      yield serializers.serialize(
        object.rewardTokenEmissionsAmount,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.rewardTokenEmissionsUsd != null) {
      yield r'reward_token_emissions_usd';
      yield serializers.serialize(
        object.rewardTokenEmissionsUsd,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
  }

  @override
  Object serialize(
    Serializers serializers,
    UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    return _serializeProperties(serializers, object, specifiedType: specifiedType).toList();
  }

  void _deserializeProperties(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
    required List<Object?> serializedList,
    required UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOBuilder result,
    required List<Object?> unhandled,
  }) {
    for (var i = 0; i < serializedList.length; i += 2) {
      final key = serializedList[i] as String;
      final value = serializedList[i + 1];
      switch (key) {
        case r'entry_time':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(DateTime),
          ) as DateTime;
          result.entryTime = valueDes;
          break;
        case r'recv_time':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(DateTime),
          ) as DateTime;
          result.recvTime = valueDes;
          break;
        case r'block_number':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.blockNumber = valueDes;
          break;
        case r'block_range':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.blockRange = valueDes;
          break;
        case r'id':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.id = valueDes;
          break;
        case r'protocol':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.protocol = valueDes;
          break;
        case r'pool':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.pool = valueDes;
          break;
        case r'timestamp':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.timestamp = valueDes;
          break;
        case r'total_value_locked_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.totalValueLockedUsd = valueDes;
          break;
        case r'cumulative_supply_side_revenue_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.cumulativeSupplySideRevenueUsd = valueDes;
          break;
        case r'hourly_supply_side_revenue_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.hourlySupplySideRevenueUsd = valueDes;
          break;
        case r'cumulative_protocol_side_revenue_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.cumulativeProtocolSideRevenueUsd = valueDes;
          break;
        case r'hourly_protocol_side_revenue_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.hourlyProtocolSideRevenueUsd = valueDes;
          break;
        case r'cumulative_total_revenue_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.cumulativeTotalRevenueUsd = valueDes;
          break;
        case r'hourly_total_revenue_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.hourlyTotalRevenueUsd = valueDes;
          break;
        case r'hourly_volume_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.hourlyVolumeUsd = valueDes;
          break;
        case r'hourly_volume_by_token_amount':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.hourlyVolumeByTokenAmount.replace(valueDes);
          break;
        case r'hourly_volume_by_token_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.hourlyVolumeByTokenUsd.replace(valueDes);
          break;
        case r'cumulative_volume_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.cumulativeVolumeUsd = valueDes;
          break;
        case r'input_token_balances':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.inputTokenBalances.replace(valueDes);
          break;
        case r'input_token_weights':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.inputTokenWeights.replace(valueDes);
          break;
        case r'output_token_supply':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.outputTokenSupply = valueDes;
          break;
        case r'output_token_price_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.outputTokenPriceUsd = valueDes;
          break;
        case r'staked_output_token_amount':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.stakedOutputTokenAmount = valueDes;
          break;
        case r'reward_token_emissions_amount':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.rewardTokenEmissionsAmount.replace(valueDes);
          break;
        case r'reward_token_emissions_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.rewardTokenEmissionsUsd.replace(valueDes);
          break;
        default:
          unhandled.add(key);
          unhandled.add(value);
          break;
      }
    }
  }

  @override
  UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO deserialize(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOBuilder();
    final serializedList = (serialized as Iterable<Object?>).toList();
    final unhandled = <Object?>[];
    _deserializeProperties(
      serializers,
      serialized,
      specifiedType: specifiedType,
      serializedList: serializedList,
      unhandled: unhandled,
      result: result,
    );
    return result.build();
  }
}

