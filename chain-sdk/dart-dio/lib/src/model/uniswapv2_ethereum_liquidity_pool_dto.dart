//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//

// ignore_for_file: unused_element
import 'package:built_collection/built_collection.dart';
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';

part 'uniswapv2_ethereum_liquidity_pool_dto.g.dart';

/// Pool-level metadata.
///
/// Properties:
/// * [entryTime] 
/// * [recvTime] 
/// * [blockNumber] - Number of block in which entity was recorded.
/// * [vid] - .
/// * [id] - Smart contract address of the pool
/// * [protocol] - The protocol this pool belongs to
/// * [name] - Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT)
/// * [symbol] - Symbol of liquidity pool (e.g. 3CRV)
/// * [inputTokens] - Tokens that need to be deposited to take a position in the protocol
/// * [outputToken] - Token that is minted to track ownership of position in protocol
/// * [rewardTokens] - Aditional tokens that are given as reward for position in a protocol
/// * [fees] - Fees per trade incurred to the user
/// * [isSingleSided] - Whether this pool is single-sided
/// * [createdTimestamp] - Creation timestamp
/// * [createdBlockNumber] - Creation block number
/// * [totalValueLockedUsd] - Current TVL (Total Value Locked) of this pool in USD
/// * [cumulativeSupplySideRevenueUsd] - All revenue generated by the liquidity pool, accrued to the supply side
/// * [cumulativeProtocolSideRevenueUsd] - All revenue generated by the liquidity pool, accrued to the protocol
/// * [cumulativeTotalRevenueUsd] - All revenue generated by the liquidity pool
/// * [cumulativeVolumeUsd] - All historical trade volume occurred in this pool, in USD
/// * [inputTokenBalances] - Amount of input tokens in the pool
/// * [inputTokenWeights] - Weights of input tokens in the liquidity pool in percentage values
/// * [outputTokenSupply] - Total supply of output token
/// * [outputTokenPriceUsd] - Price per share of output token in USD
/// * [stakedOutputTokenAmount] - Total supply of output tokens that are staked
/// * [rewardTokenEmissionsAmount] - Per-block reward token emission as of the current block normalized to a day, in token's native amount
/// * [rewardTokenEmissionsUsd] - Per-block reward token emission as of the current block normalized to a day, in USD value
/// * [evaluatedAsk] - Evaluated ask value of the liquidity pool.
@BuiltValue()
abstract class UNISWAPV2ETHEREUMLiquidityPoolDTO implements Built<UNISWAPV2ETHEREUMLiquidityPoolDTO, UNISWAPV2ETHEREUMLiquidityPoolDTOBuilder> {
  @BuiltValueField(wireName: r'entry_time')
  DateTime? get entryTime;

  @BuiltValueField(wireName: r'recv_time')
  DateTime? get recvTime;

  /// Number of block in which entity was recorded.
  @BuiltValueField(wireName: r'block_number')
  int? get blockNumber;

  /// .
  @BuiltValueField(wireName: r'vid')
  int? get vid;

  /// Smart contract address of the pool
  @BuiltValueField(wireName: r'id')
  String? get id;

  /// The protocol this pool belongs to
  @BuiltValueField(wireName: r'protocol')
  String? get protocol;

  /// Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT)
  @BuiltValueField(wireName: r'name')
  String? get name;

  /// Symbol of liquidity pool (e.g. 3CRV)
  @BuiltValueField(wireName: r'symbol')
  String? get symbol;

  /// Tokens that need to be deposited to take a position in the protocol
  @BuiltValueField(wireName: r'input_tokens')
  BuiltList<String>? get inputTokens;

  /// Token that is minted to track ownership of position in protocol
  @BuiltValueField(wireName: r'output_token')
  String? get outputToken;

  /// Aditional tokens that are given as reward for position in a protocol
  @BuiltValueField(wireName: r'reward_tokens')
  BuiltList<String>? get rewardTokens;

  /// Fees per trade incurred to the user
  @BuiltValueField(wireName: r'fees')
  BuiltList<String>? get fees;

  /// Whether this pool is single-sided
  @BuiltValueField(wireName: r'is_single_sided')
  bool? get isSingleSided;

  /// Creation timestamp
  @BuiltValueField(wireName: r'created_timestamp')
  String? get createdTimestamp;

  /// Creation block number
  @BuiltValueField(wireName: r'created_block_number')
  String? get createdBlockNumber;

  /// Current TVL (Total Value Locked) of this pool in USD
  @BuiltValueField(wireName: r'total_value_locked_usd')
  String? get totalValueLockedUsd;

  /// All revenue generated by the liquidity pool, accrued to the supply side
  @BuiltValueField(wireName: r'cumulative_supply_side_revenue_usd')
  String? get cumulativeSupplySideRevenueUsd;

  /// All revenue generated by the liquidity pool, accrued to the protocol
  @BuiltValueField(wireName: r'cumulative_protocol_side_revenue_usd')
  String? get cumulativeProtocolSideRevenueUsd;

  /// All revenue generated by the liquidity pool
  @BuiltValueField(wireName: r'cumulative_total_revenue_usd')
  String? get cumulativeTotalRevenueUsd;

  /// All historical trade volume occurred in this pool, in USD
  @BuiltValueField(wireName: r'cumulative_volume_usd')
  String? get cumulativeVolumeUsd;

  /// Amount of input tokens in the pool
  @BuiltValueField(wireName: r'input_token_balances')
  BuiltList<String>? get inputTokenBalances;

  /// Weights of input tokens in the liquidity pool in percentage values
  @BuiltValueField(wireName: r'input_token_weights')
  BuiltList<String>? get inputTokenWeights;

  /// Total supply of output token
  @BuiltValueField(wireName: r'output_token_supply')
  String? get outputTokenSupply;

  /// Price per share of output token in USD
  @BuiltValueField(wireName: r'output_token_price_usd')
  String? get outputTokenPriceUsd;

  /// Total supply of output tokens that are staked
  @BuiltValueField(wireName: r'staked_output_token_amount')
  String? get stakedOutputTokenAmount;

  /// Per-block reward token emission as of the current block normalized to a day, in token's native amount
  @BuiltValueField(wireName: r'reward_token_emissions_amount')
  BuiltList<String>? get rewardTokenEmissionsAmount;

  /// Per-block reward token emission as of the current block normalized to a day, in USD value
  @BuiltValueField(wireName: r'reward_token_emissions_usd')
  BuiltList<String>? get rewardTokenEmissionsUsd;

  /// Evaluated ask value of the liquidity pool.
  @BuiltValueField(wireName: r'evaluated_ask')
  double? get evaluatedAsk;

  UNISWAPV2ETHEREUMLiquidityPoolDTO._();

  factory UNISWAPV2ETHEREUMLiquidityPoolDTO([void updates(UNISWAPV2ETHEREUMLiquidityPoolDTOBuilder b)]) = _$UNISWAPV2ETHEREUMLiquidityPoolDTO;

  @BuiltValueHook(initializeBuilder: true)
  static void _defaults(UNISWAPV2ETHEREUMLiquidityPoolDTOBuilder b) => b;

  @BuiltValueSerializer(custom: true)
  static Serializer<UNISWAPV2ETHEREUMLiquidityPoolDTO> get serializer => _$UNISWAPV2ETHEREUMLiquidityPoolDTOSerializer();
}

class _$UNISWAPV2ETHEREUMLiquidityPoolDTOSerializer implements PrimitiveSerializer<UNISWAPV2ETHEREUMLiquidityPoolDTO> {
  @override
  final Iterable<Type> types = const [UNISWAPV2ETHEREUMLiquidityPoolDTO, _$UNISWAPV2ETHEREUMLiquidityPoolDTO];

  @override
  final String wireName = r'UNISWAPV2ETHEREUMLiquidityPoolDTO';

  Iterable<Object?> _serializeProperties(
    Serializers serializers,
    UNISWAPV2ETHEREUMLiquidityPoolDTO object, {
    FullType specifiedType = FullType.unspecified,
  }) sync* {
    if (object.entryTime != null) {
      yield r'entry_time';
      yield serializers.serialize(
        object.entryTime,
        specifiedType: const FullType(DateTime),
      );
    }
    if (object.recvTime != null) {
      yield r'recv_time';
      yield serializers.serialize(
        object.recvTime,
        specifiedType: const FullType(DateTime),
      );
    }
    if (object.blockNumber != null) {
      yield r'block_number';
      yield serializers.serialize(
        object.blockNumber,
        specifiedType: const FullType(int),
      );
    }
    if (object.vid != null) {
      yield r'vid';
      yield serializers.serialize(
        object.vid,
        specifiedType: const FullType(int),
      );
    }
    if (object.id != null) {
      yield r'id';
      yield serializers.serialize(
        object.id,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.protocol != null) {
      yield r'protocol';
      yield serializers.serialize(
        object.protocol,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.name != null) {
      yield r'name';
      yield serializers.serialize(
        object.name,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.symbol != null) {
      yield r'symbol';
      yield serializers.serialize(
        object.symbol,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.inputTokens != null) {
      yield r'input_tokens';
      yield serializers.serialize(
        object.inputTokens,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.outputToken != null) {
      yield r'output_token';
      yield serializers.serialize(
        object.outputToken,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.rewardTokens != null) {
      yield r'reward_tokens';
      yield serializers.serialize(
        object.rewardTokens,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.fees != null) {
      yield r'fees';
      yield serializers.serialize(
        object.fees,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.isSingleSided != null) {
      yield r'is_single_sided';
      yield serializers.serialize(
        object.isSingleSided,
        specifiedType: const FullType(bool),
      );
    }
    if (object.createdTimestamp != null) {
      yield r'created_timestamp';
      yield serializers.serialize(
        object.createdTimestamp,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.createdBlockNumber != null) {
      yield r'created_block_number';
      yield serializers.serialize(
        object.createdBlockNumber,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.totalValueLockedUsd != null) {
      yield r'total_value_locked_usd';
      yield serializers.serialize(
        object.totalValueLockedUsd,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.cumulativeSupplySideRevenueUsd != null) {
      yield r'cumulative_supply_side_revenue_usd';
      yield serializers.serialize(
        object.cumulativeSupplySideRevenueUsd,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.cumulativeProtocolSideRevenueUsd != null) {
      yield r'cumulative_protocol_side_revenue_usd';
      yield serializers.serialize(
        object.cumulativeProtocolSideRevenueUsd,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.cumulativeTotalRevenueUsd != null) {
      yield r'cumulative_total_revenue_usd';
      yield serializers.serialize(
        object.cumulativeTotalRevenueUsd,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.cumulativeVolumeUsd != null) {
      yield r'cumulative_volume_usd';
      yield serializers.serialize(
        object.cumulativeVolumeUsd,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.inputTokenBalances != null) {
      yield r'input_token_balances';
      yield serializers.serialize(
        object.inputTokenBalances,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.inputTokenWeights != null) {
      yield r'input_token_weights';
      yield serializers.serialize(
        object.inputTokenWeights,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.outputTokenSupply != null) {
      yield r'output_token_supply';
      yield serializers.serialize(
        object.outputTokenSupply,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.outputTokenPriceUsd != null) {
      yield r'output_token_price_usd';
      yield serializers.serialize(
        object.outputTokenPriceUsd,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.stakedOutputTokenAmount != null) {
      yield r'staked_output_token_amount';
      yield serializers.serialize(
        object.stakedOutputTokenAmount,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.rewardTokenEmissionsAmount != null) {
      yield r'reward_token_emissions_amount';
      yield serializers.serialize(
        object.rewardTokenEmissionsAmount,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.rewardTokenEmissionsUsd != null) {
      yield r'reward_token_emissions_usd';
      yield serializers.serialize(
        object.rewardTokenEmissionsUsd,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.evaluatedAsk != null) {
      yield r'evaluated_ask';
      yield serializers.serialize(
        object.evaluatedAsk,
        specifiedType: const FullType(double),
      );
    }
  }

  @override
  Object serialize(
    Serializers serializers,
    UNISWAPV2ETHEREUMLiquidityPoolDTO object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    return _serializeProperties(serializers, object, specifiedType: specifiedType).toList();
  }

  void _deserializeProperties(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
    required List<Object?> serializedList,
    required UNISWAPV2ETHEREUMLiquidityPoolDTOBuilder result,
    required List<Object?> unhandled,
  }) {
    for (var i = 0; i < serializedList.length; i += 2) {
      final key = serializedList[i] as String;
      final value = serializedList[i + 1];
      switch (key) {
        case r'entry_time':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(DateTime),
          ) as DateTime;
          result.entryTime = valueDes;
          break;
        case r'recv_time':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(DateTime),
          ) as DateTime;
          result.recvTime = valueDes;
          break;
        case r'block_number':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.blockNumber = valueDes;
          break;
        case r'vid':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.vid = valueDes;
          break;
        case r'id':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.id = valueDes;
          break;
        case r'protocol':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.protocol = valueDes;
          break;
        case r'name':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.name = valueDes;
          break;
        case r'symbol':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.symbol = valueDes;
          break;
        case r'input_tokens':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.inputTokens.replace(valueDes);
          break;
        case r'output_token':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.outputToken = valueDes;
          break;
        case r'reward_tokens':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.rewardTokens.replace(valueDes);
          break;
        case r'fees':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.fees.replace(valueDes);
          break;
        case r'is_single_sided':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(bool),
          ) as bool;
          result.isSingleSided = valueDes;
          break;
        case r'created_timestamp':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.createdTimestamp = valueDes;
          break;
        case r'created_block_number':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.createdBlockNumber = valueDes;
          break;
        case r'total_value_locked_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.totalValueLockedUsd = valueDes;
          break;
        case r'cumulative_supply_side_revenue_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.cumulativeSupplySideRevenueUsd = valueDes;
          break;
        case r'cumulative_protocol_side_revenue_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.cumulativeProtocolSideRevenueUsd = valueDes;
          break;
        case r'cumulative_total_revenue_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.cumulativeTotalRevenueUsd = valueDes;
          break;
        case r'cumulative_volume_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.cumulativeVolumeUsd = valueDes;
          break;
        case r'input_token_balances':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.inputTokenBalances.replace(valueDes);
          break;
        case r'input_token_weights':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.inputTokenWeights.replace(valueDes);
          break;
        case r'output_token_supply':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.outputTokenSupply = valueDes;
          break;
        case r'output_token_price_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.outputTokenPriceUsd = valueDes;
          break;
        case r'staked_output_token_amount':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.stakedOutputTokenAmount = valueDes;
          break;
        case r'reward_token_emissions_amount':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.rewardTokenEmissionsAmount.replace(valueDes);
          break;
        case r'reward_token_emissions_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.rewardTokenEmissionsUsd.replace(valueDes);
          break;
        case r'evaluated_ask':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(double),
          ) as double;
          result.evaluatedAsk = valueDes;
          break;
        default:
          unhandled.add(key);
          unhandled.add(value);
          break;
      }
    }
  }

  @override
  UNISWAPV2ETHEREUMLiquidityPoolDTO deserialize(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = UNISWAPV2ETHEREUMLiquidityPoolDTOBuilder();
    final serializedList = (serialized as Iterable<Object?>).toList();
    final unhandled = <Object?>[];
    _deserializeProperties(
      serializers,
      serialized,
      specifiedType: specifiedType,
      serializedList: serializedList,
      unhandled: unhandled,
      result: result,
    );
    return result.build();
  }
}

