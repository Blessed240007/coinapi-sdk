//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//

// ignore_for_file: unused_element
import 'package:built_collection/built_collection.dart';
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';

part 'uniswapv3_ethereum_liquidity_pool_dto.g.dart';

/// Pool-level metadata.
///
/// Properties:
/// * [entryTime] 
/// * [recvTime] 
/// * [blockNumber] - Number of block in which entity was recorded.
/// * [vid] - .
/// * [blockRange] - Block range of the liquidity pool.
/// * [id] - Smart contract address of the pool.
/// * [protocol] - Protocol this pool belongs to.
/// * [name] - Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT).
/// * [symbol] - Symbol of liquidity pool (e.g. 3CRV).
/// * [liquidityToken] - Token that is to represent ownership of liquidity.
/// * [inputTokens] - Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer.
/// * [rewardTokens] - Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon.
/// * [fees] - Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee.).
/// * [isSingleSided] - Specifies whether this pool is single-sided (e.g. Bancor, Platypus's Alternative Pool). The specifics of the implementation depends on the protocol.
/// * [createdTimestamp] - Timestamp when the liquidity pool was created.
/// * [createdBlockNumber] - Block number when the liquidity pool was created.
/// * [tick] - Current tick representing the price of token0/token1.
/// * [totalValueLockedUsd] - Current TVL (Total Value Locked) of this pool in USD.
/// * [totalLiquidity] - Sum of all active and non-active liquidity for this pool.
/// * [totalLiquidityUsd] - Sum of all active and non-active liquidity in USD for this pool.
/// * [activeLiquidity] - All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
/// * [activeLiquidityUsd] - All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
/// * [uncollectedProtocolSideTokenAmounts] - All protocol-side value locked in token amounts that remains uncollected and unused in the pool.
/// * [uncollectedProtocolSideValuesUsd] - All protocol-side value locking in USD that remains uncollected and unused in the pool.
/// * [uncollectedSupplySideTokenAmounts] - All supply-side value locked in token amounts that remains uncollected and unused in the pool.
/// * [uncollectedSupplySideValuesUsd] - All supply-side value locked in USD that remains uncollected and unused in the pool.
/// * [cumulativeSupplySideRevenueUsd] - All revenue generated by the liquidity pool, accrued to the supply side.
/// * [cumulativeProtocolSideRevenueUsd] - All revenue generated by the liquidity pool, accrued to the protocol.
/// * [cumulativeTotalRevenueUsd] -  All revenue generated by the liquidity pool.
/// * [cumulativeVolumeByTokenAmount] - All trade volume occurred for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field.
/// * [cumulativeVolumeByTokenUsd] - All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.
/// * [cumulativeVolumeUsd] - All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.
/// * [inputTokenBalances] - Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.
/// * [inputTokenBalancesUsd] - Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field.
/// * [inputTokenWeights] - Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
/// * [stakedOutputTokenAmount] - Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
/// * [rewardTokenEmissionsAmount] - Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
/// * [rewardTokenEmissionsUsd] - Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
/// * [cumulativeDepositCount] - Total number of deposits (add liquidity).
/// * [cumulativeWithdrawCount] - Total number of withdrawals (remove liquidity).
/// * [cumulativeSwapCount] - Total number of trades (swaps).
/// * [positionCount] - Number of positions in this market.
/// * [openPositionCount] - Number of open positions in this market.
/// * [closedPositionCount] - Number of closed positions in this market.
/// * [lastSnapshotDayId] - Day ID of the most recent daily snapshot.
/// * [lastSnapshotHourId] - Hour ID of the most recent hourly snapshot.
/// * [lastUpdateTimestamp] - Timestamp of the last time this entity was updated.
/// * [lastUpdateBlockNumber] - Block number of the last time this entity was updated.
/// * [evaluatedAsk] - Evaluated ask value of the liquidity pool.
@BuiltValue()
abstract class UNISWAPV3ETHEREUMLiquidityPoolDTO implements Built<UNISWAPV3ETHEREUMLiquidityPoolDTO, UNISWAPV3ETHEREUMLiquidityPoolDTOBuilder> {
  @BuiltValueField(wireName: r'entry_time')
  DateTime? get entryTime;

  @BuiltValueField(wireName: r'recv_time')
  DateTime? get recvTime;

  /// Number of block in which entity was recorded.
  @BuiltValueField(wireName: r'block_number')
  int? get blockNumber;

  /// .
  @BuiltValueField(wireName: r'vid')
  int? get vid;

  /// Block range of the liquidity pool.
  @BuiltValueField(wireName: r'block_range')
  String? get blockRange;

  /// Smart contract address of the pool.
  @BuiltValueField(wireName: r'id')
  String? get id;

  /// Protocol this pool belongs to.
  @BuiltValueField(wireName: r'protocol')
  String? get protocol;

  /// Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT).
  @BuiltValueField(wireName: r'name')
  String? get name;

  /// Symbol of liquidity pool (e.g. 3CRV).
  @BuiltValueField(wireName: r'symbol')
  String? get symbol;

  /// Token that is to represent ownership of liquidity.
  @BuiltValueField(wireName: r'liquidity_token')
  String? get liquidityToken;

  /// Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer.
  @BuiltValueField(wireName: r'input_tokens')
  BuiltList<String>? get inputTokens;

  /// Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon.
  @BuiltValueField(wireName: r'reward_tokens')
  BuiltList<String>? get rewardTokens;

  /// Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee.).
  @BuiltValueField(wireName: r'fees')
  BuiltList<String>? get fees;

  /// Specifies whether this pool is single-sided (e.g. Bancor, Platypus's Alternative Pool). The specifics of the implementation depends on the protocol.
  @BuiltValueField(wireName: r'is_single_sided')
  bool? get isSingleSided;

  /// Timestamp when the liquidity pool was created.
  @BuiltValueField(wireName: r'created_timestamp')
  String? get createdTimestamp;

  /// Block number when the liquidity pool was created.
  @BuiltValueField(wireName: r'created_block_number')
  String? get createdBlockNumber;

  /// Current tick representing the price of token0/token1.
  @BuiltValueField(wireName: r'tick')
  String? get tick;

  /// Current TVL (Total Value Locked) of this pool in USD.
  @BuiltValueField(wireName: r'total_value_locked_usd')
  String? get totalValueLockedUsd;

  /// Sum of all active and non-active liquidity for this pool.
  @BuiltValueField(wireName: r'total_liquidity')
  String? get totalLiquidity;

  /// Sum of all active and non-active liquidity in USD for this pool.
  @BuiltValueField(wireName: r'total_liquidity_usd')
  String? get totalLiquidityUsd;

  /// All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
  @BuiltValueField(wireName: r'active_liquidity')
  String? get activeLiquidity;

  /// All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
  @BuiltValueField(wireName: r'active_liquidity_usd')
  String? get activeLiquidityUsd;

  /// All protocol-side value locked in token amounts that remains uncollected and unused in the pool.
  @BuiltValueField(wireName: r'uncollected_protocol_side_token_amounts')
  BuiltList<String>? get uncollectedProtocolSideTokenAmounts;

  /// All protocol-side value locking in USD that remains uncollected and unused in the pool.
  @BuiltValueField(wireName: r'uncollected_protocol_side_values_usd')
  BuiltList<String>? get uncollectedProtocolSideValuesUsd;

  /// All supply-side value locked in token amounts that remains uncollected and unused in the pool.
  @BuiltValueField(wireName: r'uncollected_supply_side_token_amounts')
  BuiltList<String>? get uncollectedSupplySideTokenAmounts;

  /// All supply-side value locked in USD that remains uncollected and unused in the pool.
  @BuiltValueField(wireName: r'uncollected_supply_side_values_usd')
  BuiltList<String>? get uncollectedSupplySideValuesUsd;

  /// All revenue generated by the liquidity pool, accrued to the supply side.
  @BuiltValueField(wireName: r'cumulative_supply_side_revenue_usd')
  String? get cumulativeSupplySideRevenueUsd;

  /// All revenue generated by the liquidity pool, accrued to the protocol.
  @BuiltValueField(wireName: r'cumulative_protocol_side_revenue_usd')
  String? get cumulativeProtocolSideRevenueUsd;

  ///  All revenue generated by the liquidity pool.
  @BuiltValueField(wireName: r'cumulative_total_revenue_usd')
  String? get cumulativeTotalRevenueUsd;

  /// All trade volume occurred for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field.
  @BuiltValueField(wireName: r'cumulative_volume_by_token_amount')
  BuiltList<String>? get cumulativeVolumeByTokenAmount;

  /// All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.
  @BuiltValueField(wireName: r'cumulative_volume_by_token_usd')
  BuiltList<String>? get cumulativeVolumeByTokenUsd;

  /// All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.
  @BuiltValueField(wireName: r'cumulative_volume_usd')
  String? get cumulativeVolumeUsd;

  /// Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.
  @BuiltValueField(wireName: r'input_token_balances')
  BuiltList<String>? get inputTokenBalances;

  /// Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field.
  @BuiltValueField(wireName: r'input_token_balances_usd')
  BuiltList<String>? get inputTokenBalancesUsd;

  /// Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
  @BuiltValueField(wireName: r'input_token_weights')
  BuiltList<String>? get inputTokenWeights;

  /// Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
  @BuiltValueField(wireName: r'staked_output_token_amount')
  String? get stakedOutputTokenAmount;

  /// Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
  @BuiltValueField(wireName: r'reward_token_emissions_amount')
  BuiltList<String>? get rewardTokenEmissionsAmount;

  /// Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
  @BuiltValueField(wireName: r'reward_token_emissions_usd')
  BuiltList<String>? get rewardTokenEmissionsUsd;

  /// Total number of deposits (add liquidity).
  @BuiltValueField(wireName: r'cumulative_deposit_count')
  int? get cumulativeDepositCount;

  /// Total number of withdrawals (remove liquidity).
  @BuiltValueField(wireName: r'cumulative_withdraw_count')
  int? get cumulativeWithdrawCount;

  /// Total number of trades (swaps).
  @BuiltValueField(wireName: r'cumulative_swap_count')
  int? get cumulativeSwapCount;

  /// Number of positions in this market.
  @BuiltValueField(wireName: r'position_count')
  int? get positionCount;

  /// Number of open positions in this market.
  @BuiltValueField(wireName: r'open_position_count')
  int? get openPositionCount;

  /// Number of closed positions in this market.
  @BuiltValueField(wireName: r'closed_position_count')
  int? get closedPositionCount;

  /// Day ID of the most recent daily snapshot.
  @BuiltValueField(wireName: r'last_snapshot_day_id')
  int? get lastSnapshotDayId;

  /// Hour ID of the most recent hourly snapshot.
  @BuiltValueField(wireName: r'last_snapshot_hour_id')
  int? get lastSnapshotHourId;

  /// Timestamp of the last time this entity was updated.
  @BuiltValueField(wireName: r'last_update_timestamp')
  String? get lastUpdateTimestamp;

  /// Block number of the last time this entity was updated.
  @BuiltValueField(wireName: r'last_update_block_number')
  String? get lastUpdateBlockNumber;

  /// Evaluated ask value of the liquidity pool.
  @BuiltValueField(wireName: r'evaluated_ask')
  double? get evaluatedAsk;

  UNISWAPV3ETHEREUMLiquidityPoolDTO._();

  factory UNISWAPV3ETHEREUMLiquidityPoolDTO([void updates(UNISWAPV3ETHEREUMLiquidityPoolDTOBuilder b)]) = _$UNISWAPV3ETHEREUMLiquidityPoolDTO;

  @BuiltValueHook(initializeBuilder: true)
  static void _defaults(UNISWAPV3ETHEREUMLiquidityPoolDTOBuilder b) => b;

  @BuiltValueSerializer(custom: true)
  static Serializer<UNISWAPV3ETHEREUMLiquidityPoolDTO> get serializer => _$UNISWAPV3ETHEREUMLiquidityPoolDTOSerializer();
}

class _$UNISWAPV3ETHEREUMLiquidityPoolDTOSerializer implements PrimitiveSerializer<UNISWAPV3ETHEREUMLiquidityPoolDTO> {
  @override
  final Iterable<Type> types = const [UNISWAPV3ETHEREUMLiquidityPoolDTO, _$UNISWAPV3ETHEREUMLiquidityPoolDTO];

  @override
  final String wireName = r'UNISWAPV3ETHEREUMLiquidityPoolDTO';

  Iterable<Object?> _serializeProperties(
    Serializers serializers,
    UNISWAPV3ETHEREUMLiquidityPoolDTO object, {
    FullType specifiedType = FullType.unspecified,
  }) sync* {
    if (object.entryTime != null) {
      yield r'entry_time';
      yield serializers.serialize(
        object.entryTime,
        specifiedType: const FullType(DateTime),
      );
    }
    if (object.recvTime != null) {
      yield r'recv_time';
      yield serializers.serialize(
        object.recvTime,
        specifiedType: const FullType(DateTime),
      );
    }
    if (object.blockNumber != null) {
      yield r'block_number';
      yield serializers.serialize(
        object.blockNumber,
        specifiedType: const FullType(int),
      );
    }
    if (object.vid != null) {
      yield r'vid';
      yield serializers.serialize(
        object.vid,
        specifiedType: const FullType(int),
      );
    }
    if (object.blockRange != null) {
      yield r'block_range';
      yield serializers.serialize(
        object.blockRange,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.id != null) {
      yield r'id';
      yield serializers.serialize(
        object.id,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.protocol != null) {
      yield r'protocol';
      yield serializers.serialize(
        object.protocol,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.name != null) {
      yield r'name';
      yield serializers.serialize(
        object.name,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.symbol != null) {
      yield r'symbol';
      yield serializers.serialize(
        object.symbol,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.liquidityToken != null) {
      yield r'liquidity_token';
      yield serializers.serialize(
        object.liquidityToken,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.inputTokens != null) {
      yield r'input_tokens';
      yield serializers.serialize(
        object.inputTokens,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.rewardTokens != null) {
      yield r'reward_tokens';
      yield serializers.serialize(
        object.rewardTokens,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.fees != null) {
      yield r'fees';
      yield serializers.serialize(
        object.fees,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.isSingleSided != null) {
      yield r'is_single_sided';
      yield serializers.serialize(
        object.isSingleSided,
        specifiedType: const FullType(bool),
      );
    }
    if (object.createdTimestamp != null) {
      yield r'created_timestamp';
      yield serializers.serialize(
        object.createdTimestamp,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.createdBlockNumber != null) {
      yield r'created_block_number';
      yield serializers.serialize(
        object.createdBlockNumber,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.tick != null) {
      yield r'tick';
      yield serializers.serialize(
        object.tick,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.totalValueLockedUsd != null) {
      yield r'total_value_locked_usd';
      yield serializers.serialize(
        object.totalValueLockedUsd,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.totalLiquidity != null) {
      yield r'total_liquidity';
      yield serializers.serialize(
        object.totalLiquidity,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.totalLiquidityUsd != null) {
      yield r'total_liquidity_usd';
      yield serializers.serialize(
        object.totalLiquidityUsd,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.activeLiquidity != null) {
      yield r'active_liquidity';
      yield serializers.serialize(
        object.activeLiquidity,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.activeLiquidityUsd != null) {
      yield r'active_liquidity_usd';
      yield serializers.serialize(
        object.activeLiquidityUsd,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.uncollectedProtocolSideTokenAmounts != null) {
      yield r'uncollected_protocol_side_token_amounts';
      yield serializers.serialize(
        object.uncollectedProtocolSideTokenAmounts,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.uncollectedProtocolSideValuesUsd != null) {
      yield r'uncollected_protocol_side_values_usd';
      yield serializers.serialize(
        object.uncollectedProtocolSideValuesUsd,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.uncollectedSupplySideTokenAmounts != null) {
      yield r'uncollected_supply_side_token_amounts';
      yield serializers.serialize(
        object.uncollectedSupplySideTokenAmounts,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.uncollectedSupplySideValuesUsd != null) {
      yield r'uncollected_supply_side_values_usd';
      yield serializers.serialize(
        object.uncollectedSupplySideValuesUsd,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.cumulativeSupplySideRevenueUsd != null) {
      yield r'cumulative_supply_side_revenue_usd';
      yield serializers.serialize(
        object.cumulativeSupplySideRevenueUsd,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.cumulativeProtocolSideRevenueUsd != null) {
      yield r'cumulative_protocol_side_revenue_usd';
      yield serializers.serialize(
        object.cumulativeProtocolSideRevenueUsd,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.cumulativeTotalRevenueUsd != null) {
      yield r'cumulative_total_revenue_usd';
      yield serializers.serialize(
        object.cumulativeTotalRevenueUsd,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.cumulativeVolumeByTokenAmount != null) {
      yield r'cumulative_volume_by_token_amount';
      yield serializers.serialize(
        object.cumulativeVolumeByTokenAmount,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.cumulativeVolumeByTokenUsd != null) {
      yield r'cumulative_volume_by_token_usd';
      yield serializers.serialize(
        object.cumulativeVolumeByTokenUsd,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.cumulativeVolumeUsd != null) {
      yield r'cumulative_volume_usd';
      yield serializers.serialize(
        object.cumulativeVolumeUsd,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.inputTokenBalances != null) {
      yield r'input_token_balances';
      yield serializers.serialize(
        object.inputTokenBalances,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.inputTokenBalancesUsd != null) {
      yield r'input_token_balances_usd';
      yield serializers.serialize(
        object.inputTokenBalancesUsd,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.inputTokenWeights != null) {
      yield r'input_token_weights';
      yield serializers.serialize(
        object.inputTokenWeights,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.stakedOutputTokenAmount != null) {
      yield r'staked_output_token_amount';
      yield serializers.serialize(
        object.stakedOutputTokenAmount,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.rewardTokenEmissionsAmount != null) {
      yield r'reward_token_emissions_amount';
      yield serializers.serialize(
        object.rewardTokenEmissionsAmount,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.rewardTokenEmissionsUsd != null) {
      yield r'reward_token_emissions_usd';
      yield serializers.serialize(
        object.rewardTokenEmissionsUsd,
        specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
      );
    }
    if (object.cumulativeDepositCount != null) {
      yield r'cumulative_deposit_count';
      yield serializers.serialize(
        object.cumulativeDepositCount,
        specifiedType: const FullType(int),
      );
    }
    if (object.cumulativeWithdrawCount != null) {
      yield r'cumulative_withdraw_count';
      yield serializers.serialize(
        object.cumulativeWithdrawCount,
        specifiedType: const FullType(int),
      );
    }
    if (object.cumulativeSwapCount != null) {
      yield r'cumulative_swap_count';
      yield serializers.serialize(
        object.cumulativeSwapCount,
        specifiedType: const FullType(int),
      );
    }
    if (object.positionCount != null) {
      yield r'position_count';
      yield serializers.serialize(
        object.positionCount,
        specifiedType: const FullType(int),
      );
    }
    if (object.openPositionCount != null) {
      yield r'open_position_count';
      yield serializers.serialize(
        object.openPositionCount,
        specifiedType: const FullType(int),
      );
    }
    if (object.closedPositionCount != null) {
      yield r'closed_position_count';
      yield serializers.serialize(
        object.closedPositionCount,
        specifiedType: const FullType(int),
      );
    }
    if (object.lastSnapshotDayId != null) {
      yield r'last_snapshot_day_id';
      yield serializers.serialize(
        object.lastSnapshotDayId,
        specifiedType: const FullType(int),
      );
    }
    if (object.lastSnapshotHourId != null) {
      yield r'last_snapshot_hour_id';
      yield serializers.serialize(
        object.lastSnapshotHourId,
        specifiedType: const FullType(int),
      );
    }
    if (object.lastUpdateTimestamp != null) {
      yield r'last_update_timestamp';
      yield serializers.serialize(
        object.lastUpdateTimestamp,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.lastUpdateBlockNumber != null) {
      yield r'last_update_block_number';
      yield serializers.serialize(
        object.lastUpdateBlockNumber,
        specifiedType: const FullType.nullable(String),
      );
    }
    if (object.evaluatedAsk != null) {
      yield r'evaluated_ask';
      yield serializers.serialize(
        object.evaluatedAsk,
        specifiedType: const FullType(double),
      );
    }
  }

  @override
  Object serialize(
    Serializers serializers,
    UNISWAPV3ETHEREUMLiquidityPoolDTO object, {
    FullType specifiedType = FullType.unspecified,
  }) {
    return _serializeProperties(serializers, object, specifiedType: specifiedType).toList();
  }

  void _deserializeProperties(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
    required List<Object?> serializedList,
    required UNISWAPV3ETHEREUMLiquidityPoolDTOBuilder result,
    required List<Object?> unhandled,
  }) {
    for (var i = 0; i < serializedList.length; i += 2) {
      final key = serializedList[i] as String;
      final value = serializedList[i + 1];
      switch (key) {
        case r'entry_time':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(DateTime),
          ) as DateTime;
          result.entryTime = valueDes;
          break;
        case r'recv_time':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(DateTime),
          ) as DateTime;
          result.recvTime = valueDes;
          break;
        case r'block_number':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.blockNumber = valueDes;
          break;
        case r'vid':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.vid = valueDes;
          break;
        case r'block_range':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.blockRange = valueDes;
          break;
        case r'id':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.id = valueDes;
          break;
        case r'protocol':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.protocol = valueDes;
          break;
        case r'name':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.name = valueDes;
          break;
        case r'symbol':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.symbol = valueDes;
          break;
        case r'liquidity_token':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.liquidityToken = valueDes;
          break;
        case r'input_tokens':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.inputTokens.replace(valueDes);
          break;
        case r'reward_tokens':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.rewardTokens.replace(valueDes);
          break;
        case r'fees':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.fees.replace(valueDes);
          break;
        case r'is_single_sided':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(bool),
          ) as bool;
          result.isSingleSided = valueDes;
          break;
        case r'created_timestamp':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.createdTimestamp = valueDes;
          break;
        case r'created_block_number':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.createdBlockNumber = valueDes;
          break;
        case r'tick':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.tick = valueDes;
          break;
        case r'total_value_locked_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.totalValueLockedUsd = valueDes;
          break;
        case r'total_liquidity':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.totalLiquidity = valueDes;
          break;
        case r'total_liquidity_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.totalLiquidityUsd = valueDes;
          break;
        case r'active_liquidity':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.activeLiquidity = valueDes;
          break;
        case r'active_liquidity_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.activeLiquidityUsd = valueDes;
          break;
        case r'uncollected_protocol_side_token_amounts':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.uncollectedProtocolSideTokenAmounts.replace(valueDes);
          break;
        case r'uncollected_protocol_side_values_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.uncollectedProtocolSideValuesUsd.replace(valueDes);
          break;
        case r'uncollected_supply_side_token_amounts':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.uncollectedSupplySideTokenAmounts.replace(valueDes);
          break;
        case r'uncollected_supply_side_values_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.uncollectedSupplySideValuesUsd.replace(valueDes);
          break;
        case r'cumulative_supply_side_revenue_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.cumulativeSupplySideRevenueUsd = valueDes;
          break;
        case r'cumulative_protocol_side_revenue_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.cumulativeProtocolSideRevenueUsd = valueDes;
          break;
        case r'cumulative_total_revenue_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.cumulativeTotalRevenueUsd = valueDes;
          break;
        case r'cumulative_volume_by_token_amount':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.cumulativeVolumeByTokenAmount.replace(valueDes);
          break;
        case r'cumulative_volume_by_token_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.cumulativeVolumeByTokenUsd.replace(valueDes);
          break;
        case r'cumulative_volume_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.cumulativeVolumeUsd = valueDes;
          break;
        case r'input_token_balances':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.inputTokenBalances.replace(valueDes);
          break;
        case r'input_token_balances_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.inputTokenBalancesUsd.replace(valueDes);
          break;
        case r'input_token_weights':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.inputTokenWeights.replace(valueDes);
          break;
        case r'staked_output_token_amount':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.stakedOutputTokenAmount = valueDes;
          break;
        case r'reward_token_emissions_amount':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.rewardTokenEmissionsAmount.replace(valueDes);
          break;
        case r'reward_token_emissions_usd':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(BuiltList, [FullType(String)]),
          ) as BuiltList<String>?;
          if (valueDes == null) continue;
          result.rewardTokenEmissionsUsd.replace(valueDes);
          break;
        case r'cumulative_deposit_count':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.cumulativeDepositCount = valueDes;
          break;
        case r'cumulative_withdraw_count':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.cumulativeWithdrawCount = valueDes;
          break;
        case r'cumulative_swap_count':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.cumulativeSwapCount = valueDes;
          break;
        case r'position_count':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.positionCount = valueDes;
          break;
        case r'open_position_count':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.openPositionCount = valueDes;
          break;
        case r'closed_position_count':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.closedPositionCount = valueDes;
          break;
        case r'last_snapshot_day_id':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.lastSnapshotDayId = valueDes;
          break;
        case r'last_snapshot_hour_id':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(int),
          ) as int;
          result.lastSnapshotHourId = valueDes;
          break;
        case r'last_update_timestamp':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.lastUpdateTimestamp = valueDes;
          break;
        case r'last_update_block_number':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType.nullable(String),
          ) as String?;
          if (valueDes == null) continue;
          result.lastUpdateBlockNumber = valueDes;
          break;
        case r'evaluated_ask':
          final valueDes = serializers.deserialize(
            value,
            specifiedType: const FullType(double),
          ) as double;
          result.evaluatedAsk = valueDes;
          break;
        default:
          unhandled.add(key);
          unhandled.add(value);
          break;
      }
    }
  }

  @override
  UNISWAPV3ETHEREUMLiquidityPoolDTO deserialize(
    Serializers serializers,
    Object serialized, {
    FullType specifiedType = FullType.unspecified,
  }) {
    final result = UNISWAPV3ETHEREUMLiquidityPoolDTOBuilder();
    final serializedList = (serialized as Iterable<Object?>).toList();
    final unhandled = <Object?>[];
    _deserializeProperties(
      serializers,
      serialized,
      specifiedType: specifiedType,
      serializedList: serializedList,
      unhandled: unhandled,
      result: result,
    );
    return result.build();
  }
}

