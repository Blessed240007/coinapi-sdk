// tslint:disable
/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * Pool-level metadata.
 * @export
 * @interface UNISWAPV3ETHEREUMLiquidityPoolDTO
 */
export interface UNISWAPV3ETHEREUMLiquidityPoolDTO {
    /**
     * @type {string}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    entry_time?: string;
    /**
     * @type {string}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    recv_time?: string;
    /**
     * Number of block in which entity was recorded.
     * @type {number}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    block_number?: number;
    /**
     * .
     * @type {number}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    vid?: number;
    /**
     * Block range of the liquidity pool.
     * @type {string}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    block_range?: string | null;
    /**
     * Smart contract address of the pool.
     * @type {string}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    id?: string | null;
    /**
     * Protocol this pool belongs to.
     * @type {string}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    protocol?: string | null;
    /**
     * Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT).
     * @type {string}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    name?: string | null;
    /**
     * Symbol of liquidity pool (e.g. 3CRV).
     * @type {string}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    symbol?: string | null;
    /**
     * Token that is to represent ownership of liquidity.
     * @type {string}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    liquidity_token?: string | null;
    /**
     * Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer.
     * @type {Array<string>}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    input_tokens?: Array<string> | null;
    /**
     * Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon.
     * @type {Array<string>}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    reward_tokens?: Array<string> | null;
    /**
     * Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee.).
     * @type {Array<string>}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    fees?: Array<string> | null;
    /**
     * Specifies whether this pool is single-sided (e.g. Bancor, Platypus\'s Alternative Pool). The specifics of the implementation depends on the protocol.
     * @type {boolean}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    is_single_sided?: boolean;
    /**
     * Timestamp when the liquidity pool was created.
     * @type {string}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    created_timestamp?: string | null;
    /**
     * Block number when the liquidity pool was created.
     * @type {string}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    created_block_number?: string | null;
    /**
     * Current tick representing the price of token0/token1.
     * @type {string}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    tick?: string | null;
    /**
     * Current TVL (Total Value Locked) of this pool in USD.
     * @type {string}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    total_value_locked_usd?: string | null;
    /**
     * Sum of all active and non-active liquidity for this pool.
     * @type {string}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    total_liquidity?: string | null;
    /**
     * Sum of all active and non-active liquidity in USD for this pool.
     * @type {string}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    total_liquidity_usd?: string | null;
    /**
     * All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
     * @type {string}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    active_liquidity?: string | null;
    /**
     * All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
     * @type {string}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    active_liquidity_usd?: string | null;
    /**
     * All protocol-side value locked in token amounts that remains uncollected and unused in the pool.
     * @type {Array<string>}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    uncollected_protocol_side_token_amounts?: Array<string> | null;
    /**
     * All protocol-side value locking in USD that remains uncollected and unused in the pool.
     * @type {Array<string>}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    uncollected_protocol_side_values_usd?: Array<string> | null;
    /**
     * All supply-side value locked in token amounts that remains uncollected and unused in the pool.
     * @type {Array<string>}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    uncollected_supply_side_token_amounts?: Array<string> | null;
    /**
     * All supply-side value locked in USD that remains uncollected and unused in the pool.
     * @type {Array<string>}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    uncollected_supply_side_values_usd?: Array<string> | null;
    /**
     * All revenue generated by the liquidity pool, accrued to the supply side.
     * @type {string}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    cumulative_supply_side_revenue_usd?: string | null;
    /**
     * All revenue generated by the liquidity pool, accrued to the protocol.
     * @type {string}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    cumulative_protocol_side_revenue_usd?: string | null;
    /**
     *  All revenue generated by the liquidity pool.
     * @type {string}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    cumulative_total_revenue_usd?: string | null;
    /**
     * All trade volume occurred for a specific input token, in native amount. The ordering should be the same as the pool\'s `inputTokens` field.
     * @type {Array<string>}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    cumulative_volume_by_token_amount?: Array<string> | null;
    /**
     * All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool\'s `inputTokens` field.
     * @type {Array<string>}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    cumulative_volume_by_token_usd?: Array<string> | null;
    /**
     * All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool\'s `inputTokens` field.
     * @type {string}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    cumulative_volume_usd?: string | null;
    /**
     * Amount of input tokens in the pool. The ordering should be the same as the pool\'s `inputTokens` field.
     * @type {Array<string>}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    input_token_balances?: Array<string> | null;
    /**
     * Amount of input tokens in USD in the pool. The ordering should be the same as the pool\'s `inputTokens` field.
     * @type {Array<string>}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    input_token_balances_usd?: Array<string> | null;
    /**
     * Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
     * @type {Array<string>}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    input_token_weights?: Array<string> | null;
    /**
     * Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
     * @type {string}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    staked_output_token_amount?: string | null;
    /**
     * Per-block reward token emission as of the current block normalized to a day, in token\'s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
     * @type {Array<string>}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    reward_token_emissions_amount?: Array<string> | null;
    /**
     * Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
     * @type {Array<string>}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    reward_token_emissions_usd?: Array<string> | null;
    /**
     * Total number of deposits (add liquidity).
     * @type {number}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    cumulative_deposit_count?: number;
    /**
     * Total number of withdrawals (remove liquidity).
     * @type {number}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    cumulative_withdraw_count?: number;
    /**
     * Total number of trades (swaps).
     * @type {number}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    cumulative_swap_count?: number;
    /**
     * Number of positions in this market.
     * @type {number}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    position_count?: number;
    /**
     * Number of open positions in this market.
     * @type {number}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    open_position_count?: number;
    /**
     * Number of closed positions in this market.
     * @type {number}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    closed_position_count?: number;
    /**
     * Day ID of the most recent daily snapshot.
     * @type {number}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    last_snapshot_day_id?: number;
    /**
     * Hour ID of the most recent hourly snapshot.
     * @type {number}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    last_snapshot_hour_id?: number;
    /**
     * Timestamp of the last time this entity was updated.
     * @type {string}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    last_update_timestamp?: string | null;
    /**
     * Block number of the last time this entity was updated.
     * @type {string}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    last_update_block_number?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UNISWAPV3ETHEREUMLiquidityPoolDTO
     */
    readonly evaluated_ask?: number;
}
