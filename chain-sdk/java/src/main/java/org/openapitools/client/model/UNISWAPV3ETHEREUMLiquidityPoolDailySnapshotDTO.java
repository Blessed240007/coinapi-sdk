/*
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a liquidity pool daily snapshot for Uniswap V3.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-24T12:57:58.978232Z[Etc/UTC]")
public class UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO {
  public static final String SERIALIZED_NAME_ENTRY_TIME = "entry_time";
  @SerializedName(SERIALIZED_NAME_ENTRY_TIME)
  private OffsetDateTime entryTime;

  public static final String SERIALIZED_NAME_RECV_TIME = "recv_time";
  @SerializedName(SERIALIZED_NAME_RECV_TIME)
  private OffsetDateTime recvTime;

  public static final String SERIALIZED_NAME_BLOCK_NUMBER = "block_number";
  @SerializedName(SERIALIZED_NAME_BLOCK_NUMBER)
  private Long blockNumber;

  public static final String SERIALIZED_NAME_BLOCK = "block_";
  @SerializedName(SERIALIZED_NAME_BLOCK)
  private Integer block;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DAY = "day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private Integer day;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private String protocol;

  public static final String SERIALIZED_NAME_POOL = "pool";
  @SerializedName(SERIALIZED_NAME_POOL)
  private String pool;

  public static final String SERIALIZED_NAME_TICK = "tick";
  @SerializedName(SERIALIZED_NAME_TICK)
  private String tick;

  public static final String SERIALIZED_NAME_TOTAL_VALUE_LOCKED_USD = "total_value_locked_usd";
  @SerializedName(SERIALIZED_NAME_TOTAL_VALUE_LOCKED_USD)
  private String totalValueLockedUsd;

  public static final String SERIALIZED_NAME_TOTAL_LIQUIDITY = "total_liquidity";
  @SerializedName(SERIALIZED_NAME_TOTAL_LIQUIDITY)
  private String totalLiquidity;

  public static final String SERIALIZED_NAME_TOTAL_LIQUIDITY_USD = "total_liquidity_usd";
  @SerializedName(SERIALIZED_NAME_TOTAL_LIQUIDITY_USD)
  private String totalLiquidityUsd;

  public static final String SERIALIZED_NAME_ACTIVE_LIQUIDITY = "active_liquidity";
  @SerializedName(SERIALIZED_NAME_ACTIVE_LIQUIDITY)
  private String activeLiquidity;

  public static final String SERIALIZED_NAME_ACTIVE_LIQUIDITY_USD = "active_liquidity_usd";
  @SerializedName(SERIALIZED_NAME_ACTIVE_LIQUIDITY_USD)
  private String activeLiquidityUsd;

  public static final String SERIALIZED_NAME_UNCOLLECTED_PROTOCOL_SIDE_TOKEN_AMOUNTS = "uncollected_protocol_side_token_amounts";
  @SerializedName(SERIALIZED_NAME_UNCOLLECTED_PROTOCOL_SIDE_TOKEN_AMOUNTS)
  private List<String> uncollectedProtocolSideTokenAmounts;

  public static final String SERIALIZED_NAME_UNCOLLECTED_PROTOCOL_SIDE_VALUES_USD = "uncollected_protocol_side_values_usd";
  @SerializedName(SERIALIZED_NAME_UNCOLLECTED_PROTOCOL_SIDE_VALUES_USD)
  private List<String> uncollectedProtocolSideValuesUsd;

  public static final String SERIALIZED_NAME_UNCOLLECTED_SUPPLY_SIDE_TOKEN_AMOUNTS = "uncollected_supply_side_token_amounts";
  @SerializedName(SERIALIZED_NAME_UNCOLLECTED_SUPPLY_SIDE_TOKEN_AMOUNTS)
  private List<String> uncollectedSupplySideTokenAmounts;

  public static final String SERIALIZED_NAME_UNCOLLECTED_SUPPLY_SIDE_VALUES_USD = "uncollected_supply_side_values_usd";
  @SerializedName(SERIALIZED_NAME_UNCOLLECTED_SUPPLY_SIDE_VALUES_USD)
  private List<String> uncollectedSupplySideValuesUsd;

  public static final String SERIALIZED_NAME_CUMULATIVE_SUPPLY_SIDE_REVENUE_USD = "cumulative_supply_side_revenue_usd";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_SUPPLY_SIDE_REVENUE_USD)
  private String cumulativeSupplySideRevenueUsd;

  public static final String SERIALIZED_NAME_DAILY_SUPPLY_SIDE_REVENUE_USD = "daily_supply_side_revenue_usd";
  @SerializedName(SERIALIZED_NAME_DAILY_SUPPLY_SIDE_REVENUE_USD)
  private String dailySupplySideRevenueUsd;

  public static final String SERIALIZED_NAME_CUMULATIVE_PROTOCOL_SIDE_REVENUE_USD = "cumulative_protocol_side_revenue_usd";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_PROTOCOL_SIDE_REVENUE_USD)
  private String cumulativeProtocolSideRevenueUsd;

  public static final String SERIALIZED_NAME_DAILY_PROTOCOL_SIDE_REVENUE_USD = "daily_protocol_side_revenue_usd";
  @SerializedName(SERIALIZED_NAME_DAILY_PROTOCOL_SIDE_REVENUE_USD)
  private String dailyProtocolSideRevenueUsd;

  public static final String SERIALIZED_NAME_CUMULATIVE_TOTAL_REVENUE_USD = "cumulative_total_revenue_usd";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_TOTAL_REVENUE_USD)
  private String cumulativeTotalRevenueUsd;

  public static final String SERIALIZED_NAME_DAILY_TOTAL_REVENUE_USD = "daily_total_revenue_usd";
  @SerializedName(SERIALIZED_NAME_DAILY_TOTAL_REVENUE_USD)
  private String dailyTotalRevenueUsd;

  public static final String SERIALIZED_NAME_CUMULATIVE_VOLUME_USD = "cumulative_volume_usd";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_VOLUME_USD)
  private String cumulativeVolumeUsd;

  public static final String SERIALIZED_NAME_DAILY_VOLUME_USD = "daily_volume_usd";
  @SerializedName(SERIALIZED_NAME_DAILY_VOLUME_USD)
  private String dailyVolumeUsd;

  public static final String SERIALIZED_NAME_CUMULATIVE_VOLUME_BY_TOKEN_AMOUNT = "cumulative_volume_by_token_amount";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_VOLUME_BY_TOKEN_AMOUNT)
  private List<String> cumulativeVolumeByTokenAmount;

  public static final String SERIALIZED_NAME_DAILY_VOLUME_BY_TOKEN_AMOUNT = "daily_volume_by_token_amount";
  @SerializedName(SERIALIZED_NAME_DAILY_VOLUME_BY_TOKEN_AMOUNT)
  private List<String> dailyVolumeByTokenAmount;

  public static final String SERIALIZED_NAME_CUMULATIVE_VOLUME_BY_TOKEN_USD = "cumulative_volume_by_token_usd";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_VOLUME_BY_TOKEN_USD)
  private List<String> cumulativeVolumeByTokenUsd;

  public static final String SERIALIZED_NAME_DAILY_VOLUME_BY_TOKEN_USD = "daily_volume_by_token_usd";
  @SerializedName(SERIALIZED_NAME_DAILY_VOLUME_BY_TOKEN_USD)
  private List<String> dailyVolumeByTokenUsd;

  public static final String SERIALIZED_NAME_INPUT_TOKEN_BALANCES = "input_token_balances";
  @SerializedName(SERIALIZED_NAME_INPUT_TOKEN_BALANCES)
  private List<String> inputTokenBalances;

  public static final String SERIALIZED_NAME_INPUT_TOKEN_BALANCES_USD = "input_token_balances_usd";
  @SerializedName(SERIALIZED_NAME_INPUT_TOKEN_BALANCES_USD)
  private List<String> inputTokenBalancesUsd;

  public static final String SERIALIZED_NAME_INPUT_TOKEN_WEIGHTS = "input_token_weights";
  @SerializedName(SERIALIZED_NAME_INPUT_TOKEN_WEIGHTS)
  private List<String> inputTokenWeights;

  public static final String SERIALIZED_NAME_STAKED_OUTPUT_TOKEN_AMOUNT = "staked_output_token_amount";
  @SerializedName(SERIALIZED_NAME_STAKED_OUTPUT_TOKEN_AMOUNT)
  private String stakedOutputTokenAmount;

  public static final String SERIALIZED_NAME_REWARD_TOKEN_EMISSIONS_AMOUNT = "reward_token_emissions_amount";
  @SerializedName(SERIALIZED_NAME_REWARD_TOKEN_EMISSIONS_AMOUNT)
  private List<String> rewardTokenEmissionsAmount;

  public static final String SERIALIZED_NAME_REWARD_TOKEN_EMISSIONS_USD = "reward_token_emissions_usd";
  @SerializedName(SERIALIZED_NAME_REWARD_TOKEN_EMISSIONS_USD)
  private List<String> rewardTokenEmissionsUsd;

  public static final String SERIALIZED_NAME_CUMULATIVE_DEPOSIT_COUNT = "cumulative_deposit_count";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_DEPOSIT_COUNT)
  private Integer cumulativeDepositCount;

  public static final String SERIALIZED_NAME_DAILY_DEPOSIT_COUNT = "daily_deposit_count";
  @SerializedName(SERIALIZED_NAME_DAILY_DEPOSIT_COUNT)
  private Integer dailyDepositCount;

  public static final String SERIALIZED_NAME_CUMULATIVE_WITHDRAW_COUNT = "cumulative_withdraw_count";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_WITHDRAW_COUNT)
  private Integer cumulativeWithdrawCount;

  public static final String SERIALIZED_NAME_DAILY_WITHDRAW_COUNT = "daily_withdraw_count";
  @SerializedName(SERIALIZED_NAME_DAILY_WITHDRAW_COUNT)
  private Integer dailyWithdrawCount;

  public static final String SERIALIZED_NAME_CUMULATIVE_SWAP_COUNT = "cumulative_swap_count";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_SWAP_COUNT)
  private Integer cumulativeSwapCount;

  public static final String SERIALIZED_NAME_DAILY_SWAP_COUNT = "daily_swap_count";
  @SerializedName(SERIALIZED_NAME_DAILY_SWAP_COUNT)
  private Integer dailySwapCount;

  public static final String SERIALIZED_NAME_POSITION_COUNT = "position_count";
  @SerializedName(SERIALIZED_NAME_POSITION_COUNT)
  private Integer positionCount;

  public static final String SERIALIZED_NAME_OPEN_POSITION_COUNT = "open_position_count";
  @SerializedName(SERIALIZED_NAME_OPEN_POSITION_COUNT)
  private Integer openPositionCount;

  public static final String SERIALIZED_NAME_CLOSED_POSITION_COUNT = "closed_position_count";
  @SerializedName(SERIALIZED_NAME_CLOSED_POSITION_COUNT)
  private Integer closedPositionCount;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO() {
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO entryTime(OffsetDateTime entryTime) {
    
    this.entryTime = entryTime;
    return this;
  }

   /**
   * Get entryTime
   * @return entryTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEntryTime() {
    return entryTime;
  }


  public void setEntryTime(OffsetDateTime entryTime) {
    this.entryTime = entryTime;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO recvTime(OffsetDateTime recvTime) {
    
    this.recvTime = recvTime;
    return this;
  }

   /**
   * Get recvTime
   * @return recvTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getRecvTime() {
    return recvTime;
  }


  public void setRecvTime(OffsetDateTime recvTime) {
    this.recvTime = recvTime;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO blockNumber(Long blockNumber) {
    
    this.blockNumber = blockNumber;
    return this;
  }

   /**
   * Number of block in which entity was recorded.
   * @return blockNumber
  **/
  @javax.annotation.Nullable
  public Long getBlockNumber() {
    return blockNumber;
  }


  public void setBlockNumber(Long blockNumber) {
    this.blockNumber = blockNumber;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO block(Integer block) {
    
    this.block = block;
    return this;
  }

   /**
   * The Ethereum block number associated with the liquidity pool daily snapshot.
   * @return block
  **/
  @javax.annotation.Nullable
  public Integer getBlock() {
    return block;
  }


  public void setBlock(Integer block) {
    this.block = block;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Identifier, format: (smart contract address of the pool)-(# of days since Unix epoch time).
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO day(Integer day) {
    
    this.day = day;
    return this;
  }

   /**
   * Number of days since Unix epoch time.
   * @return day
  **/
  @javax.annotation.Nullable
  public Integer getDay() {
    return day;
  }


  public void setDay(Integer day) {
    this.day = day;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO protocol(String protocol) {
    
    this.protocol = protocol;
    return this;
  }

   /**
   * Protocol associated with the liquidity pool.
   * @return protocol
  **/
  @javax.annotation.Nullable
  public String getProtocol() {
    return protocol;
  }


  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO pool(String pool) {
    
    this.pool = pool;
    return this;
  }

   /**
   * Pool this snapshot belongs to.
   * @return pool
  **/
  @javax.annotation.Nullable
  public String getPool() {
    return pool;
  }


  public void setPool(String pool) {
    this.pool = pool;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO tick(String tick) {
    
    this.tick = tick;
    return this;
  }

   /**
   * Current tick representing the price of token0/token1.
   * @return tick
  **/
  @javax.annotation.Nullable
  public String getTick() {
    return tick;
  }


  public void setTick(String tick) {
    this.tick = tick;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO totalValueLockedUsd(String totalValueLockedUsd) {
    
    this.totalValueLockedUsd = totalValueLockedUsd;
    return this;
  }

   /**
   * Current TVL (Total Value Locked) of this pool.
   * @return totalValueLockedUsd
  **/
  @javax.annotation.Nullable
  public String getTotalValueLockedUsd() {
    return totalValueLockedUsd;
  }


  public void setTotalValueLockedUsd(String totalValueLockedUsd) {
    this.totalValueLockedUsd = totalValueLockedUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO totalLiquidity(String totalLiquidity) {
    
    this.totalLiquidity = totalLiquidity;
    return this;
  }

   /**
   * The sum of all active and non-active liquidity for this pool.
   * @return totalLiquidity
  **/
  @javax.annotation.Nullable
  public String getTotalLiquidity() {
    return totalLiquidity;
  }


  public void setTotalLiquidity(String totalLiquidity) {
    this.totalLiquidity = totalLiquidity;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO totalLiquidityUsd(String totalLiquidityUsd) {
    
    this.totalLiquidityUsd = totalLiquidityUsd;
    return this;
  }

   /**
   * Sum of all active and non-active liquidity in USD for this pool.
   * @return totalLiquidityUsd
  **/
  @javax.annotation.Nullable
  public String getTotalLiquidityUsd() {
    return totalLiquidityUsd;
  }


  public void setTotalLiquidityUsd(String totalLiquidityUsd) {
    this.totalLiquidityUsd = totalLiquidityUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO activeLiquidity(String activeLiquidity) {
    
    this.activeLiquidity = activeLiquidity;
    return this;
  }

   /**
   * All liquidity &#x60;k&#x60; that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
   * @return activeLiquidity
  **/
  @javax.annotation.Nullable
  public String getActiveLiquidity() {
    return activeLiquidity;
  }


  public void setActiveLiquidity(String activeLiquidity) {
    this.activeLiquidity = activeLiquidity;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO activeLiquidityUsd(String activeLiquidityUsd) {
    
    this.activeLiquidityUsd = activeLiquidityUsd;
    return this;
  }

   /**
   * All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
   * @return activeLiquidityUsd
  **/
  @javax.annotation.Nullable
  public String getActiveLiquidityUsd() {
    return activeLiquidityUsd;
  }


  public void setActiveLiquidityUsd(String activeLiquidityUsd) {
    this.activeLiquidityUsd = activeLiquidityUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO uncollectedProtocolSideTokenAmounts(List<String> uncollectedProtocolSideTokenAmounts) {
    
    this.uncollectedProtocolSideTokenAmounts = uncollectedProtocolSideTokenAmounts;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO addUncollectedProtocolSideTokenAmountsItem(String uncollectedProtocolSideTokenAmountsItem) {
    if (this.uncollectedProtocolSideTokenAmounts == null) {
      this.uncollectedProtocolSideTokenAmounts = new ArrayList<>();
    }
    this.uncollectedProtocolSideTokenAmounts.add(uncollectedProtocolSideTokenAmountsItem);
    return this;
  }

   /**
   * All protocol-side value locked in token amounts that remains uncollected and unused in the pool.
   * @return uncollectedProtocolSideTokenAmounts
  **/
  @javax.annotation.Nullable
  public List<String> getUncollectedProtocolSideTokenAmounts() {
    return uncollectedProtocolSideTokenAmounts;
  }


  public void setUncollectedProtocolSideTokenAmounts(List<String> uncollectedProtocolSideTokenAmounts) {
    this.uncollectedProtocolSideTokenAmounts = uncollectedProtocolSideTokenAmounts;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO uncollectedProtocolSideValuesUsd(List<String> uncollectedProtocolSideValuesUsd) {
    
    this.uncollectedProtocolSideValuesUsd = uncollectedProtocolSideValuesUsd;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO addUncollectedProtocolSideValuesUsdItem(String uncollectedProtocolSideValuesUsdItem) {
    if (this.uncollectedProtocolSideValuesUsd == null) {
      this.uncollectedProtocolSideValuesUsd = new ArrayList<>();
    }
    this.uncollectedProtocolSideValuesUsd.add(uncollectedProtocolSideValuesUsdItem);
    return this;
  }

   /**
   * All protocol-side value locking in USD that remains uncollected and unused in the pool.
   * @return uncollectedProtocolSideValuesUsd
  **/
  @javax.annotation.Nullable
  public List<String> getUncollectedProtocolSideValuesUsd() {
    return uncollectedProtocolSideValuesUsd;
  }


  public void setUncollectedProtocolSideValuesUsd(List<String> uncollectedProtocolSideValuesUsd) {
    this.uncollectedProtocolSideValuesUsd = uncollectedProtocolSideValuesUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO uncollectedSupplySideTokenAmounts(List<String> uncollectedSupplySideTokenAmounts) {
    
    this.uncollectedSupplySideTokenAmounts = uncollectedSupplySideTokenAmounts;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO addUncollectedSupplySideTokenAmountsItem(String uncollectedSupplySideTokenAmountsItem) {
    if (this.uncollectedSupplySideTokenAmounts == null) {
      this.uncollectedSupplySideTokenAmounts = new ArrayList<>();
    }
    this.uncollectedSupplySideTokenAmounts.add(uncollectedSupplySideTokenAmountsItem);
    return this;
  }

   /**
   * All supply-side value locked in token amounts that remains uncollected and unused in the pool.
   * @return uncollectedSupplySideTokenAmounts
  **/
  @javax.annotation.Nullable
  public List<String> getUncollectedSupplySideTokenAmounts() {
    return uncollectedSupplySideTokenAmounts;
  }


  public void setUncollectedSupplySideTokenAmounts(List<String> uncollectedSupplySideTokenAmounts) {
    this.uncollectedSupplySideTokenAmounts = uncollectedSupplySideTokenAmounts;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO uncollectedSupplySideValuesUsd(List<String> uncollectedSupplySideValuesUsd) {
    
    this.uncollectedSupplySideValuesUsd = uncollectedSupplySideValuesUsd;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO addUncollectedSupplySideValuesUsdItem(String uncollectedSupplySideValuesUsdItem) {
    if (this.uncollectedSupplySideValuesUsd == null) {
      this.uncollectedSupplySideValuesUsd = new ArrayList<>();
    }
    this.uncollectedSupplySideValuesUsd.add(uncollectedSupplySideValuesUsdItem);
    return this;
  }

   /**
   * All supply-side value locked in USD that remains uncollected and unused in the pool.
   * @return uncollectedSupplySideValuesUsd
  **/
  @javax.annotation.Nullable
  public List<String> getUncollectedSupplySideValuesUsd() {
    return uncollectedSupplySideValuesUsd;
  }


  public void setUncollectedSupplySideValuesUsd(List<String> uncollectedSupplySideValuesUsd) {
    this.uncollectedSupplySideValuesUsd = uncollectedSupplySideValuesUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO cumulativeSupplySideRevenueUsd(String cumulativeSupplySideRevenueUsd) {
    
    this.cumulativeSupplySideRevenueUsd = cumulativeSupplySideRevenueUsd;
    return this;
  }

   /**
   * All revenue generated by the liquidity pool, accrued to the supply side.
   * @return cumulativeSupplySideRevenueUsd
  **/
  @javax.annotation.Nullable
  public String getCumulativeSupplySideRevenueUsd() {
    return cumulativeSupplySideRevenueUsd;
  }


  public void setCumulativeSupplySideRevenueUsd(String cumulativeSupplySideRevenueUsd) {
    this.cumulativeSupplySideRevenueUsd = cumulativeSupplySideRevenueUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO dailySupplySideRevenueUsd(String dailySupplySideRevenueUsd) {
    
    this.dailySupplySideRevenueUsd = dailySupplySideRevenueUsd;
    return this;
  }

   /**
   * Daily revenue generated by the liquidity pool, accrued to the supply side.
   * @return dailySupplySideRevenueUsd
  **/
  @javax.annotation.Nullable
  public String getDailySupplySideRevenueUsd() {
    return dailySupplySideRevenueUsd;
  }


  public void setDailySupplySideRevenueUsd(String dailySupplySideRevenueUsd) {
    this.dailySupplySideRevenueUsd = dailySupplySideRevenueUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO cumulativeProtocolSideRevenueUsd(String cumulativeProtocolSideRevenueUsd) {
    
    this.cumulativeProtocolSideRevenueUsd = cumulativeProtocolSideRevenueUsd;
    return this;
  }

   /**
   * All revenue generated by the liquidity pool, accrued to the protocol.
   * @return cumulativeProtocolSideRevenueUsd
  **/
  @javax.annotation.Nullable
  public String getCumulativeProtocolSideRevenueUsd() {
    return cumulativeProtocolSideRevenueUsd;
  }


  public void setCumulativeProtocolSideRevenueUsd(String cumulativeProtocolSideRevenueUsd) {
    this.cumulativeProtocolSideRevenueUsd = cumulativeProtocolSideRevenueUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO dailyProtocolSideRevenueUsd(String dailyProtocolSideRevenueUsd) {
    
    this.dailyProtocolSideRevenueUsd = dailyProtocolSideRevenueUsd;
    return this;
  }

   /**
   * Daily revenue generated by the liquidity pool, accrued to the protocol.
   * @return dailyProtocolSideRevenueUsd
  **/
  @javax.annotation.Nullable
  public String getDailyProtocolSideRevenueUsd() {
    return dailyProtocolSideRevenueUsd;
  }


  public void setDailyProtocolSideRevenueUsd(String dailyProtocolSideRevenueUsd) {
    this.dailyProtocolSideRevenueUsd = dailyProtocolSideRevenueUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO cumulativeTotalRevenueUsd(String cumulativeTotalRevenueUsd) {
    
    this.cumulativeTotalRevenueUsd = cumulativeTotalRevenueUsd;
    return this;
  }

   /**
   * All revenue generated by the liquidity pool.
   * @return cumulativeTotalRevenueUsd
  **/
  @javax.annotation.Nullable
  public String getCumulativeTotalRevenueUsd() {
    return cumulativeTotalRevenueUsd;
  }


  public void setCumulativeTotalRevenueUsd(String cumulativeTotalRevenueUsd) {
    this.cumulativeTotalRevenueUsd = cumulativeTotalRevenueUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO dailyTotalRevenueUsd(String dailyTotalRevenueUsd) {
    
    this.dailyTotalRevenueUsd = dailyTotalRevenueUsd;
    return this;
  }

   /**
   * Daily revenue generated by the liquidity pool.
   * @return dailyTotalRevenueUsd
  **/
  @javax.annotation.Nullable
  public String getDailyTotalRevenueUsd() {
    return dailyTotalRevenueUsd;
  }


  public void setDailyTotalRevenueUsd(String dailyTotalRevenueUsd) {
    this.dailyTotalRevenueUsd = dailyTotalRevenueUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO cumulativeVolumeUsd(String cumulativeVolumeUsd) {
    
    this.cumulativeVolumeUsd = cumulativeVolumeUsd;
    return this;
  }

   /**
   * All historical trade volume occurred in this pool, in USD.
   * @return cumulativeVolumeUsd
  **/
  @javax.annotation.Nullable
  public String getCumulativeVolumeUsd() {
    return cumulativeVolumeUsd;
  }


  public void setCumulativeVolumeUsd(String cumulativeVolumeUsd) {
    this.cumulativeVolumeUsd = cumulativeVolumeUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO dailyVolumeUsd(String dailyVolumeUsd) {
    
    this.dailyVolumeUsd = dailyVolumeUsd;
    return this;
  }

   /**
   * All trade volume occurred in a given day, in USD.
   * @return dailyVolumeUsd
  **/
  @javax.annotation.Nullable
  public String getDailyVolumeUsd() {
    return dailyVolumeUsd;
  }


  public void setDailyVolumeUsd(String dailyVolumeUsd) {
    this.dailyVolumeUsd = dailyVolumeUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO cumulativeVolumeByTokenAmount(List<String> cumulativeVolumeByTokenAmount) {
    
    this.cumulativeVolumeByTokenAmount = cumulativeVolumeByTokenAmount;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO addCumulativeVolumeByTokenAmountItem(String cumulativeVolumeByTokenAmountItem) {
    if (this.cumulativeVolumeByTokenAmount == null) {
      this.cumulativeVolumeByTokenAmount = new ArrayList<>();
    }
    this.cumulativeVolumeByTokenAmount.add(cumulativeVolumeByTokenAmountItem);
    return this;
  }

   /**
   * All trade volume , in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
   * @return cumulativeVolumeByTokenAmount
  **/
  @javax.annotation.Nullable
  public List<String> getCumulativeVolumeByTokenAmount() {
    return cumulativeVolumeByTokenAmount;
  }


  public void setCumulativeVolumeByTokenAmount(List<String> cumulativeVolumeByTokenAmount) {
    this.cumulativeVolumeByTokenAmount = cumulativeVolumeByTokenAmount;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO dailyVolumeByTokenAmount(List<String> dailyVolumeByTokenAmount) {
    
    this.dailyVolumeByTokenAmount = dailyVolumeByTokenAmount;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO addDailyVolumeByTokenAmountItem(String dailyVolumeByTokenAmountItem) {
    if (this.dailyVolumeByTokenAmount == null) {
      this.dailyVolumeByTokenAmount = new ArrayList<>();
    }
    this.dailyVolumeByTokenAmount.add(dailyVolumeByTokenAmountItem);
    return this;
  }

   /**
   * All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
   * @return dailyVolumeByTokenAmount
  **/
  @javax.annotation.Nullable
  public List<String> getDailyVolumeByTokenAmount() {
    return dailyVolumeByTokenAmount;
  }


  public void setDailyVolumeByTokenAmount(List<String> dailyVolumeByTokenAmount) {
    this.dailyVolumeByTokenAmount = dailyVolumeByTokenAmount;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO cumulativeVolumeByTokenUsd(List<String> cumulativeVolumeByTokenUsd) {
    
    this.cumulativeVolumeByTokenUsd = cumulativeVolumeByTokenUsd;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO addCumulativeVolumeByTokenUsdItem(String cumulativeVolumeByTokenUsdItem) {
    if (this.cumulativeVolumeByTokenUsd == null) {
      this.cumulativeVolumeByTokenUsd = new ArrayList<>();
    }
    this.cumulativeVolumeByTokenUsd.add(cumulativeVolumeByTokenUsdItem);
    return this;
  }

   /**
   * All trade volume, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
   * @return cumulativeVolumeByTokenUsd
  **/
  @javax.annotation.Nullable
  public List<String> getCumulativeVolumeByTokenUsd() {
    return cumulativeVolumeByTokenUsd;
  }


  public void setCumulativeVolumeByTokenUsd(List<String> cumulativeVolumeByTokenUsd) {
    this.cumulativeVolumeByTokenUsd = cumulativeVolumeByTokenUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO dailyVolumeByTokenUsd(List<String> dailyVolumeByTokenUsd) {
    
    this.dailyVolumeByTokenUsd = dailyVolumeByTokenUsd;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO addDailyVolumeByTokenUsdItem(String dailyVolumeByTokenUsdItem) {
    if (this.dailyVolumeByTokenUsd == null) {
      this.dailyVolumeByTokenUsd = new ArrayList<>();
    }
    this.dailyVolumeByTokenUsd.add(dailyVolumeByTokenUsdItem);
    return this;
  }

   /**
   *  All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
   * @return dailyVolumeByTokenUsd
  **/
  @javax.annotation.Nullable
  public List<String> getDailyVolumeByTokenUsd() {
    return dailyVolumeByTokenUsd;
  }


  public void setDailyVolumeByTokenUsd(List<String> dailyVolumeByTokenUsd) {
    this.dailyVolumeByTokenUsd = dailyVolumeByTokenUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO inputTokenBalances(List<String> inputTokenBalances) {
    
    this.inputTokenBalances = inputTokenBalances;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO addInputTokenBalancesItem(String inputTokenBalancesItem) {
    if (this.inputTokenBalances == null) {
      this.inputTokenBalances = new ArrayList<>();
    }
    this.inputTokenBalances.add(inputTokenBalancesItem);
    return this;
  }

   /**
   * Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
   * @return inputTokenBalances
  **/
  @javax.annotation.Nullable
  public List<String> getInputTokenBalances() {
    return inputTokenBalances;
  }


  public void setInputTokenBalances(List<String> inputTokenBalances) {
    this.inputTokenBalances = inputTokenBalances;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO inputTokenBalancesUsd(List<String> inputTokenBalancesUsd) {
    
    this.inputTokenBalancesUsd = inputTokenBalancesUsd;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO addInputTokenBalancesUsdItem(String inputTokenBalancesUsdItem) {
    if (this.inputTokenBalancesUsd == null) {
      this.inputTokenBalancesUsd = new ArrayList<>();
    }
    this.inputTokenBalancesUsd.add(inputTokenBalancesUsdItem);
    return this;
  }

   /**
   * Amount of input tokens in USD in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
   * @return inputTokenBalancesUsd
  **/
  @javax.annotation.Nullable
  public List<String> getInputTokenBalancesUsd() {
    return inputTokenBalancesUsd;
  }


  public void setInputTokenBalancesUsd(List<String> inputTokenBalancesUsd) {
    this.inputTokenBalancesUsd = inputTokenBalancesUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO inputTokenWeights(List<String> inputTokenWeights) {
    
    this.inputTokenWeights = inputTokenWeights;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO addInputTokenWeightsItem(String inputTokenWeightsItem) {
    if (this.inputTokenWeights == null) {
      this.inputTokenWeights = new ArrayList<>();
    }
    this.inputTokenWeights.add(inputTokenWeightsItem);
    return this;
  }

   /**
   * Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
   * @return inputTokenWeights
  **/
  @javax.annotation.Nullable
  public List<String> getInputTokenWeights() {
    return inputTokenWeights;
  }


  public void setInputTokenWeights(List<String> inputTokenWeights) {
    this.inputTokenWeights = inputTokenWeights;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO stakedOutputTokenAmount(String stakedOutputTokenAmount) {
    
    this.stakedOutputTokenAmount = stakedOutputTokenAmount;
    return this;
  }

   /**
   * Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
   * @return stakedOutputTokenAmount
  **/
  @javax.annotation.Nullable
  public String getStakedOutputTokenAmount() {
    return stakedOutputTokenAmount;
  }


  public void setStakedOutputTokenAmount(String stakedOutputTokenAmount) {
    this.stakedOutputTokenAmount = stakedOutputTokenAmount;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO rewardTokenEmissionsAmount(List<String> rewardTokenEmissionsAmount) {
    
    this.rewardTokenEmissionsAmount = rewardTokenEmissionsAmount;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO addRewardTokenEmissionsAmountItem(String rewardTokenEmissionsAmountItem) {
    if (this.rewardTokenEmissionsAmount == null) {
      this.rewardTokenEmissionsAmount = new ArrayList<>();
    }
    this.rewardTokenEmissionsAmount.add(rewardTokenEmissionsAmountItem);
    return this;
  }

   /**
   * Per-block reward token emission as of the current block normalized to a day, in token&#39;s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
   * @return rewardTokenEmissionsAmount
  **/
  @javax.annotation.Nullable
  public List<String> getRewardTokenEmissionsAmount() {
    return rewardTokenEmissionsAmount;
  }


  public void setRewardTokenEmissionsAmount(List<String> rewardTokenEmissionsAmount) {
    this.rewardTokenEmissionsAmount = rewardTokenEmissionsAmount;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO rewardTokenEmissionsUsd(List<String> rewardTokenEmissionsUsd) {
    
    this.rewardTokenEmissionsUsd = rewardTokenEmissionsUsd;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO addRewardTokenEmissionsUsdItem(String rewardTokenEmissionsUsdItem) {
    if (this.rewardTokenEmissionsUsd == null) {
      this.rewardTokenEmissionsUsd = new ArrayList<>();
    }
    this.rewardTokenEmissionsUsd.add(rewardTokenEmissionsUsdItem);
    return this;
  }

   /**
   * Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
   * @return rewardTokenEmissionsUsd
  **/
  @javax.annotation.Nullable
  public List<String> getRewardTokenEmissionsUsd() {
    return rewardTokenEmissionsUsd;
  }


  public void setRewardTokenEmissionsUsd(List<String> rewardTokenEmissionsUsd) {
    this.rewardTokenEmissionsUsd = rewardTokenEmissionsUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO cumulativeDepositCount(Integer cumulativeDepositCount) {
    
    this.cumulativeDepositCount = cumulativeDepositCount;
    return this;
  }

   /**
   * Total number of deposits (add liquidity).
   * @return cumulativeDepositCount
  **/
  @javax.annotation.Nullable
  public Integer getCumulativeDepositCount() {
    return cumulativeDepositCount;
  }


  public void setCumulativeDepositCount(Integer cumulativeDepositCount) {
    this.cumulativeDepositCount = cumulativeDepositCount;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO dailyDepositCount(Integer dailyDepositCount) {
    
    this.dailyDepositCount = dailyDepositCount;
    return this;
  }

   /**
   * Total number of deposits (add liquidity) in a day.
   * @return dailyDepositCount
  **/
  @javax.annotation.Nullable
  public Integer getDailyDepositCount() {
    return dailyDepositCount;
  }


  public void setDailyDepositCount(Integer dailyDepositCount) {
    this.dailyDepositCount = dailyDepositCount;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO cumulativeWithdrawCount(Integer cumulativeWithdrawCount) {
    
    this.cumulativeWithdrawCount = cumulativeWithdrawCount;
    return this;
  }

   /**
   * Total number of withdrawals (remove liquidity).
   * @return cumulativeWithdrawCount
  **/
  @javax.annotation.Nullable
  public Integer getCumulativeWithdrawCount() {
    return cumulativeWithdrawCount;
  }


  public void setCumulativeWithdrawCount(Integer cumulativeWithdrawCount) {
    this.cumulativeWithdrawCount = cumulativeWithdrawCount;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO dailyWithdrawCount(Integer dailyWithdrawCount) {
    
    this.dailyWithdrawCount = dailyWithdrawCount;
    return this;
  }

   /**
   * Total number of withdrawals (remove liquidity) in a day.
   * @return dailyWithdrawCount
  **/
  @javax.annotation.Nullable
  public Integer getDailyWithdrawCount() {
    return dailyWithdrawCount;
  }


  public void setDailyWithdrawCount(Integer dailyWithdrawCount) {
    this.dailyWithdrawCount = dailyWithdrawCount;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO cumulativeSwapCount(Integer cumulativeSwapCount) {
    
    this.cumulativeSwapCount = cumulativeSwapCount;
    return this;
  }

   /**
   * Total number of trades (swaps).
   * @return cumulativeSwapCount
  **/
  @javax.annotation.Nullable
  public Integer getCumulativeSwapCount() {
    return cumulativeSwapCount;
  }


  public void setCumulativeSwapCount(Integer cumulativeSwapCount) {
    this.cumulativeSwapCount = cumulativeSwapCount;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO dailySwapCount(Integer dailySwapCount) {
    
    this.dailySwapCount = dailySwapCount;
    return this;
  }

   /**
   * Total number of trades (swaps) in a day.
   * @return dailySwapCount
  **/
  @javax.annotation.Nullable
  public Integer getDailySwapCount() {
    return dailySwapCount;
  }


  public void setDailySwapCount(Integer dailySwapCount) {
    this.dailySwapCount = dailySwapCount;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO positionCount(Integer positionCount) {
    
    this.positionCount = positionCount;
    return this;
  }

   /**
   * Number of positions in this market.
   * @return positionCount
  **/
  @javax.annotation.Nullable
  public Integer getPositionCount() {
    return positionCount;
  }


  public void setPositionCount(Integer positionCount) {
    this.positionCount = positionCount;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO openPositionCount(Integer openPositionCount) {
    
    this.openPositionCount = openPositionCount;
    return this;
  }

   /**
   * Number of open positions in this market.
   * @return openPositionCount
  **/
  @javax.annotation.Nullable
  public Integer getOpenPositionCount() {
    return openPositionCount;
  }


  public void setOpenPositionCount(Integer openPositionCount) {
    this.openPositionCount = openPositionCount;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO closedPositionCount(Integer closedPositionCount) {
    
    this.closedPositionCount = closedPositionCount;
    return this;
  }

   /**
   * Number of closed positions in this market.
   * @return closedPositionCount
  **/
  @javax.annotation.Nullable
  public Integer getClosedPositionCount() {
    return closedPositionCount;
  }


  public void setClosedPositionCount(Integer closedPositionCount) {
    this.closedPositionCount = closedPositionCount;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO timestamp(String timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed).
   * @return timestamp
  **/
  @javax.annotation.Nullable
  public String getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO = (UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO) o;
    return Objects.equals(this.entryTime, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.entryTime) &&
        Objects.equals(this.recvTime, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.recvTime) &&
        Objects.equals(this.blockNumber, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.blockNumber) &&
        Objects.equals(this.block, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.block) &&
        Objects.equals(this.id, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.id) &&
        Objects.equals(this.day, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.day) &&
        Objects.equals(this.protocol, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.protocol) &&
        Objects.equals(this.pool, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.pool) &&
        Objects.equals(this.tick, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.tick) &&
        Objects.equals(this.totalValueLockedUsd, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.totalValueLockedUsd) &&
        Objects.equals(this.totalLiquidity, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.totalLiquidity) &&
        Objects.equals(this.totalLiquidityUsd, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.totalLiquidityUsd) &&
        Objects.equals(this.activeLiquidity, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.activeLiquidity) &&
        Objects.equals(this.activeLiquidityUsd, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.activeLiquidityUsd) &&
        Objects.equals(this.uncollectedProtocolSideTokenAmounts, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.uncollectedProtocolSideTokenAmounts) &&
        Objects.equals(this.uncollectedProtocolSideValuesUsd, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.uncollectedProtocolSideValuesUsd) &&
        Objects.equals(this.uncollectedSupplySideTokenAmounts, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.uncollectedSupplySideTokenAmounts) &&
        Objects.equals(this.uncollectedSupplySideValuesUsd, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.uncollectedSupplySideValuesUsd) &&
        Objects.equals(this.cumulativeSupplySideRevenueUsd, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.cumulativeSupplySideRevenueUsd) &&
        Objects.equals(this.dailySupplySideRevenueUsd, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.dailySupplySideRevenueUsd) &&
        Objects.equals(this.cumulativeProtocolSideRevenueUsd, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.cumulativeProtocolSideRevenueUsd) &&
        Objects.equals(this.dailyProtocolSideRevenueUsd, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.dailyProtocolSideRevenueUsd) &&
        Objects.equals(this.cumulativeTotalRevenueUsd, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.cumulativeTotalRevenueUsd) &&
        Objects.equals(this.dailyTotalRevenueUsd, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.dailyTotalRevenueUsd) &&
        Objects.equals(this.cumulativeVolumeUsd, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.cumulativeVolumeUsd) &&
        Objects.equals(this.dailyVolumeUsd, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.dailyVolumeUsd) &&
        Objects.equals(this.cumulativeVolumeByTokenAmount, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.cumulativeVolumeByTokenAmount) &&
        Objects.equals(this.dailyVolumeByTokenAmount, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.dailyVolumeByTokenAmount) &&
        Objects.equals(this.cumulativeVolumeByTokenUsd, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.cumulativeVolumeByTokenUsd) &&
        Objects.equals(this.dailyVolumeByTokenUsd, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.dailyVolumeByTokenUsd) &&
        Objects.equals(this.inputTokenBalances, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.inputTokenBalances) &&
        Objects.equals(this.inputTokenBalancesUsd, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.inputTokenBalancesUsd) &&
        Objects.equals(this.inputTokenWeights, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.inputTokenWeights) &&
        Objects.equals(this.stakedOutputTokenAmount, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.stakedOutputTokenAmount) &&
        Objects.equals(this.rewardTokenEmissionsAmount, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.rewardTokenEmissionsAmount) &&
        Objects.equals(this.rewardTokenEmissionsUsd, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.rewardTokenEmissionsUsd) &&
        Objects.equals(this.cumulativeDepositCount, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.cumulativeDepositCount) &&
        Objects.equals(this.dailyDepositCount, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.dailyDepositCount) &&
        Objects.equals(this.cumulativeWithdrawCount, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.cumulativeWithdrawCount) &&
        Objects.equals(this.dailyWithdrawCount, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.dailyWithdrawCount) &&
        Objects.equals(this.cumulativeSwapCount, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.cumulativeSwapCount) &&
        Objects.equals(this.dailySwapCount, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.dailySwapCount) &&
        Objects.equals(this.positionCount, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.positionCount) &&
        Objects.equals(this.openPositionCount, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.openPositionCount) &&
        Objects.equals(this.closedPositionCount, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.closedPositionCount) &&
        Objects.equals(this.timestamp, unISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.timestamp);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(entryTime, recvTime, blockNumber, block, id, day, protocol, pool, tick, totalValueLockedUsd, totalLiquidity, totalLiquidityUsd, activeLiquidity, activeLiquidityUsd, uncollectedProtocolSideTokenAmounts, uncollectedProtocolSideValuesUsd, uncollectedSupplySideTokenAmounts, uncollectedSupplySideValuesUsd, cumulativeSupplySideRevenueUsd, dailySupplySideRevenueUsd, cumulativeProtocolSideRevenueUsd, dailyProtocolSideRevenueUsd, cumulativeTotalRevenueUsd, dailyTotalRevenueUsd, cumulativeVolumeUsd, dailyVolumeUsd, cumulativeVolumeByTokenAmount, dailyVolumeByTokenAmount, cumulativeVolumeByTokenUsd, dailyVolumeByTokenUsd, inputTokenBalances, inputTokenBalancesUsd, inputTokenWeights, stakedOutputTokenAmount, rewardTokenEmissionsAmount, rewardTokenEmissionsUsd, cumulativeDepositCount, dailyDepositCount, cumulativeWithdrawCount, dailyWithdrawCount, cumulativeSwapCount, dailySwapCount, positionCount, openPositionCount, closedPositionCount, timestamp);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO {\n");
    sb.append("    entryTime: ").append(toIndentedString(entryTime)).append("\n");
    sb.append("    recvTime: ").append(toIndentedString(recvTime)).append("\n");
    sb.append("    blockNumber: ").append(toIndentedString(blockNumber)).append("\n");
    sb.append("    block: ").append(toIndentedString(block)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    pool: ").append(toIndentedString(pool)).append("\n");
    sb.append("    tick: ").append(toIndentedString(tick)).append("\n");
    sb.append("    totalValueLockedUsd: ").append(toIndentedString(totalValueLockedUsd)).append("\n");
    sb.append("    totalLiquidity: ").append(toIndentedString(totalLiquidity)).append("\n");
    sb.append("    totalLiquidityUsd: ").append(toIndentedString(totalLiquidityUsd)).append("\n");
    sb.append("    activeLiquidity: ").append(toIndentedString(activeLiquidity)).append("\n");
    sb.append("    activeLiquidityUsd: ").append(toIndentedString(activeLiquidityUsd)).append("\n");
    sb.append("    uncollectedProtocolSideTokenAmounts: ").append(toIndentedString(uncollectedProtocolSideTokenAmounts)).append("\n");
    sb.append("    uncollectedProtocolSideValuesUsd: ").append(toIndentedString(uncollectedProtocolSideValuesUsd)).append("\n");
    sb.append("    uncollectedSupplySideTokenAmounts: ").append(toIndentedString(uncollectedSupplySideTokenAmounts)).append("\n");
    sb.append("    uncollectedSupplySideValuesUsd: ").append(toIndentedString(uncollectedSupplySideValuesUsd)).append("\n");
    sb.append("    cumulativeSupplySideRevenueUsd: ").append(toIndentedString(cumulativeSupplySideRevenueUsd)).append("\n");
    sb.append("    dailySupplySideRevenueUsd: ").append(toIndentedString(dailySupplySideRevenueUsd)).append("\n");
    sb.append("    cumulativeProtocolSideRevenueUsd: ").append(toIndentedString(cumulativeProtocolSideRevenueUsd)).append("\n");
    sb.append("    dailyProtocolSideRevenueUsd: ").append(toIndentedString(dailyProtocolSideRevenueUsd)).append("\n");
    sb.append("    cumulativeTotalRevenueUsd: ").append(toIndentedString(cumulativeTotalRevenueUsd)).append("\n");
    sb.append("    dailyTotalRevenueUsd: ").append(toIndentedString(dailyTotalRevenueUsd)).append("\n");
    sb.append("    cumulativeVolumeUsd: ").append(toIndentedString(cumulativeVolumeUsd)).append("\n");
    sb.append("    dailyVolumeUsd: ").append(toIndentedString(dailyVolumeUsd)).append("\n");
    sb.append("    cumulativeVolumeByTokenAmount: ").append(toIndentedString(cumulativeVolumeByTokenAmount)).append("\n");
    sb.append("    dailyVolumeByTokenAmount: ").append(toIndentedString(dailyVolumeByTokenAmount)).append("\n");
    sb.append("    cumulativeVolumeByTokenUsd: ").append(toIndentedString(cumulativeVolumeByTokenUsd)).append("\n");
    sb.append("    dailyVolumeByTokenUsd: ").append(toIndentedString(dailyVolumeByTokenUsd)).append("\n");
    sb.append("    inputTokenBalances: ").append(toIndentedString(inputTokenBalances)).append("\n");
    sb.append("    inputTokenBalancesUsd: ").append(toIndentedString(inputTokenBalancesUsd)).append("\n");
    sb.append("    inputTokenWeights: ").append(toIndentedString(inputTokenWeights)).append("\n");
    sb.append("    stakedOutputTokenAmount: ").append(toIndentedString(stakedOutputTokenAmount)).append("\n");
    sb.append("    rewardTokenEmissionsAmount: ").append(toIndentedString(rewardTokenEmissionsAmount)).append("\n");
    sb.append("    rewardTokenEmissionsUsd: ").append(toIndentedString(rewardTokenEmissionsUsd)).append("\n");
    sb.append("    cumulativeDepositCount: ").append(toIndentedString(cumulativeDepositCount)).append("\n");
    sb.append("    dailyDepositCount: ").append(toIndentedString(dailyDepositCount)).append("\n");
    sb.append("    cumulativeWithdrawCount: ").append(toIndentedString(cumulativeWithdrawCount)).append("\n");
    sb.append("    dailyWithdrawCount: ").append(toIndentedString(dailyWithdrawCount)).append("\n");
    sb.append("    cumulativeSwapCount: ").append(toIndentedString(cumulativeSwapCount)).append("\n");
    sb.append("    dailySwapCount: ").append(toIndentedString(dailySwapCount)).append("\n");
    sb.append("    positionCount: ").append(toIndentedString(positionCount)).append("\n");
    sb.append("    openPositionCount: ").append(toIndentedString(openPositionCount)).append("\n");
    sb.append("    closedPositionCount: ").append(toIndentedString(closedPositionCount)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entry_time");
    openapiFields.add("recv_time");
    openapiFields.add("block_number");
    openapiFields.add("block_");
    openapiFields.add("id");
    openapiFields.add("day");
    openapiFields.add("protocol");
    openapiFields.add("pool");
    openapiFields.add("tick");
    openapiFields.add("total_value_locked_usd");
    openapiFields.add("total_liquidity");
    openapiFields.add("total_liquidity_usd");
    openapiFields.add("active_liquidity");
    openapiFields.add("active_liquidity_usd");
    openapiFields.add("uncollected_protocol_side_token_amounts");
    openapiFields.add("uncollected_protocol_side_values_usd");
    openapiFields.add("uncollected_supply_side_token_amounts");
    openapiFields.add("uncollected_supply_side_values_usd");
    openapiFields.add("cumulative_supply_side_revenue_usd");
    openapiFields.add("daily_supply_side_revenue_usd");
    openapiFields.add("cumulative_protocol_side_revenue_usd");
    openapiFields.add("daily_protocol_side_revenue_usd");
    openapiFields.add("cumulative_total_revenue_usd");
    openapiFields.add("daily_total_revenue_usd");
    openapiFields.add("cumulative_volume_usd");
    openapiFields.add("daily_volume_usd");
    openapiFields.add("cumulative_volume_by_token_amount");
    openapiFields.add("daily_volume_by_token_amount");
    openapiFields.add("cumulative_volume_by_token_usd");
    openapiFields.add("daily_volume_by_token_usd");
    openapiFields.add("input_token_balances");
    openapiFields.add("input_token_balances_usd");
    openapiFields.add("input_token_weights");
    openapiFields.add("staked_output_token_amount");
    openapiFields.add("reward_token_emissions_amount");
    openapiFields.add("reward_token_emissions_usd");
    openapiFields.add("cumulative_deposit_count");
    openapiFields.add("daily_deposit_count");
    openapiFields.add("cumulative_withdraw_count");
    openapiFields.add("daily_withdraw_count");
    openapiFields.add("cumulative_swap_count");
    openapiFields.add("daily_swap_count");
    openapiFields.add("position_count");
    openapiFields.add("open_position_count");
    openapiFields.add("closed_position_count");
    openapiFields.add("timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO is not found in the empty JSON string", UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      if ((jsonObj.get("pool") != null && !jsonObj.get("pool").isJsonNull()) && !jsonObj.get("pool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pool").toString()));
      }
      if ((jsonObj.get("tick") != null && !jsonObj.get("tick").isJsonNull()) && !jsonObj.get("tick").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tick` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tick").toString()));
      }
      if ((jsonObj.get("total_value_locked_usd") != null && !jsonObj.get("total_value_locked_usd").isJsonNull()) && !jsonObj.get("total_value_locked_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_value_locked_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_value_locked_usd").toString()));
      }
      if ((jsonObj.get("total_liquidity") != null && !jsonObj.get("total_liquidity").isJsonNull()) && !jsonObj.get("total_liquidity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_liquidity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_liquidity").toString()));
      }
      if ((jsonObj.get("total_liquidity_usd") != null && !jsonObj.get("total_liquidity_usd").isJsonNull()) && !jsonObj.get("total_liquidity_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_liquidity_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_liquidity_usd").toString()));
      }
      if ((jsonObj.get("active_liquidity") != null && !jsonObj.get("active_liquidity").isJsonNull()) && !jsonObj.get("active_liquidity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `active_liquidity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("active_liquidity").toString()));
      }
      if ((jsonObj.get("active_liquidity_usd") != null && !jsonObj.get("active_liquidity_usd").isJsonNull()) && !jsonObj.get("active_liquidity_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `active_liquidity_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("active_liquidity_usd").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("uncollected_protocol_side_token_amounts") != null && !jsonObj.get("uncollected_protocol_side_token_amounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `uncollected_protocol_side_token_amounts` to be an array in the JSON string but got `%s`", jsonObj.get("uncollected_protocol_side_token_amounts").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("uncollected_protocol_side_values_usd") != null && !jsonObj.get("uncollected_protocol_side_values_usd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `uncollected_protocol_side_values_usd` to be an array in the JSON string but got `%s`", jsonObj.get("uncollected_protocol_side_values_usd").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("uncollected_supply_side_token_amounts") != null && !jsonObj.get("uncollected_supply_side_token_amounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `uncollected_supply_side_token_amounts` to be an array in the JSON string but got `%s`", jsonObj.get("uncollected_supply_side_token_amounts").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("uncollected_supply_side_values_usd") != null && !jsonObj.get("uncollected_supply_side_values_usd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `uncollected_supply_side_values_usd` to be an array in the JSON string but got `%s`", jsonObj.get("uncollected_supply_side_values_usd").toString()));
      }
      if ((jsonObj.get("cumulative_supply_side_revenue_usd") != null && !jsonObj.get("cumulative_supply_side_revenue_usd").isJsonNull()) && !jsonObj.get("cumulative_supply_side_revenue_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cumulative_supply_side_revenue_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cumulative_supply_side_revenue_usd").toString()));
      }
      if ((jsonObj.get("daily_supply_side_revenue_usd") != null && !jsonObj.get("daily_supply_side_revenue_usd").isJsonNull()) && !jsonObj.get("daily_supply_side_revenue_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `daily_supply_side_revenue_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("daily_supply_side_revenue_usd").toString()));
      }
      if ((jsonObj.get("cumulative_protocol_side_revenue_usd") != null && !jsonObj.get("cumulative_protocol_side_revenue_usd").isJsonNull()) && !jsonObj.get("cumulative_protocol_side_revenue_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cumulative_protocol_side_revenue_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cumulative_protocol_side_revenue_usd").toString()));
      }
      if ((jsonObj.get("daily_protocol_side_revenue_usd") != null && !jsonObj.get("daily_protocol_side_revenue_usd").isJsonNull()) && !jsonObj.get("daily_protocol_side_revenue_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `daily_protocol_side_revenue_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("daily_protocol_side_revenue_usd").toString()));
      }
      if ((jsonObj.get("cumulative_total_revenue_usd") != null && !jsonObj.get("cumulative_total_revenue_usd").isJsonNull()) && !jsonObj.get("cumulative_total_revenue_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cumulative_total_revenue_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cumulative_total_revenue_usd").toString()));
      }
      if ((jsonObj.get("daily_total_revenue_usd") != null && !jsonObj.get("daily_total_revenue_usd").isJsonNull()) && !jsonObj.get("daily_total_revenue_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `daily_total_revenue_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("daily_total_revenue_usd").toString()));
      }
      if ((jsonObj.get("cumulative_volume_usd") != null && !jsonObj.get("cumulative_volume_usd").isJsonNull()) && !jsonObj.get("cumulative_volume_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cumulative_volume_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cumulative_volume_usd").toString()));
      }
      if ((jsonObj.get("daily_volume_usd") != null && !jsonObj.get("daily_volume_usd").isJsonNull()) && !jsonObj.get("daily_volume_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `daily_volume_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("daily_volume_usd").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cumulative_volume_by_token_amount") != null && !jsonObj.get("cumulative_volume_by_token_amount").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cumulative_volume_by_token_amount` to be an array in the JSON string but got `%s`", jsonObj.get("cumulative_volume_by_token_amount").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("daily_volume_by_token_amount") != null && !jsonObj.get("daily_volume_by_token_amount").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `daily_volume_by_token_amount` to be an array in the JSON string but got `%s`", jsonObj.get("daily_volume_by_token_amount").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cumulative_volume_by_token_usd") != null && !jsonObj.get("cumulative_volume_by_token_usd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cumulative_volume_by_token_usd` to be an array in the JSON string but got `%s`", jsonObj.get("cumulative_volume_by_token_usd").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("daily_volume_by_token_usd") != null && !jsonObj.get("daily_volume_by_token_usd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `daily_volume_by_token_usd` to be an array in the JSON string but got `%s`", jsonObj.get("daily_volume_by_token_usd").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("input_token_balances") != null && !jsonObj.get("input_token_balances").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `input_token_balances` to be an array in the JSON string but got `%s`", jsonObj.get("input_token_balances").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("input_token_balances_usd") != null && !jsonObj.get("input_token_balances_usd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `input_token_balances_usd` to be an array in the JSON string but got `%s`", jsonObj.get("input_token_balances_usd").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("input_token_weights") != null && !jsonObj.get("input_token_weights").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `input_token_weights` to be an array in the JSON string but got `%s`", jsonObj.get("input_token_weights").toString()));
      }
      if ((jsonObj.get("staked_output_token_amount") != null && !jsonObj.get("staked_output_token_amount").isJsonNull()) && !jsonObj.get("staked_output_token_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `staked_output_token_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("staked_output_token_amount").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reward_token_emissions_amount") != null && !jsonObj.get("reward_token_emissions_amount").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reward_token_emissions_amount` to be an array in the JSON string but got `%s`", jsonObj.get("reward_token_emissions_amount").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reward_token_emissions_usd") != null && !jsonObj.get("reward_token_emissions_usd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reward_token_emissions_usd` to be an array in the JSON string but got `%s`", jsonObj.get("reward_token_emissions_usd").toString()));
      }
      if ((jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull()) && !jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO>() {
           @Override
           public void write(JsonWriter out, UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
  * @throws IOException if the JSON string is invalid with respect to UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
  */
  public static UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO.class);
  }

 /**
  * Convert an instance of UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

