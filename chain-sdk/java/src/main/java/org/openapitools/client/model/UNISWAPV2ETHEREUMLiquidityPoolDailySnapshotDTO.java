/*
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a liquidity pool daily snapshot for Uniswap V2.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-23T15:18:53.663612Z[Etc/UTC]")
public class UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO {
  public static final String SERIALIZED_NAME_ENTRY_TIME = "entry_time";
  @SerializedName(SERIALIZED_NAME_ENTRY_TIME)
  private OffsetDateTime entryTime;

  public static final String SERIALIZED_NAME_RECV_TIME = "recv_time";
  @SerializedName(SERIALIZED_NAME_RECV_TIME)
  private OffsetDateTime recvTime;

  public static final String SERIALIZED_NAME_BLOCK_NUMBER = "block_number";
  @SerializedName(SERIALIZED_NAME_BLOCK_NUMBER)
  private Long blockNumber;

  public static final String SERIALIZED_NAME_BLOCK_RANGE = "block_range";
  @SerializedName(SERIALIZED_NAME_BLOCK_RANGE)
  private String blockRange;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private String protocol;

  public static final String SERIALIZED_NAME_POOL = "pool";
  @SerializedName(SERIALIZED_NAME_POOL)
  private String pool;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_TOTAL_VALUE_LOCKED_USD = "total_value_locked_usd";
  @SerializedName(SERIALIZED_NAME_TOTAL_VALUE_LOCKED_USD)
  private String totalValueLockedUsd;

  public static final String SERIALIZED_NAME_CUMULATIVE_SUPPLY_SIDE_REVENUE_USD = "cumulative_supply_side_revenue_usd";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_SUPPLY_SIDE_REVENUE_USD)
  private String cumulativeSupplySideRevenueUsd;

  public static final String SERIALIZED_NAME_DAILY_SUPPLY_SIDE_REVENUE_USD = "daily_supply_side_revenue_usd";
  @SerializedName(SERIALIZED_NAME_DAILY_SUPPLY_SIDE_REVENUE_USD)
  private String dailySupplySideRevenueUsd;

  public static final String SERIALIZED_NAME_CUMULATIVE_PROTOCOL_SIDE_REVENUE_USD = "cumulative_protocol_side_revenue_usd";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_PROTOCOL_SIDE_REVENUE_USD)
  private String cumulativeProtocolSideRevenueUsd;

  public static final String SERIALIZED_NAME_DAILY_PROTOCOL_SIDE_REVENUE_USD = "daily_protocol_side_revenue_usd";
  @SerializedName(SERIALIZED_NAME_DAILY_PROTOCOL_SIDE_REVENUE_USD)
  private String dailyProtocolSideRevenueUsd;

  public static final String SERIALIZED_NAME_CUMULATIVE_TOTAL_REVENUE_USD = "cumulative_total_revenue_usd";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_TOTAL_REVENUE_USD)
  private String cumulativeTotalRevenueUsd;

  public static final String SERIALIZED_NAME_DAILY_TOTAL_REVENUE_USD = "daily_total_revenue_usd";
  @SerializedName(SERIALIZED_NAME_DAILY_TOTAL_REVENUE_USD)
  private String dailyTotalRevenueUsd;

  public static final String SERIALIZED_NAME_DAILY_VOLUME_USD = "daily_volume_usd";
  @SerializedName(SERIALIZED_NAME_DAILY_VOLUME_USD)
  private String dailyVolumeUsd;

  public static final String SERIALIZED_NAME_DAILY_VOLUME_BY_TOKEN_AMOUNT = "daily_volume_by_token_amount";
  @SerializedName(SERIALIZED_NAME_DAILY_VOLUME_BY_TOKEN_AMOUNT)
  private List<String> dailyVolumeByTokenAmount;

  public static final String SERIALIZED_NAME_DAILY_VOLUME_BY_TOKEN_USD = "daily_volume_by_token_usd";
  @SerializedName(SERIALIZED_NAME_DAILY_VOLUME_BY_TOKEN_USD)
  private List<String> dailyVolumeByTokenUsd;

  public static final String SERIALIZED_NAME_CUMULATIVE_VOLUME_USD = "cumulative_volume_usd";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_VOLUME_USD)
  private String cumulativeVolumeUsd;

  public static final String SERIALIZED_NAME_INPUT_TOKEN_BALANCES = "input_token_balances";
  @SerializedName(SERIALIZED_NAME_INPUT_TOKEN_BALANCES)
  private List<String> inputTokenBalances;

  public static final String SERIALIZED_NAME_INPUT_TOKEN_WEIGHTS = "input_token_weights";
  @SerializedName(SERIALIZED_NAME_INPUT_TOKEN_WEIGHTS)
  private List<String> inputTokenWeights;

  public static final String SERIALIZED_NAME_OUTPUT_TOKEN_SUPPLY = "output_token_supply";
  @SerializedName(SERIALIZED_NAME_OUTPUT_TOKEN_SUPPLY)
  private String outputTokenSupply;

  public static final String SERIALIZED_NAME_OUTPUT_TOKEN_PRICE_USD = "output_token_price_usd";
  @SerializedName(SERIALIZED_NAME_OUTPUT_TOKEN_PRICE_USD)
  private String outputTokenPriceUsd;

  public static final String SERIALIZED_NAME_STAKED_OUTPUT_TOKEN_AMOUNT = "staked_output_token_amount";
  @SerializedName(SERIALIZED_NAME_STAKED_OUTPUT_TOKEN_AMOUNT)
  private String stakedOutputTokenAmount;

  public static final String SERIALIZED_NAME_REWARD_TOKEN_EMISSIONS_AMOUNT = "reward_token_emissions_amount";
  @SerializedName(SERIALIZED_NAME_REWARD_TOKEN_EMISSIONS_AMOUNT)
  private List<String> rewardTokenEmissionsAmount;

  public static final String SERIALIZED_NAME_REWARD_TOKEN_EMISSIONS_USD = "reward_token_emissions_usd";
  @SerializedName(SERIALIZED_NAME_REWARD_TOKEN_EMISSIONS_USD)
  private List<String> rewardTokenEmissionsUsd;

  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO() {
  }

  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO entryTime(OffsetDateTime entryTime) {
    
    this.entryTime = entryTime;
    return this;
  }

   /**
   * Get entryTime
   * @return entryTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEntryTime() {
    return entryTime;
  }


  public void setEntryTime(OffsetDateTime entryTime) {
    this.entryTime = entryTime;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO recvTime(OffsetDateTime recvTime) {
    
    this.recvTime = recvTime;
    return this;
  }

   /**
   * Get recvTime
   * @return recvTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getRecvTime() {
    return recvTime;
  }


  public void setRecvTime(OffsetDateTime recvTime) {
    this.recvTime = recvTime;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO blockNumber(Long blockNumber) {
    
    this.blockNumber = blockNumber;
    return this;
  }

   /**
   * Number of block in which entity was recorded.
   * @return blockNumber
  **/
  @javax.annotation.Nullable
  public Long getBlockNumber() {
    return blockNumber;
  }


  public void setBlockNumber(Long blockNumber) {
    this.blockNumber = blockNumber;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO blockRange(String blockRange) {
    
    this.blockRange = blockRange;
    return this;
  }

   /**
   * .
   * @return blockRange
  **/
  @javax.annotation.Nullable
  public String getBlockRange() {
    return blockRange;
  }


  public void setBlockRange(String blockRange) {
    this.blockRange = blockRange;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * (smart contract address of the pool)-(# of days since Unix epoch time)
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO protocol(String protocol) {
    
    this.protocol = protocol;
    return this;
  }

   /**
   * The protocol this snapshot belongs to
   * @return protocol
  **/
  @javax.annotation.Nullable
  public String getProtocol() {
    return protocol;
  }


  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO pool(String pool) {
    
    this.pool = pool;
    return this;
  }

   /**
   * The pool this snapshot belongs to
   * @return pool
  **/
  @javax.annotation.Nullable
  public String getPool() {
    return pool;
  }


  public void setPool(String pool) {
    this.pool = pool;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO timestamp(String timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Timestamp of this snapshot
   * @return timestamp
  **/
  @javax.annotation.Nullable
  public String getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO totalValueLockedUsd(String totalValueLockedUsd) {
    
    this.totalValueLockedUsd = totalValueLockedUsd;
    return this;
  }

   /**
   * Current TVL (Total Value Locked) of this pool
   * @return totalValueLockedUsd
  **/
  @javax.annotation.Nullable
  public String getTotalValueLockedUsd() {
    return totalValueLockedUsd;
  }


  public void setTotalValueLockedUsd(String totalValueLockedUsd) {
    this.totalValueLockedUsd = totalValueLockedUsd;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO cumulativeSupplySideRevenueUsd(String cumulativeSupplySideRevenueUsd) {
    
    this.cumulativeSupplySideRevenueUsd = cumulativeSupplySideRevenueUsd;
    return this;
  }

   /**
   * All revenue generated by the liquidity pool, accrued to the supply side.
   * @return cumulativeSupplySideRevenueUsd
  **/
  @javax.annotation.Nullable
  public String getCumulativeSupplySideRevenueUsd() {
    return cumulativeSupplySideRevenueUsd;
  }


  public void setCumulativeSupplySideRevenueUsd(String cumulativeSupplySideRevenueUsd) {
    this.cumulativeSupplySideRevenueUsd = cumulativeSupplySideRevenueUsd;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO dailySupplySideRevenueUsd(String dailySupplySideRevenueUsd) {
    
    this.dailySupplySideRevenueUsd = dailySupplySideRevenueUsd;
    return this;
  }

   /**
   * Daily revenue generated by the liquidity pool, accrued to the supply side.
   * @return dailySupplySideRevenueUsd
  **/
  @javax.annotation.Nullable
  public String getDailySupplySideRevenueUsd() {
    return dailySupplySideRevenueUsd;
  }


  public void setDailySupplySideRevenueUsd(String dailySupplySideRevenueUsd) {
    this.dailySupplySideRevenueUsd = dailySupplySideRevenueUsd;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO cumulativeProtocolSideRevenueUsd(String cumulativeProtocolSideRevenueUsd) {
    
    this.cumulativeProtocolSideRevenueUsd = cumulativeProtocolSideRevenueUsd;
    return this;
  }

   /**
   * All revenue generated by the liquidity pool, accrued to the protocol.
   * @return cumulativeProtocolSideRevenueUsd
  **/
  @javax.annotation.Nullable
  public String getCumulativeProtocolSideRevenueUsd() {
    return cumulativeProtocolSideRevenueUsd;
  }


  public void setCumulativeProtocolSideRevenueUsd(String cumulativeProtocolSideRevenueUsd) {
    this.cumulativeProtocolSideRevenueUsd = cumulativeProtocolSideRevenueUsd;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO dailyProtocolSideRevenueUsd(String dailyProtocolSideRevenueUsd) {
    
    this.dailyProtocolSideRevenueUsd = dailyProtocolSideRevenueUsd;
    return this;
  }

   /**
   * Daily revenue generated by the liquidity pool, accrued to the protocol.
   * @return dailyProtocolSideRevenueUsd
  **/
  @javax.annotation.Nullable
  public String getDailyProtocolSideRevenueUsd() {
    return dailyProtocolSideRevenueUsd;
  }


  public void setDailyProtocolSideRevenueUsd(String dailyProtocolSideRevenueUsd) {
    this.dailyProtocolSideRevenueUsd = dailyProtocolSideRevenueUsd;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO cumulativeTotalRevenueUsd(String cumulativeTotalRevenueUsd) {
    
    this.cumulativeTotalRevenueUsd = cumulativeTotalRevenueUsd;
    return this;
  }

   /**
   * All revenue generated by the liquidity pool.
   * @return cumulativeTotalRevenueUsd
  **/
  @javax.annotation.Nullable
  public String getCumulativeTotalRevenueUsd() {
    return cumulativeTotalRevenueUsd;
  }


  public void setCumulativeTotalRevenueUsd(String cumulativeTotalRevenueUsd) {
    this.cumulativeTotalRevenueUsd = cumulativeTotalRevenueUsd;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO dailyTotalRevenueUsd(String dailyTotalRevenueUsd) {
    
    this.dailyTotalRevenueUsd = dailyTotalRevenueUsd;
    return this;
  }

   /**
   * Daily revenue generated by the liquidity pool.
   * @return dailyTotalRevenueUsd
  **/
  @javax.annotation.Nullable
  public String getDailyTotalRevenueUsd() {
    return dailyTotalRevenueUsd;
  }


  public void setDailyTotalRevenueUsd(String dailyTotalRevenueUsd) {
    this.dailyTotalRevenueUsd = dailyTotalRevenueUsd;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO dailyVolumeUsd(String dailyVolumeUsd) {
    
    this.dailyVolumeUsd = dailyVolumeUsd;
    return this;
  }

   /**
   * All trade volume occurred in a given day, in USD.
   * @return dailyVolumeUsd
  **/
  @javax.annotation.Nullable
  public String getDailyVolumeUsd() {
    return dailyVolumeUsd;
  }


  public void setDailyVolumeUsd(String dailyVolumeUsd) {
    this.dailyVolumeUsd = dailyVolumeUsd;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO dailyVolumeByTokenAmount(List<String> dailyVolumeByTokenAmount) {
    
    this.dailyVolumeByTokenAmount = dailyVolumeByTokenAmount;
    return this;
  }

  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO addDailyVolumeByTokenAmountItem(String dailyVolumeByTokenAmountItem) {
    if (this.dailyVolumeByTokenAmount == null) {
      this.dailyVolumeByTokenAmount = new ArrayList<>();
    }
    this.dailyVolumeByTokenAmount.add(dailyVolumeByTokenAmountItem);
    return this;
  }

   /**
   * All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
   * @return dailyVolumeByTokenAmount
  **/
  @javax.annotation.Nullable
  public List<String> getDailyVolumeByTokenAmount() {
    return dailyVolumeByTokenAmount;
  }


  public void setDailyVolumeByTokenAmount(List<String> dailyVolumeByTokenAmount) {
    this.dailyVolumeByTokenAmount = dailyVolumeByTokenAmount;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO dailyVolumeByTokenUsd(List<String> dailyVolumeByTokenUsd) {
    
    this.dailyVolumeByTokenUsd = dailyVolumeByTokenUsd;
    return this;
  }

  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO addDailyVolumeByTokenUsdItem(String dailyVolumeByTokenUsdItem) {
    if (this.dailyVolumeByTokenUsd == null) {
      this.dailyVolumeByTokenUsd = new ArrayList<>();
    }
    this.dailyVolumeByTokenUsd.add(dailyVolumeByTokenUsdItem);
    return this;
  }

   /**
   * All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field..
   * @return dailyVolumeByTokenUsd
  **/
  @javax.annotation.Nullable
  public List<String> getDailyVolumeByTokenUsd() {
    return dailyVolumeByTokenUsd;
  }


  public void setDailyVolumeByTokenUsd(List<String> dailyVolumeByTokenUsd) {
    this.dailyVolumeByTokenUsd = dailyVolumeByTokenUsd;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO cumulativeVolumeUsd(String cumulativeVolumeUsd) {
    
    this.cumulativeVolumeUsd = cumulativeVolumeUsd;
    return this;
  }

   /**
   * All historical trade volume occurred in this pool, in USD.
   * @return cumulativeVolumeUsd
  **/
  @javax.annotation.Nullable
  public String getCumulativeVolumeUsd() {
    return cumulativeVolumeUsd;
  }


  public void setCumulativeVolumeUsd(String cumulativeVolumeUsd) {
    this.cumulativeVolumeUsd = cumulativeVolumeUsd;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO inputTokenBalances(List<String> inputTokenBalances) {
    
    this.inputTokenBalances = inputTokenBalances;
    return this;
  }

  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO addInputTokenBalancesItem(String inputTokenBalancesItem) {
    if (this.inputTokenBalances == null) {
      this.inputTokenBalances = new ArrayList<>();
    }
    this.inputTokenBalances.add(inputTokenBalancesItem);
    return this;
  }

   /**
   * Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
   * @return inputTokenBalances
  **/
  @javax.annotation.Nullable
  public List<String> getInputTokenBalances() {
    return inputTokenBalances;
  }


  public void setInputTokenBalances(List<String> inputTokenBalances) {
    this.inputTokenBalances = inputTokenBalances;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO inputTokenWeights(List<String> inputTokenWeights) {
    
    this.inputTokenWeights = inputTokenWeights;
    return this;
  }

  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO addInputTokenWeightsItem(String inputTokenWeightsItem) {
    if (this.inputTokenWeights == null) {
      this.inputTokenWeights = new ArrayList<>();
    }
    this.inputTokenWeights.add(inputTokenWeightsItem);
    return this;
  }

   /**
   * Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
   * @return inputTokenWeights
  **/
  @javax.annotation.Nullable
  public List<String> getInputTokenWeights() {
    return inputTokenWeights;
  }


  public void setInputTokenWeights(List<String> inputTokenWeights) {
    this.inputTokenWeights = inputTokenWeights;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO outputTokenSupply(String outputTokenSupply) {
    
    this.outputTokenSupply = outputTokenSupply;
    return this;
  }

   /**
   * Total supply of output token. Note that certain DEXes don&#39;t have an output token (e.g. Bancor).
   * @return outputTokenSupply
  **/
  @javax.annotation.Nullable
  public String getOutputTokenSupply() {
    return outputTokenSupply;
  }


  public void setOutputTokenSupply(String outputTokenSupply) {
    this.outputTokenSupply = outputTokenSupply;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO outputTokenPriceUsd(String outputTokenPriceUsd) {
    
    this.outputTokenPriceUsd = outputTokenPriceUsd;
    return this;
  }

   /**
   * Price per share of output token in USD.
   * @return outputTokenPriceUsd
  **/
  @javax.annotation.Nullable
  public String getOutputTokenPriceUsd() {
    return outputTokenPriceUsd;
  }


  public void setOutputTokenPriceUsd(String outputTokenPriceUsd) {
    this.outputTokenPriceUsd = outputTokenPriceUsd;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO stakedOutputTokenAmount(String stakedOutputTokenAmount) {
    
    this.stakedOutputTokenAmount = stakedOutputTokenAmount;
    return this;
  }

   /**
   * Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY..
   * @return stakedOutputTokenAmount
  **/
  @javax.annotation.Nullable
  public String getStakedOutputTokenAmount() {
    return stakedOutputTokenAmount;
  }


  public void setStakedOutputTokenAmount(String stakedOutputTokenAmount) {
    this.stakedOutputTokenAmount = stakedOutputTokenAmount;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO rewardTokenEmissionsAmount(List<String> rewardTokenEmissionsAmount) {
    
    this.rewardTokenEmissionsAmount = rewardTokenEmissionsAmount;
    return this;
  }

  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO addRewardTokenEmissionsAmountItem(String rewardTokenEmissionsAmountItem) {
    if (this.rewardTokenEmissionsAmount == null) {
      this.rewardTokenEmissionsAmount = new ArrayList<>();
    }
    this.rewardTokenEmissionsAmount.add(rewardTokenEmissionsAmountItem);
    return this;
  }

   /**
   * Per-block reward token emission as of the current block normalized to a day, in token&#39;s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
   * @return rewardTokenEmissionsAmount
  **/
  @javax.annotation.Nullable
  public List<String> getRewardTokenEmissionsAmount() {
    return rewardTokenEmissionsAmount;
  }


  public void setRewardTokenEmissionsAmount(List<String> rewardTokenEmissionsAmount) {
    this.rewardTokenEmissionsAmount = rewardTokenEmissionsAmount;
  }


  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO rewardTokenEmissionsUsd(List<String> rewardTokenEmissionsUsd) {
    
    this.rewardTokenEmissionsUsd = rewardTokenEmissionsUsd;
    return this;
  }

  public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO addRewardTokenEmissionsUsdItem(String rewardTokenEmissionsUsdItem) {
    if (this.rewardTokenEmissionsUsd == null) {
      this.rewardTokenEmissionsUsd = new ArrayList<>();
    }
    this.rewardTokenEmissionsUsd.add(rewardTokenEmissionsUsdItem);
    return this;
  }

   /**
   * Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
   * @return rewardTokenEmissionsUsd
  **/
  @javax.annotation.Nullable
  public List<String> getRewardTokenEmissionsUsd() {
    return rewardTokenEmissionsUsd;
  }


  public void setRewardTokenEmissionsUsd(List<String> rewardTokenEmissionsUsd) {
    this.rewardTokenEmissionsUsd = rewardTokenEmissionsUsd;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO = (UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO) o;
    return Objects.equals(this.entryTime, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.entryTime) &&
        Objects.equals(this.recvTime, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.recvTime) &&
        Objects.equals(this.blockNumber, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.blockNumber) &&
        Objects.equals(this.blockRange, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.blockRange) &&
        Objects.equals(this.id, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.id) &&
        Objects.equals(this.protocol, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.protocol) &&
        Objects.equals(this.pool, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.pool) &&
        Objects.equals(this.timestamp, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.timestamp) &&
        Objects.equals(this.totalValueLockedUsd, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.totalValueLockedUsd) &&
        Objects.equals(this.cumulativeSupplySideRevenueUsd, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.cumulativeSupplySideRevenueUsd) &&
        Objects.equals(this.dailySupplySideRevenueUsd, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.dailySupplySideRevenueUsd) &&
        Objects.equals(this.cumulativeProtocolSideRevenueUsd, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.cumulativeProtocolSideRevenueUsd) &&
        Objects.equals(this.dailyProtocolSideRevenueUsd, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.dailyProtocolSideRevenueUsd) &&
        Objects.equals(this.cumulativeTotalRevenueUsd, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.cumulativeTotalRevenueUsd) &&
        Objects.equals(this.dailyTotalRevenueUsd, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.dailyTotalRevenueUsd) &&
        Objects.equals(this.dailyVolumeUsd, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.dailyVolumeUsd) &&
        Objects.equals(this.dailyVolumeByTokenAmount, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.dailyVolumeByTokenAmount) &&
        Objects.equals(this.dailyVolumeByTokenUsd, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.dailyVolumeByTokenUsd) &&
        Objects.equals(this.cumulativeVolumeUsd, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.cumulativeVolumeUsd) &&
        Objects.equals(this.inputTokenBalances, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.inputTokenBalances) &&
        Objects.equals(this.inputTokenWeights, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.inputTokenWeights) &&
        Objects.equals(this.outputTokenSupply, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.outputTokenSupply) &&
        Objects.equals(this.outputTokenPriceUsd, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.outputTokenPriceUsd) &&
        Objects.equals(this.stakedOutputTokenAmount, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.stakedOutputTokenAmount) &&
        Objects.equals(this.rewardTokenEmissionsAmount, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.rewardTokenEmissionsAmount) &&
        Objects.equals(this.rewardTokenEmissionsUsd, unISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.rewardTokenEmissionsUsd);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(entryTime, recvTime, blockNumber, blockRange, id, protocol, pool, timestamp, totalValueLockedUsd, cumulativeSupplySideRevenueUsd, dailySupplySideRevenueUsd, cumulativeProtocolSideRevenueUsd, dailyProtocolSideRevenueUsd, cumulativeTotalRevenueUsd, dailyTotalRevenueUsd, dailyVolumeUsd, dailyVolumeByTokenAmount, dailyVolumeByTokenUsd, cumulativeVolumeUsd, inputTokenBalances, inputTokenWeights, outputTokenSupply, outputTokenPriceUsd, stakedOutputTokenAmount, rewardTokenEmissionsAmount, rewardTokenEmissionsUsd);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO {\n");
    sb.append("    entryTime: ").append(toIndentedString(entryTime)).append("\n");
    sb.append("    recvTime: ").append(toIndentedString(recvTime)).append("\n");
    sb.append("    blockNumber: ").append(toIndentedString(blockNumber)).append("\n");
    sb.append("    blockRange: ").append(toIndentedString(blockRange)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    pool: ").append(toIndentedString(pool)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    totalValueLockedUsd: ").append(toIndentedString(totalValueLockedUsd)).append("\n");
    sb.append("    cumulativeSupplySideRevenueUsd: ").append(toIndentedString(cumulativeSupplySideRevenueUsd)).append("\n");
    sb.append("    dailySupplySideRevenueUsd: ").append(toIndentedString(dailySupplySideRevenueUsd)).append("\n");
    sb.append("    cumulativeProtocolSideRevenueUsd: ").append(toIndentedString(cumulativeProtocolSideRevenueUsd)).append("\n");
    sb.append("    dailyProtocolSideRevenueUsd: ").append(toIndentedString(dailyProtocolSideRevenueUsd)).append("\n");
    sb.append("    cumulativeTotalRevenueUsd: ").append(toIndentedString(cumulativeTotalRevenueUsd)).append("\n");
    sb.append("    dailyTotalRevenueUsd: ").append(toIndentedString(dailyTotalRevenueUsd)).append("\n");
    sb.append("    dailyVolumeUsd: ").append(toIndentedString(dailyVolumeUsd)).append("\n");
    sb.append("    dailyVolumeByTokenAmount: ").append(toIndentedString(dailyVolumeByTokenAmount)).append("\n");
    sb.append("    dailyVolumeByTokenUsd: ").append(toIndentedString(dailyVolumeByTokenUsd)).append("\n");
    sb.append("    cumulativeVolumeUsd: ").append(toIndentedString(cumulativeVolumeUsd)).append("\n");
    sb.append("    inputTokenBalances: ").append(toIndentedString(inputTokenBalances)).append("\n");
    sb.append("    inputTokenWeights: ").append(toIndentedString(inputTokenWeights)).append("\n");
    sb.append("    outputTokenSupply: ").append(toIndentedString(outputTokenSupply)).append("\n");
    sb.append("    outputTokenPriceUsd: ").append(toIndentedString(outputTokenPriceUsd)).append("\n");
    sb.append("    stakedOutputTokenAmount: ").append(toIndentedString(stakedOutputTokenAmount)).append("\n");
    sb.append("    rewardTokenEmissionsAmount: ").append(toIndentedString(rewardTokenEmissionsAmount)).append("\n");
    sb.append("    rewardTokenEmissionsUsd: ").append(toIndentedString(rewardTokenEmissionsUsd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entry_time");
    openapiFields.add("recv_time");
    openapiFields.add("block_number");
    openapiFields.add("block_range");
    openapiFields.add("id");
    openapiFields.add("protocol");
    openapiFields.add("pool");
    openapiFields.add("timestamp");
    openapiFields.add("total_value_locked_usd");
    openapiFields.add("cumulative_supply_side_revenue_usd");
    openapiFields.add("daily_supply_side_revenue_usd");
    openapiFields.add("cumulative_protocol_side_revenue_usd");
    openapiFields.add("daily_protocol_side_revenue_usd");
    openapiFields.add("cumulative_total_revenue_usd");
    openapiFields.add("daily_total_revenue_usd");
    openapiFields.add("daily_volume_usd");
    openapiFields.add("daily_volume_by_token_amount");
    openapiFields.add("daily_volume_by_token_usd");
    openapiFields.add("cumulative_volume_usd");
    openapiFields.add("input_token_balances");
    openapiFields.add("input_token_weights");
    openapiFields.add("output_token_supply");
    openapiFields.add("output_token_price_usd");
    openapiFields.add("staked_output_token_amount");
    openapiFields.add("reward_token_emissions_amount");
    openapiFields.add("reward_token_emissions_usd");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO is not found in the empty JSON string", UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("block_range") != null && !jsonObj.get("block_range").isJsonNull()) && !jsonObj.get("block_range").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `block_range` to be a primitive type in the JSON string but got `%s`", jsonObj.get("block_range").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      if ((jsonObj.get("pool") != null && !jsonObj.get("pool").isJsonNull()) && !jsonObj.get("pool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pool").toString()));
      }
      if ((jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull()) && !jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
      if ((jsonObj.get("total_value_locked_usd") != null && !jsonObj.get("total_value_locked_usd").isJsonNull()) && !jsonObj.get("total_value_locked_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_value_locked_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_value_locked_usd").toString()));
      }
      if ((jsonObj.get("cumulative_supply_side_revenue_usd") != null && !jsonObj.get("cumulative_supply_side_revenue_usd").isJsonNull()) && !jsonObj.get("cumulative_supply_side_revenue_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cumulative_supply_side_revenue_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cumulative_supply_side_revenue_usd").toString()));
      }
      if ((jsonObj.get("daily_supply_side_revenue_usd") != null && !jsonObj.get("daily_supply_side_revenue_usd").isJsonNull()) && !jsonObj.get("daily_supply_side_revenue_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `daily_supply_side_revenue_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("daily_supply_side_revenue_usd").toString()));
      }
      if ((jsonObj.get("cumulative_protocol_side_revenue_usd") != null && !jsonObj.get("cumulative_protocol_side_revenue_usd").isJsonNull()) && !jsonObj.get("cumulative_protocol_side_revenue_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cumulative_protocol_side_revenue_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cumulative_protocol_side_revenue_usd").toString()));
      }
      if ((jsonObj.get("daily_protocol_side_revenue_usd") != null && !jsonObj.get("daily_protocol_side_revenue_usd").isJsonNull()) && !jsonObj.get("daily_protocol_side_revenue_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `daily_protocol_side_revenue_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("daily_protocol_side_revenue_usd").toString()));
      }
      if ((jsonObj.get("cumulative_total_revenue_usd") != null && !jsonObj.get("cumulative_total_revenue_usd").isJsonNull()) && !jsonObj.get("cumulative_total_revenue_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cumulative_total_revenue_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cumulative_total_revenue_usd").toString()));
      }
      if ((jsonObj.get("daily_total_revenue_usd") != null && !jsonObj.get("daily_total_revenue_usd").isJsonNull()) && !jsonObj.get("daily_total_revenue_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `daily_total_revenue_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("daily_total_revenue_usd").toString()));
      }
      if ((jsonObj.get("daily_volume_usd") != null && !jsonObj.get("daily_volume_usd").isJsonNull()) && !jsonObj.get("daily_volume_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `daily_volume_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("daily_volume_usd").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("daily_volume_by_token_amount") != null && !jsonObj.get("daily_volume_by_token_amount").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `daily_volume_by_token_amount` to be an array in the JSON string but got `%s`", jsonObj.get("daily_volume_by_token_amount").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("daily_volume_by_token_usd") != null && !jsonObj.get("daily_volume_by_token_usd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `daily_volume_by_token_usd` to be an array in the JSON string but got `%s`", jsonObj.get("daily_volume_by_token_usd").toString()));
      }
      if ((jsonObj.get("cumulative_volume_usd") != null && !jsonObj.get("cumulative_volume_usd").isJsonNull()) && !jsonObj.get("cumulative_volume_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cumulative_volume_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cumulative_volume_usd").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("input_token_balances") != null && !jsonObj.get("input_token_balances").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `input_token_balances` to be an array in the JSON string but got `%s`", jsonObj.get("input_token_balances").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("input_token_weights") != null && !jsonObj.get("input_token_weights").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `input_token_weights` to be an array in the JSON string but got `%s`", jsonObj.get("input_token_weights").toString()));
      }
      if ((jsonObj.get("output_token_supply") != null && !jsonObj.get("output_token_supply").isJsonNull()) && !jsonObj.get("output_token_supply").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `output_token_supply` to be a primitive type in the JSON string but got `%s`", jsonObj.get("output_token_supply").toString()));
      }
      if ((jsonObj.get("output_token_price_usd") != null && !jsonObj.get("output_token_price_usd").isJsonNull()) && !jsonObj.get("output_token_price_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `output_token_price_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("output_token_price_usd").toString()));
      }
      if ((jsonObj.get("staked_output_token_amount") != null && !jsonObj.get("staked_output_token_amount").isJsonNull()) && !jsonObj.get("staked_output_token_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `staked_output_token_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("staked_output_token_amount").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reward_token_emissions_amount") != null && !jsonObj.get("reward_token_emissions_amount").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reward_token_emissions_amount` to be an array in the JSON string but got `%s`", jsonObj.get("reward_token_emissions_amount").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reward_token_emissions_usd") != null && !jsonObj.get("reward_token_emissions_usd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reward_token_emissions_usd` to be an array in the JSON string but got `%s`", jsonObj.get("reward_token_emissions_usd").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO>() {
           @Override
           public void write(JsonWriter out, UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO
  * @throws IOException if the JSON string is invalid with respect to UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO
  */
  public static UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO.class);
  }

 /**
  * Convert an instance of UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

