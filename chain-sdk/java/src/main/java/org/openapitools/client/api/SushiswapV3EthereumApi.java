/*
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SUSHISWAPV3ETHEREUMLiquidityPoolDTO;
import org.openapitools.client.model.SUSHISWAPV3ETHEREUMSwapDTO;
import org.openapitools.client.model.SUSHISWAPV3ETHEREUMTokenDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SushiswapV3EthereumApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SushiswapV3EthereumApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SushiswapV3EthereumApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for sUSHISWAPV3ETHEREUMLiquidityPoolsCurrent
     * @param id Smart contract address of the pool. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sUSHISWAPV3ETHEREUMLiquidityPoolsCurrentCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/dapps/sushiswap-v3-ethereum/liquidityPools/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sUSHISWAPV3ETHEREUMLiquidityPoolsCurrentValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        return sUSHISWAPV3ETHEREUMLiquidityPoolsCurrentCall(id, _callback);

    }

    /**
     * LiquidityPools (current)
     * Gets liquidityPools.
     * @param id Smart contract address of the pool. (optional)
     * @return List&lt;SUSHISWAPV3ETHEREUMLiquidityPoolDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<SUSHISWAPV3ETHEREUMLiquidityPoolDTO> sUSHISWAPV3ETHEREUMLiquidityPoolsCurrent(String id) throws ApiException {
        ApiResponse<List<SUSHISWAPV3ETHEREUMLiquidityPoolDTO>> localVarResp = sUSHISWAPV3ETHEREUMLiquidityPoolsCurrentWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * LiquidityPools (current)
     * Gets liquidityPools.
     * @param id Smart contract address of the pool. (optional)
     * @return ApiResponse&lt;List&lt;SUSHISWAPV3ETHEREUMLiquidityPoolDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SUSHISWAPV3ETHEREUMLiquidityPoolDTO>> sUSHISWAPV3ETHEREUMLiquidityPoolsCurrentWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = sUSHISWAPV3ETHEREUMLiquidityPoolsCurrentValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<SUSHISWAPV3ETHEREUMLiquidityPoolDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * LiquidityPools (current) (asynchronously)
     * Gets liquidityPools.
     * @param id Smart contract address of the pool. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sUSHISWAPV3ETHEREUMLiquidityPoolsCurrentAsync(String id, final ApiCallback<List<SUSHISWAPV3ETHEREUMLiquidityPoolDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sUSHISWAPV3ETHEREUMLiquidityPoolsCurrentValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<SUSHISWAPV3ETHEREUMLiquidityPoolDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sUSHISWAPV3ETHEREUMSwapsCurrent
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sUSHISWAPV3ETHEREUMSwapsCurrentCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/dapps/sushiswap-v3-ethereum/swaps/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sUSHISWAPV3ETHEREUMSwapsCurrentValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return sUSHISWAPV3ETHEREUMSwapsCurrentCall(_callback);

    }

    /**
     * Swaps (current)
     * Gets swaps.
     * @return List&lt;SUSHISWAPV3ETHEREUMSwapDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<SUSHISWAPV3ETHEREUMSwapDTO> sUSHISWAPV3ETHEREUMSwapsCurrent() throws ApiException {
        ApiResponse<List<SUSHISWAPV3ETHEREUMSwapDTO>> localVarResp = sUSHISWAPV3ETHEREUMSwapsCurrentWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Swaps (current)
     * Gets swaps.
     * @return ApiResponse&lt;List&lt;SUSHISWAPV3ETHEREUMSwapDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SUSHISWAPV3ETHEREUMSwapDTO>> sUSHISWAPV3ETHEREUMSwapsCurrentWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = sUSHISWAPV3ETHEREUMSwapsCurrentValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<SUSHISWAPV3ETHEREUMSwapDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Swaps (current) (asynchronously)
     * Gets swaps.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sUSHISWAPV3ETHEREUMSwapsCurrentAsync(final ApiCallback<List<SUSHISWAPV3ETHEREUMSwapDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sUSHISWAPV3ETHEREUMSwapsCurrentValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<SUSHISWAPV3ETHEREUMSwapDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sUSHISWAPV3ETHEREUMTokensCurrent
     * @param id Smart contract address of the token. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sUSHISWAPV3ETHEREUMTokensCurrentCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/dapps/sushiswap-v3-ethereum/tokens/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sUSHISWAPV3ETHEREUMTokensCurrentValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        return sUSHISWAPV3ETHEREUMTokensCurrentCall(id, _callback);

    }

    /**
     * Tokens (current)
     * Gets tokens.
     * @param id Smart contract address of the token. (optional)
     * @return List&lt;SUSHISWAPV3ETHEREUMTokenDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<SUSHISWAPV3ETHEREUMTokenDTO> sUSHISWAPV3ETHEREUMTokensCurrent(String id) throws ApiException {
        ApiResponse<List<SUSHISWAPV3ETHEREUMTokenDTO>> localVarResp = sUSHISWAPV3ETHEREUMTokensCurrentWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Tokens (current)
     * Gets tokens.
     * @param id Smart contract address of the token. (optional)
     * @return ApiResponse&lt;List&lt;SUSHISWAPV3ETHEREUMTokenDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SUSHISWAPV3ETHEREUMTokenDTO>> sUSHISWAPV3ETHEREUMTokensCurrentWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = sUSHISWAPV3ETHEREUMTokensCurrentValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<SUSHISWAPV3ETHEREUMTokenDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tokens (current) (asynchronously)
     * Gets tokens.
     * @param id Smart contract address of the token. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sUSHISWAPV3ETHEREUMTokensCurrentAsync(String id, final ApiCallback<List<SUSHISWAPV3ETHEREUMTokenDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sUSHISWAPV3ETHEREUMTokensCurrentValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<SUSHISWAPV3ETHEREUMTokenDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
