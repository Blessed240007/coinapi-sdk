/*
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Pool-level metadata.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-23T15:20:45.865001Z[Etc/UTC]")
public class UNISWAPV3ETHEREUMLiquidityPoolDTO {
  public static final String SERIALIZED_NAME_ENTRY_TIME = "entry_time";
  @SerializedName(SERIALIZED_NAME_ENTRY_TIME)
  private OffsetDateTime entryTime;

  public static final String SERIALIZED_NAME_RECV_TIME = "recv_time";
  @SerializedName(SERIALIZED_NAME_RECV_TIME)
  private OffsetDateTime recvTime;

  public static final String SERIALIZED_NAME_BLOCK_NUMBER = "block_number";
  @SerializedName(SERIALIZED_NAME_BLOCK_NUMBER)
  private Long blockNumber;

  public static final String SERIALIZED_NAME_VID = "vid";
  @SerializedName(SERIALIZED_NAME_VID)
  private Long vid;

  public static final String SERIALIZED_NAME_BLOCK_RANGE = "block_range";
  @SerializedName(SERIALIZED_NAME_BLOCK_RANGE)
  private String blockRange;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private String protocol;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_LIQUIDITY_TOKEN = "liquidity_token";
  @SerializedName(SERIALIZED_NAME_LIQUIDITY_TOKEN)
  private String liquidityToken;

  public static final String SERIALIZED_NAME_INPUT_TOKENS = "input_tokens";
  @SerializedName(SERIALIZED_NAME_INPUT_TOKENS)
  private List<String> inputTokens;

  public static final String SERIALIZED_NAME_REWARD_TOKENS = "reward_tokens";
  @SerializedName(SERIALIZED_NAME_REWARD_TOKENS)
  private List<String> rewardTokens;

  public static final String SERIALIZED_NAME_FEES = "fees";
  @SerializedName(SERIALIZED_NAME_FEES)
  private List<String> fees;

  public static final String SERIALIZED_NAME_IS_SINGLE_SIDED = "is_single_sided";
  @SerializedName(SERIALIZED_NAME_IS_SINGLE_SIDED)
  private Boolean isSingleSided;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "created_timestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private String createdTimestamp;

  public static final String SERIALIZED_NAME_CREATED_BLOCK_NUMBER = "created_block_number";
  @SerializedName(SERIALIZED_NAME_CREATED_BLOCK_NUMBER)
  private String createdBlockNumber;

  public static final String SERIALIZED_NAME_TICK = "tick";
  @SerializedName(SERIALIZED_NAME_TICK)
  private String tick;

  public static final String SERIALIZED_NAME_TOTAL_VALUE_LOCKED_USD = "total_value_locked_usd";
  @SerializedName(SERIALIZED_NAME_TOTAL_VALUE_LOCKED_USD)
  private String totalValueLockedUsd;

  public static final String SERIALIZED_NAME_TOTAL_LIQUIDITY = "total_liquidity";
  @SerializedName(SERIALIZED_NAME_TOTAL_LIQUIDITY)
  private String totalLiquidity;

  public static final String SERIALIZED_NAME_TOTAL_LIQUIDITY_USD = "total_liquidity_usd";
  @SerializedName(SERIALIZED_NAME_TOTAL_LIQUIDITY_USD)
  private String totalLiquidityUsd;

  public static final String SERIALIZED_NAME_ACTIVE_LIQUIDITY = "active_liquidity";
  @SerializedName(SERIALIZED_NAME_ACTIVE_LIQUIDITY)
  private String activeLiquidity;

  public static final String SERIALIZED_NAME_ACTIVE_LIQUIDITY_USD = "active_liquidity_usd";
  @SerializedName(SERIALIZED_NAME_ACTIVE_LIQUIDITY_USD)
  private String activeLiquidityUsd;

  public static final String SERIALIZED_NAME_UNCOLLECTED_PROTOCOL_SIDE_TOKEN_AMOUNTS = "uncollected_protocol_side_token_amounts";
  @SerializedName(SERIALIZED_NAME_UNCOLLECTED_PROTOCOL_SIDE_TOKEN_AMOUNTS)
  private List<String> uncollectedProtocolSideTokenAmounts;

  public static final String SERIALIZED_NAME_UNCOLLECTED_PROTOCOL_SIDE_VALUES_USD = "uncollected_protocol_side_values_usd";
  @SerializedName(SERIALIZED_NAME_UNCOLLECTED_PROTOCOL_SIDE_VALUES_USD)
  private List<String> uncollectedProtocolSideValuesUsd;

  public static final String SERIALIZED_NAME_UNCOLLECTED_SUPPLY_SIDE_TOKEN_AMOUNTS = "uncollected_supply_side_token_amounts";
  @SerializedName(SERIALIZED_NAME_UNCOLLECTED_SUPPLY_SIDE_TOKEN_AMOUNTS)
  private List<String> uncollectedSupplySideTokenAmounts;

  public static final String SERIALIZED_NAME_UNCOLLECTED_SUPPLY_SIDE_VALUES_USD = "uncollected_supply_side_values_usd";
  @SerializedName(SERIALIZED_NAME_UNCOLLECTED_SUPPLY_SIDE_VALUES_USD)
  private List<String> uncollectedSupplySideValuesUsd;

  public static final String SERIALIZED_NAME_CUMULATIVE_SUPPLY_SIDE_REVENUE_USD = "cumulative_supply_side_revenue_usd";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_SUPPLY_SIDE_REVENUE_USD)
  private String cumulativeSupplySideRevenueUsd;

  public static final String SERIALIZED_NAME_CUMULATIVE_PROTOCOL_SIDE_REVENUE_USD = "cumulative_protocol_side_revenue_usd";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_PROTOCOL_SIDE_REVENUE_USD)
  private String cumulativeProtocolSideRevenueUsd;

  public static final String SERIALIZED_NAME_CUMULATIVE_TOTAL_REVENUE_USD = "cumulative_total_revenue_usd";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_TOTAL_REVENUE_USD)
  private String cumulativeTotalRevenueUsd;

  public static final String SERIALIZED_NAME_CUMULATIVE_VOLUME_BY_TOKEN_AMOUNT = "cumulative_volume_by_token_amount";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_VOLUME_BY_TOKEN_AMOUNT)
  private List<String> cumulativeVolumeByTokenAmount;

  public static final String SERIALIZED_NAME_CUMULATIVE_VOLUME_BY_TOKEN_USD = "cumulative_volume_by_token_usd";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_VOLUME_BY_TOKEN_USD)
  private List<String> cumulativeVolumeByTokenUsd;

  public static final String SERIALIZED_NAME_CUMULATIVE_VOLUME_USD = "cumulative_volume_usd";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_VOLUME_USD)
  private String cumulativeVolumeUsd;

  public static final String SERIALIZED_NAME_INPUT_TOKEN_BALANCES = "input_token_balances";
  @SerializedName(SERIALIZED_NAME_INPUT_TOKEN_BALANCES)
  private List<String> inputTokenBalances;

  public static final String SERIALIZED_NAME_INPUT_TOKEN_BALANCES_USD = "input_token_balances_usd";
  @SerializedName(SERIALIZED_NAME_INPUT_TOKEN_BALANCES_USD)
  private List<String> inputTokenBalancesUsd;

  public static final String SERIALIZED_NAME_INPUT_TOKEN_WEIGHTS = "input_token_weights";
  @SerializedName(SERIALIZED_NAME_INPUT_TOKEN_WEIGHTS)
  private List<String> inputTokenWeights;

  public static final String SERIALIZED_NAME_STAKED_OUTPUT_TOKEN_AMOUNT = "staked_output_token_amount";
  @SerializedName(SERIALIZED_NAME_STAKED_OUTPUT_TOKEN_AMOUNT)
  private String stakedOutputTokenAmount;

  public static final String SERIALIZED_NAME_REWARD_TOKEN_EMISSIONS_AMOUNT = "reward_token_emissions_amount";
  @SerializedName(SERIALIZED_NAME_REWARD_TOKEN_EMISSIONS_AMOUNT)
  private List<String> rewardTokenEmissionsAmount;

  public static final String SERIALIZED_NAME_REWARD_TOKEN_EMISSIONS_USD = "reward_token_emissions_usd";
  @SerializedName(SERIALIZED_NAME_REWARD_TOKEN_EMISSIONS_USD)
  private List<String> rewardTokenEmissionsUsd;

  public static final String SERIALIZED_NAME_CUMULATIVE_DEPOSIT_COUNT = "cumulative_deposit_count";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_DEPOSIT_COUNT)
  private Integer cumulativeDepositCount;

  public static final String SERIALIZED_NAME_CUMULATIVE_WITHDRAW_COUNT = "cumulative_withdraw_count";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_WITHDRAW_COUNT)
  private Integer cumulativeWithdrawCount;

  public static final String SERIALIZED_NAME_CUMULATIVE_SWAP_COUNT = "cumulative_swap_count";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_SWAP_COUNT)
  private Integer cumulativeSwapCount;

  public static final String SERIALIZED_NAME_POSITION_COUNT = "position_count";
  @SerializedName(SERIALIZED_NAME_POSITION_COUNT)
  private Integer positionCount;

  public static final String SERIALIZED_NAME_OPEN_POSITION_COUNT = "open_position_count";
  @SerializedName(SERIALIZED_NAME_OPEN_POSITION_COUNT)
  private Integer openPositionCount;

  public static final String SERIALIZED_NAME_CLOSED_POSITION_COUNT = "closed_position_count";
  @SerializedName(SERIALIZED_NAME_CLOSED_POSITION_COUNT)
  private Integer closedPositionCount;

  public static final String SERIALIZED_NAME_LAST_SNAPSHOT_DAY_ID = "last_snapshot_day_id";
  @SerializedName(SERIALIZED_NAME_LAST_SNAPSHOT_DAY_ID)
  private Integer lastSnapshotDayId;

  public static final String SERIALIZED_NAME_LAST_SNAPSHOT_HOUR_ID = "last_snapshot_hour_id";
  @SerializedName(SERIALIZED_NAME_LAST_SNAPSHOT_HOUR_ID)
  private Integer lastSnapshotHourId;

  public static final String SERIALIZED_NAME_LAST_UPDATE_TIMESTAMP = "last_update_timestamp";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_TIMESTAMP)
  private String lastUpdateTimestamp;

  public static final String SERIALIZED_NAME_LAST_UPDATE_BLOCK_NUMBER = "last_update_block_number";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_BLOCK_NUMBER)
  private String lastUpdateBlockNumber;

  public static final String SERIALIZED_NAME_EVALUATED_ASK = "evaluated_ask";
  @SerializedName(SERIALIZED_NAME_EVALUATED_ASK)
  private Double evaluatedAsk;

  public UNISWAPV3ETHEREUMLiquidityPoolDTO() {
  }

  
  public UNISWAPV3ETHEREUMLiquidityPoolDTO(
     Double evaluatedAsk
  ) {
    this();
    this.evaluatedAsk = evaluatedAsk;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDTO entryTime(OffsetDateTime entryTime) {
    
    this.entryTime = entryTime;
    return this;
  }

   /**
   * Get entryTime
   * @return entryTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEntryTime() {
    return entryTime;
  }


  public void setEntryTime(OffsetDateTime entryTime) {
    this.entryTime = entryTime;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO recvTime(OffsetDateTime recvTime) {
    
    this.recvTime = recvTime;
    return this;
  }

   /**
   * Get recvTime
   * @return recvTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getRecvTime() {
    return recvTime;
  }


  public void setRecvTime(OffsetDateTime recvTime) {
    this.recvTime = recvTime;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO blockNumber(Long blockNumber) {
    
    this.blockNumber = blockNumber;
    return this;
  }

   /**
   * Number of block in which entity was recorded.
   * @return blockNumber
  **/
  @javax.annotation.Nullable
  public Long getBlockNumber() {
    return blockNumber;
  }


  public void setBlockNumber(Long blockNumber) {
    this.blockNumber = blockNumber;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO vid(Long vid) {
    
    this.vid = vid;
    return this;
  }

   /**
   * .
   * @return vid
  **/
  @javax.annotation.Nullable
  public Long getVid() {
    return vid;
  }


  public void setVid(Long vid) {
    this.vid = vid;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO blockRange(String blockRange) {
    
    this.blockRange = blockRange;
    return this;
  }

   /**
   * Block range of the liquidity pool.
   * @return blockRange
  **/
  @javax.annotation.Nullable
  public String getBlockRange() {
    return blockRange;
  }


  public void setBlockRange(String blockRange) {
    this.blockRange = blockRange;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Smart contract address of the pool.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO protocol(String protocol) {
    
    this.protocol = protocol;
    return this;
  }

   /**
   * Protocol this pool belongs to.
   * @return protocol
  **/
  @javax.annotation.Nullable
  public String getProtocol() {
    return protocol;
  }


  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT).
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO symbol(String symbol) {
    
    this.symbol = symbol;
    return this;
  }

   /**
   * Symbol of liquidity pool (e.g. 3CRV).
   * @return symbol
  **/
  @javax.annotation.Nullable
  public String getSymbol() {
    return symbol;
  }


  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO liquidityToken(String liquidityToken) {
    
    this.liquidityToken = liquidityToken;
    return this;
  }

   /**
   * Token that is to represent ownership of liquidity.
   * @return liquidityToken
  **/
  @javax.annotation.Nullable
  public String getLiquidityToken() {
    return liquidityToken;
  }


  public void setLiquidityToken(String liquidityToken) {
    this.liquidityToken = liquidityToken;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO inputTokens(List<String> inputTokens) {
    
    this.inputTokens = inputTokens;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDTO addInputTokensItem(String inputTokensItem) {
    if (this.inputTokens == null) {
      this.inputTokens = new ArrayList<>();
    }
    this.inputTokens.add(inputTokensItem);
    return this;
  }

   /**
   * Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer.
   * @return inputTokens
  **/
  @javax.annotation.Nullable
  public List<String> getInputTokens() {
    return inputTokens;
  }


  public void setInputTokens(List<String> inputTokens) {
    this.inputTokens = inputTokens;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO rewardTokens(List<String> rewardTokens) {
    
    this.rewardTokens = rewardTokens;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDTO addRewardTokensItem(String rewardTokensItem) {
    if (this.rewardTokens == null) {
      this.rewardTokens = new ArrayList<>();
    }
    this.rewardTokens.add(rewardTokensItem);
    return this;
  }

   /**
   * Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon.
   * @return rewardTokens
  **/
  @javax.annotation.Nullable
  public List<String> getRewardTokens() {
    return rewardTokens;
  }


  public void setRewardTokens(List<String> rewardTokens) {
    this.rewardTokens = rewardTokens;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO fees(List<String> fees) {
    
    this.fees = fees;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDTO addFeesItem(String feesItem) {
    if (this.fees == null) {
      this.fees = new ArrayList<>();
    }
    this.fees.add(feesItem);
    return this;
  }

   /**
   * Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee.).
   * @return fees
  **/
  @javax.annotation.Nullable
  public List<String> getFees() {
    return fees;
  }


  public void setFees(List<String> fees) {
    this.fees = fees;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO isSingleSided(Boolean isSingleSided) {
    
    this.isSingleSided = isSingleSided;
    return this;
  }

   /**
   * Specifies whether this pool is single-sided (e.g. Bancor, Platypus&#39;s Alternative Pool). The specifics of the implementation depends on the protocol.
   * @return isSingleSided
  **/
  @javax.annotation.Nullable
  public Boolean getIsSingleSided() {
    return isSingleSided;
  }


  public void setIsSingleSided(Boolean isSingleSided) {
    this.isSingleSided = isSingleSided;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO createdTimestamp(String createdTimestamp) {
    
    this.createdTimestamp = createdTimestamp;
    return this;
  }

   /**
   * Timestamp when the liquidity pool was created.
   * @return createdTimestamp
  **/
  @javax.annotation.Nullable
  public String getCreatedTimestamp() {
    return createdTimestamp;
  }


  public void setCreatedTimestamp(String createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO createdBlockNumber(String createdBlockNumber) {
    
    this.createdBlockNumber = createdBlockNumber;
    return this;
  }

   /**
   * Block number when the liquidity pool was created.
   * @return createdBlockNumber
  **/
  @javax.annotation.Nullable
  public String getCreatedBlockNumber() {
    return createdBlockNumber;
  }


  public void setCreatedBlockNumber(String createdBlockNumber) {
    this.createdBlockNumber = createdBlockNumber;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO tick(String tick) {
    
    this.tick = tick;
    return this;
  }

   /**
   * Current tick representing the price of token0/token1.
   * @return tick
  **/
  @javax.annotation.Nullable
  public String getTick() {
    return tick;
  }


  public void setTick(String tick) {
    this.tick = tick;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO totalValueLockedUsd(String totalValueLockedUsd) {
    
    this.totalValueLockedUsd = totalValueLockedUsd;
    return this;
  }

   /**
   * Current TVL (Total Value Locked) of this pool in USD.
   * @return totalValueLockedUsd
  **/
  @javax.annotation.Nullable
  public String getTotalValueLockedUsd() {
    return totalValueLockedUsd;
  }


  public void setTotalValueLockedUsd(String totalValueLockedUsd) {
    this.totalValueLockedUsd = totalValueLockedUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO totalLiquidity(String totalLiquidity) {
    
    this.totalLiquidity = totalLiquidity;
    return this;
  }

   /**
   * Sum of all active and non-active liquidity for this pool.
   * @return totalLiquidity
  **/
  @javax.annotation.Nullable
  public String getTotalLiquidity() {
    return totalLiquidity;
  }


  public void setTotalLiquidity(String totalLiquidity) {
    this.totalLiquidity = totalLiquidity;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO totalLiquidityUsd(String totalLiquidityUsd) {
    
    this.totalLiquidityUsd = totalLiquidityUsd;
    return this;
  }

   /**
   * Sum of all active and non-active liquidity in USD for this pool.
   * @return totalLiquidityUsd
  **/
  @javax.annotation.Nullable
  public String getTotalLiquidityUsd() {
    return totalLiquidityUsd;
  }


  public void setTotalLiquidityUsd(String totalLiquidityUsd) {
    this.totalLiquidityUsd = totalLiquidityUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO activeLiquidity(String activeLiquidity) {
    
    this.activeLiquidity = activeLiquidity;
    return this;
  }

   /**
   * All liquidity &#x60;k&#x60; that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
   * @return activeLiquidity
  **/
  @javax.annotation.Nullable
  public String getActiveLiquidity() {
    return activeLiquidity;
  }


  public void setActiveLiquidity(String activeLiquidity) {
    this.activeLiquidity = activeLiquidity;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO activeLiquidityUsd(String activeLiquidityUsd) {
    
    this.activeLiquidityUsd = activeLiquidityUsd;
    return this;
  }

   /**
   * All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
   * @return activeLiquidityUsd
  **/
  @javax.annotation.Nullable
  public String getActiveLiquidityUsd() {
    return activeLiquidityUsd;
  }


  public void setActiveLiquidityUsd(String activeLiquidityUsd) {
    this.activeLiquidityUsd = activeLiquidityUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO uncollectedProtocolSideTokenAmounts(List<String> uncollectedProtocolSideTokenAmounts) {
    
    this.uncollectedProtocolSideTokenAmounts = uncollectedProtocolSideTokenAmounts;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDTO addUncollectedProtocolSideTokenAmountsItem(String uncollectedProtocolSideTokenAmountsItem) {
    if (this.uncollectedProtocolSideTokenAmounts == null) {
      this.uncollectedProtocolSideTokenAmounts = new ArrayList<>();
    }
    this.uncollectedProtocolSideTokenAmounts.add(uncollectedProtocolSideTokenAmountsItem);
    return this;
  }

   /**
   * All protocol-side value locked in token amounts that remains uncollected and unused in the pool.
   * @return uncollectedProtocolSideTokenAmounts
  **/
  @javax.annotation.Nullable
  public List<String> getUncollectedProtocolSideTokenAmounts() {
    return uncollectedProtocolSideTokenAmounts;
  }


  public void setUncollectedProtocolSideTokenAmounts(List<String> uncollectedProtocolSideTokenAmounts) {
    this.uncollectedProtocolSideTokenAmounts = uncollectedProtocolSideTokenAmounts;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO uncollectedProtocolSideValuesUsd(List<String> uncollectedProtocolSideValuesUsd) {
    
    this.uncollectedProtocolSideValuesUsd = uncollectedProtocolSideValuesUsd;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDTO addUncollectedProtocolSideValuesUsdItem(String uncollectedProtocolSideValuesUsdItem) {
    if (this.uncollectedProtocolSideValuesUsd == null) {
      this.uncollectedProtocolSideValuesUsd = new ArrayList<>();
    }
    this.uncollectedProtocolSideValuesUsd.add(uncollectedProtocolSideValuesUsdItem);
    return this;
  }

   /**
   * All protocol-side value locking in USD that remains uncollected and unused in the pool.
   * @return uncollectedProtocolSideValuesUsd
  **/
  @javax.annotation.Nullable
  public List<String> getUncollectedProtocolSideValuesUsd() {
    return uncollectedProtocolSideValuesUsd;
  }


  public void setUncollectedProtocolSideValuesUsd(List<String> uncollectedProtocolSideValuesUsd) {
    this.uncollectedProtocolSideValuesUsd = uncollectedProtocolSideValuesUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO uncollectedSupplySideTokenAmounts(List<String> uncollectedSupplySideTokenAmounts) {
    
    this.uncollectedSupplySideTokenAmounts = uncollectedSupplySideTokenAmounts;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDTO addUncollectedSupplySideTokenAmountsItem(String uncollectedSupplySideTokenAmountsItem) {
    if (this.uncollectedSupplySideTokenAmounts == null) {
      this.uncollectedSupplySideTokenAmounts = new ArrayList<>();
    }
    this.uncollectedSupplySideTokenAmounts.add(uncollectedSupplySideTokenAmountsItem);
    return this;
  }

   /**
   * All supply-side value locked in token amounts that remains uncollected and unused in the pool.
   * @return uncollectedSupplySideTokenAmounts
  **/
  @javax.annotation.Nullable
  public List<String> getUncollectedSupplySideTokenAmounts() {
    return uncollectedSupplySideTokenAmounts;
  }


  public void setUncollectedSupplySideTokenAmounts(List<String> uncollectedSupplySideTokenAmounts) {
    this.uncollectedSupplySideTokenAmounts = uncollectedSupplySideTokenAmounts;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO uncollectedSupplySideValuesUsd(List<String> uncollectedSupplySideValuesUsd) {
    
    this.uncollectedSupplySideValuesUsd = uncollectedSupplySideValuesUsd;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDTO addUncollectedSupplySideValuesUsdItem(String uncollectedSupplySideValuesUsdItem) {
    if (this.uncollectedSupplySideValuesUsd == null) {
      this.uncollectedSupplySideValuesUsd = new ArrayList<>();
    }
    this.uncollectedSupplySideValuesUsd.add(uncollectedSupplySideValuesUsdItem);
    return this;
  }

   /**
   * All supply-side value locked in USD that remains uncollected and unused in the pool.
   * @return uncollectedSupplySideValuesUsd
  **/
  @javax.annotation.Nullable
  public List<String> getUncollectedSupplySideValuesUsd() {
    return uncollectedSupplySideValuesUsd;
  }


  public void setUncollectedSupplySideValuesUsd(List<String> uncollectedSupplySideValuesUsd) {
    this.uncollectedSupplySideValuesUsd = uncollectedSupplySideValuesUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO cumulativeSupplySideRevenueUsd(String cumulativeSupplySideRevenueUsd) {
    
    this.cumulativeSupplySideRevenueUsd = cumulativeSupplySideRevenueUsd;
    return this;
  }

   /**
   * All revenue generated by the liquidity pool, accrued to the supply side.
   * @return cumulativeSupplySideRevenueUsd
  **/
  @javax.annotation.Nullable
  public String getCumulativeSupplySideRevenueUsd() {
    return cumulativeSupplySideRevenueUsd;
  }


  public void setCumulativeSupplySideRevenueUsd(String cumulativeSupplySideRevenueUsd) {
    this.cumulativeSupplySideRevenueUsd = cumulativeSupplySideRevenueUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO cumulativeProtocolSideRevenueUsd(String cumulativeProtocolSideRevenueUsd) {
    
    this.cumulativeProtocolSideRevenueUsd = cumulativeProtocolSideRevenueUsd;
    return this;
  }

   /**
   * All revenue generated by the liquidity pool, accrued to the protocol.
   * @return cumulativeProtocolSideRevenueUsd
  **/
  @javax.annotation.Nullable
  public String getCumulativeProtocolSideRevenueUsd() {
    return cumulativeProtocolSideRevenueUsd;
  }


  public void setCumulativeProtocolSideRevenueUsd(String cumulativeProtocolSideRevenueUsd) {
    this.cumulativeProtocolSideRevenueUsd = cumulativeProtocolSideRevenueUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO cumulativeTotalRevenueUsd(String cumulativeTotalRevenueUsd) {
    
    this.cumulativeTotalRevenueUsd = cumulativeTotalRevenueUsd;
    return this;
  }

   /**
   *  All revenue generated by the liquidity pool.
   * @return cumulativeTotalRevenueUsd
  **/
  @javax.annotation.Nullable
  public String getCumulativeTotalRevenueUsd() {
    return cumulativeTotalRevenueUsd;
  }


  public void setCumulativeTotalRevenueUsd(String cumulativeTotalRevenueUsd) {
    this.cumulativeTotalRevenueUsd = cumulativeTotalRevenueUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO cumulativeVolumeByTokenAmount(List<String> cumulativeVolumeByTokenAmount) {
    
    this.cumulativeVolumeByTokenAmount = cumulativeVolumeByTokenAmount;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDTO addCumulativeVolumeByTokenAmountItem(String cumulativeVolumeByTokenAmountItem) {
    if (this.cumulativeVolumeByTokenAmount == null) {
      this.cumulativeVolumeByTokenAmount = new ArrayList<>();
    }
    this.cumulativeVolumeByTokenAmount.add(cumulativeVolumeByTokenAmountItem);
    return this;
  }

   /**
   * All trade volume occurred for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
   * @return cumulativeVolumeByTokenAmount
  **/
  @javax.annotation.Nullable
  public List<String> getCumulativeVolumeByTokenAmount() {
    return cumulativeVolumeByTokenAmount;
  }


  public void setCumulativeVolumeByTokenAmount(List<String> cumulativeVolumeByTokenAmount) {
    this.cumulativeVolumeByTokenAmount = cumulativeVolumeByTokenAmount;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO cumulativeVolumeByTokenUsd(List<String> cumulativeVolumeByTokenUsd) {
    
    this.cumulativeVolumeByTokenUsd = cumulativeVolumeByTokenUsd;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDTO addCumulativeVolumeByTokenUsdItem(String cumulativeVolumeByTokenUsdItem) {
    if (this.cumulativeVolumeByTokenUsd == null) {
      this.cumulativeVolumeByTokenUsd = new ArrayList<>();
    }
    this.cumulativeVolumeByTokenUsd.add(cumulativeVolumeByTokenUsdItem);
    return this;
  }

   /**
   * All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
   * @return cumulativeVolumeByTokenUsd
  **/
  @javax.annotation.Nullable
  public List<String> getCumulativeVolumeByTokenUsd() {
    return cumulativeVolumeByTokenUsd;
  }


  public void setCumulativeVolumeByTokenUsd(List<String> cumulativeVolumeByTokenUsd) {
    this.cumulativeVolumeByTokenUsd = cumulativeVolumeByTokenUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO cumulativeVolumeUsd(String cumulativeVolumeUsd) {
    
    this.cumulativeVolumeUsd = cumulativeVolumeUsd;
    return this;
  }

   /**
   * All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
   * @return cumulativeVolumeUsd
  **/
  @javax.annotation.Nullable
  public String getCumulativeVolumeUsd() {
    return cumulativeVolumeUsd;
  }


  public void setCumulativeVolumeUsd(String cumulativeVolumeUsd) {
    this.cumulativeVolumeUsd = cumulativeVolumeUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO inputTokenBalances(List<String> inputTokenBalances) {
    
    this.inputTokenBalances = inputTokenBalances;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDTO addInputTokenBalancesItem(String inputTokenBalancesItem) {
    if (this.inputTokenBalances == null) {
      this.inputTokenBalances = new ArrayList<>();
    }
    this.inputTokenBalances.add(inputTokenBalancesItem);
    return this;
  }

   /**
   * Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
   * @return inputTokenBalances
  **/
  @javax.annotation.Nullable
  public List<String> getInputTokenBalances() {
    return inputTokenBalances;
  }


  public void setInputTokenBalances(List<String> inputTokenBalances) {
    this.inputTokenBalances = inputTokenBalances;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO inputTokenBalancesUsd(List<String> inputTokenBalancesUsd) {
    
    this.inputTokenBalancesUsd = inputTokenBalancesUsd;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDTO addInputTokenBalancesUsdItem(String inputTokenBalancesUsdItem) {
    if (this.inputTokenBalancesUsd == null) {
      this.inputTokenBalancesUsd = new ArrayList<>();
    }
    this.inputTokenBalancesUsd.add(inputTokenBalancesUsdItem);
    return this;
  }

   /**
   * Amount of input tokens in USD in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
   * @return inputTokenBalancesUsd
  **/
  @javax.annotation.Nullable
  public List<String> getInputTokenBalancesUsd() {
    return inputTokenBalancesUsd;
  }


  public void setInputTokenBalancesUsd(List<String> inputTokenBalancesUsd) {
    this.inputTokenBalancesUsd = inputTokenBalancesUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO inputTokenWeights(List<String> inputTokenWeights) {
    
    this.inputTokenWeights = inputTokenWeights;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDTO addInputTokenWeightsItem(String inputTokenWeightsItem) {
    if (this.inputTokenWeights == null) {
      this.inputTokenWeights = new ArrayList<>();
    }
    this.inputTokenWeights.add(inputTokenWeightsItem);
    return this;
  }

   /**
   * Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
   * @return inputTokenWeights
  **/
  @javax.annotation.Nullable
  public List<String> getInputTokenWeights() {
    return inputTokenWeights;
  }


  public void setInputTokenWeights(List<String> inputTokenWeights) {
    this.inputTokenWeights = inputTokenWeights;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO stakedOutputTokenAmount(String stakedOutputTokenAmount) {
    
    this.stakedOutputTokenAmount = stakedOutputTokenAmount;
    return this;
  }

   /**
   * Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
   * @return stakedOutputTokenAmount
  **/
  @javax.annotation.Nullable
  public String getStakedOutputTokenAmount() {
    return stakedOutputTokenAmount;
  }


  public void setStakedOutputTokenAmount(String stakedOutputTokenAmount) {
    this.stakedOutputTokenAmount = stakedOutputTokenAmount;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO rewardTokenEmissionsAmount(List<String> rewardTokenEmissionsAmount) {
    
    this.rewardTokenEmissionsAmount = rewardTokenEmissionsAmount;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDTO addRewardTokenEmissionsAmountItem(String rewardTokenEmissionsAmountItem) {
    if (this.rewardTokenEmissionsAmount == null) {
      this.rewardTokenEmissionsAmount = new ArrayList<>();
    }
    this.rewardTokenEmissionsAmount.add(rewardTokenEmissionsAmountItem);
    return this;
  }

   /**
   * Per-block reward token emission as of the current block normalized to a day, in token&#39;s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
   * @return rewardTokenEmissionsAmount
  **/
  @javax.annotation.Nullable
  public List<String> getRewardTokenEmissionsAmount() {
    return rewardTokenEmissionsAmount;
  }


  public void setRewardTokenEmissionsAmount(List<String> rewardTokenEmissionsAmount) {
    this.rewardTokenEmissionsAmount = rewardTokenEmissionsAmount;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO rewardTokenEmissionsUsd(List<String> rewardTokenEmissionsUsd) {
    
    this.rewardTokenEmissionsUsd = rewardTokenEmissionsUsd;
    return this;
  }

  public UNISWAPV3ETHEREUMLiquidityPoolDTO addRewardTokenEmissionsUsdItem(String rewardTokenEmissionsUsdItem) {
    if (this.rewardTokenEmissionsUsd == null) {
      this.rewardTokenEmissionsUsd = new ArrayList<>();
    }
    this.rewardTokenEmissionsUsd.add(rewardTokenEmissionsUsdItem);
    return this;
  }

   /**
   * Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
   * @return rewardTokenEmissionsUsd
  **/
  @javax.annotation.Nullable
  public List<String> getRewardTokenEmissionsUsd() {
    return rewardTokenEmissionsUsd;
  }


  public void setRewardTokenEmissionsUsd(List<String> rewardTokenEmissionsUsd) {
    this.rewardTokenEmissionsUsd = rewardTokenEmissionsUsd;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO cumulativeDepositCount(Integer cumulativeDepositCount) {
    
    this.cumulativeDepositCount = cumulativeDepositCount;
    return this;
  }

   /**
   * Total number of deposits (add liquidity).
   * @return cumulativeDepositCount
  **/
  @javax.annotation.Nullable
  public Integer getCumulativeDepositCount() {
    return cumulativeDepositCount;
  }


  public void setCumulativeDepositCount(Integer cumulativeDepositCount) {
    this.cumulativeDepositCount = cumulativeDepositCount;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO cumulativeWithdrawCount(Integer cumulativeWithdrawCount) {
    
    this.cumulativeWithdrawCount = cumulativeWithdrawCount;
    return this;
  }

   /**
   * Total number of withdrawals (remove liquidity).
   * @return cumulativeWithdrawCount
  **/
  @javax.annotation.Nullable
  public Integer getCumulativeWithdrawCount() {
    return cumulativeWithdrawCount;
  }


  public void setCumulativeWithdrawCount(Integer cumulativeWithdrawCount) {
    this.cumulativeWithdrawCount = cumulativeWithdrawCount;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO cumulativeSwapCount(Integer cumulativeSwapCount) {
    
    this.cumulativeSwapCount = cumulativeSwapCount;
    return this;
  }

   /**
   * Total number of trades (swaps).
   * @return cumulativeSwapCount
  **/
  @javax.annotation.Nullable
  public Integer getCumulativeSwapCount() {
    return cumulativeSwapCount;
  }


  public void setCumulativeSwapCount(Integer cumulativeSwapCount) {
    this.cumulativeSwapCount = cumulativeSwapCount;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO positionCount(Integer positionCount) {
    
    this.positionCount = positionCount;
    return this;
  }

   /**
   * Number of positions in this market.
   * @return positionCount
  **/
  @javax.annotation.Nullable
  public Integer getPositionCount() {
    return positionCount;
  }


  public void setPositionCount(Integer positionCount) {
    this.positionCount = positionCount;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO openPositionCount(Integer openPositionCount) {
    
    this.openPositionCount = openPositionCount;
    return this;
  }

   /**
   * Number of open positions in this market.
   * @return openPositionCount
  **/
  @javax.annotation.Nullable
  public Integer getOpenPositionCount() {
    return openPositionCount;
  }


  public void setOpenPositionCount(Integer openPositionCount) {
    this.openPositionCount = openPositionCount;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO closedPositionCount(Integer closedPositionCount) {
    
    this.closedPositionCount = closedPositionCount;
    return this;
  }

   /**
   * Number of closed positions in this market.
   * @return closedPositionCount
  **/
  @javax.annotation.Nullable
  public Integer getClosedPositionCount() {
    return closedPositionCount;
  }


  public void setClosedPositionCount(Integer closedPositionCount) {
    this.closedPositionCount = closedPositionCount;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO lastSnapshotDayId(Integer lastSnapshotDayId) {
    
    this.lastSnapshotDayId = lastSnapshotDayId;
    return this;
  }

   /**
   * Day ID of the most recent daily snapshot.
   * @return lastSnapshotDayId
  **/
  @javax.annotation.Nullable
  public Integer getLastSnapshotDayId() {
    return lastSnapshotDayId;
  }


  public void setLastSnapshotDayId(Integer lastSnapshotDayId) {
    this.lastSnapshotDayId = lastSnapshotDayId;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO lastSnapshotHourId(Integer lastSnapshotHourId) {
    
    this.lastSnapshotHourId = lastSnapshotHourId;
    return this;
  }

   /**
   * Hour ID of the most recent hourly snapshot.
   * @return lastSnapshotHourId
  **/
  @javax.annotation.Nullable
  public Integer getLastSnapshotHourId() {
    return lastSnapshotHourId;
  }


  public void setLastSnapshotHourId(Integer lastSnapshotHourId) {
    this.lastSnapshotHourId = lastSnapshotHourId;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO lastUpdateTimestamp(String lastUpdateTimestamp) {
    
    this.lastUpdateTimestamp = lastUpdateTimestamp;
    return this;
  }

   /**
   * Timestamp of the last time this entity was updated.
   * @return lastUpdateTimestamp
  **/
  @javax.annotation.Nullable
  public String getLastUpdateTimestamp() {
    return lastUpdateTimestamp;
  }


  public void setLastUpdateTimestamp(String lastUpdateTimestamp) {
    this.lastUpdateTimestamp = lastUpdateTimestamp;
  }


  public UNISWAPV3ETHEREUMLiquidityPoolDTO lastUpdateBlockNumber(String lastUpdateBlockNumber) {
    
    this.lastUpdateBlockNumber = lastUpdateBlockNumber;
    return this;
  }

   /**
   * Block number of the last time this entity was updated.
   * @return lastUpdateBlockNumber
  **/
  @javax.annotation.Nullable
  public String getLastUpdateBlockNumber() {
    return lastUpdateBlockNumber;
  }


  public void setLastUpdateBlockNumber(String lastUpdateBlockNumber) {
    this.lastUpdateBlockNumber = lastUpdateBlockNumber;
  }


   /**
   * 
   * @return evaluatedAsk
  **/
  @javax.annotation.Nullable
  public Double getEvaluatedAsk() {
    return evaluatedAsk;
  }





  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UNISWAPV3ETHEREUMLiquidityPoolDTO unISWAPV3ETHEREUMLiquidityPoolDTO = (UNISWAPV3ETHEREUMLiquidityPoolDTO) o;
    return Objects.equals(this.entryTime, unISWAPV3ETHEREUMLiquidityPoolDTO.entryTime) &&
        Objects.equals(this.recvTime, unISWAPV3ETHEREUMLiquidityPoolDTO.recvTime) &&
        Objects.equals(this.blockNumber, unISWAPV3ETHEREUMLiquidityPoolDTO.blockNumber) &&
        Objects.equals(this.vid, unISWAPV3ETHEREUMLiquidityPoolDTO.vid) &&
        Objects.equals(this.blockRange, unISWAPV3ETHEREUMLiquidityPoolDTO.blockRange) &&
        Objects.equals(this.id, unISWAPV3ETHEREUMLiquidityPoolDTO.id) &&
        Objects.equals(this.protocol, unISWAPV3ETHEREUMLiquidityPoolDTO.protocol) &&
        Objects.equals(this.name, unISWAPV3ETHEREUMLiquidityPoolDTO.name) &&
        Objects.equals(this.symbol, unISWAPV3ETHEREUMLiquidityPoolDTO.symbol) &&
        Objects.equals(this.liquidityToken, unISWAPV3ETHEREUMLiquidityPoolDTO.liquidityToken) &&
        Objects.equals(this.inputTokens, unISWAPV3ETHEREUMLiquidityPoolDTO.inputTokens) &&
        Objects.equals(this.rewardTokens, unISWAPV3ETHEREUMLiquidityPoolDTO.rewardTokens) &&
        Objects.equals(this.fees, unISWAPV3ETHEREUMLiquidityPoolDTO.fees) &&
        Objects.equals(this.isSingleSided, unISWAPV3ETHEREUMLiquidityPoolDTO.isSingleSided) &&
        Objects.equals(this.createdTimestamp, unISWAPV3ETHEREUMLiquidityPoolDTO.createdTimestamp) &&
        Objects.equals(this.createdBlockNumber, unISWAPV3ETHEREUMLiquidityPoolDTO.createdBlockNumber) &&
        Objects.equals(this.tick, unISWAPV3ETHEREUMLiquidityPoolDTO.tick) &&
        Objects.equals(this.totalValueLockedUsd, unISWAPV3ETHEREUMLiquidityPoolDTO.totalValueLockedUsd) &&
        Objects.equals(this.totalLiquidity, unISWAPV3ETHEREUMLiquidityPoolDTO.totalLiquidity) &&
        Objects.equals(this.totalLiquidityUsd, unISWAPV3ETHEREUMLiquidityPoolDTO.totalLiquidityUsd) &&
        Objects.equals(this.activeLiquidity, unISWAPV3ETHEREUMLiquidityPoolDTO.activeLiquidity) &&
        Objects.equals(this.activeLiquidityUsd, unISWAPV3ETHEREUMLiquidityPoolDTO.activeLiquidityUsd) &&
        Objects.equals(this.uncollectedProtocolSideTokenAmounts, unISWAPV3ETHEREUMLiquidityPoolDTO.uncollectedProtocolSideTokenAmounts) &&
        Objects.equals(this.uncollectedProtocolSideValuesUsd, unISWAPV3ETHEREUMLiquidityPoolDTO.uncollectedProtocolSideValuesUsd) &&
        Objects.equals(this.uncollectedSupplySideTokenAmounts, unISWAPV3ETHEREUMLiquidityPoolDTO.uncollectedSupplySideTokenAmounts) &&
        Objects.equals(this.uncollectedSupplySideValuesUsd, unISWAPV3ETHEREUMLiquidityPoolDTO.uncollectedSupplySideValuesUsd) &&
        Objects.equals(this.cumulativeSupplySideRevenueUsd, unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeSupplySideRevenueUsd) &&
        Objects.equals(this.cumulativeProtocolSideRevenueUsd, unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeProtocolSideRevenueUsd) &&
        Objects.equals(this.cumulativeTotalRevenueUsd, unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeTotalRevenueUsd) &&
        Objects.equals(this.cumulativeVolumeByTokenAmount, unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeVolumeByTokenAmount) &&
        Objects.equals(this.cumulativeVolumeByTokenUsd, unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeVolumeByTokenUsd) &&
        Objects.equals(this.cumulativeVolumeUsd, unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeVolumeUsd) &&
        Objects.equals(this.inputTokenBalances, unISWAPV3ETHEREUMLiquidityPoolDTO.inputTokenBalances) &&
        Objects.equals(this.inputTokenBalancesUsd, unISWAPV3ETHEREUMLiquidityPoolDTO.inputTokenBalancesUsd) &&
        Objects.equals(this.inputTokenWeights, unISWAPV3ETHEREUMLiquidityPoolDTO.inputTokenWeights) &&
        Objects.equals(this.stakedOutputTokenAmount, unISWAPV3ETHEREUMLiquidityPoolDTO.stakedOutputTokenAmount) &&
        Objects.equals(this.rewardTokenEmissionsAmount, unISWAPV3ETHEREUMLiquidityPoolDTO.rewardTokenEmissionsAmount) &&
        Objects.equals(this.rewardTokenEmissionsUsd, unISWAPV3ETHEREUMLiquidityPoolDTO.rewardTokenEmissionsUsd) &&
        Objects.equals(this.cumulativeDepositCount, unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeDepositCount) &&
        Objects.equals(this.cumulativeWithdrawCount, unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeWithdrawCount) &&
        Objects.equals(this.cumulativeSwapCount, unISWAPV3ETHEREUMLiquidityPoolDTO.cumulativeSwapCount) &&
        Objects.equals(this.positionCount, unISWAPV3ETHEREUMLiquidityPoolDTO.positionCount) &&
        Objects.equals(this.openPositionCount, unISWAPV3ETHEREUMLiquidityPoolDTO.openPositionCount) &&
        Objects.equals(this.closedPositionCount, unISWAPV3ETHEREUMLiquidityPoolDTO.closedPositionCount) &&
        Objects.equals(this.lastSnapshotDayId, unISWAPV3ETHEREUMLiquidityPoolDTO.lastSnapshotDayId) &&
        Objects.equals(this.lastSnapshotHourId, unISWAPV3ETHEREUMLiquidityPoolDTO.lastSnapshotHourId) &&
        Objects.equals(this.lastUpdateTimestamp, unISWAPV3ETHEREUMLiquidityPoolDTO.lastUpdateTimestamp) &&
        Objects.equals(this.lastUpdateBlockNumber, unISWAPV3ETHEREUMLiquidityPoolDTO.lastUpdateBlockNumber) &&
        Objects.equals(this.evaluatedAsk, unISWAPV3ETHEREUMLiquidityPoolDTO.evaluatedAsk);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(entryTime, recvTime, blockNumber, vid, blockRange, id, protocol, name, symbol, liquidityToken, inputTokens, rewardTokens, fees, isSingleSided, createdTimestamp, createdBlockNumber, tick, totalValueLockedUsd, totalLiquidity, totalLiquidityUsd, activeLiquidity, activeLiquidityUsd, uncollectedProtocolSideTokenAmounts, uncollectedProtocolSideValuesUsd, uncollectedSupplySideTokenAmounts, uncollectedSupplySideValuesUsd, cumulativeSupplySideRevenueUsd, cumulativeProtocolSideRevenueUsd, cumulativeTotalRevenueUsd, cumulativeVolumeByTokenAmount, cumulativeVolumeByTokenUsd, cumulativeVolumeUsd, inputTokenBalances, inputTokenBalancesUsd, inputTokenWeights, stakedOutputTokenAmount, rewardTokenEmissionsAmount, rewardTokenEmissionsUsd, cumulativeDepositCount, cumulativeWithdrawCount, cumulativeSwapCount, positionCount, openPositionCount, closedPositionCount, lastSnapshotDayId, lastSnapshotHourId, lastUpdateTimestamp, lastUpdateBlockNumber, evaluatedAsk);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UNISWAPV3ETHEREUMLiquidityPoolDTO {\n");
    sb.append("    entryTime: ").append(toIndentedString(entryTime)).append("\n");
    sb.append("    recvTime: ").append(toIndentedString(recvTime)).append("\n");
    sb.append("    blockNumber: ").append(toIndentedString(blockNumber)).append("\n");
    sb.append("    vid: ").append(toIndentedString(vid)).append("\n");
    sb.append("    blockRange: ").append(toIndentedString(blockRange)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    liquidityToken: ").append(toIndentedString(liquidityToken)).append("\n");
    sb.append("    inputTokens: ").append(toIndentedString(inputTokens)).append("\n");
    sb.append("    rewardTokens: ").append(toIndentedString(rewardTokens)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    isSingleSided: ").append(toIndentedString(isSingleSided)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    createdBlockNumber: ").append(toIndentedString(createdBlockNumber)).append("\n");
    sb.append("    tick: ").append(toIndentedString(tick)).append("\n");
    sb.append("    totalValueLockedUsd: ").append(toIndentedString(totalValueLockedUsd)).append("\n");
    sb.append("    totalLiquidity: ").append(toIndentedString(totalLiquidity)).append("\n");
    sb.append("    totalLiquidityUsd: ").append(toIndentedString(totalLiquidityUsd)).append("\n");
    sb.append("    activeLiquidity: ").append(toIndentedString(activeLiquidity)).append("\n");
    sb.append("    activeLiquidityUsd: ").append(toIndentedString(activeLiquidityUsd)).append("\n");
    sb.append("    uncollectedProtocolSideTokenAmounts: ").append(toIndentedString(uncollectedProtocolSideTokenAmounts)).append("\n");
    sb.append("    uncollectedProtocolSideValuesUsd: ").append(toIndentedString(uncollectedProtocolSideValuesUsd)).append("\n");
    sb.append("    uncollectedSupplySideTokenAmounts: ").append(toIndentedString(uncollectedSupplySideTokenAmounts)).append("\n");
    sb.append("    uncollectedSupplySideValuesUsd: ").append(toIndentedString(uncollectedSupplySideValuesUsd)).append("\n");
    sb.append("    cumulativeSupplySideRevenueUsd: ").append(toIndentedString(cumulativeSupplySideRevenueUsd)).append("\n");
    sb.append("    cumulativeProtocolSideRevenueUsd: ").append(toIndentedString(cumulativeProtocolSideRevenueUsd)).append("\n");
    sb.append("    cumulativeTotalRevenueUsd: ").append(toIndentedString(cumulativeTotalRevenueUsd)).append("\n");
    sb.append("    cumulativeVolumeByTokenAmount: ").append(toIndentedString(cumulativeVolumeByTokenAmount)).append("\n");
    sb.append("    cumulativeVolumeByTokenUsd: ").append(toIndentedString(cumulativeVolumeByTokenUsd)).append("\n");
    sb.append("    cumulativeVolumeUsd: ").append(toIndentedString(cumulativeVolumeUsd)).append("\n");
    sb.append("    inputTokenBalances: ").append(toIndentedString(inputTokenBalances)).append("\n");
    sb.append("    inputTokenBalancesUsd: ").append(toIndentedString(inputTokenBalancesUsd)).append("\n");
    sb.append("    inputTokenWeights: ").append(toIndentedString(inputTokenWeights)).append("\n");
    sb.append("    stakedOutputTokenAmount: ").append(toIndentedString(stakedOutputTokenAmount)).append("\n");
    sb.append("    rewardTokenEmissionsAmount: ").append(toIndentedString(rewardTokenEmissionsAmount)).append("\n");
    sb.append("    rewardTokenEmissionsUsd: ").append(toIndentedString(rewardTokenEmissionsUsd)).append("\n");
    sb.append("    cumulativeDepositCount: ").append(toIndentedString(cumulativeDepositCount)).append("\n");
    sb.append("    cumulativeWithdrawCount: ").append(toIndentedString(cumulativeWithdrawCount)).append("\n");
    sb.append("    cumulativeSwapCount: ").append(toIndentedString(cumulativeSwapCount)).append("\n");
    sb.append("    positionCount: ").append(toIndentedString(positionCount)).append("\n");
    sb.append("    openPositionCount: ").append(toIndentedString(openPositionCount)).append("\n");
    sb.append("    closedPositionCount: ").append(toIndentedString(closedPositionCount)).append("\n");
    sb.append("    lastSnapshotDayId: ").append(toIndentedString(lastSnapshotDayId)).append("\n");
    sb.append("    lastSnapshotHourId: ").append(toIndentedString(lastSnapshotHourId)).append("\n");
    sb.append("    lastUpdateTimestamp: ").append(toIndentedString(lastUpdateTimestamp)).append("\n");
    sb.append("    lastUpdateBlockNumber: ").append(toIndentedString(lastUpdateBlockNumber)).append("\n");
    sb.append("    evaluatedAsk: ").append(toIndentedString(evaluatedAsk)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entry_time");
    openapiFields.add("recv_time");
    openapiFields.add("block_number");
    openapiFields.add("vid");
    openapiFields.add("block_range");
    openapiFields.add("id");
    openapiFields.add("protocol");
    openapiFields.add("name");
    openapiFields.add("symbol");
    openapiFields.add("liquidity_token");
    openapiFields.add("input_tokens");
    openapiFields.add("reward_tokens");
    openapiFields.add("fees");
    openapiFields.add("is_single_sided");
    openapiFields.add("created_timestamp");
    openapiFields.add("created_block_number");
    openapiFields.add("tick");
    openapiFields.add("total_value_locked_usd");
    openapiFields.add("total_liquidity");
    openapiFields.add("total_liquidity_usd");
    openapiFields.add("active_liquidity");
    openapiFields.add("active_liquidity_usd");
    openapiFields.add("uncollected_protocol_side_token_amounts");
    openapiFields.add("uncollected_protocol_side_values_usd");
    openapiFields.add("uncollected_supply_side_token_amounts");
    openapiFields.add("uncollected_supply_side_values_usd");
    openapiFields.add("cumulative_supply_side_revenue_usd");
    openapiFields.add("cumulative_protocol_side_revenue_usd");
    openapiFields.add("cumulative_total_revenue_usd");
    openapiFields.add("cumulative_volume_by_token_amount");
    openapiFields.add("cumulative_volume_by_token_usd");
    openapiFields.add("cumulative_volume_usd");
    openapiFields.add("input_token_balances");
    openapiFields.add("input_token_balances_usd");
    openapiFields.add("input_token_weights");
    openapiFields.add("staked_output_token_amount");
    openapiFields.add("reward_token_emissions_amount");
    openapiFields.add("reward_token_emissions_usd");
    openapiFields.add("cumulative_deposit_count");
    openapiFields.add("cumulative_withdraw_count");
    openapiFields.add("cumulative_swap_count");
    openapiFields.add("position_count");
    openapiFields.add("open_position_count");
    openapiFields.add("closed_position_count");
    openapiFields.add("last_snapshot_day_id");
    openapiFields.add("last_snapshot_hour_id");
    openapiFields.add("last_update_timestamp");
    openapiFields.add("last_update_block_number");
    openapiFields.add("evaluated_ask");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UNISWAPV3ETHEREUMLiquidityPoolDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UNISWAPV3ETHEREUMLiquidityPoolDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UNISWAPV3ETHEREUMLiquidityPoolDTO is not found in the empty JSON string", UNISWAPV3ETHEREUMLiquidityPoolDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UNISWAPV3ETHEREUMLiquidityPoolDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UNISWAPV3ETHEREUMLiquidityPoolDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("block_range") != null && !jsonObj.get("block_range").isJsonNull()) && !jsonObj.get("block_range").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `block_range` to be a primitive type in the JSON string but got `%s`", jsonObj.get("block_range").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if ((jsonObj.get("liquidity_token") != null && !jsonObj.get("liquidity_token").isJsonNull()) && !jsonObj.get("liquidity_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `liquidity_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("liquidity_token").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("input_tokens") != null && !jsonObj.get("input_tokens").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `input_tokens` to be an array in the JSON string but got `%s`", jsonObj.get("input_tokens").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reward_tokens") != null && !jsonObj.get("reward_tokens").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reward_tokens` to be an array in the JSON string but got `%s`", jsonObj.get("reward_tokens").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fees") != null && !jsonObj.get("fees").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fees` to be an array in the JSON string but got `%s`", jsonObj.get("fees").toString()));
      }
      if ((jsonObj.get("created_timestamp") != null && !jsonObj.get("created_timestamp").isJsonNull()) && !jsonObj.get("created_timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_timestamp").toString()));
      }
      if ((jsonObj.get("created_block_number") != null && !jsonObj.get("created_block_number").isJsonNull()) && !jsonObj.get("created_block_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_block_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_block_number").toString()));
      }
      if ((jsonObj.get("tick") != null && !jsonObj.get("tick").isJsonNull()) && !jsonObj.get("tick").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tick` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tick").toString()));
      }
      if ((jsonObj.get("total_value_locked_usd") != null && !jsonObj.get("total_value_locked_usd").isJsonNull()) && !jsonObj.get("total_value_locked_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_value_locked_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_value_locked_usd").toString()));
      }
      if ((jsonObj.get("total_liquidity") != null && !jsonObj.get("total_liquidity").isJsonNull()) && !jsonObj.get("total_liquidity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_liquidity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_liquidity").toString()));
      }
      if ((jsonObj.get("total_liquidity_usd") != null && !jsonObj.get("total_liquidity_usd").isJsonNull()) && !jsonObj.get("total_liquidity_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_liquidity_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_liquidity_usd").toString()));
      }
      if ((jsonObj.get("active_liquidity") != null && !jsonObj.get("active_liquidity").isJsonNull()) && !jsonObj.get("active_liquidity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `active_liquidity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("active_liquidity").toString()));
      }
      if ((jsonObj.get("active_liquidity_usd") != null && !jsonObj.get("active_liquidity_usd").isJsonNull()) && !jsonObj.get("active_liquidity_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `active_liquidity_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("active_liquidity_usd").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("uncollected_protocol_side_token_amounts") != null && !jsonObj.get("uncollected_protocol_side_token_amounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `uncollected_protocol_side_token_amounts` to be an array in the JSON string but got `%s`", jsonObj.get("uncollected_protocol_side_token_amounts").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("uncollected_protocol_side_values_usd") != null && !jsonObj.get("uncollected_protocol_side_values_usd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `uncollected_protocol_side_values_usd` to be an array in the JSON string but got `%s`", jsonObj.get("uncollected_protocol_side_values_usd").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("uncollected_supply_side_token_amounts") != null && !jsonObj.get("uncollected_supply_side_token_amounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `uncollected_supply_side_token_amounts` to be an array in the JSON string but got `%s`", jsonObj.get("uncollected_supply_side_token_amounts").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("uncollected_supply_side_values_usd") != null && !jsonObj.get("uncollected_supply_side_values_usd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `uncollected_supply_side_values_usd` to be an array in the JSON string but got `%s`", jsonObj.get("uncollected_supply_side_values_usd").toString()));
      }
      if ((jsonObj.get("cumulative_supply_side_revenue_usd") != null && !jsonObj.get("cumulative_supply_side_revenue_usd").isJsonNull()) && !jsonObj.get("cumulative_supply_side_revenue_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cumulative_supply_side_revenue_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cumulative_supply_side_revenue_usd").toString()));
      }
      if ((jsonObj.get("cumulative_protocol_side_revenue_usd") != null && !jsonObj.get("cumulative_protocol_side_revenue_usd").isJsonNull()) && !jsonObj.get("cumulative_protocol_side_revenue_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cumulative_protocol_side_revenue_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cumulative_protocol_side_revenue_usd").toString()));
      }
      if ((jsonObj.get("cumulative_total_revenue_usd") != null && !jsonObj.get("cumulative_total_revenue_usd").isJsonNull()) && !jsonObj.get("cumulative_total_revenue_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cumulative_total_revenue_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cumulative_total_revenue_usd").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cumulative_volume_by_token_amount") != null && !jsonObj.get("cumulative_volume_by_token_amount").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cumulative_volume_by_token_amount` to be an array in the JSON string but got `%s`", jsonObj.get("cumulative_volume_by_token_amount").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cumulative_volume_by_token_usd") != null && !jsonObj.get("cumulative_volume_by_token_usd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cumulative_volume_by_token_usd` to be an array in the JSON string but got `%s`", jsonObj.get("cumulative_volume_by_token_usd").toString()));
      }
      if ((jsonObj.get("cumulative_volume_usd") != null && !jsonObj.get("cumulative_volume_usd").isJsonNull()) && !jsonObj.get("cumulative_volume_usd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cumulative_volume_usd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cumulative_volume_usd").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("input_token_balances") != null && !jsonObj.get("input_token_balances").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `input_token_balances` to be an array in the JSON string but got `%s`", jsonObj.get("input_token_balances").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("input_token_balances_usd") != null && !jsonObj.get("input_token_balances_usd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `input_token_balances_usd` to be an array in the JSON string but got `%s`", jsonObj.get("input_token_balances_usd").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("input_token_weights") != null && !jsonObj.get("input_token_weights").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `input_token_weights` to be an array in the JSON string but got `%s`", jsonObj.get("input_token_weights").toString()));
      }
      if ((jsonObj.get("staked_output_token_amount") != null && !jsonObj.get("staked_output_token_amount").isJsonNull()) && !jsonObj.get("staked_output_token_amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `staked_output_token_amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("staked_output_token_amount").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reward_token_emissions_amount") != null && !jsonObj.get("reward_token_emissions_amount").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reward_token_emissions_amount` to be an array in the JSON string but got `%s`", jsonObj.get("reward_token_emissions_amount").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reward_token_emissions_usd") != null && !jsonObj.get("reward_token_emissions_usd").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reward_token_emissions_usd` to be an array in the JSON string but got `%s`", jsonObj.get("reward_token_emissions_usd").toString()));
      }
      if ((jsonObj.get("last_update_timestamp") != null && !jsonObj.get("last_update_timestamp").isJsonNull()) && !jsonObj.get("last_update_timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_update_timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_update_timestamp").toString()));
      }
      if ((jsonObj.get("last_update_block_number") != null && !jsonObj.get("last_update_block_number").isJsonNull()) && !jsonObj.get("last_update_block_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_update_block_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_update_block_number").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UNISWAPV3ETHEREUMLiquidityPoolDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UNISWAPV3ETHEREUMLiquidityPoolDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UNISWAPV3ETHEREUMLiquidityPoolDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UNISWAPV3ETHEREUMLiquidityPoolDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<UNISWAPV3ETHEREUMLiquidityPoolDTO>() {
           @Override
           public void write(JsonWriter out, UNISWAPV3ETHEREUMLiquidityPoolDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UNISWAPV3ETHEREUMLiquidityPoolDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UNISWAPV3ETHEREUMLiquidityPoolDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UNISWAPV3ETHEREUMLiquidityPoolDTO
  * @throws IOException if the JSON string is invalid with respect to UNISWAPV3ETHEREUMLiquidityPoolDTO
  */
  public static UNISWAPV3ETHEREUMLiquidityPoolDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UNISWAPV3ETHEREUMLiquidityPoolDTO.class);
  }

 /**
  * Convert an instance of UNISWAPV3ETHEREUMLiquidityPoolDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

