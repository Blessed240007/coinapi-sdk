/*
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CRYPTOPUNKSBidDTO;
import org.openapitools.client.model.CRYPTOPUNKSCollectionDTO;
import org.openapitools.client.model.CRYPTOPUNKSCollectionDailySnapshotDTO;
import org.openapitools.client.model.CRYPTOPUNKSDataSourcesDTO;
import org.openapitools.client.model.CRYPTOPUNKSItemDTO;
import org.openapitools.client.model.CRYPTOPUNKSMarketPlaceDTO;
import org.openapitools.client.model.CRYPTOPUNKSMarketplaceDailySnapshotDTO;
import org.openapitools.client.model.CRYPTOPUNKSTradeDTO;
import org.openapitools.client.model.CRYPTOPUNKSUserDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CryptopunksEthereumApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CryptopunksEthereumApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CryptopunksEthereumApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cRYPTOPUNKSETHEREUMBidsCurrent
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cRYPTOPUNKSETHEREUMBidsCurrentCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/dapps/cryptopunks-ethereum/bids/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cRYPTOPUNKSETHEREUMBidsCurrentValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return cRYPTOPUNKSETHEREUMBidsCurrentCall(_callback);

    }

    /**
     * Bids (current)
     * Gets bids.
     * @return List&lt;CRYPTOPUNKSBidDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<CRYPTOPUNKSBidDTO> cRYPTOPUNKSETHEREUMBidsCurrent() throws ApiException {
        ApiResponse<List<CRYPTOPUNKSBidDTO>> localVarResp = cRYPTOPUNKSETHEREUMBidsCurrentWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Bids (current)
     * Gets bids.
     * @return ApiResponse&lt;List&lt;CRYPTOPUNKSBidDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CRYPTOPUNKSBidDTO>> cRYPTOPUNKSETHEREUMBidsCurrentWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = cRYPTOPUNKSETHEREUMBidsCurrentValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<CRYPTOPUNKSBidDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bids (current) (asynchronously)
     * Gets bids.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cRYPTOPUNKSETHEREUMBidsCurrentAsync(final ApiCallback<List<CRYPTOPUNKSBidDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = cRYPTOPUNKSETHEREUMBidsCurrentValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<CRYPTOPUNKSBidDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrent
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/dapps/cryptopunks-ethereum/collectionDailySnapshots/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return cRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentCall(_callback);

    }

    /**
     * CollectionDailySnapshots (current)
     * Gets collectionDailySnapshots.
     * @return List&lt;CRYPTOPUNKSCollectionDailySnapshotDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<CRYPTOPUNKSCollectionDailySnapshotDTO> cRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrent() throws ApiException {
        ApiResponse<List<CRYPTOPUNKSCollectionDailySnapshotDTO>> localVarResp = cRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * CollectionDailySnapshots (current)
     * Gets collectionDailySnapshots.
     * @return ApiResponse&lt;List&lt;CRYPTOPUNKSCollectionDailySnapshotDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CRYPTOPUNKSCollectionDailySnapshotDTO>> cRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = cRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<CRYPTOPUNKSCollectionDailySnapshotDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CollectionDailySnapshots (current) (asynchronously)
     * Gets collectionDailySnapshots.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentAsync(final ApiCallback<List<CRYPTOPUNKSCollectionDailySnapshotDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = cRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<CRYPTOPUNKSCollectionDailySnapshotDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cRYPTOPUNKSETHEREUMCollectionsCurrent
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cRYPTOPUNKSETHEREUMCollectionsCurrentCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/dapps/cryptopunks-ethereum/collections/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cRYPTOPUNKSETHEREUMCollectionsCurrentValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return cRYPTOPUNKSETHEREUMCollectionsCurrentCall(_callback);

    }

    /**
     * Collections (current)
     * Gets collections.
     * @return List&lt;CRYPTOPUNKSCollectionDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<CRYPTOPUNKSCollectionDTO> cRYPTOPUNKSETHEREUMCollectionsCurrent() throws ApiException {
        ApiResponse<List<CRYPTOPUNKSCollectionDTO>> localVarResp = cRYPTOPUNKSETHEREUMCollectionsCurrentWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Collections (current)
     * Gets collections.
     * @return ApiResponse&lt;List&lt;CRYPTOPUNKSCollectionDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CRYPTOPUNKSCollectionDTO>> cRYPTOPUNKSETHEREUMCollectionsCurrentWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = cRYPTOPUNKSETHEREUMCollectionsCurrentValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<CRYPTOPUNKSCollectionDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Collections (current) (asynchronously)
     * Gets collections.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cRYPTOPUNKSETHEREUMCollectionsCurrentAsync(final ApiCallback<List<CRYPTOPUNKSCollectionDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = cRYPTOPUNKSETHEREUMCollectionsCurrentValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<CRYPTOPUNKSCollectionDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cRYPTOPUNKSETHEREUMDataSourcesCurrent
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cRYPTOPUNKSETHEREUMDataSourcesCurrentCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/dapps/cryptopunks-ethereum/dataSources/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cRYPTOPUNKSETHEREUMDataSourcesCurrentValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return cRYPTOPUNKSETHEREUMDataSourcesCurrentCall(_callback);

    }

    /**
     * DataSources (current)
     * Gets dataSources.
     * @return List&lt;CRYPTOPUNKSDataSourcesDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<CRYPTOPUNKSDataSourcesDTO> cRYPTOPUNKSETHEREUMDataSourcesCurrent() throws ApiException {
        ApiResponse<List<CRYPTOPUNKSDataSourcesDTO>> localVarResp = cRYPTOPUNKSETHEREUMDataSourcesCurrentWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * DataSources (current)
     * Gets dataSources.
     * @return ApiResponse&lt;List&lt;CRYPTOPUNKSDataSourcesDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CRYPTOPUNKSDataSourcesDTO>> cRYPTOPUNKSETHEREUMDataSourcesCurrentWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = cRYPTOPUNKSETHEREUMDataSourcesCurrentValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<CRYPTOPUNKSDataSourcesDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DataSources (current) (asynchronously)
     * Gets dataSources.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cRYPTOPUNKSETHEREUMDataSourcesCurrentAsync(final ApiCallback<List<CRYPTOPUNKSDataSourcesDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = cRYPTOPUNKSETHEREUMDataSourcesCurrentValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<CRYPTOPUNKSDataSourcesDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cRYPTOPUNKSETHEREUMItemsCurrent
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cRYPTOPUNKSETHEREUMItemsCurrentCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/dapps/cryptopunks-ethereum/items/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cRYPTOPUNKSETHEREUMItemsCurrentValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return cRYPTOPUNKSETHEREUMItemsCurrentCall(_callback);

    }

    /**
     * Items (current)
     * Gets items.
     * @return List&lt;CRYPTOPUNKSItemDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<CRYPTOPUNKSItemDTO> cRYPTOPUNKSETHEREUMItemsCurrent() throws ApiException {
        ApiResponse<List<CRYPTOPUNKSItemDTO>> localVarResp = cRYPTOPUNKSETHEREUMItemsCurrentWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Items (current)
     * Gets items.
     * @return ApiResponse&lt;List&lt;CRYPTOPUNKSItemDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CRYPTOPUNKSItemDTO>> cRYPTOPUNKSETHEREUMItemsCurrentWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = cRYPTOPUNKSETHEREUMItemsCurrentValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<CRYPTOPUNKSItemDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Items (current) (asynchronously)
     * Gets items.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cRYPTOPUNKSETHEREUMItemsCurrentAsync(final ApiCallback<List<CRYPTOPUNKSItemDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = cRYPTOPUNKSETHEREUMItemsCurrentValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<CRYPTOPUNKSItemDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cRYPTOPUNKSETHEREUMMarketPlacesCurrent
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cRYPTOPUNKSETHEREUMMarketPlacesCurrentCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/dapps/cryptopunks-ethereum/marketPlaces/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cRYPTOPUNKSETHEREUMMarketPlacesCurrentValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return cRYPTOPUNKSETHEREUMMarketPlacesCurrentCall(_callback);

    }

    /**
     * MarketPlaces (current)
     * Gets marketPlaces.
     * @return List&lt;CRYPTOPUNKSMarketPlaceDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<CRYPTOPUNKSMarketPlaceDTO> cRYPTOPUNKSETHEREUMMarketPlacesCurrent() throws ApiException {
        ApiResponse<List<CRYPTOPUNKSMarketPlaceDTO>> localVarResp = cRYPTOPUNKSETHEREUMMarketPlacesCurrentWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * MarketPlaces (current)
     * Gets marketPlaces.
     * @return ApiResponse&lt;List&lt;CRYPTOPUNKSMarketPlaceDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CRYPTOPUNKSMarketPlaceDTO>> cRYPTOPUNKSETHEREUMMarketPlacesCurrentWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = cRYPTOPUNKSETHEREUMMarketPlacesCurrentValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<CRYPTOPUNKSMarketPlaceDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * MarketPlaces (current) (asynchronously)
     * Gets marketPlaces.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cRYPTOPUNKSETHEREUMMarketPlacesCurrentAsync(final ApiCallback<List<CRYPTOPUNKSMarketPlaceDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = cRYPTOPUNKSETHEREUMMarketPlacesCurrentValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<CRYPTOPUNKSMarketPlaceDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrent
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/dapps/cryptopunks-ethereum/marketplaceDailySnapshots/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return cRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentCall(_callback);

    }

    /**
     * MarketplaceDailySnapshots (current)
     * Gets marketplaceDailySnapshots.
     * @return List&lt;CRYPTOPUNKSMarketplaceDailySnapshotDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<CRYPTOPUNKSMarketplaceDailySnapshotDTO> cRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrent() throws ApiException {
        ApiResponse<List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>> localVarResp = cRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * MarketplaceDailySnapshots (current)
     * Gets marketplaceDailySnapshots.
     * @return ApiResponse&lt;List&lt;CRYPTOPUNKSMarketplaceDailySnapshotDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>> cRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = cRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * MarketplaceDailySnapshots (current) (asynchronously)
     * Gets marketplaceDailySnapshots.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentAsync(final ApiCallback<List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = cRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cRYPTOPUNKSETHEREUMTradesCurrent
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cRYPTOPUNKSETHEREUMTradesCurrentCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/dapps/cryptopunks-ethereum/trades/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cRYPTOPUNKSETHEREUMTradesCurrentValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return cRYPTOPUNKSETHEREUMTradesCurrentCall(_callback);

    }

    /**
     * Trades (current)
     * Gets trades.
     * @return List&lt;CRYPTOPUNKSTradeDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<CRYPTOPUNKSTradeDTO> cRYPTOPUNKSETHEREUMTradesCurrent() throws ApiException {
        ApiResponse<List<CRYPTOPUNKSTradeDTO>> localVarResp = cRYPTOPUNKSETHEREUMTradesCurrentWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Trades (current)
     * Gets trades.
     * @return ApiResponse&lt;List&lt;CRYPTOPUNKSTradeDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CRYPTOPUNKSTradeDTO>> cRYPTOPUNKSETHEREUMTradesCurrentWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = cRYPTOPUNKSETHEREUMTradesCurrentValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<CRYPTOPUNKSTradeDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trades (current) (asynchronously)
     * Gets trades.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cRYPTOPUNKSETHEREUMTradesCurrentAsync(final ApiCallback<List<CRYPTOPUNKSTradeDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = cRYPTOPUNKSETHEREUMTradesCurrentValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<CRYPTOPUNKSTradeDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cRYPTOPUNKSETHEREUMUsersCurrent
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cRYPTOPUNKSETHEREUMUsersCurrentCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/dapps/cryptopunks-ethereum/users/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json",
            "application/x-msgpack"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cRYPTOPUNKSETHEREUMUsersCurrentValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return cRYPTOPUNKSETHEREUMUsersCurrentCall(_callback);

    }

    /**
     * Users (current)
     * Gets users.
     * @return List&lt;CRYPTOPUNKSUserDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<CRYPTOPUNKSUserDTO> cRYPTOPUNKSETHEREUMUsersCurrent() throws ApiException {
        ApiResponse<List<CRYPTOPUNKSUserDTO>> localVarResp = cRYPTOPUNKSETHEREUMUsersCurrentWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Users (current)
     * Gets users.
     * @return ApiResponse&lt;List&lt;CRYPTOPUNKSUserDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CRYPTOPUNKSUserDTO>> cRYPTOPUNKSETHEREUMUsersCurrentWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = cRYPTOPUNKSETHEREUMUsersCurrentValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<CRYPTOPUNKSUserDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Users (current) (asynchronously)
     * Gets users.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cRYPTOPUNKSETHEREUMUsersCurrentAsync(final ApiCallback<List<CRYPTOPUNKSUserDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = cRYPTOPUNKSETHEREUMUsersCurrentValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<CRYPTOPUNKSUserDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
