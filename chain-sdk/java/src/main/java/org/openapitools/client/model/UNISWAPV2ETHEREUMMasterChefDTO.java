/*
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Smart contract that is used to manage the liquidity mining program on Uniswap V2.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-24T12:57:58.978232Z[Etc/UTC]")
public class UNISWAPV2ETHEREUMMasterChefDTO {
  public static final String SERIALIZED_NAME_ENTRY_TIME = "entry_time";
  @SerializedName(SERIALIZED_NAME_ENTRY_TIME)
  private OffsetDateTime entryTime;

  public static final String SERIALIZED_NAME_RECV_TIME = "recv_time";
  @SerializedName(SERIALIZED_NAME_RECV_TIME)
  private OffsetDateTime recvTime;

  public static final String SERIALIZED_NAME_BLOCK_NUMBER = "block_number";
  @SerializedName(SERIALIZED_NAME_BLOCK_NUMBER)
  private Long blockNumber;

  public static final String SERIALIZED_NAME_BLOCK_RANGE = "block_range";
  @SerializedName(SERIALIZED_NAME_BLOCK_RANGE)
  private String blockRange;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_TOTAL_ALLOC_POINT = "total_alloc_point";
  @SerializedName(SERIALIZED_NAME_TOTAL_ALLOC_POINT)
  private String totalAllocPoint;

  public static final String SERIALIZED_NAME_REWARD_TOKEN_RATE = "reward_token_rate";
  @SerializedName(SERIALIZED_NAME_REWARD_TOKEN_RATE)
  private String rewardTokenRate;

  public static final String SERIALIZED_NAME_REWARD_TOKEN_INTERVAL = "reward_token_interval";
  @SerializedName(SERIALIZED_NAME_REWARD_TOKEN_INTERVAL)
  private String rewardTokenInterval;

  public static final String SERIALIZED_NAME_ADJUSTED_REWARD_TOKEN_RATE = "adjusted_reward_token_rate";
  @SerializedName(SERIALIZED_NAME_ADJUSTED_REWARD_TOKEN_RATE)
  private String adjustedRewardTokenRate;

  public static final String SERIALIZED_NAME_LAST_UPDATED_REWARD_RATE = "last_updated_reward_rate";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_REWARD_RATE)
  private String lastUpdatedRewardRate;

  public UNISWAPV2ETHEREUMMasterChefDTO() {
  }

  public UNISWAPV2ETHEREUMMasterChefDTO entryTime(OffsetDateTime entryTime) {
    
    this.entryTime = entryTime;
    return this;
  }

   /**
   * Get entryTime
   * @return entryTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEntryTime() {
    return entryTime;
  }


  public void setEntryTime(OffsetDateTime entryTime) {
    this.entryTime = entryTime;
  }


  public UNISWAPV2ETHEREUMMasterChefDTO recvTime(OffsetDateTime recvTime) {
    
    this.recvTime = recvTime;
    return this;
  }

   /**
   * Get recvTime
   * @return recvTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getRecvTime() {
    return recvTime;
  }


  public void setRecvTime(OffsetDateTime recvTime) {
    this.recvTime = recvTime;
  }


  public UNISWAPV2ETHEREUMMasterChefDTO blockNumber(Long blockNumber) {
    
    this.blockNumber = blockNumber;
    return this;
  }

   /**
   * Number of block in which entity was recorded.
   * @return blockNumber
  **/
  @javax.annotation.Nullable
  public Long getBlockNumber() {
    return blockNumber;
  }


  public void setBlockNumber(Long blockNumber) {
    this.blockNumber = blockNumber;
  }


  public UNISWAPV2ETHEREUMMasterChefDTO blockRange(String blockRange) {
    
    this.blockRange = blockRange;
    return this;
  }

   /**
   * 
   * @return blockRange
  **/
  @javax.annotation.Nullable
  public String getBlockRange() {
    return blockRange;
  }


  public void setBlockRange(String blockRange) {
    this.blockRange = blockRange;
  }


  public UNISWAPV2ETHEREUMMasterChefDTO id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * (masterChef type) - (pid referenced in the masterchef contract)
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public UNISWAPV2ETHEREUMMasterChefDTO address(String address) {
    
    this.address = address;
    return this;
  }

   /**
   * Address of the masterchef contract
   * @return address
  **/
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    this.address = address;
  }


  public UNISWAPV2ETHEREUMMasterChefDTO totalAllocPoint(String totalAllocPoint) {
    
    this.totalAllocPoint = totalAllocPoint;
    return this;
  }

   /**
   * Total allocation point of all staking pools
   * @return totalAllocPoint
  **/
  @javax.annotation.Nullable
  public String getTotalAllocPoint() {
    return totalAllocPoint;
  }


  public void setTotalAllocPoint(String totalAllocPoint) {
    this.totalAllocPoint = totalAllocPoint;
  }


  public UNISWAPV2ETHEREUMMasterChefDTO rewardTokenRate(String rewardTokenRate) {
    
    this.rewardTokenRate = rewardTokenRate;
    return this;
  }

   /**
   * Amount of reward tokens emitted per block or timestamp
   * @return rewardTokenRate
  **/
  @javax.annotation.Nullable
  public String getRewardTokenRate() {
    return rewardTokenRate;
  }


  public void setRewardTokenRate(String rewardTokenRate) {
    this.rewardTokenRate = rewardTokenRate;
  }


  public UNISWAPV2ETHEREUMMasterChefDTO rewardTokenInterval(String rewardTokenInterval) {
    
    this.rewardTokenInterval = rewardTokenInterval;
    return this;
  }

   /**
   * Indicates whether rewards are indicated by block or timestamp
   * @return rewardTokenInterval
  **/
  @javax.annotation.Nullable
  public String getRewardTokenInterval() {
    return rewardTokenInterval;
  }


  public void setRewardTokenInterval(String rewardTokenInterval) {
    this.rewardTokenInterval = rewardTokenInterval;
  }


  public UNISWAPV2ETHEREUMMasterChefDTO adjustedRewardTokenRate(String adjustedRewardTokenRate) {
    
    this.adjustedRewardTokenRate = adjustedRewardTokenRate;
    return this;
  }

   /**
   * Reward token rate given after you adjust for allocations either burned or not applicable
   * @return adjustedRewardTokenRate
  **/
  @javax.annotation.Nullable
  public String getAdjustedRewardTokenRate() {
    return adjustedRewardTokenRate;
  }


  public void setAdjustedRewardTokenRate(String adjustedRewardTokenRate) {
    this.adjustedRewardTokenRate = adjustedRewardTokenRate;
  }


  public UNISWAPV2ETHEREUMMasterChefDTO lastUpdatedRewardRate(String lastUpdatedRewardRate) {
    
    this.lastUpdatedRewardRate = lastUpdatedRewardRate;
    return this;
  }

   /**
   * Last time the adjusted reward token rate was updated
   * @return lastUpdatedRewardRate
  **/
  @javax.annotation.Nullable
  public String getLastUpdatedRewardRate() {
    return lastUpdatedRewardRate;
  }


  public void setLastUpdatedRewardRate(String lastUpdatedRewardRate) {
    this.lastUpdatedRewardRate = lastUpdatedRewardRate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UNISWAPV2ETHEREUMMasterChefDTO unISWAPV2ETHEREUMMasterChefDTO = (UNISWAPV2ETHEREUMMasterChefDTO) o;
    return Objects.equals(this.entryTime, unISWAPV2ETHEREUMMasterChefDTO.entryTime) &&
        Objects.equals(this.recvTime, unISWAPV2ETHEREUMMasterChefDTO.recvTime) &&
        Objects.equals(this.blockNumber, unISWAPV2ETHEREUMMasterChefDTO.blockNumber) &&
        Objects.equals(this.blockRange, unISWAPV2ETHEREUMMasterChefDTO.blockRange) &&
        Objects.equals(this.id, unISWAPV2ETHEREUMMasterChefDTO.id) &&
        Objects.equals(this.address, unISWAPV2ETHEREUMMasterChefDTO.address) &&
        Objects.equals(this.totalAllocPoint, unISWAPV2ETHEREUMMasterChefDTO.totalAllocPoint) &&
        Objects.equals(this.rewardTokenRate, unISWAPV2ETHEREUMMasterChefDTO.rewardTokenRate) &&
        Objects.equals(this.rewardTokenInterval, unISWAPV2ETHEREUMMasterChefDTO.rewardTokenInterval) &&
        Objects.equals(this.adjustedRewardTokenRate, unISWAPV2ETHEREUMMasterChefDTO.adjustedRewardTokenRate) &&
        Objects.equals(this.lastUpdatedRewardRate, unISWAPV2ETHEREUMMasterChefDTO.lastUpdatedRewardRate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(entryTime, recvTime, blockNumber, blockRange, id, address, totalAllocPoint, rewardTokenRate, rewardTokenInterval, adjustedRewardTokenRate, lastUpdatedRewardRate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UNISWAPV2ETHEREUMMasterChefDTO {\n");
    sb.append("    entryTime: ").append(toIndentedString(entryTime)).append("\n");
    sb.append("    recvTime: ").append(toIndentedString(recvTime)).append("\n");
    sb.append("    blockNumber: ").append(toIndentedString(blockNumber)).append("\n");
    sb.append("    blockRange: ").append(toIndentedString(blockRange)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    totalAllocPoint: ").append(toIndentedString(totalAllocPoint)).append("\n");
    sb.append("    rewardTokenRate: ").append(toIndentedString(rewardTokenRate)).append("\n");
    sb.append("    rewardTokenInterval: ").append(toIndentedString(rewardTokenInterval)).append("\n");
    sb.append("    adjustedRewardTokenRate: ").append(toIndentedString(adjustedRewardTokenRate)).append("\n");
    sb.append("    lastUpdatedRewardRate: ").append(toIndentedString(lastUpdatedRewardRate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entry_time");
    openapiFields.add("recv_time");
    openapiFields.add("block_number");
    openapiFields.add("block_range");
    openapiFields.add("id");
    openapiFields.add("address");
    openapiFields.add("total_alloc_point");
    openapiFields.add("reward_token_rate");
    openapiFields.add("reward_token_interval");
    openapiFields.add("adjusted_reward_token_rate");
    openapiFields.add("last_updated_reward_rate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UNISWAPV2ETHEREUMMasterChefDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UNISWAPV2ETHEREUMMasterChefDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UNISWAPV2ETHEREUMMasterChefDTO is not found in the empty JSON string", UNISWAPV2ETHEREUMMasterChefDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UNISWAPV2ETHEREUMMasterChefDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UNISWAPV2ETHEREUMMasterChefDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("block_range") != null && !jsonObj.get("block_range").isJsonNull()) && !jsonObj.get("block_range").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `block_range` to be a primitive type in the JSON string but got `%s`", jsonObj.get("block_range").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("total_alloc_point") != null && !jsonObj.get("total_alloc_point").isJsonNull()) && !jsonObj.get("total_alloc_point").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_alloc_point` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_alloc_point").toString()));
      }
      if ((jsonObj.get("reward_token_rate") != null && !jsonObj.get("reward_token_rate").isJsonNull()) && !jsonObj.get("reward_token_rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reward_token_rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reward_token_rate").toString()));
      }
      if ((jsonObj.get("reward_token_interval") != null && !jsonObj.get("reward_token_interval").isJsonNull()) && !jsonObj.get("reward_token_interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reward_token_interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reward_token_interval").toString()));
      }
      if ((jsonObj.get("adjusted_reward_token_rate") != null && !jsonObj.get("adjusted_reward_token_rate").isJsonNull()) && !jsonObj.get("adjusted_reward_token_rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adjusted_reward_token_rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adjusted_reward_token_rate").toString()));
      }
      if ((jsonObj.get("last_updated_reward_rate") != null && !jsonObj.get("last_updated_reward_rate").isJsonNull()) && !jsonObj.get("last_updated_reward_rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_updated_reward_rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_updated_reward_rate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UNISWAPV2ETHEREUMMasterChefDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UNISWAPV2ETHEREUMMasterChefDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UNISWAPV2ETHEREUMMasterChefDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UNISWAPV2ETHEREUMMasterChefDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<UNISWAPV2ETHEREUMMasterChefDTO>() {
           @Override
           public void write(JsonWriter out, UNISWAPV2ETHEREUMMasterChefDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UNISWAPV2ETHEREUMMasterChefDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UNISWAPV2ETHEREUMMasterChefDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UNISWAPV2ETHEREUMMasterChefDTO
  * @throws IOException if the JSON string is invalid with respect to UNISWAPV2ETHEREUMMasterChefDTO
  */
  public static UNISWAPV2ETHEREUMMasterChefDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UNISWAPV2ETHEREUMMasterChefDTO.class);
  }

 /**
  * Convert an instance of UNISWAPV2ETHEREUMMasterChefDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

