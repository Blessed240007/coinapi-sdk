/*
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-23T15:18:53.663612Z[Etc/UTC]")
public class UNISWAPV2ETHEREUMMasterChefRewarderDTO {
  public static final String SERIALIZED_NAME_ENTRY_TIME = "entry_time";
  @SerializedName(SERIALIZED_NAME_ENTRY_TIME)
  private OffsetDateTime entryTime;

  public static final String SERIALIZED_NAME_RECV_TIME = "recv_time";
  @SerializedName(SERIALIZED_NAME_RECV_TIME)
  private OffsetDateTime recvTime;

  public static final String SERIALIZED_NAME_BLOCK_NUMBER = "block_number";
  @SerializedName(SERIALIZED_NAME_BLOCK_NUMBER)
  private Long blockNumber;

  public static final String SERIALIZED_NAME_BLOCK_RANGE = "block_range";
  @SerializedName(SERIALIZED_NAME_BLOCK_RANGE)
  private String blockRange;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_POOL = "pool";
  @SerializedName(SERIALIZED_NAME_POOL)
  private String pool;

  public static final String SERIALIZED_NAME_REWARD_TOKEN = "reward_token";
  @SerializedName(SERIALIZED_NAME_REWARD_TOKEN)
  private String rewardToken;

  public static final String SERIALIZED_NAME_TOKEN_PER_SEC = "token_per_sec";
  @SerializedName(SERIALIZED_NAME_TOKEN_PER_SEC)
  private String tokenPerSec;

  public static final String SERIALIZED_NAME_RATE_CALCULATED_AT = "rate_calculated_at";
  @SerializedName(SERIALIZED_NAME_RATE_CALCULATED_AT)
  private String rateCalculatedAt;

  public static final String SERIALIZED_NAME_HAS_FUNDS = "has_funds";
  @SerializedName(SERIALIZED_NAME_HAS_FUNDS)
  private Boolean hasFunds;

  public static final String SERIALIZED_NAME_HAS_FUNDS_AT = "has_funds_at";
  @SerializedName(SERIALIZED_NAME_HAS_FUNDS_AT)
  private String hasFundsAt;

  public static final String SERIALIZED_NAME_CAN_RETRIEVE_RATE = "can_retrieve_rate";
  @SerializedName(SERIALIZED_NAME_CAN_RETRIEVE_RATE)
  private Boolean canRetrieveRate;

  public static final String SERIALIZED_NAME_REWARD_RATE_CALCULATION_IN_PROGRESS = "reward_rate_calculation_in_progress";
  @SerializedName(SERIALIZED_NAME_REWARD_RATE_CALCULATION_IN_PROGRESS)
  private Boolean rewardRateCalculationInProgress;

  public static final String SERIALIZED_NAME_PROBES = "probes";
  @SerializedName(SERIALIZED_NAME_PROBES)
  private List<String> probes;

  public UNISWAPV2ETHEREUMMasterChefRewarderDTO() {
  }

  public UNISWAPV2ETHEREUMMasterChefRewarderDTO entryTime(OffsetDateTime entryTime) {
    
    this.entryTime = entryTime;
    return this;
  }

   /**
   * Get entryTime
   * @return entryTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEntryTime() {
    return entryTime;
  }


  public void setEntryTime(OffsetDateTime entryTime) {
    this.entryTime = entryTime;
  }


  public UNISWAPV2ETHEREUMMasterChefRewarderDTO recvTime(OffsetDateTime recvTime) {
    
    this.recvTime = recvTime;
    return this;
  }

   /**
   * Get recvTime
   * @return recvTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getRecvTime() {
    return recvTime;
  }


  public void setRecvTime(OffsetDateTime recvTime) {
    this.recvTime = recvTime;
  }


  public UNISWAPV2ETHEREUMMasterChefRewarderDTO blockNumber(Long blockNumber) {
    
    this.blockNumber = blockNumber;
    return this;
  }

   /**
   * Number of block in which entity was recorded.
   * @return blockNumber
  **/
  @javax.annotation.Nullable
  public Long getBlockNumber() {
    return blockNumber;
  }


  public void setBlockNumber(Long blockNumber) {
    this.blockNumber = blockNumber;
  }


  public UNISWAPV2ETHEREUMMasterChefRewarderDTO blockRange(String blockRange) {
    
    this.blockRange = blockRange;
    return this;
  }

   /**
   * 
   * @return blockRange
  **/
  @javax.annotation.Nullable
  public String getBlockRange() {
    return blockRange;
  }


  public void setBlockRange(String blockRange) {
    this.blockRange = blockRange;
  }


  public UNISWAPV2ETHEREUMMasterChefRewarderDTO id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Address of the rewarder contract associated to some staking pool
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public UNISWAPV2ETHEREUMMasterChefRewarderDTO pool(String pool) {
    
    this.pool = pool;
    return this;
  }

   /**
   * Staking pool to which this rewarder is associated
   * @return pool
  **/
  @javax.annotation.Nullable
  public String getPool() {
    return pool;
  }


  public void setPool(String pool) {
    this.pool = pool;
  }


  public UNISWAPV2ETHEREUMMasterChefRewarderDTO rewardToken(String rewardToken) {
    
    this.rewardToken = rewardToken;
    return this;
  }

   /**
   * Address of the token given by this rewarder
   * @return rewardToken
  **/
  @javax.annotation.Nullable
  public String getRewardToken() {
    return rewardToken;
  }


  public void setRewardToken(String rewardToken) {
    this.rewardToken = rewardToken;
  }


  public UNISWAPV2ETHEREUMMasterChefRewarderDTO tokenPerSec(String tokenPerSec) {
    
    this.tokenPerSec = tokenPerSec;
    return this;
  }

   /**
   * Number of tokens rewarded per second per LP staked in pool by this rewarder
   * @return tokenPerSec
  **/
  @javax.annotation.Nullable
  public String getTokenPerSec() {
    return tokenPerSec;
  }


  public void setTokenPerSec(String tokenPerSec) {
    this.tokenPerSec = tokenPerSec;
  }


  public UNISWAPV2ETHEREUMMasterChefRewarderDTO rateCalculatedAt(String rateCalculatedAt) {
    
    this.rateCalculatedAt = rateCalculatedAt;
    return this;
  }

   /**
   * Timestamp from the last time tokenPerSec was calculated
   * @return rateCalculatedAt
  **/
  @javax.annotation.Nullable
  public String getRateCalculatedAt() {
    return rateCalculatedAt;
  }


  public void setRateCalculatedAt(String rateCalculatedAt) {
    this.rateCalculatedAt = rateCalculatedAt;
  }


  public UNISWAPV2ETHEREUMMasterChefRewarderDTO hasFunds(Boolean hasFunds) {
    
    this.hasFunds = hasFunds;
    return this;
  }

   /**
   * A field to keep track if there are any funds to give away in the rewarder
   * @return hasFunds
  **/
  @javax.annotation.Nullable
  public Boolean getHasFunds() {
    return hasFunds;
  }


  public void setHasFunds(Boolean hasFunds) {
    this.hasFunds = hasFunds;
  }


  public UNISWAPV2ETHEREUMMasterChefRewarderDTO hasFundsAt(String hasFundsAt) {
    
    this.hasFundsAt = hasFundsAt;
    return this;
  }

   /**
   * When it was last checked that there were funds in the rewarder
   * @return hasFundsAt
  **/
  @javax.annotation.Nullable
  public String getHasFundsAt() {
    return hasFundsAt;
  }


  public void setHasFundsAt(String hasFundsAt) {
    this.hasFundsAt = hasFundsAt;
  }


  public UNISWAPV2ETHEREUMMasterChefRewarderDTO canRetrieveRate(Boolean canRetrieveRate) {
    
    this.canRetrieveRate = canRetrieveRate;
    return this;
  }

   /**
   * If true it means the rewardRate can be retrieved directly from the contract, without crazy math
   * @return canRetrieveRate
  **/
  @javax.annotation.Nullable
  public Boolean getCanRetrieveRate() {
    return canRetrieveRate;
  }


  public void setCanRetrieveRate(Boolean canRetrieveRate) {
    this.canRetrieveRate = canRetrieveRate;
  }


  public UNISWAPV2ETHEREUMMasterChefRewarderDTO rewardRateCalculationInProgress(Boolean rewardRateCalculationInProgress) {
    
    this.rewardRateCalculationInProgress = rewardRateCalculationInProgress;
    return this;
  }

   /**
   * Utility field to calculate the rewarder reward rate
   * @return rewardRateCalculationInProgress
  **/
  @javax.annotation.Nullable
  public Boolean getRewardRateCalculationInProgress() {
    return rewardRateCalculationInProgress;
  }


  public void setRewardRateCalculationInProgress(Boolean rewardRateCalculationInProgress) {
    this.rewardRateCalculationInProgress = rewardRateCalculationInProgress;
  }


  public UNISWAPV2ETHEREUMMasterChefRewarderDTO probes(List<String> probes) {
    
    this.probes = probes;
    return this;
  }

  public UNISWAPV2ETHEREUMMasterChefRewarderDTO addProbesItem(String probesItem) {
    if (this.probes == null) {
      this.probes = new ArrayList<>();
    }
    this.probes.add(probesItem);
    return this;
  }

   /**
   * 
   * @return probes
  **/
  @javax.annotation.Nullable
  public List<String> getProbes() {
    return probes;
  }


  public void setProbes(List<String> probes) {
    this.probes = probes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UNISWAPV2ETHEREUMMasterChefRewarderDTO unISWAPV2ETHEREUMMasterChefRewarderDTO = (UNISWAPV2ETHEREUMMasterChefRewarderDTO) o;
    return Objects.equals(this.entryTime, unISWAPV2ETHEREUMMasterChefRewarderDTO.entryTime) &&
        Objects.equals(this.recvTime, unISWAPV2ETHEREUMMasterChefRewarderDTO.recvTime) &&
        Objects.equals(this.blockNumber, unISWAPV2ETHEREUMMasterChefRewarderDTO.blockNumber) &&
        Objects.equals(this.blockRange, unISWAPV2ETHEREUMMasterChefRewarderDTO.blockRange) &&
        Objects.equals(this.id, unISWAPV2ETHEREUMMasterChefRewarderDTO.id) &&
        Objects.equals(this.pool, unISWAPV2ETHEREUMMasterChefRewarderDTO.pool) &&
        Objects.equals(this.rewardToken, unISWAPV2ETHEREUMMasterChefRewarderDTO.rewardToken) &&
        Objects.equals(this.tokenPerSec, unISWAPV2ETHEREUMMasterChefRewarderDTO.tokenPerSec) &&
        Objects.equals(this.rateCalculatedAt, unISWAPV2ETHEREUMMasterChefRewarderDTO.rateCalculatedAt) &&
        Objects.equals(this.hasFunds, unISWAPV2ETHEREUMMasterChefRewarderDTO.hasFunds) &&
        Objects.equals(this.hasFundsAt, unISWAPV2ETHEREUMMasterChefRewarderDTO.hasFundsAt) &&
        Objects.equals(this.canRetrieveRate, unISWAPV2ETHEREUMMasterChefRewarderDTO.canRetrieveRate) &&
        Objects.equals(this.rewardRateCalculationInProgress, unISWAPV2ETHEREUMMasterChefRewarderDTO.rewardRateCalculationInProgress) &&
        Objects.equals(this.probes, unISWAPV2ETHEREUMMasterChefRewarderDTO.probes);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(entryTime, recvTime, blockNumber, blockRange, id, pool, rewardToken, tokenPerSec, rateCalculatedAt, hasFunds, hasFundsAt, canRetrieveRate, rewardRateCalculationInProgress, probes);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UNISWAPV2ETHEREUMMasterChefRewarderDTO {\n");
    sb.append("    entryTime: ").append(toIndentedString(entryTime)).append("\n");
    sb.append("    recvTime: ").append(toIndentedString(recvTime)).append("\n");
    sb.append("    blockNumber: ").append(toIndentedString(blockNumber)).append("\n");
    sb.append("    blockRange: ").append(toIndentedString(blockRange)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    pool: ").append(toIndentedString(pool)).append("\n");
    sb.append("    rewardToken: ").append(toIndentedString(rewardToken)).append("\n");
    sb.append("    tokenPerSec: ").append(toIndentedString(tokenPerSec)).append("\n");
    sb.append("    rateCalculatedAt: ").append(toIndentedString(rateCalculatedAt)).append("\n");
    sb.append("    hasFunds: ").append(toIndentedString(hasFunds)).append("\n");
    sb.append("    hasFundsAt: ").append(toIndentedString(hasFundsAt)).append("\n");
    sb.append("    canRetrieveRate: ").append(toIndentedString(canRetrieveRate)).append("\n");
    sb.append("    rewardRateCalculationInProgress: ").append(toIndentedString(rewardRateCalculationInProgress)).append("\n");
    sb.append("    probes: ").append(toIndentedString(probes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entry_time");
    openapiFields.add("recv_time");
    openapiFields.add("block_number");
    openapiFields.add("block_range");
    openapiFields.add("id");
    openapiFields.add("pool");
    openapiFields.add("reward_token");
    openapiFields.add("token_per_sec");
    openapiFields.add("rate_calculated_at");
    openapiFields.add("has_funds");
    openapiFields.add("has_funds_at");
    openapiFields.add("can_retrieve_rate");
    openapiFields.add("reward_rate_calculation_in_progress");
    openapiFields.add("probes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UNISWAPV2ETHEREUMMasterChefRewarderDTO
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UNISWAPV2ETHEREUMMasterChefRewarderDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UNISWAPV2ETHEREUMMasterChefRewarderDTO is not found in the empty JSON string", UNISWAPV2ETHEREUMMasterChefRewarderDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UNISWAPV2ETHEREUMMasterChefRewarderDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UNISWAPV2ETHEREUMMasterChefRewarderDTO` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("block_range") != null && !jsonObj.get("block_range").isJsonNull()) && !jsonObj.get("block_range").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `block_range` to be a primitive type in the JSON string but got `%s`", jsonObj.get("block_range").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("pool") != null && !jsonObj.get("pool").isJsonNull()) && !jsonObj.get("pool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pool").toString()));
      }
      if ((jsonObj.get("reward_token") != null && !jsonObj.get("reward_token").isJsonNull()) && !jsonObj.get("reward_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reward_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reward_token").toString()));
      }
      if ((jsonObj.get("token_per_sec") != null && !jsonObj.get("token_per_sec").isJsonNull()) && !jsonObj.get("token_per_sec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token_per_sec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token_per_sec").toString()));
      }
      if ((jsonObj.get("rate_calculated_at") != null && !jsonObj.get("rate_calculated_at").isJsonNull()) && !jsonObj.get("rate_calculated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rate_calculated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rate_calculated_at").toString()));
      }
      if ((jsonObj.get("has_funds_at") != null && !jsonObj.get("has_funds_at").isJsonNull()) && !jsonObj.get("has_funds_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `has_funds_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("has_funds_at").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("probes") != null && !jsonObj.get("probes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `probes` to be an array in the JSON string but got `%s`", jsonObj.get("probes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UNISWAPV2ETHEREUMMasterChefRewarderDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UNISWAPV2ETHEREUMMasterChefRewarderDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UNISWAPV2ETHEREUMMasterChefRewarderDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UNISWAPV2ETHEREUMMasterChefRewarderDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<UNISWAPV2ETHEREUMMasterChefRewarderDTO>() {
           @Override
           public void write(JsonWriter out, UNISWAPV2ETHEREUMMasterChefRewarderDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UNISWAPV2ETHEREUMMasterChefRewarderDTO read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UNISWAPV2ETHEREUMMasterChefRewarderDTO given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UNISWAPV2ETHEREUMMasterChefRewarderDTO
  * @throws IOException if the JSON string is invalid with respect to UNISWAPV2ETHEREUMMasterChefRewarderDTO
  */
  public static UNISWAPV2ETHEREUMMasterChefRewarderDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UNISWAPV2ETHEREUMMasterChefRewarderDTO.class);
  }

 /**
  * Convert an instance of UNISWAPV2ETHEREUMMasterChefRewarderDTO to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

