/*
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CRYPTOPUNKSBidDTO;
import org.openapitools.client.model.CRYPTOPUNKSCollectionDTO;
import org.openapitools.client.model.CRYPTOPUNKSCollectionDailySnapshotDTO;
import org.openapitools.client.model.CRYPTOPUNKSDataSourcesDTO;
import org.openapitools.client.model.CRYPTOPUNKSItemDTO;
import org.openapitools.client.model.CRYPTOPUNKSMarketPlaceDTO;
import org.openapitools.client.model.CRYPTOPUNKSMarketplaceDailySnapshotDTO;
import org.openapitools.client.model.CRYPTOPUNKSTradeDTO;
import org.openapitools.client.model.CRYPTOPUNKSUserDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CryptopunksEthereumApi
 */
@Disabled
public class CryptopunksEthereumApiTest {

    private final CryptopunksEthereumApi api = new CryptopunksEthereumApi();

    /**
     * Bids (current)
     *
     * Gets bids.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSETHEREUMBidsCurrentTest() throws ApiException {
        List<CRYPTOPUNKSBidDTO> response = api.cRYPTOPUNKSETHEREUMBidsCurrent();
        // TODO: test validations
    }

    /**
     * CollectionDailySnapshots (current)
     *
     * Gets collectionDailySnapshots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentTest() throws ApiException {
        List<CRYPTOPUNKSCollectionDailySnapshotDTO> response = api.cRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrent();
        // TODO: test validations
    }

    /**
     * Collections (current)
     *
     * Gets collections.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSETHEREUMCollectionsCurrentTest() throws ApiException {
        List<CRYPTOPUNKSCollectionDTO> response = api.cRYPTOPUNKSETHEREUMCollectionsCurrent();
        // TODO: test validations
    }

    /**
     * DataSources (current)
     *
     * Gets dataSources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSETHEREUMDataSourcesCurrentTest() throws ApiException {
        List<CRYPTOPUNKSDataSourcesDTO> response = api.cRYPTOPUNKSETHEREUMDataSourcesCurrent();
        // TODO: test validations
    }

    /**
     * Items (current)
     *
     * Gets items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSETHEREUMItemsCurrentTest() throws ApiException {
        List<CRYPTOPUNKSItemDTO> response = api.cRYPTOPUNKSETHEREUMItemsCurrent();
        // TODO: test validations
    }

    /**
     * MarketPlaces (current)
     *
     * Gets marketPlaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSETHEREUMMarketPlacesCurrentTest() throws ApiException {
        List<CRYPTOPUNKSMarketPlaceDTO> response = api.cRYPTOPUNKSETHEREUMMarketPlacesCurrent();
        // TODO: test validations
    }

    /**
     * MarketplaceDailySnapshots (current)
     *
     * Gets marketplaceDailySnapshots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentTest() throws ApiException {
        List<CRYPTOPUNKSMarketplaceDailySnapshotDTO> response = api.cRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrent();
        // TODO: test validations
    }

    /**
     * Trades (current)
     *
     * Gets trades.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSETHEREUMTradesCurrentTest() throws ApiException {
        List<CRYPTOPUNKSTradeDTO> response = api.cRYPTOPUNKSETHEREUMTradesCurrent();
        // TODO: test validations
    }

    /**
     * Users (current)
     *
     * Gets users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cRYPTOPUNKSETHEREUMUsersCurrentTest() throws ApiException {
        List<CRYPTOPUNKSUserDTO> response = api.cRYPTOPUNKSETHEREUMUsersCurrent();
        // TODO: test validations
    }

}
