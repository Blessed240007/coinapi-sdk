/*
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.UniswapV3BundleDTO;
import org.openapitools.client.model.UniswapV3BurnDTO;
import org.openapitools.client.model.UniswapV3FactoryDTO;
import org.openapitools.client.model.UniswapV3MintDTO;
import org.openapitools.client.model.UniswapV3PoolDTO;
import org.openapitools.client.model.UniswapV3PoolDayDataDTO;
import org.openapitools.client.model.UniswapV3PoolHourDataDTO;
import org.openapitools.client.model.UniswapV3PositionDTO;
import org.openapitools.client.model.UniswapV3PositionSnapshotDTO;
import org.openapitools.client.model.UniswapV3SwapDTO;
import org.openapitools.client.model.UniswapV3TickDTO;
import org.openapitools.client.model.UniswapV3TickDayDataDTO;
import org.openapitools.client.model.UniswapV3TokenDTO;
import org.openapitools.client.model.UniswapV3TokenHourDataDTO;
import org.openapitools.client.model.UniswapV3TokenV3DayDataDTO;
import org.openapitools.client.model.UniswapV3TransactionDTO;
import org.openapitools.client.model.UniswapV3UniswapDayDataDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UniswapV3Api
 */
@Disabled
public class UniswapV3ApiTest {

    private final UniswapV3Api api = new UniswapV3Api();

    /**
     * Bundles (current)
     *
     * Gets bundles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3BundlesCurrentTest() throws ApiException {
        List<UniswapV3BundleDTO> response = api.uniswapV3BundlesCurrent();
        // TODO: test validations
    }

    /**
     * Burns (current)
     *
     * Gets burns.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3BurnsCurrentTest() throws ApiException {
        List<UniswapV3BurnDTO> response = api.uniswapV3BurnsCurrent();
        // TODO: test validations
    }

    /**
     * Factories (current)
     *
     * Gets factories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3FactoriesCurrentTest() throws ApiException {
        List<UniswapV3FactoryDTO> response = api.uniswapV3FactoriesCurrent();
        // TODO: test validations
    }

    /**
     * Mints (current)
     *
     * Gets mints.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3MintsCurrentTest() throws ApiException {
        List<UniswapV3MintDTO> response = api.uniswapV3MintsCurrent();
        // TODO: test validations
    }

    /**
     * PoolDayData (current)
     *
     * Gets poolDayData.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3PoolDayDataCurrentTest() throws ApiException {
        List<UniswapV3PoolDayDataDTO> response = api.uniswapV3PoolDayDataCurrent();
        // TODO: test validations
    }

    /**
     * PoolHourData (current)
     *
     * Gets poolHourData.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3PoolHourDataCurrentTest() throws ApiException {
        List<UniswapV3PoolHourDataDTO> response = api.uniswapV3PoolHourDataCurrent();
        // TODO: test validations
    }

    /**
     * Pools (current)
     *
     * Gets pools.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3PoolsCurrentTest() throws ApiException {
        String id = null;
        List<UniswapV3PoolDTO> response = api.uniswapV3PoolsCurrent(id);
        // TODO: test validations
    }

    /**
     * PositionSnapshots (current)
     *
     * Gets positionSnapshots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3PositionSnapshotsCurrentTest() throws ApiException {
        List<UniswapV3PositionSnapshotDTO> response = api.uniswapV3PositionSnapshotsCurrent();
        // TODO: test validations
    }

    /**
     * Positions (current)
     *
     * Gets positions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3PositionsCurrentTest() throws ApiException {
        List<UniswapV3PositionDTO> response = api.uniswapV3PositionsCurrent();
        // TODO: test validations
    }

    /**
     * Swaps (current)
     *
     * Gets swaps.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3SwapsCurrentTest() throws ApiException {
        String pool = null;
        List<UniswapV3SwapDTO> response = api.uniswapV3SwapsCurrent(pool);
        // TODO: test validations
    }

    /**
     * TickDayData (current)
     *
     * Gets tickDayData.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3TickDayDataCurrentTest() throws ApiException {
        List<UniswapV3TickDayDataDTO> response = api.uniswapV3TickDayDataCurrent();
        // TODO: test validations
    }

    /**
     * Ticks (current)
     *
     * Gets ticks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3TicksCurrentTest() throws ApiException {
        List<UniswapV3TickDTO> response = api.uniswapV3TicksCurrent();
        // TODO: test validations
    }

    /**
     * TokenHourData (current)
     *
     * Gets tokenHourData.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3TokenHourDataCurrentTest() throws ApiException {
        List<UniswapV3TokenHourDataDTO> response = api.uniswapV3TokenHourDataCurrent();
        // TODO: test validations
    }

    /**
     * TokenV3DayData (current)
     *
     * Gets tokenV3DayData.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3TokenV3DayDataCurrentTest() throws ApiException {
        List<UniswapV3TokenV3DayDataDTO> response = api.uniswapV3TokenV3DayDataCurrent();
        // TODO: test validations
    }

    /**
     * Tokens (current)
     *
     * Gets tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3TokensCurrentTest() throws ApiException {
        List<UniswapV3TokenDTO> response = api.uniswapV3TokensCurrent();
        // TODO: test validations
    }

    /**
     * Transactions (current)
     *
     * Gets transactions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3TransactionsCurrentTest() throws ApiException {
        List<UniswapV3TransactionDTO> response = api.uniswapV3TransactionsCurrent();
        // TODO: test validations
    }

    /**
     * UniswapDayData (current)
     *
     * Gets uniswapDayData.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uniswapV3UniswapDayDataCurrentTest() throws ApiException {
        List<UniswapV3UniswapDayDataDTO> response = api.uniswapV3UniswapDayDataCurrent();
        // TODO: test validations
    }

}
