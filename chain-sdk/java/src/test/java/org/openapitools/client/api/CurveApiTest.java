/*
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CurveAccountDTO;
import org.openapitools.client.model.CurveAddLiquidityEventDTO;
import org.openapitools.client.model.CurveAdminFeeChangeLogDTO;
import org.openapitools.client.model.CurveAmplificationCoeffChangeLogDTO;
import org.openapitools.client.model.CurveCoinDTO;
import org.openapitools.client.model.CurveContractDTO;
import org.openapitools.client.model.CurveContractVersionDTO;
import org.openapitools.client.model.CurveDailyVolumeDTO;
import org.openapitools.client.model.CurveExchangeDTO;
import org.openapitools.client.model.CurveFeeChangeLogDTO;
import org.openapitools.client.model.CurveGaugeDTO;
import org.openapitools.client.model.CurveGaugeDepositDTO;
import org.openapitools.client.model.CurveGaugeLiquidityDTO;
import org.openapitools.client.model.CurveGaugeTotalWeightDTO;
import org.openapitools.client.model.CurveGaugeTypeDTO;
import org.openapitools.client.model.CurveGaugeTypeWeightDTO;
import org.openapitools.client.model.CurveGaugeWeightDTO;
import org.openapitools.client.model.CurveGaugeWeightVoteDTO;
import org.openapitools.client.model.CurveGaugeWithdrawDTO;
import org.openapitools.client.model.CurveHourlyVolumeDTO;
import org.openapitools.client.model.CurveLpTokenDTO;
import org.openapitools.client.model.CurvePoolDTO;
import org.openapitools.client.model.CurveProposalDTO;
import org.openapitools.client.model.CurveProposalVoteDTO;
import org.openapitools.client.model.CurveRemoveLiquidityEventDTO;
import org.openapitools.client.model.CurveRemoveLiquidityOneEventDTO;
import org.openapitools.client.model.CurveSystemStateDTO;
import org.openapitools.client.model.CurveTokenDTO;
import org.openapitools.client.model.CurveTransferOwnershipEventDTO;
import org.openapitools.client.model.CurveUnderlyingCoinDTO;
import org.openapitools.client.model.CurveVotingAppDTO;
import org.openapitools.client.model.CurveWeeklyVolumeDTO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CurveApi
 */
@Disabled
public class CurveApiTest {

    private final CurveApi api = new CurveApi();

    /**
     * Accounts (current)
     *
     * Gets accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveAccountsCurrentTest() throws ApiException {
        List<CurveAccountDTO> response = api.curveAccountsCurrent();
        // TODO: test validations
    }

    /**
     * AddLiquidityEvents (current)
     *
     * Gets addLiquidityEvents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveAddLiquidityEventsCurrentTest() throws ApiException {
        List<CurveAddLiquidityEventDTO> response = api.curveAddLiquidityEventsCurrent();
        // TODO: test validations
    }

    /**
     * AdminFeeChangeLogs (current)
     *
     * Gets adminFeeChangeLogs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveAdminFeeChangeLogsCurrentTest() throws ApiException {
        List<CurveAdminFeeChangeLogDTO> response = api.curveAdminFeeChangeLogsCurrent();
        // TODO: test validations
    }

    /**
     * AmplificationCoeffChangeLogs (current)
     *
     * Gets amplificationCoeffChangeLogs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveAmplificationCoeffChangeLogsCurrentTest() throws ApiException {
        List<CurveAmplificationCoeffChangeLogDTO> response = api.curveAmplificationCoeffChangeLogsCurrent();
        // TODO: test validations
    }

    /**
     * Coins (current)
     *
     * Gets coins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveCoinsCurrentTest() throws ApiException {
        List<CurveCoinDTO> response = api.curveCoinsCurrent();
        // TODO: test validations
    }

    /**
     * ContractVersions (current)
     *
     * Gets contractVersions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveContractVersionsCurrentTest() throws ApiException {
        List<CurveContractVersionDTO> response = api.curveContractVersionsCurrent();
        // TODO: test validations
    }

    /**
     * Contracts (current)
     *
     * Gets contracts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveContractsCurrentTest() throws ApiException {
        List<CurveContractDTO> response = api.curveContractsCurrent();
        // TODO: test validations
    }

    /**
     * DailyVolumes (current)
     *
     * Gets dailyVolumes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveDailyVolumesCurrentTest() throws ApiException {
        List<CurveDailyVolumeDTO> response = api.curveDailyVolumesCurrent();
        // TODO: test validations
    }

    /**
     * Exchanges (current)
     *
     * Gets exchanges.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveExchangesCurrentTest() throws ApiException {
        String pool = null;
        List<CurveExchangeDTO> response = api.curveExchangesCurrent(pool);
        // TODO: test validations
    }

    /**
     * FeeChangeLogs (current)
     *
     * Gets feeChangeLogs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveFeeChangeLogsCurrentTest() throws ApiException {
        List<CurveFeeChangeLogDTO> response = api.curveFeeChangeLogsCurrent();
        // TODO: test validations
    }

    /**
     * GaugeDeposits (current)
     *
     * Gets gaugeDeposits.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGaugeDepositsCurrentTest() throws ApiException {
        List<CurveGaugeDepositDTO> response = api.curveGaugeDepositsCurrent();
        // TODO: test validations
    }

    /**
     * GaugeLiquidities (current)
     *
     * Gets gaugeLiquidities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGaugeLiquiditiesCurrentTest() throws ApiException {
        List<CurveGaugeLiquidityDTO> response = api.curveGaugeLiquiditiesCurrent();
        // TODO: test validations
    }

    /**
     * GaugeTotalWeights (current)
     *
     * Gets gaugeTotalWeights.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGaugeTotalWeightsCurrentTest() throws ApiException {
        List<CurveGaugeTotalWeightDTO> response = api.curveGaugeTotalWeightsCurrent();
        // TODO: test validations
    }

    /**
     * GaugeTypeWeights (current)
     *
     * Gets gaugeTypeWeights.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGaugeTypeWeightsCurrentTest() throws ApiException {
        List<CurveGaugeTypeWeightDTO> response = api.curveGaugeTypeWeightsCurrent();
        // TODO: test validations
    }

    /**
     * GaugeTypes (current)
     *
     * Gets gaugeTypes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGaugeTypesCurrentTest() throws ApiException {
        List<CurveGaugeTypeDTO> response = api.curveGaugeTypesCurrent();
        // TODO: test validations
    }

    /**
     * GaugeWeightVotes (current)
     *
     * Gets gaugeWeightVotes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGaugeWeightVotesCurrentTest() throws ApiException {
        List<CurveGaugeWeightVoteDTO> response = api.curveGaugeWeightVotesCurrent();
        // TODO: test validations
    }

    /**
     * GaugeWeights (current)
     *
     * Gets gaugeWeights.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGaugeWeightsCurrentTest() throws ApiException {
        List<CurveGaugeWeightDTO> response = api.curveGaugeWeightsCurrent();
        // TODO: test validations
    }

    /**
     * GaugeWithdraws (current)
     *
     * Gets gaugeWithdraws.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGaugeWithdrawsCurrentTest() throws ApiException {
        List<CurveGaugeWithdrawDTO> response = api.curveGaugeWithdrawsCurrent();
        // TODO: test validations
    }

    /**
     * Gauges (current)
     *
     * Gets gauges.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveGaugesCurrentTest() throws ApiException {
        List<CurveGaugeDTO> response = api.curveGaugesCurrent();
        // TODO: test validations
    }

    /**
     * HourlyVolumes (current)
     *
     * Gets hourlyVolumes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveHourlyVolumesCurrentTest() throws ApiException {
        List<CurveHourlyVolumeDTO> response = api.curveHourlyVolumesCurrent();
        // TODO: test validations
    }

    /**
     * LpTokens (current)
     *
     * Gets lpTokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveLpTokensCurrentTest() throws ApiException {
        List<CurveLpTokenDTO> response = api.curveLpTokensCurrent();
        // TODO: test validations
    }

    /**
     * Pools (current)
     *
     * Gets pools.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curvePoolsCurrentTest() throws ApiException {
        String id = null;
        List<CurvePoolDTO> response = api.curvePoolsCurrent(id);
        // TODO: test validations
    }

    /**
     * ProposalVotes (current)
     *
     * Gets proposalVotes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveProposalVotesCurrentTest() throws ApiException {
        List<CurveProposalVoteDTO> response = api.curveProposalVotesCurrent();
        // TODO: test validations
    }

    /**
     * Proposals (current)
     *
     * Gets proposals.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveProposalsCurrentTest() throws ApiException {
        List<CurveProposalDTO> response = api.curveProposalsCurrent();
        // TODO: test validations
    }

    /**
     * RemoveLiquidityEvents (current)
     *
     * Gets removeLiquidityEvents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveRemoveLiquidityEventsCurrentTest() throws ApiException {
        List<CurveRemoveLiquidityEventDTO> response = api.curveRemoveLiquidityEventsCurrent();
        // TODO: test validations
    }

    /**
     * RemoveLiquidityOneEvents (current)
     *
     * Gets removeLiquidityOneEvents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveRemoveLiquidityOneEventsCurrentTest() throws ApiException {
        List<CurveRemoveLiquidityOneEventDTO> response = api.curveRemoveLiquidityOneEventsCurrent();
        // TODO: test validations
    }

    /**
     * SystemStates (current)
     *
     * Gets systemStates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveSystemStatesCurrentTest() throws ApiException {
        List<CurveSystemStateDTO> response = api.curveSystemStatesCurrent();
        // TODO: test validations
    }

    /**
     * Tokens (current)
     *
     * Gets tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveTokensCurrentTest() throws ApiException {
        List<CurveTokenDTO> response = api.curveTokensCurrent();
        // TODO: test validations
    }

    /**
     * TransferOwnershipEvents (current)
     *
     * Gets transferOwnershipEvents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveTransferOwnershipEventsCurrentTest() throws ApiException {
        List<CurveTransferOwnershipEventDTO> response = api.curveTransferOwnershipEventsCurrent();
        // TODO: test validations
    }

    /**
     * UnderlyingCoins (current)
     *
     * Gets underlyingCoins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveUnderlyingCoinsCurrentTest() throws ApiException {
        List<CurveUnderlyingCoinDTO> response = api.curveUnderlyingCoinsCurrent();
        // TODO: test validations
    }

    /**
     * VotingApps (current)
     *
     * Gets votingApps.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveVotingAppsCurrentTest() throws ApiException {
        List<CurveVotingAppDTO> response = api.curveVotingAppsCurrent();
        // TODO: test validations
    }

    /**
     * WeeklyVolumes (current)
     *
     * Gets weeklyVolumes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void curveWeeklyVolumesCurrentTest() throws ApiException {
        List<CurveWeeklyVolumeDTO> response = api.curveWeeklyVolumesCurrent();
        // TODO: test validations
    }

}
