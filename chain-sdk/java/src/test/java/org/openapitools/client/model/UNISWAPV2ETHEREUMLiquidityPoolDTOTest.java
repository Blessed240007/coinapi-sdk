/*
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for UNISWAPV2ETHEREUMLiquidityPoolDTO
 */
public class UNISWAPV2ETHEREUMLiquidityPoolDTOTest {
    private final UNISWAPV2ETHEREUMLiquidityPoolDTO model = new UNISWAPV2ETHEREUMLiquidityPoolDTO();

    /**
     * Model tests for UNISWAPV2ETHEREUMLiquidityPoolDTO
     */
    @Test
    public void testUNISWAPV2ETHEREUMLiquidityPoolDTO() {
        // TODO: test UNISWAPV2ETHEREUMLiquidityPoolDTO
    }

    /**
     * Test the property 'entryTime'
     */
    @Test
    public void entryTimeTest() {
        // TODO: test entryTime
    }

    /**
     * Test the property 'recvTime'
     */
    @Test
    public void recvTimeTest() {
        // TODO: test recvTime
    }

    /**
     * Test the property 'blockNumber'
     */
    @Test
    public void blockNumberTest() {
        // TODO: test blockNumber
    }

    /**
     * Test the property 'vid'
     */
    @Test
    public void vidTest() {
        // TODO: test vid
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'protocol'
     */
    @Test
    public void protocolTest() {
        // TODO: test protocol
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'symbol'
     */
    @Test
    public void symbolTest() {
        // TODO: test symbol
    }

    /**
     * Test the property 'inputTokens'
     */
    @Test
    public void inputTokensTest() {
        // TODO: test inputTokens
    }

    /**
     * Test the property 'outputToken'
     */
    @Test
    public void outputTokenTest() {
        // TODO: test outputToken
    }

    /**
     * Test the property 'rewardTokens'
     */
    @Test
    public void rewardTokensTest() {
        // TODO: test rewardTokens
    }

    /**
     * Test the property 'fees'
     */
    @Test
    public void feesTest() {
        // TODO: test fees
    }

    /**
     * Test the property 'isSingleSided'
     */
    @Test
    public void isSingleSidedTest() {
        // TODO: test isSingleSided
    }

    /**
     * Test the property 'createdTimestamp'
     */
    @Test
    public void createdTimestampTest() {
        // TODO: test createdTimestamp
    }

    /**
     * Test the property 'createdBlockNumber'
     */
    @Test
    public void createdBlockNumberTest() {
        // TODO: test createdBlockNumber
    }

    /**
     * Test the property 'totalValueLockedUsd'
     */
    @Test
    public void totalValueLockedUsdTest() {
        // TODO: test totalValueLockedUsd
    }

    /**
     * Test the property 'cumulativeSupplySideRevenueUsd'
     */
    @Test
    public void cumulativeSupplySideRevenueUsdTest() {
        // TODO: test cumulativeSupplySideRevenueUsd
    }

    /**
     * Test the property 'cumulativeProtocolSideRevenueUsd'
     */
    @Test
    public void cumulativeProtocolSideRevenueUsdTest() {
        // TODO: test cumulativeProtocolSideRevenueUsd
    }

    /**
     * Test the property 'cumulativeTotalRevenueUsd'
     */
    @Test
    public void cumulativeTotalRevenueUsdTest() {
        // TODO: test cumulativeTotalRevenueUsd
    }

    /**
     * Test the property 'cumulativeVolumeUsd'
     */
    @Test
    public void cumulativeVolumeUsdTest() {
        // TODO: test cumulativeVolumeUsd
    }

    /**
     * Test the property 'inputTokenBalances'
     */
    @Test
    public void inputTokenBalancesTest() {
        // TODO: test inputTokenBalances
    }

    /**
     * Test the property 'inputTokenWeights'
     */
    @Test
    public void inputTokenWeightsTest() {
        // TODO: test inputTokenWeights
    }

    /**
     * Test the property 'outputTokenSupply'
     */
    @Test
    public void outputTokenSupplyTest() {
        // TODO: test outputTokenSupply
    }

    /**
     * Test the property 'outputTokenPriceUsd'
     */
    @Test
    public void outputTokenPriceUsdTest() {
        // TODO: test outputTokenPriceUsd
    }

    /**
     * Test the property 'stakedOutputTokenAmount'
     */
    @Test
    public void stakedOutputTokenAmountTest() {
        // TODO: test stakedOutputTokenAmount
    }

    /**
     * Test the property 'rewardTokenEmissionsAmount'
     */
    @Test
    public void rewardTokenEmissionsAmountTest() {
        // TODO: test rewardTokenEmissionsAmount
    }

    /**
     * Test the property 'rewardTokenEmissionsUsd'
     */
    @Test
    public void rewardTokenEmissionsUsdTest() {
        // TODO: test rewardTokenEmissionsUsd
    }

    /**
     * Test the property 'evaluatedAsk'
     */
    @Test
    public void evaluatedAskTest() {
        // TODO: test evaluatedAsk
    }

}
