note
 description:"[
		On Chain Dapps - REST API
 		 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
  		The version of the OpenAPI document: v1
 	    Contact: support@coinapi.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class UNISWAP_V2_ETHEREUM_MASTER_CHEF_DTO




feature --Access

    entry_time: detachable DATE_TIME
      
    recv_time: detachable DATE_TIME
      
 	block_number: INTEGER_64
    	 -- Number of block in which entity was recorded.
    block_range: detachable STRING_32
      -- 
    id: detachable STRING_32
      -- (masterChef type) - (pid referenced in the masterchef contract)
    address: detachable STRING_32
      -- Address of the masterchef contract
    total_alloc_point: detachable STRING_32
      -- Total allocation point of all staking pools
    reward_token_rate: detachable STRING_32
      -- Amount of reward tokens emitted per block or timestamp
    reward_token_interval: detachable STRING_32
      -- Indicates whether rewards are indicated by block or timestamp
    adjusted_reward_token_rate: detachable STRING_32
      -- Reward token rate given after you adjust for allocations either burned or not applicable
    last_updated_reward_rate: detachable STRING_32
      -- Last time the adjusted reward token rate was updated

feature -- Change Element

    set_entry_time (a_name: like entry_time)
        -- Set 'entry_time' with 'a_name'.
      do
        entry_time := a_name
      ensure
        entry_time_set: entry_time = a_name
      end

    set_recv_time (a_name: like recv_time)
        -- Set 'recv_time' with 'a_name'.
      do
        recv_time := a_name
      ensure
        recv_time_set: recv_time = a_name
      end

    set_block_number (a_name: like block_number)
        -- Set 'block_number' with 'a_name'.
      do
        block_number := a_name
      ensure
        block_number_set: block_number = a_name
      end

    set_block_range (a_name: like block_range)
        -- Set 'block_range' with 'a_name'.
      do
        block_range := a_name
      ensure
        block_range_set: block_range = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_address (a_name: like address)
        -- Set 'address' with 'a_name'.
      do
        address := a_name
      ensure
        address_set: address = a_name
      end

    set_total_alloc_point (a_name: like total_alloc_point)
        -- Set 'total_alloc_point' with 'a_name'.
      do
        total_alloc_point := a_name
      ensure
        total_alloc_point_set: total_alloc_point = a_name
      end

    set_reward_token_rate (a_name: like reward_token_rate)
        -- Set 'reward_token_rate' with 'a_name'.
      do
        reward_token_rate := a_name
      ensure
        reward_token_rate_set: reward_token_rate = a_name
      end

    set_reward_token_interval (a_name: like reward_token_interval)
        -- Set 'reward_token_interval' with 'a_name'.
      do
        reward_token_interval := a_name
      ensure
        reward_token_interval_set: reward_token_interval = a_name
      end

    set_adjusted_reward_token_rate (a_name: like adjusted_reward_token_rate)
        -- Set 'adjusted_reward_token_rate' with 'a_name'.
      do
        adjusted_reward_token_rate := a_name
      ensure
        adjusted_reward_token_rate_set: adjusted_reward_token_rate = a_name
      end

    set_last_updated_reward_rate (a_name: like last_updated_reward_rate)
        -- Set 'last_updated_reward_rate' with 'a_name'.
      do
        last_updated_reward_rate := a_name
      ensure
        last_updated_reward_rate_set: last_updated_reward_rate = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass UNISWAP_V2_ETHEREUM_MASTER_CHEF_DTO%N")
        if attached entry_time as l_entry_time then
          Result.append ("%Nentry_time:")
          Result.append (l_entry_time.out)
          Result.append ("%N")
        end
        if attached recv_time as l_recv_time then
          Result.append ("%Nrecv_time:")
          Result.append (l_recv_time.out)
          Result.append ("%N")
        end
        if attached block_number as l_block_number then
          Result.append ("%Nblock_number:")
          Result.append (l_block_number.out)
          Result.append ("%N")
        end
        if attached block_range as l_block_range then
          Result.append ("%Nblock_range:")
          Result.append (l_block_range.out)
          Result.append ("%N")
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached address as l_address then
          Result.append ("%Naddress:")
          Result.append (l_address.out)
          Result.append ("%N")
        end
        if attached total_alloc_point as l_total_alloc_point then
          Result.append ("%Ntotal_alloc_point:")
          Result.append (l_total_alloc_point.out)
          Result.append ("%N")
        end
        if attached reward_token_rate as l_reward_token_rate then
          Result.append ("%Nreward_token_rate:")
          Result.append (l_reward_token_rate.out)
          Result.append ("%N")
        end
        if attached reward_token_interval as l_reward_token_interval then
          Result.append ("%Nreward_token_interval:")
          Result.append (l_reward_token_interval.out)
          Result.append ("%N")
        end
        if attached adjusted_reward_token_rate as l_adjusted_reward_token_rate then
          Result.append ("%Nadjusted_reward_token_rate:")
          Result.append (l_adjusted_reward_token_rate.out)
          Result.append ("%N")
        end
        if attached last_updated_reward_rate as l_last_updated_reward_rate then
          Result.append ("%Nlast_updated_reward_rate:")
          Result.append (l_last_updated_reward_rate.out)
          Result.append ("%N")
        end
      end
end

