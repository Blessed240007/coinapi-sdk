note
 description:"[
		On Chain Dapps - REST API
 		 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
  		The version of the OpenAPI document: v1
 	    Contact: support@coinapi.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class PANCAKESWAP_V3_ETHEREUM_ACCOUNT_DTO




feature --Access

    entry_time: detachable DATE_TIME
      
    recv_time: detachable DATE_TIME
      
 	block_number: INTEGER_64
    	 -- Number of block in which entity was recorded.
    block_range: detachable STRING_32
      -- 
    id: detachable STRING_32
      -- Account address.
 	position_count: INTEGER_32
    	 -- Number of positions this account has.
 	open_position_count: INTEGER_32
    	 -- Number of open positions this account has.
 	closed_position_count: INTEGER_32
    	 -- Number of closed positions this account has.
 	deposit_count: INTEGER_32
    	 -- Number of deposits this account made.
 	withdraw_count: INTEGER_32
    	 -- Number of withdrawals this account made.
 	swap_count: INTEGER_32
    	 -- Number of times this account has traded/swapped.

feature -- Change Element

    set_entry_time (a_name: like entry_time)
        -- Set 'entry_time' with 'a_name'.
      do
        entry_time := a_name
      ensure
        entry_time_set: entry_time = a_name
      end

    set_recv_time (a_name: like recv_time)
        -- Set 'recv_time' with 'a_name'.
      do
        recv_time := a_name
      ensure
        recv_time_set: recv_time = a_name
      end

    set_block_number (a_name: like block_number)
        -- Set 'block_number' with 'a_name'.
      do
        block_number := a_name
      ensure
        block_number_set: block_number = a_name
      end

    set_block_range (a_name: like block_range)
        -- Set 'block_range' with 'a_name'.
      do
        block_range := a_name
      ensure
        block_range_set: block_range = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_position_count (a_name: like position_count)
        -- Set 'position_count' with 'a_name'.
      do
        position_count := a_name
      ensure
        position_count_set: position_count = a_name
      end

    set_open_position_count (a_name: like open_position_count)
        -- Set 'open_position_count' with 'a_name'.
      do
        open_position_count := a_name
      ensure
        open_position_count_set: open_position_count = a_name
      end

    set_closed_position_count (a_name: like closed_position_count)
        -- Set 'closed_position_count' with 'a_name'.
      do
        closed_position_count := a_name
      ensure
        closed_position_count_set: closed_position_count = a_name
      end

    set_deposit_count (a_name: like deposit_count)
        -- Set 'deposit_count' with 'a_name'.
      do
        deposit_count := a_name
      ensure
        deposit_count_set: deposit_count = a_name
      end

    set_withdraw_count (a_name: like withdraw_count)
        -- Set 'withdraw_count' with 'a_name'.
      do
        withdraw_count := a_name
      ensure
        withdraw_count_set: withdraw_count = a_name
      end

    set_swap_count (a_name: like swap_count)
        -- Set 'swap_count' with 'a_name'.
      do
        swap_count := a_name
      ensure
        swap_count_set: swap_count = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass PANCAKESWAP_V3_ETHEREUM_ACCOUNT_DTO%N")
        if attached entry_time as l_entry_time then
          Result.append ("%Nentry_time:")
          Result.append (l_entry_time.out)
          Result.append ("%N")
        end
        if attached recv_time as l_recv_time then
          Result.append ("%Nrecv_time:")
          Result.append (l_recv_time.out)
          Result.append ("%N")
        end
        if attached block_number as l_block_number then
          Result.append ("%Nblock_number:")
          Result.append (l_block_number.out)
          Result.append ("%N")
        end
        if attached block_range as l_block_range then
          Result.append ("%Nblock_range:")
          Result.append (l_block_range.out)
          Result.append ("%N")
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached position_count as l_position_count then
          Result.append ("%Nposition_count:")
          Result.append (l_position_count.out)
          Result.append ("%N")
        end
        if attached open_position_count as l_open_position_count then
          Result.append ("%Nopen_position_count:")
          Result.append (l_open_position_count.out)
          Result.append ("%N")
        end
        if attached closed_position_count as l_closed_position_count then
          Result.append ("%Nclosed_position_count:")
          Result.append (l_closed_position_count.out)
          Result.append ("%N")
        end
        if attached deposit_count as l_deposit_count then
          Result.append ("%Ndeposit_count:")
          Result.append (l_deposit_count.out)
          Result.append ("%N")
        end
        if attached withdraw_count as l_withdraw_count then
          Result.append ("%Nwithdraw_count:")
          Result.append (l_withdraw_count.out)
          Result.append ("%N")
        end
        if attached swap_count as l_swap_count then
          Result.append ("%Nswap_count:")
          Result.append (l_swap_count.out)
          Result.append ("%N")
        end
      end
end

