note
 description:"[
		On Chain Dapps - REST API
 		 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
  		The version of the OpenAPI document: v1
 	    Contact: support@coinapi.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class CURVE_FINANCE_ETHEREUM_DEPOSIT_DTO




feature --Access

    entry_time: detachable DATE_TIME
      
    recv_time: detachable DATE_TIME
      
 	block_number: INTEGER_64
    	 -- Number of block in which entity was recorded.
    block_range: detachable STRING_32
      -- 
    id: detachable STRING_32
      -- deposit-(Transaction hash)-(log index)
    hash: detachable STRING_32
      -- Transaction hash of the transaction that emitted this event
 	log_index: INTEGER_32
    	 -- Event log index. For transactions that don't emit event, create arbitrary index starting from 0
    protocol: detachable STRING_32
      -- The protocol this transaction belongs to
    to: detachable STRING_32
      -- Address that received the tokens
    var_from: detachable STRING_32
      -- Address that sent the tokens
    timestamp: detachable STRING_32
      -- Timestamp of this event
    input_tokens: detachable LIST [STRING_32]
      -- Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool
    output_token: detachable STRING_32
      -- Output token of the pool. E.g. the UNI-LP token
    input_token_amounts: detachable LIST [STRING_32]
      -- Amount of input tokens in the token's native unit
    output_token_amount: detachable STRING_32
      -- Amount of output tokens in the token's native unit
    amount_usd: detachable STRING_32
      -- USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool)
    pool: detachable STRING_32
      -- The pool involving this transaction

feature -- Change Element

    set_entry_time (a_name: like entry_time)
        -- Set 'entry_time' with 'a_name'.
      do
        entry_time := a_name
      ensure
        entry_time_set: entry_time = a_name
      end

    set_recv_time (a_name: like recv_time)
        -- Set 'recv_time' with 'a_name'.
      do
        recv_time := a_name
      ensure
        recv_time_set: recv_time = a_name
      end

    set_block_number (a_name: like block_number)
        -- Set 'block_number' with 'a_name'.
      do
        block_number := a_name
      ensure
        block_number_set: block_number = a_name
      end

    set_block_range (a_name: like block_range)
        -- Set 'block_range' with 'a_name'.
      do
        block_range := a_name
      ensure
        block_range_set: block_range = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_hash (a_name: like hash)
        -- Set 'hash' with 'a_name'.
      do
        hash := a_name
      ensure
        hash_set: hash = a_name
      end

    set_log_index (a_name: like log_index)
        -- Set 'log_index' with 'a_name'.
      do
        log_index := a_name
      ensure
        log_index_set: log_index = a_name
      end

    set_protocol (a_name: like protocol)
        -- Set 'protocol' with 'a_name'.
      do
        protocol := a_name
      ensure
        protocol_set: protocol = a_name
      end

    set_to (a_name: like to)
        -- Set 'to' with 'a_name'.
      do
        to := a_name
      ensure
        to_set: to = a_name
      end

    set_var_from (a_name: like var_from)
        -- Set 'var_from' with 'a_name'.
      do
        var_from := a_name
      ensure
        var_from_set: var_from = a_name
      end

    set_timestamp (a_name: like timestamp)
        -- Set 'timestamp' with 'a_name'.
      do
        timestamp := a_name
      ensure
        timestamp_set: timestamp = a_name
      end

    set_input_tokens (a_name: like input_tokens)
        -- Set 'input_tokens' with 'a_name'.
      do
        input_tokens := a_name
      ensure
        input_tokens_set: input_tokens = a_name
      end

    set_output_token (a_name: like output_token)
        -- Set 'output_token' with 'a_name'.
      do
        output_token := a_name
      ensure
        output_token_set: output_token = a_name
      end

    set_input_token_amounts (a_name: like input_token_amounts)
        -- Set 'input_token_amounts' with 'a_name'.
      do
        input_token_amounts := a_name
      ensure
        input_token_amounts_set: input_token_amounts = a_name
      end

    set_output_token_amount (a_name: like output_token_amount)
        -- Set 'output_token_amount' with 'a_name'.
      do
        output_token_amount := a_name
      ensure
        output_token_amount_set: output_token_amount = a_name
      end

    set_amount_usd (a_name: like amount_usd)
        -- Set 'amount_usd' with 'a_name'.
      do
        amount_usd := a_name
      ensure
        amount_usd_set: amount_usd = a_name
      end

    set_pool (a_name: like pool)
        -- Set 'pool' with 'a_name'.
      do
        pool := a_name
      ensure
        pool_set: pool = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass CURVE_FINANCE_ETHEREUM_DEPOSIT_DTO%N")
        if attached entry_time as l_entry_time then
          Result.append ("%Nentry_time:")
          Result.append (l_entry_time.out)
          Result.append ("%N")
        end
        if attached recv_time as l_recv_time then
          Result.append ("%Nrecv_time:")
          Result.append (l_recv_time.out)
          Result.append ("%N")
        end
        if attached block_number as l_block_number then
          Result.append ("%Nblock_number:")
          Result.append (l_block_number.out)
          Result.append ("%N")
        end
        if attached block_range as l_block_range then
          Result.append ("%Nblock_range:")
          Result.append (l_block_range.out)
          Result.append ("%N")
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached hash as l_hash then
          Result.append ("%Nhash:")
          Result.append (l_hash.out)
          Result.append ("%N")
        end
        if attached log_index as l_log_index then
          Result.append ("%Nlog_index:")
          Result.append (l_log_index.out)
          Result.append ("%N")
        end
        if attached protocol as l_protocol then
          Result.append ("%Nprotocol:")
          Result.append (l_protocol.out)
          Result.append ("%N")
        end
        if attached to as l_to then
          Result.append ("%Nto:")
          Result.append (l_to.out)
          Result.append ("%N")
        end
        if attached var_from as l_var_from then
          Result.append ("%Nvar_from:")
          Result.append (l_var_from.out)
          Result.append ("%N")
        end
        if attached timestamp as l_timestamp then
          Result.append ("%Ntimestamp:")
          Result.append (l_timestamp.out)
          Result.append ("%N")
        end
        if attached input_tokens as l_input_tokens then
          across l_input_tokens as ic loop
            Result.append ("%N input_tokens:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached output_token as l_output_token then
          Result.append ("%Noutput_token:")
          Result.append (l_output_token.out)
          Result.append ("%N")
        end
        if attached input_token_amounts as l_input_token_amounts then
          across l_input_token_amounts as ic loop
            Result.append ("%N input_token_amounts:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached output_token_amount as l_output_token_amount then
          Result.append ("%Noutput_token_amount:")
          Result.append (l_output_token_amount.out)
          Result.append ("%N")
        end
        if attached amount_usd as l_amount_usd then
          Result.append ("%Namount_usd:")
          Result.append (l_amount_usd.out)
          Result.append ("%N")
        end
        if attached pool as l_pool then
          Result.append ("%Npool:")
          Result.append (l_pool.out)
          Result.append ("%N")
        end
      end
end

