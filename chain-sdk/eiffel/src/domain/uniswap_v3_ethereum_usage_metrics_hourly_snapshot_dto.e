note
 description:"[
		On Chain Dapps - REST API
 		 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
  		The version of the OpenAPI document: v1
 	    Contact: support@coinapi.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class UNISWAP_V3_ETHEREUM_USAGE_METRICS_HOURLY_SNAPSHOT_DTO




feature --Access

    entry_time: detachable DATE_TIME
      
    recv_time: detachable DATE_TIME
      
 	block_number: INTEGER_64
    	 -- Number of block in which entity was recorded.
    id: detachable STRING_32
      -- (# of hours since Unix epoch time)
 	hour: INTEGER_32
    	 -- Number of hours since Unix epoch time
    protocol: detachable STRING_32
      -- Protocol this snapshot is associated with
 	hourly_active_users: INTEGER_32
    	 -- Number of unique hourly active users
 	cumulative_unique_users: INTEGER_32
    	 -- Number of cumulative unique users
 	hourly_transaction_count: INTEGER_32
    	 -- Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface.
 	hourly_deposit_count: INTEGER_32
    	 -- Total number of deposits (add liquidity) in an hour
 	hourly_withdraw_count: INTEGER_32
    	 -- Total number of withdrawals (remove liquidity) in an hour
 	hourly_swap_count: INTEGER_32
    	 -- Total number of trades (swaps) in an hour
    timestamp: detachable STRING_32
      -- Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)

feature -- Change Element

    set_entry_time (a_name: like entry_time)
        -- Set 'entry_time' with 'a_name'.
      do
        entry_time := a_name
      ensure
        entry_time_set: entry_time = a_name
      end

    set_recv_time (a_name: like recv_time)
        -- Set 'recv_time' with 'a_name'.
      do
        recv_time := a_name
      ensure
        recv_time_set: recv_time = a_name
      end

    set_block_number (a_name: like block_number)
        -- Set 'block_number' with 'a_name'.
      do
        block_number := a_name
      ensure
        block_number_set: block_number = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_hour (a_name: like hour)
        -- Set 'hour' with 'a_name'.
      do
        hour := a_name
      ensure
        hour_set: hour = a_name
      end

    set_protocol (a_name: like protocol)
        -- Set 'protocol' with 'a_name'.
      do
        protocol := a_name
      ensure
        protocol_set: protocol = a_name
      end

    set_hourly_active_users (a_name: like hourly_active_users)
        -- Set 'hourly_active_users' with 'a_name'.
      do
        hourly_active_users := a_name
      ensure
        hourly_active_users_set: hourly_active_users = a_name
      end

    set_cumulative_unique_users (a_name: like cumulative_unique_users)
        -- Set 'cumulative_unique_users' with 'a_name'.
      do
        cumulative_unique_users := a_name
      ensure
        cumulative_unique_users_set: cumulative_unique_users = a_name
      end

    set_hourly_transaction_count (a_name: like hourly_transaction_count)
        -- Set 'hourly_transaction_count' with 'a_name'.
      do
        hourly_transaction_count := a_name
      ensure
        hourly_transaction_count_set: hourly_transaction_count = a_name
      end

    set_hourly_deposit_count (a_name: like hourly_deposit_count)
        -- Set 'hourly_deposit_count' with 'a_name'.
      do
        hourly_deposit_count := a_name
      ensure
        hourly_deposit_count_set: hourly_deposit_count = a_name
      end

    set_hourly_withdraw_count (a_name: like hourly_withdraw_count)
        -- Set 'hourly_withdraw_count' with 'a_name'.
      do
        hourly_withdraw_count := a_name
      ensure
        hourly_withdraw_count_set: hourly_withdraw_count = a_name
      end

    set_hourly_swap_count (a_name: like hourly_swap_count)
        -- Set 'hourly_swap_count' with 'a_name'.
      do
        hourly_swap_count := a_name
      ensure
        hourly_swap_count_set: hourly_swap_count = a_name
      end

    set_timestamp (a_name: like timestamp)
        -- Set 'timestamp' with 'a_name'.
      do
        timestamp := a_name
      ensure
        timestamp_set: timestamp = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass UNISWAP_V3_ETHEREUM_USAGE_METRICS_HOURLY_SNAPSHOT_DTO%N")
        if attached entry_time as l_entry_time then
          Result.append ("%Nentry_time:")
          Result.append (l_entry_time.out)
          Result.append ("%N")
        end
        if attached recv_time as l_recv_time then
          Result.append ("%Nrecv_time:")
          Result.append (l_recv_time.out)
          Result.append ("%N")
        end
        if attached block_number as l_block_number then
          Result.append ("%Nblock_number:")
          Result.append (l_block_number.out)
          Result.append ("%N")
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached hour as l_hour then
          Result.append ("%Nhour:")
          Result.append (l_hour.out)
          Result.append ("%N")
        end
        if attached protocol as l_protocol then
          Result.append ("%Nprotocol:")
          Result.append (l_protocol.out)
          Result.append ("%N")
        end
        if attached hourly_active_users as l_hourly_active_users then
          Result.append ("%Nhourly_active_users:")
          Result.append (l_hourly_active_users.out)
          Result.append ("%N")
        end
        if attached cumulative_unique_users as l_cumulative_unique_users then
          Result.append ("%Ncumulative_unique_users:")
          Result.append (l_cumulative_unique_users.out)
          Result.append ("%N")
        end
        if attached hourly_transaction_count as l_hourly_transaction_count then
          Result.append ("%Nhourly_transaction_count:")
          Result.append (l_hourly_transaction_count.out)
          Result.append ("%N")
        end
        if attached hourly_deposit_count as l_hourly_deposit_count then
          Result.append ("%Nhourly_deposit_count:")
          Result.append (l_hourly_deposit_count.out)
          Result.append ("%N")
        end
        if attached hourly_withdraw_count as l_hourly_withdraw_count then
          Result.append ("%Nhourly_withdraw_count:")
          Result.append (l_hourly_withdraw_count.out)
          Result.append ("%N")
        end
        if attached hourly_swap_count as l_hourly_swap_count then
          Result.append ("%Nhourly_swap_count:")
          Result.append (l_hourly_swap_count.out)
          Result.append ("%N")
        end
        if attached timestamp as l_timestamp then
          Result.append ("%Ntimestamp:")
          Result.append (l_timestamp.out)
          Result.append ("%N")
        end
      end
end

