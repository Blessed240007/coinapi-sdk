note
 description:"[
		On Chain Dapps - REST API
 		 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
  		The version of the OpenAPI document: v1
 	    Contact: support@coinapi.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class CURVE_FINANCE_ETHEREUM_LIQUIDITY_POOL_HOURLY_SNAPSHOT_DTO




feature --Access

    entry_time: detachable DATE_TIME
      
    recv_time: detachable DATE_TIME
      
 	block_number: INTEGER_64
    	 -- Number of block in which entity was recorded.
    block_range: detachable STRING_32
      -- 
    id: detachable STRING_32
      -- (smart contract address of the pool)-(# of hours since unix epoch time)
    protocol: detachable STRING_32
      -- The protocol this snapshot belongs to
    pool: detachable STRING_32
      -- The pool this snapshot belongs to
    timestamp: detachable STRING_32
      -- Timestamp of this snapshot
    total_value_locked_usd: detachable STRING_32
      -- Current TVL (Total Value Locked) of this pool
    cumulative_supply_side_revenue_usd: detachable STRING_32
      -- All revenue generated by the liquidity pool, accrued to the supply side.
    hourly_supply_side_revenue_usd: detachable STRING_32
      -- Hourly revenue generated by the liquidity pool, accrued to the supply side.
    cumulative_protocol_side_revenue_usd: detachable STRING_32
      -- All revenue generated by the liquidity pool, accrued to the protocol.
    hourly_protocol_side_revenue_usd: detachable STRING_32
      -- Hourly revenue generated by the liquidity pool, accrued to the protocol.
    cumulative_total_revenue_usd: detachable STRING_32
      -- All revenue generated by the liquidity pool.
    hourly_total_revenue_usd: detachable STRING_32
      -- Hourly revenue generated by the liquidity pool.
    hourly_volume_usd: detachable STRING_32
      -- All trade volume occurred in a given hour, in USD
    hourly_volume_by_token_amount: detachable LIST [STRING_32]
      -- All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool's 'inputTokens' field.
    hourly_volume_by_token_usd: detachable LIST [STRING_32]
      -- All trade volume occurred in a given hour for a specific input token, in USD. The ordering should be the same as the pool's 'inputTokens' field.
    cumulative_volume_usd: detachable STRING_32
      -- All historical trade volume occurred in this pool, in USD
    input_token_balances: detachable LIST [STRING_32]
      -- Amount of input tokens in the pool. The ordering should be the same as the pool's 'inputTokens' field.
    input_token_weights: detachable LIST [STRING_32]
      -- Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool
    output_token_supply: detachable STRING_32
      -- Total supply of output token. Note that certain DEXes don't have an output token (e.g. Bancor)
    output_token_price_usd: detachable STRING_32
      -- Price per share of output token in USD
    staked_output_token_amount: detachable STRING_32
      -- Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
    reward_token_emissions_amount: detachable LIST [STRING_32]
      -- Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
    reward_token_emissions_usd: detachable LIST [STRING_32]
      -- Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.

feature -- Change Element

    set_entry_time (a_name: like entry_time)
        -- Set 'entry_time' with 'a_name'.
      do
        entry_time := a_name
      ensure
        entry_time_set: entry_time = a_name
      end

    set_recv_time (a_name: like recv_time)
        -- Set 'recv_time' with 'a_name'.
      do
        recv_time := a_name
      ensure
        recv_time_set: recv_time = a_name
      end

    set_block_number (a_name: like block_number)
        -- Set 'block_number' with 'a_name'.
      do
        block_number := a_name
      ensure
        block_number_set: block_number = a_name
      end

    set_block_range (a_name: like block_range)
        -- Set 'block_range' with 'a_name'.
      do
        block_range := a_name
      ensure
        block_range_set: block_range = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_protocol (a_name: like protocol)
        -- Set 'protocol' with 'a_name'.
      do
        protocol := a_name
      ensure
        protocol_set: protocol = a_name
      end

    set_pool (a_name: like pool)
        -- Set 'pool' with 'a_name'.
      do
        pool := a_name
      ensure
        pool_set: pool = a_name
      end

    set_timestamp (a_name: like timestamp)
        -- Set 'timestamp' with 'a_name'.
      do
        timestamp := a_name
      ensure
        timestamp_set: timestamp = a_name
      end

    set_total_value_locked_usd (a_name: like total_value_locked_usd)
        -- Set 'total_value_locked_usd' with 'a_name'.
      do
        total_value_locked_usd := a_name
      ensure
        total_value_locked_usd_set: total_value_locked_usd = a_name
      end

    set_cumulative_supply_side_revenue_usd (a_name: like cumulative_supply_side_revenue_usd)
        -- Set 'cumulative_supply_side_revenue_usd' with 'a_name'.
      do
        cumulative_supply_side_revenue_usd := a_name
      ensure
        cumulative_supply_side_revenue_usd_set: cumulative_supply_side_revenue_usd = a_name
      end

    set_hourly_supply_side_revenue_usd (a_name: like hourly_supply_side_revenue_usd)
        -- Set 'hourly_supply_side_revenue_usd' with 'a_name'.
      do
        hourly_supply_side_revenue_usd := a_name
      ensure
        hourly_supply_side_revenue_usd_set: hourly_supply_side_revenue_usd = a_name
      end

    set_cumulative_protocol_side_revenue_usd (a_name: like cumulative_protocol_side_revenue_usd)
        -- Set 'cumulative_protocol_side_revenue_usd' with 'a_name'.
      do
        cumulative_protocol_side_revenue_usd := a_name
      ensure
        cumulative_protocol_side_revenue_usd_set: cumulative_protocol_side_revenue_usd = a_name
      end

    set_hourly_protocol_side_revenue_usd (a_name: like hourly_protocol_side_revenue_usd)
        -- Set 'hourly_protocol_side_revenue_usd' with 'a_name'.
      do
        hourly_protocol_side_revenue_usd := a_name
      ensure
        hourly_protocol_side_revenue_usd_set: hourly_protocol_side_revenue_usd = a_name
      end

    set_cumulative_total_revenue_usd (a_name: like cumulative_total_revenue_usd)
        -- Set 'cumulative_total_revenue_usd' with 'a_name'.
      do
        cumulative_total_revenue_usd := a_name
      ensure
        cumulative_total_revenue_usd_set: cumulative_total_revenue_usd = a_name
      end

    set_hourly_total_revenue_usd (a_name: like hourly_total_revenue_usd)
        -- Set 'hourly_total_revenue_usd' with 'a_name'.
      do
        hourly_total_revenue_usd := a_name
      ensure
        hourly_total_revenue_usd_set: hourly_total_revenue_usd = a_name
      end

    set_hourly_volume_usd (a_name: like hourly_volume_usd)
        -- Set 'hourly_volume_usd' with 'a_name'.
      do
        hourly_volume_usd := a_name
      ensure
        hourly_volume_usd_set: hourly_volume_usd = a_name
      end

    set_hourly_volume_by_token_amount (a_name: like hourly_volume_by_token_amount)
        -- Set 'hourly_volume_by_token_amount' with 'a_name'.
      do
        hourly_volume_by_token_amount := a_name
      ensure
        hourly_volume_by_token_amount_set: hourly_volume_by_token_amount = a_name
      end

    set_hourly_volume_by_token_usd (a_name: like hourly_volume_by_token_usd)
        -- Set 'hourly_volume_by_token_usd' with 'a_name'.
      do
        hourly_volume_by_token_usd := a_name
      ensure
        hourly_volume_by_token_usd_set: hourly_volume_by_token_usd = a_name
      end

    set_cumulative_volume_usd (a_name: like cumulative_volume_usd)
        -- Set 'cumulative_volume_usd' with 'a_name'.
      do
        cumulative_volume_usd := a_name
      ensure
        cumulative_volume_usd_set: cumulative_volume_usd = a_name
      end

    set_input_token_balances (a_name: like input_token_balances)
        -- Set 'input_token_balances' with 'a_name'.
      do
        input_token_balances := a_name
      ensure
        input_token_balances_set: input_token_balances = a_name
      end

    set_input_token_weights (a_name: like input_token_weights)
        -- Set 'input_token_weights' with 'a_name'.
      do
        input_token_weights := a_name
      ensure
        input_token_weights_set: input_token_weights = a_name
      end

    set_output_token_supply (a_name: like output_token_supply)
        -- Set 'output_token_supply' with 'a_name'.
      do
        output_token_supply := a_name
      ensure
        output_token_supply_set: output_token_supply = a_name
      end

    set_output_token_price_usd (a_name: like output_token_price_usd)
        -- Set 'output_token_price_usd' with 'a_name'.
      do
        output_token_price_usd := a_name
      ensure
        output_token_price_usd_set: output_token_price_usd = a_name
      end

    set_staked_output_token_amount (a_name: like staked_output_token_amount)
        -- Set 'staked_output_token_amount' with 'a_name'.
      do
        staked_output_token_amount := a_name
      ensure
        staked_output_token_amount_set: staked_output_token_amount = a_name
      end

    set_reward_token_emissions_amount (a_name: like reward_token_emissions_amount)
        -- Set 'reward_token_emissions_amount' with 'a_name'.
      do
        reward_token_emissions_amount := a_name
      ensure
        reward_token_emissions_amount_set: reward_token_emissions_amount = a_name
      end

    set_reward_token_emissions_usd (a_name: like reward_token_emissions_usd)
        -- Set 'reward_token_emissions_usd' with 'a_name'.
      do
        reward_token_emissions_usd := a_name
      ensure
        reward_token_emissions_usd_set: reward_token_emissions_usd = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass CURVE_FINANCE_ETHEREUM_LIQUIDITY_POOL_HOURLY_SNAPSHOT_DTO%N")
        if attached entry_time as l_entry_time then
          Result.append ("%Nentry_time:")
          Result.append (l_entry_time.out)
          Result.append ("%N")
        end
        if attached recv_time as l_recv_time then
          Result.append ("%Nrecv_time:")
          Result.append (l_recv_time.out)
          Result.append ("%N")
        end
        if attached block_number as l_block_number then
          Result.append ("%Nblock_number:")
          Result.append (l_block_number.out)
          Result.append ("%N")
        end
        if attached block_range as l_block_range then
          Result.append ("%Nblock_range:")
          Result.append (l_block_range.out)
          Result.append ("%N")
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached protocol as l_protocol then
          Result.append ("%Nprotocol:")
          Result.append (l_protocol.out)
          Result.append ("%N")
        end
        if attached pool as l_pool then
          Result.append ("%Npool:")
          Result.append (l_pool.out)
          Result.append ("%N")
        end
        if attached timestamp as l_timestamp then
          Result.append ("%Ntimestamp:")
          Result.append (l_timestamp.out)
          Result.append ("%N")
        end
        if attached total_value_locked_usd as l_total_value_locked_usd then
          Result.append ("%Ntotal_value_locked_usd:")
          Result.append (l_total_value_locked_usd.out)
          Result.append ("%N")
        end
        if attached cumulative_supply_side_revenue_usd as l_cumulative_supply_side_revenue_usd then
          Result.append ("%Ncumulative_supply_side_revenue_usd:")
          Result.append (l_cumulative_supply_side_revenue_usd.out)
          Result.append ("%N")
        end
        if attached hourly_supply_side_revenue_usd as l_hourly_supply_side_revenue_usd then
          Result.append ("%Nhourly_supply_side_revenue_usd:")
          Result.append (l_hourly_supply_side_revenue_usd.out)
          Result.append ("%N")
        end
        if attached cumulative_protocol_side_revenue_usd as l_cumulative_protocol_side_revenue_usd then
          Result.append ("%Ncumulative_protocol_side_revenue_usd:")
          Result.append (l_cumulative_protocol_side_revenue_usd.out)
          Result.append ("%N")
        end
        if attached hourly_protocol_side_revenue_usd as l_hourly_protocol_side_revenue_usd then
          Result.append ("%Nhourly_protocol_side_revenue_usd:")
          Result.append (l_hourly_protocol_side_revenue_usd.out)
          Result.append ("%N")
        end
        if attached cumulative_total_revenue_usd as l_cumulative_total_revenue_usd then
          Result.append ("%Ncumulative_total_revenue_usd:")
          Result.append (l_cumulative_total_revenue_usd.out)
          Result.append ("%N")
        end
        if attached hourly_total_revenue_usd as l_hourly_total_revenue_usd then
          Result.append ("%Nhourly_total_revenue_usd:")
          Result.append (l_hourly_total_revenue_usd.out)
          Result.append ("%N")
        end
        if attached hourly_volume_usd as l_hourly_volume_usd then
          Result.append ("%Nhourly_volume_usd:")
          Result.append (l_hourly_volume_usd.out)
          Result.append ("%N")
        end
        if attached hourly_volume_by_token_amount as l_hourly_volume_by_token_amount then
          across l_hourly_volume_by_token_amount as ic loop
            Result.append ("%N hourly_volume_by_token_amount:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached hourly_volume_by_token_usd as l_hourly_volume_by_token_usd then
          across l_hourly_volume_by_token_usd as ic loop
            Result.append ("%N hourly_volume_by_token_usd:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached cumulative_volume_usd as l_cumulative_volume_usd then
          Result.append ("%Ncumulative_volume_usd:")
          Result.append (l_cumulative_volume_usd.out)
          Result.append ("%N")
        end
        if attached input_token_balances as l_input_token_balances then
          across l_input_token_balances as ic loop
            Result.append ("%N input_token_balances:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached input_token_weights as l_input_token_weights then
          across l_input_token_weights as ic loop
            Result.append ("%N input_token_weights:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached output_token_supply as l_output_token_supply then
          Result.append ("%Noutput_token_supply:")
          Result.append (l_output_token_supply.out)
          Result.append ("%N")
        end
        if attached output_token_price_usd as l_output_token_price_usd then
          Result.append ("%Noutput_token_price_usd:")
          Result.append (l_output_token_price_usd.out)
          Result.append ("%N")
        end
        if attached staked_output_token_amount as l_staked_output_token_amount then
          Result.append ("%Nstaked_output_token_amount:")
          Result.append (l_staked_output_token_amount.out)
          Result.append ("%N")
        end
        if attached reward_token_emissions_amount as l_reward_token_emissions_amount then
          across l_reward_token_emissions_amount as ic loop
            Result.append ("%N reward_token_emissions_amount:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached reward_token_emissions_usd as l_reward_token_emissions_usd then
          across l_reward_token_emissions_usd as ic loop
            Result.append ("%N reward_token_emissions_usd:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

