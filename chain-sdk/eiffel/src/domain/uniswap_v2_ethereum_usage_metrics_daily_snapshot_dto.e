note
 description:"[
		On Chain Dapps - REST API
 		 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
  		The version of the OpenAPI document: v1
 	    Contact: support@coinapi.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class UNISWAP_V2_ETHEREUM_USAGE_METRICS_DAILY_SNAPSHOT_DTO




feature --Access

    entry_time: detachable DATE_TIME
      
    recv_time: detachable DATE_TIME
      
 	block_number: INTEGER_64
    	 -- Number of block in which entity was recorded.
    block_range: detachable STRING_32
      -- 
    id: detachable STRING_32
      -- ID is # of days since Unix epoch time
    protocol: detachable STRING_32
      -- Protocol this snapshot is associated with
 	daily_active_users: INTEGER_32
    	 -- Number of unique daily active users
 	cumulative_unique_users: INTEGER_32
    	 -- Number of cumulative unique users
 	daily_transaction_count: INTEGER_32
    	 -- Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface.
 	daily_deposit_count: INTEGER_32
    	 -- Total number of deposits (add liquidity) in a day
 	daily_withdraw_count: INTEGER_32
    	 -- Total number of withdrawals (remove liquidity) in a day
 	daily_swap_count: INTEGER_32
    	 -- Total number of trades (swaps) in a day
 	total_pool_count: INTEGER_32
    	 -- Total number of pools
    timestamp: detachable STRING_32
      -- Timestamp of this snapshot

feature -- Change Element

    set_entry_time (a_name: like entry_time)
        -- Set 'entry_time' with 'a_name'.
      do
        entry_time := a_name
      ensure
        entry_time_set: entry_time = a_name
      end

    set_recv_time (a_name: like recv_time)
        -- Set 'recv_time' with 'a_name'.
      do
        recv_time := a_name
      ensure
        recv_time_set: recv_time = a_name
      end

    set_block_number (a_name: like block_number)
        -- Set 'block_number' with 'a_name'.
      do
        block_number := a_name
      ensure
        block_number_set: block_number = a_name
      end

    set_block_range (a_name: like block_range)
        -- Set 'block_range' with 'a_name'.
      do
        block_range := a_name
      ensure
        block_range_set: block_range = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_protocol (a_name: like protocol)
        -- Set 'protocol' with 'a_name'.
      do
        protocol := a_name
      ensure
        protocol_set: protocol = a_name
      end

    set_daily_active_users (a_name: like daily_active_users)
        -- Set 'daily_active_users' with 'a_name'.
      do
        daily_active_users := a_name
      ensure
        daily_active_users_set: daily_active_users = a_name
      end

    set_cumulative_unique_users (a_name: like cumulative_unique_users)
        -- Set 'cumulative_unique_users' with 'a_name'.
      do
        cumulative_unique_users := a_name
      ensure
        cumulative_unique_users_set: cumulative_unique_users = a_name
      end

    set_daily_transaction_count (a_name: like daily_transaction_count)
        -- Set 'daily_transaction_count' with 'a_name'.
      do
        daily_transaction_count := a_name
      ensure
        daily_transaction_count_set: daily_transaction_count = a_name
      end

    set_daily_deposit_count (a_name: like daily_deposit_count)
        -- Set 'daily_deposit_count' with 'a_name'.
      do
        daily_deposit_count := a_name
      ensure
        daily_deposit_count_set: daily_deposit_count = a_name
      end

    set_daily_withdraw_count (a_name: like daily_withdraw_count)
        -- Set 'daily_withdraw_count' with 'a_name'.
      do
        daily_withdraw_count := a_name
      ensure
        daily_withdraw_count_set: daily_withdraw_count = a_name
      end

    set_daily_swap_count (a_name: like daily_swap_count)
        -- Set 'daily_swap_count' with 'a_name'.
      do
        daily_swap_count := a_name
      ensure
        daily_swap_count_set: daily_swap_count = a_name
      end

    set_total_pool_count (a_name: like total_pool_count)
        -- Set 'total_pool_count' with 'a_name'.
      do
        total_pool_count := a_name
      ensure
        total_pool_count_set: total_pool_count = a_name
      end

    set_timestamp (a_name: like timestamp)
        -- Set 'timestamp' with 'a_name'.
      do
        timestamp := a_name
      ensure
        timestamp_set: timestamp = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass UNISWAP_V2_ETHEREUM_USAGE_METRICS_DAILY_SNAPSHOT_DTO%N")
        if attached entry_time as l_entry_time then
          Result.append ("%Nentry_time:")
          Result.append (l_entry_time.out)
          Result.append ("%N")
        end
        if attached recv_time as l_recv_time then
          Result.append ("%Nrecv_time:")
          Result.append (l_recv_time.out)
          Result.append ("%N")
        end
        if attached block_number as l_block_number then
          Result.append ("%Nblock_number:")
          Result.append (l_block_number.out)
          Result.append ("%N")
        end
        if attached block_range as l_block_range then
          Result.append ("%Nblock_range:")
          Result.append (l_block_range.out)
          Result.append ("%N")
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached protocol as l_protocol then
          Result.append ("%Nprotocol:")
          Result.append (l_protocol.out)
          Result.append ("%N")
        end
        if attached daily_active_users as l_daily_active_users then
          Result.append ("%Ndaily_active_users:")
          Result.append (l_daily_active_users.out)
          Result.append ("%N")
        end
        if attached cumulative_unique_users as l_cumulative_unique_users then
          Result.append ("%Ncumulative_unique_users:")
          Result.append (l_cumulative_unique_users.out)
          Result.append ("%N")
        end
        if attached daily_transaction_count as l_daily_transaction_count then
          Result.append ("%Ndaily_transaction_count:")
          Result.append (l_daily_transaction_count.out)
          Result.append ("%N")
        end
        if attached daily_deposit_count as l_daily_deposit_count then
          Result.append ("%Ndaily_deposit_count:")
          Result.append (l_daily_deposit_count.out)
          Result.append ("%N")
        end
        if attached daily_withdraw_count as l_daily_withdraw_count then
          Result.append ("%Ndaily_withdraw_count:")
          Result.append (l_daily_withdraw_count.out)
          Result.append ("%N")
        end
        if attached daily_swap_count as l_daily_swap_count then
          Result.append ("%Ndaily_swap_count:")
          Result.append (l_daily_swap_count.out)
          Result.append ("%N")
        end
        if attached total_pool_count as l_total_pool_count then
          Result.append ("%Ntotal_pool_count:")
          Result.append (l_total_pool_count.out)
          Result.append ("%N")
        end
        if attached timestamp as l_timestamp then
          Result.append ("%Ntimestamp:")
          Result.append (l_timestamp.out)
          Result.append ("%N")
        end
      end
end

