note
 description:"[
		On Chain Dapps - REST API
 		 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
  		The version of the OpenAPI document: v1
 	    Contact: support@coinapi.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class UNISWAP_V2_ETHEREUM_REWARDER_PROBE_DTO




feature --Access

    entry_time: detachable DATE_TIME
      
    recv_time: detachable DATE_TIME
      
 	block_number: INTEGER_64
    	 -- Number of block in which entity was recorded.
    block_range: detachable STRING_32
      -- 
    id: detachable STRING_32
      -- (rewarder)-(probeNum)
    user: detachable STRING_32
      -- The address being probed
    pending: detachable STRING_32
      -- The value from the last probe
    block_num: detachable STRING_32
      -- Block at which the probe was made
    timestamp: detachable STRING_32
      -- Block timestamp at whihc the probe was taken
    lp_staked: detachable STRING_32
      -- Total LP staked in pool at the time of the probe

feature -- Change Element

    set_entry_time (a_name: like entry_time)
        -- Set 'entry_time' with 'a_name'.
      do
        entry_time := a_name
      ensure
        entry_time_set: entry_time = a_name
      end

    set_recv_time (a_name: like recv_time)
        -- Set 'recv_time' with 'a_name'.
      do
        recv_time := a_name
      ensure
        recv_time_set: recv_time = a_name
      end

    set_block_number (a_name: like block_number)
        -- Set 'block_number' with 'a_name'.
      do
        block_number := a_name
      ensure
        block_number_set: block_number = a_name
      end

    set_block_range (a_name: like block_range)
        -- Set 'block_range' with 'a_name'.
      do
        block_range := a_name
      ensure
        block_range_set: block_range = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_user (a_name: like user)
        -- Set 'user' with 'a_name'.
      do
        user := a_name
      ensure
        user_set: user = a_name
      end

    set_pending (a_name: like pending)
        -- Set 'pending' with 'a_name'.
      do
        pending := a_name
      ensure
        pending_set: pending = a_name
      end

    set_block_num (a_name: like block_num)
        -- Set 'block_num' with 'a_name'.
      do
        block_num := a_name
      ensure
        block_num_set: block_num = a_name
      end

    set_timestamp (a_name: like timestamp)
        -- Set 'timestamp' with 'a_name'.
      do
        timestamp := a_name
      ensure
        timestamp_set: timestamp = a_name
      end

    set_lp_staked (a_name: like lp_staked)
        -- Set 'lp_staked' with 'a_name'.
      do
        lp_staked := a_name
      ensure
        lp_staked_set: lp_staked = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass UNISWAP_V2_ETHEREUM_REWARDER_PROBE_DTO%N")
        if attached entry_time as l_entry_time then
          Result.append ("%Nentry_time:")
          Result.append (l_entry_time.out)
          Result.append ("%N")
        end
        if attached recv_time as l_recv_time then
          Result.append ("%Nrecv_time:")
          Result.append (l_recv_time.out)
          Result.append ("%N")
        end
        if attached block_number as l_block_number then
          Result.append ("%Nblock_number:")
          Result.append (l_block_number.out)
          Result.append ("%N")
        end
        if attached block_range as l_block_range then
          Result.append ("%Nblock_range:")
          Result.append (l_block_range.out)
          Result.append ("%N")
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached user as l_user then
          Result.append ("%Nuser:")
          Result.append (l_user.out)
          Result.append ("%N")
        end
        if attached pending as l_pending then
          Result.append ("%Npending:")
          Result.append (l_pending.out)
          Result.append ("%N")
        end
        if attached block_num as l_block_num then
          Result.append ("%Nblock_num:")
          Result.append (l_block_num.out)
          Result.append ("%N")
        end
        if attached timestamp as l_timestamp then
          Result.append ("%Ntimestamp:")
          Result.append (l_timestamp.out)
          Result.append ("%N")
        end
        if attached lp_staked as l_lp_staked then
          Result.append ("%Nlp_staked:")
          Result.append (l_lp_staked.out)
          Result.append ("%N")
        end
      end
end

