note
 description:"[
		On Chain Dapps - REST API
 		 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
  		The version of the OpenAPI document: v1
 	    Contact: support@coinapi.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class CURVE_FINANCE_ETHEREUM_DEX_AMM_PROTOCOL_DTO




feature --Access

    entry_time: detachable DATE_TIME
      
    recv_time: detachable DATE_TIME
      
 	block_number: INTEGER_64
    	 -- Number of block in which entity was recorded.
    block_range: detachable STRING_32
      -- 
    id: detachable STRING_32
      -- Smart contract address of the protocol's main contract (Factory, Registry, etc)
    name: detachable STRING_32
      -- Name of the protocol, including version.
    slug: detachable STRING_32
      -- Slug of protocol, including version.
    schema_version: detachable STRING_32
      -- Version of the subgraph schema, in SemVer format (e.g. 1.0.0)
    subgraph_version: detachable STRING_32
      -- Version of the subgraph implementation, in SemVer format (e.g. 1.0.0)
    methodology_version: detachable STRING_32
      -- Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0)
    total_value_locked_usd: detachable STRING_32
      -- Current TVL (Total Value Locked) of the entire protocol
    protocol_controlled_value_usd: detachable STRING_32
      -- Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.
    cumulative_volume_usd: detachable STRING_32
      -- All historical volume in USD
    cumulative_supply_side_revenue_usd: detachable STRING_32
      -- Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
    cumulative_protocol_side_revenue_usd: detachable STRING_32
      -- Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushiâ€™s 0.05%). OpenSea 10% sell fee.
    cumulative_total_revenue_usd: detachable STRING_32
      -- All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
 	cumulative_unique_users: INTEGER_32
    	 -- Number of cumulative unique users
 	total_pool_count: INTEGER_32
    	 -- Total number of pools
    pool_ids: detachable LIST [STRING_32]
      -- All pools that belong to this protocol

feature -- Change Element

    set_entry_time (a_name: like entry_time)
        -- Set 'entry_time' with 'a_name'.
      do
        entry_time := a_name
      ensure
        entry_time_set: entry_time = a_name
      end

    set_recv_time (a_name: like recv_time)
        -- Set 'recv_time' with 'a_name'.
      do
        recv_time := a_name
      ensure
        recv_time_set: recv_time = a_name
      end

    set_block_number (a_name: like block_number)
        -- Set 'block_number' with 'a_name'.
      do
        block_number := a_name
      ensure
        block_number_set: block_number = a_name
      end

    set_block_range (a_name: like block_range)
        -- Set 'block_range' with 'a_name'.
      do
        block_range := a_name
      ensure
        block_range_set: block_range = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_name (a_name: like name)
        -- Set 'name' with 'a_name'.
      do
        name := a_name
      ensure
        name_set: name = a_name
      end

    set_slug (a_name: like slug)
        -- Set 'slug' with 'a_name'.
      do
        slug := a_name
      ensure
        slug_set: slug = a_name
      end

    set_schema_version (a_name: like schema_version)
        -- Set 'schema_version' with 'a_name'.
      do
        schema_version := a_name
      ensure
        schema_version_set: schema_version = a_name
      end

    set_subgraph_version (a_name: like subgraph_version)
        -- Set 'subgraph_version' with 'a_name'.
      do
        subgraph_version := a_name
      ensure
        subgraph_version_set: subgraph_version = a_name
      end

    set_methodology_version (a_name: like methodology_version)
        -- Set 'methodology_version' with 'a_name'.
      do
        methodology_version := a_name
      ensure
        methodology_version_set: methodology_version = a_name
      end

    set_total_value_locked_usd (a_name: like total_value_locked_usd)
        -- Set 'total_value_locked_usd' with 'a_name'.
      do
        total_value_locked_usd := a_name
      ensure
        total_value_locked_usd_set: total_value_locked_usd = a_name
      end

    set_protocol_controlled_value_usd (a_name: like protocol_controlled_value_usd)
        -- Set 'protocol_controlled_value_usd' with 'a_name'.
      do
        protocol_controlled_value_usd := a_name
      ensure
        protocol_controlled_value_usd_set: protocol_controlled_value_usd = a_name
      end

    set_cumulative_volume_usd (a_name: like cumulative_volume_usd)
        -- Set 'cumulative_volume_usd' with 'a_name'.
      do
        cumulative_volume_usd := a_name
      ensure
        cumulative_volume_usd_set: cumulative_volume_usd = a_name
      end

    set_cumulative_supply_side_revenue_usd (a_name: like cumulative_supply_side_revenue_usd)
        -- Set 'cumulative_supply_side_revenue_usd' with 'a_name'.
      do
        cumulative_supply_side_revenue_usd := a_name
      ensure
        cumulative_supply_side_revenue_usd_set: cumulative_supply_side_revenue_usd = a_name
      end

    set_cumulative_protocol_side_revenue_usd (a_name: like cumulative_protocol_side_revenue_usd)
        -- Set 'cumulative_protocol_side_revenue_usd' with 'a_name'.
      do
        cumulative_protocol_side_revenue_usd := a_name
      ensure
        cumulative_protocol_side_revenue_usd_set: cumulative_protocol_side_revenue_usd = a_name
      end

    set_cumulative_total_revenue_usd (a_name: like cumulative_total_revenue_usd)
        -- Set 'cumulative_total_revenue_usd' with 'a_name'.
      do
        cumulative_total_revenue_usd := a_name
      ensure
        cumulative_total_revenue_usd_set: cumulative_total_revenue_usd = a_name
      end

    set_cumulative_unique_users (a_name: like cumulative_unique_users)
        -- Set 'cumulative_unique_users' with 'a_name'.
      do
        cumulative_unique_users := a_name
      ensure
        cumulative_unique_users_set: cumulative_unique_users = a_name
      end

    set_total_pool_count (a_name: like total_pool_count)
        -- Set 'total_pool_count' with 'a_name'.
      do
        total_pool_count := a_name
      ensure
        total_pool_count_set: total_pool_count = a_name
      end

    set_pool_ids (a_name: like pool_ids)
        -- Set 'pool_ids' with 'a_name'.
      do
        pool_ids := a_name
      ensure
        pool_ids_set: pool_ids = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass CURVE_FINANCE_ETHEREUM_DEX_AMM_PROTOCOL_DTO%N")
        if attached entry_time as l_entry_time then
          Result.append ("%Nentry_time:")
          Result.append (l_entry_time.out)
          Result.append ("%N")
        end
        if attached recv_time as l_recv_time then
          Result.append ("%Nrecv_time:")
          Result.append (l_recv_time.out)
          Result.append ("%N")
        end
        if attached block_number as l_block_number then
          Result.append ("%Nblock_number:")
          Result.append (l_block_number.out)
          Result.append ("%N")
        end
        if attached block_range as l_block_range then
          Result.append ("%Nblock_range:")
          Result.append (l_block_range.out)
          Result.append ("%N")
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached name as l_name then
          Result.append ("%Nname:")
          Result.append (l_name.out)
          Result.append ("%N")
        end
        if attached slug as l_slug then
          Result.append ("%Nslug:")
          Result.append (l_slug.out)
          Result.append ("%N")
        end
        if attached schema_version as l_schema_version then
          Result.append ("%Nschema_version:")
          Result.append (l_schema_version.out)
          Result.append ("%N")
        end
        if attached subgraph_version as l_subgraph_version then
          Result.append ("%Nsubgraph_version:")
          Result.append (l_subgraph_version.out)
          Result.append ("%N")
        end
        if attached methodology_version as l_methodology_version then
          Result.append ("%Nmethodology_version:")
          Result.append (l_methodology_version.out)
          Result.append ("%N")
        end
        if attached total_value_locked_usd as l_total_value_locked_usd then
          Result.append ("%Ntotal_value_locked_usd:")
          Result.append (l_total_value_locked_usd.out)
          Result.append ("%N")
        end
        if attached protocol_controlled_value_usd as l_protocol_controlled_value_usd then
          Result.append ("%Nprotocol_controlled_value_usd:")
          Result.append (l_protocol_controlled_value_usd.out)
          Result.append ("%N")
        end
        if attached cumulative_volume_usd as l_cumulative_volume_usd then
          Result.append ("%Ncumulative_volume_usd:")
          Result.append (l_cumulative_volume_usd.out)
          Result.append ("%N")
        end
        if attached cumulative_supply_side_revenue_usd as l_cumulative_supply_side_revenue_usd then
          Result.append ("%Ncumulative_supply_side_revenue_usd:")
          Result.append (l_cumulative_supply_side_revenue_usd.out)
          Result.append ("%N")
        end
        if attached cumulative_protocol_side_revenue_usd as l_cumulative_protocol_side_revenue_usd then
          Result.append ("%Ncumulative_protocol_side_revenue_usd:")
          Result.append (l_cumulative_protocol_side_revenue_usd.out)
          Result.append ("%N")
        end
        if attached cumulative_total_revenue_usd as l_cumulative_total_revenue_usd then
          Result.append ("%Ncumulative_total_revenue_usd:")
          Result.append (l_cumulative_total_revenue_usd.out)
          Result.append ("%N")
        end
        if attached cumulative_unique_users as l_cumulative_unique_users then
          Result.append ("%Ncumulative_unique_users:")
          Result.append (l_cumulative_unique_users.out)
          Result.append ("%N")
        end
        if attached total_pool_count as l_total_pool_count then
          Result.append ("%Ntotal_pool_count:")
          Result.append (l_total_pool_count.out)
          Result.append ("%N")
        end
        if attached pool_ids as l_pool_ids then
          across l_pool_ids as ic loop
            Result.append ("%N pool_ids:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

