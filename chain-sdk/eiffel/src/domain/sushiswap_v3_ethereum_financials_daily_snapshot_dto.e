note
 description:"[
		On Chain Dapps - REST API
 		 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
  		The version of the OpenAPI document: v1
 	    Contact: support@coinapi.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class SUSHISWAP_V3_ETHEREUM_FINANCIALS_DAILY_SNAPSHOT_DTO




feature --Access

    entry_time: detachable DATE_TIME
      
    recv_time: detachable DATE_TIME
      
 	block_number: INTEGER_32
    	 -- Block number of when this snapshot was taken/last modified.)
    id: detachable STRING_32
      -- ID is # of days since Unix epoch time.
 	day: INTEGER_32
    	 -- Number of days since Unix epoch time.
    protocol: detachable STRING_32
      -- Protocol this snapshot is associated with.
    total_value_locked_usd: detachable STRING_32
      -- Current TVL (Total Value Locked) of the entire protocol.
    total_liquidity_usd: detachable STRING_32
      -- The sum of all active and non-active liquidity in USD for this pool.
    active_liquidity_usd: detachable STRING_32
      -- All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pool's current tick.
    uncollected_protocol_side_value_usd: detachable STRING_32
      -- All protocol-side value locking in USD that remains uncollected and unused in the protocol.
    uncollected_supply_side_value_usd: detachable STRING_32
      -- All supply-side value locking in USD that remains uncollected and unused in the protocol.
    protocol_controlled_value_usd: detachable STRING_32
      -- Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.
    daily_volume_usd: detachable STRING_32
      -- All trade volume occurred in a given day, in USD
    cumulative_volume_usd: detachable STRING_32
      -- All historical trade volume in USD
    daily_supply_side_revenue_usd: detachable STRING_32
      -- Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
    cumulative_supply_side_revenue_usd: detachable STRING_32
      -- Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
    daily_protocol_side_revenue_usd: detachable STRING_32
      -- Gross revenue for the protocol (revenue claimed by the protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
    cumulative_protocol_side_revenue_usd: detachable STRING_32
      -- Gross revenue for the protocol (revenue claimed by the protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
    daily_total_revenue_usd: detachable STRING_32
      -- All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
    cumulative_total_revenue_usd: detachable STRING_32
      -- All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
    timestamp: detachable STRING_32
      -- Timestamp of when this snapshot was taken/last modified (May be taken after the interval has passed).

feature -- Change Element

    set_entry_time (a_name: like entry_time)
        -- Set 'entry_time' with 'a_name'.
      do
        entry_time := a_name
      ensure
        entry_time_set: entry_time = a_name
      end

    set_recv_time (a_name: like recv_time)
        -- Set 'recv_time' with 'a_name'.
      do
        recv_time := a_name
      ensure
        recv_time_set: recv_time = a_name
      end

    set_block_number (a_name: like block_number)
        -- Set 'block_number' with 'a_name'.
      do
        block_number := a_name
      ensure
        block_number_set: block_number = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_day (a_name: like day)
        -- Set 'day' with 'a_name'.
      do
        day := a_name
      ensure
        day_set: day = a_name
      end

    set_protocol (a_name: like protocol)
        -- Set 'protocol' with 'a_name'.
      do
        protocol := a_name
      ensure
        protocol_set: protocol = a_name
      end

    set_total_value_locked_usd (a_name: like total_value_locked_usd)
        -- Set 'total_value_locked_usd' with 'a_name'.
      do
        total_value_locked_usd := a_name
      ensure
        total_value_locked_usd_set: total_value_locked_usd = a_name
      end

    set_total_liquidity_usd (a_name: like total_liquidity_usd)
        -- Set 'total_liquidity_usd' with 'a_name'.
      do
        total_liquidity_usd := a_name
      ensure
        total_liquidity_usd_set: total_liquidity_usd = a_name
      end

    set_active_liquidity_usd (a_name: like active_liquidity_usd)
        -- Set 'active_liquidity_usd' with 'a_name'.
      do
        active_liquidity_usd := a_name
      ensure
        active_liquidity_usd_set: active_liquidity_usd = a_name
      end

    set_uncollected_protocol_side_value_usd (a_name: like uncollected_protocol_side_value_usd)
        -- Set 'uncollected_protocol_side_value_usd' with 'a_name'.
      do
        uncollected_protocol_side_value_usd := a_name
      ensure
        uncollected_protocol_side_value_usd_set: uncollected_protocol_side_value_usd = a_name
      end

    set_uncollected_supply_side_value_usd (a_name: like uncollected_supply_side_value_usd)
        -- Set 'uncollected_supply_side_value_usd' with 'a_name'.
      do
        uncollected_supply_side_value_usd := a_name
      ensure
        uncollected_supply_side_value_usd_set: uncollected_supply_side_value_usd = a_name
      end

    set_protocol_controlled_value_usd (a_name: like protocol_controlled_value_usd)
        -- Set 'protocol_controlled_value_usd' with 'a_name'.
      do
        protocol_controlled_value_usd := a_name
      ensure
        protocol_controlled_value_usd_set: protocol_controlled_value_usd = a_name
      end

    set_daily_volume_usd (a_name: like daily_volume_usd)
        -- Set 'daily_volume_usd' with 'a_name'.
      do
        daily_volume_usd := a_name
      ensure
        daily_volume_usd_set: daily_volume_usd = a_name
      end

    set_cumulative_volume_usd (a_name: like cumulative_volume_usd)
        -- Set 'cumulative_volume_usd' with 'a_name'.
      do
        cumulative_volume_usd := a_name
      ensure
        cumulative_volume_usd_set: cumulative_volume_usd = a_name
      end

    set_daily_supply_side_revenue_usd (a_name: like daily_supply_side_revenue_usd)
        -- Set 'daily_supply_side_revenue_usd' with 'a_name'.
      do
        daily_supply_side_revenue_usd := a_name
      ensure
        daily_supply_side_revenue_usd_set: daily_supply_side_revenue_usd = a_name
      end

    set_cumulative_supply_side_revenue_usd (a_name: like cumulative_supply_side_revenue_usd)
        -- Set 'cumulative_supply_side_revenue_usd' with 'a_name'.
      do
        cumulative_supply_side_revenue_usd := a_name
      ensure
        cumulative_supply_side_revenue_usd_set: cumulative_supply_side_revenue_usd = a_name
      end

    set_daily_protocol_side_revenue_usd (a_name: like daily_protocol_side_revenue_usd)
        -- Set 'daily_protocol_side_revenue_usd' with 'a_name'.
      do
        daily_protocol_side_revenue_usd := a_name
      ensure
        daily_protocol_side_revenue_usd_set: daily_protocol_side_revenue_usd = a_name
      end

    set_cumulative_protocol_side_revenue_usd (a_name: like cumulative_protocol_side_revenue_usd)
        -- Set 'cumulative_protocol_side_revenue_usd' with 'a_name'.
      do
        cumulative_protocol_side_revenue_usd := a_name
      ensure
        cumulative_protocol_side_revenue_usd_set: cumulative_protocol_side_revenue_usd = a_name
      end

    set_daily_total_revenue_usd (a_name: like daily_total_revenue_usd)
        -- Set 'daily_total_revenue_usd' with 'a_name'.
      do
        daily_total_revenue_usd := a_name
      ensure
        daily_total_revenue_usd_set: daily_total_revenue_usd = a_name
      end

    set_cumulative_total_revenue_usd (a_name: like cumulative_total_revenue_usd)
        -- Set 'cumulative_total_revenue_usd' with 'a_name'.
      do
        cumulative_total_revenue_usd := a_name
      ensure
        cumulative_total_revenue_usd_set: cumulative_total_revenue_usd = a_name
      end

    set_timestamp (a_name: like timestamp)
        -- Set 'timestamp' with 'a_name'.
      do
        timestamp := a_name
      ensure
        timestamp_set: timestamp = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass SUSHISWAP_V3_ETHEREUM_FINANCIALS_DAILY_SNAPSHOT_DTO%N")
        if attached entry_time as l_entry_time then
          Result.append ("%Nentry_time:")
          Result.append (l_entry_time.out)
          Result.append ("%N")
        end
        if attached recv_time as l_recv_time then
          Result.append ("%Nrecv_time:")
          Result.append (l_recv_time.out)
          Result.append ("%N")
        end
        if attached block_number as l_block_number then
          Result.append ("%Nblock_number:")
          Result.append (l_block_number.out)
          Result.append ("%N")
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached day as l_day then
          Result.append ("%Nday:")
          Result.append (l_day.out)
          Result.append ("%N")
        end
        if attached protocol as l_protocol then
          Result.append ("%Nprotocol:")
          Result.append (l_protocol.out)
          Result.append ("%N")
        end
        if attached total_value_locked_usd as l_total_value_locked_usd then
          Result.append ("%Ntotal_value_locked_usd:")
          Result.append (l_total_value_locked_usd.out)
          Result.append ("%N")
        end
        if attached total_liquidity_usd as l_total_liquidity_usd then
          Result.append ("%Ntotal_liquidity_usd:")
          Result.append (l_total_liquidity_usd.out)
          Result.append ("%N")
        end
        if attached active_liquidity_usd as l_active_liquidity_usd then
          Result.append ("%Nactive_liquidity_usd:")
          Result.append (l_active_liquidity_usd.out)
          Result.append ("%N")
        end
        if attached uncollected_protocol_side_value_usd as l_uncollected_protocol_side_value_usd then
          Result.append ("%Nuncollected_protocol_side_value_usd:")
          Result.append (l_uncollected_protocol_side_value_usd.out)
          Result.append ("%N")
        end
        if attached uncollected_supply_side_value_usd as l_uncollected_supply_side_value_usd then
          Result.append ("%Nuncollected_supply_side_value_usd:")
          Result.append (l_uncollected_supply_side_value_usd.out)
          Result.append ("%N")
        end
        if attached protocol_controlled_value_usd as l_protocol_controlled_value_usd then
          Result.append ("%Nprotocol_controlled_value_usd:")
          Result.append (l_protocol_controlled_value_usd.out)
          Result.append ("%N")
        end
        if attached daily_volume_usd as l_daily_volume_usd then
          Result.append ("%Ndaily_volume_usd:")
          Result.append (l_daily_volume_usd.out)
          Result.append ("%N")
        end
        if attached cumulative_volume_usd as l_cumulative_volume_usd then
          Result.append ("%Ncumulative_volume_usd:")
          Result.append (l_cumulative_volume_usd.out)
          Result.append ("%N")
        end
        if attached daily_supply_side_revenue_usd as l_daily_supply_side_revenue_usd then
          Result.append ("%Ndaily_supply_side_revenue_usd:")
          Result.append (l_daily_supply_side_revenue_usd.out)
          Result.append ("%N")
        end
        if attached cumulative_supply_side_revenue_usd as l_cumulative_supply_side_revenue_usd then
          Result.append ("%Ncumulative_supply_side_revenue_usd:")
          Result.append (l_cumulative_supply_side_revenue_usd.out)
          Result.append ("%N")
        end
        if attached daily_protocol_side_revenue_usd as l_daily_protocol_side_revenue_usd then
          Result.append ("%Ndaily_protocol_side_revenue_usd:")
          Result.append (l_daily_protocol_side_revenue_usd.out)
          Result.append ("%N")
        end
        if attached cumulative_protocol_side_revenue_usd as l_cumulative_protocol_side_revenue_usd then
          Result.append ("%Ncumulative_protocol_side_revenue_usd:")
          Result.append (l_cumulative_protocol_side_revenue_usd.out)
          Result.append ("%N")
        end
        if attached daily_total_revenue_usd as l_daily_total_revenue_usd then
          Result.append ("%Ndaily_total_revenue_usd:")
          Result.append (l_daily_total_revenue_usd.out)
          Result.append ("%N")
        end
        if attached cumulative_total_revenue_usd as l_cumulative_total_revenue_usd then
          Result.append ("%Ncumulative_total_revenue_usd:")
          Result.append (l_cumulative_total_revenue_usd.out)
          Result.append ("%N")
        end
        if attached timestamp as l_timestamp then
          Result.append ("%Ntimestamp:")
          Result.append (l_timestamp.out)
          Result.append ("%N")
        end
      end
end

