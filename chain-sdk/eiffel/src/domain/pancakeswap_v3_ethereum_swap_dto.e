note
 description:"[
		On Chain Dapps - REST API
 		 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
  		The version of the OpenAPI document: v1
 	    Contact: support@coinapi.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class PANCAKESWAP_V3_ETHEREUM_SWAP_DTO




feature --Access

    entry_time: detachable DATE_TIME
      
    recv_time: detachable DATE_TIME
      
 	block_number: INTEGER_64
    	 -- Number of block in which entity was recorded.
 	block_: INTEGER_32
    	 -- Block number in which the swap operation was recorded.
    id: detachable STRING_32
      -- Unique string identifier of the swap operation, format: (transaction hash)-(log index).
    hash: detachable STRING_32
      -- Transaction hash of the transaction that emitted this event.
    nonce: detachable STRING_32
      -- Nonce of the transaction that emitted this event.
 	log_index: INTEGER_32
    	 -- Event log index. For transactions that don't emit event, create arbitrary index starting from 0.
    gas_limit: detachable STRING_32
      -- Gas limit of the transaction that emitted this event.
    gas_used: detachable STRING_32
      -- Gas used in this transaction.
    gas_price: detachable STRING_32
      -- Gas price of the transaction that emitted this event.
    protocol: detachable STRING_32
      -- The protocol this transaction belongs to.
    account: detachable STRING_32
      -- Account that emitted this event.
    pool: detachable STRING_32
      -- The pool involving this event.
    timestamp: detachable STRING_32
      -- Timestamp of this event.
    tick: detachable STRING_32
      -- Tick of the swap operation.
    token_in: detachable STRING_32
      -- Token deposited into pool.
    amount_in: detachable STRING_32
      -- Amount of token deposited into pool in native units.
    amount_in_usd: detachable STRING_32
      -- Amount of token deposited into pool in USD.
    token_out: detachable STRING_32
      -- Token withdrawn from pool.
    amount_out: detachable STRING_32
      -- Amount of token withdrawn from pool in native units.
    amount_out_usd: detachable STRING_32
      -- Amount of token withdrawn from pool in USD.
    reserve_amounts: detachable LIST [STRING_32]
      -- Amount of input tokens in the liquidity pool.
    pool_id: detachable STRING_32
      
    transaction_id: detachable STRING_32
      
 	evaluated_price: REAL_64
    	 
 	evaluated_amount: REAL_64
    	 
    evaluated_aggressor: detachable TRANSACTIONS_E_TRADE_AGGRESSIVE_SIDE
      

feature -- Change Element

    set_entry_time (a_name: like entry_time)
        -- Set 'entry_time' with 'a_name'.
      do
        entry_time := a_name
      ensure
        entry_time_set: entry_time = a_name
      end

    set_recv_time (a_name: like recv_time)
        -- Set 'recv_time' with 'a_name'.
      do
        recv_time := a_name
      ensure
        recv_time_set: recv_time = a_name
      end

    set_block_number (a_name: like block_number)
        -- Set 'block_number' with 'a_name'.
      do
        block_number := a_name
      ensure
        block_number_set: block_number = a_name
      end

    set_block_ (a_name: like block_)
        -- Set 'block_' with 'a_name'.
      do
        block_ := a_name
      ensure
        block__set: block_ = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_hash (a_name: like hash)
        -- Set 'hash' with 'a_name'.
      do
        hash := a_name
      ensure
        hash_set: hash = a_name
      end

    set_nonce (a_name: like nonce)
        -- Set 'nonce' with 'a_name'.
      do
        nonce := a_name
      ensure
        nonce_set: nonce = a_name
      end

    set_log_index (a_name: like log_index)
        -- Set 'log_index' with 'a_name'.
      do
        log_index := a_name
      ensure
        log_index_set: log_index = a_name
      end

    set_gas_limit (a_name: like gas_limit)
        -- Set 'gas_limit' with 'a_name'.
      do
        gas_limit := a_name
      ensure
        gas_limit_set: gas_limit = a_name
      end

    set_gas_used (a_name: like gas_used)
        -- Set 'gas_used' with 'a_name'.
      do
        gas_used := a_name
      ensure
        gas_used_set: gas_used = a_name
      end

    set_gas_price (a_name: like gas_price)
        -- Set 'gas_price' with 'a_name'.
      do
        gas_price := a_name
      ensure
        gas_price_set: gas_price = a_name
      end

    set_protocol (a_name: like protocol)
        -- Set 'protocol' with 'a_name'.
      do
        protocol := a_name
      ensure
        protocol_set: protocol = a_name
      end

    set_account (a_name: like account)
        -- Set 'account' with 'a_name'.
      do
        account := a_name
      ensure
        account_set: account = a_name
      end

    set_pool (a_name: like pool)
        -- Set 'pool' with 'a_name'.
      do
        pool := a_name
      ensure
        pool_set: pool = a_name
      end

    set_timestamp (a_name: like timestamp)
        -- Set 'timestamp' with 'a_name'.
      do
        timestamp := a_name
      ensure
        timestamp_set: timestamp = a_name
      end

    set_tick (a_name: like tick)
        -- Set 'tick' with 'a_name'.
      do
        tick := a_name
      ensure
        tick_set: tick = a_name
      end

    set_token_in (a_name: like token_in)
        -- Set 'token_in' with 'a_name'.
      do
        token_in := a_name
      ensure
        token_in_set: token_in = a_name
      end

    set_amount_in (a_name: like amount_in)
        -- Set 'amount_in' with 'a_name'.
      do
        amount_in := a_name
      ensure
        amount_in_set: amount_in = a_name
      end

    set_amount_in_usd (a_name: like amount_in_usd)
        -- Set 'amount_in_usd' with 'a_name'.
      do
        amount_in_usd := a_name
      ensure
        amount_in_usd_set: amount_in_usd = a_name
      end

    set_token_out (a_name: like token_out)
        -- Set 'token_out' with 'a_name'.
      do
        token_out := a_name
      ensure
        token_out_set: token_out = a_name
      end

    set_amount_out (a_name: like amount_out)
        -- Set 'amount_out' with 'a_name'.
      do
        amount_out := a_name
      ensure
        amount_out_set: amount_out = a_name
      end

    set_amount_out_usd (a_name: like amount_out_usd)
        -- Set 'amount_out_usd' with 'a_name'.
      do
        amount_out_usd := a_name
      ensure
        amount_out_usd_set: amount_out_usd = a_name
      end

    set_reserve_amounts (a_name: like reserve_amounts)
        -- Set 'reserve_amounts' with 'a_name'.
      do
        reserve_amounts := a_name
      ensure
        reserve_amounts_set: reserve_amounts = a_name
      end

    set_pool_id (a_name: like pool_id)
        -- Set 'pool_id' with 'a_name'.
      do
        pool_id := a_name
      ensure
        pool_id_set: pool_id = a_name
      end

    set_transaction_id (a_name: like transaction_id)
        -- Set 'transaction_id' with 'a_name'.
      do
        transaction_id := a_name
      ensure
        transaction_id_set: transaction_id = a_name
      end

    set_evaluated_price (a_name: like evaluated_price)
        -- Set 'evaluated_price' with 'a_name'.
      do
        evaluated_price := a_name
      ensure
        evaluated_price_set: evaluated_price = a_name
      end

    set_evaluated_amount (a_name: like evaluated_amount)
        -- Set 'evaluated_amount' with 'a_name'.
      do
        evaluated_amount := a_name
      ensure
        evaluated_amount_set: evaluated_amount = a_name
      end

    set_evaluated_aggressor (a_name: like evaluated_aggressor)
        -- Set 'evaluated_aggressor' with 'a_name'.
      do
        evaluated_aggressor := a_name
      ensure
        evaluated_aggressor_set: evaluated_aggressor = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass PANCAKESWAP_V3_ETHEREUM_SWAP_DTO%N")
        if attached entry_time as l_entry_time then
          Result.append ("%Nentry_time:")
          Result.append (l_entry_time.out)
          Result.append ("%N")
        end
        if attached recv_time as l_recv_time then
          Result.append ("%Nrecv_time:")
          Result.append (l_recv_time.out)
          Result.append ("%N")
        end
        if attached block_number as l_block_number then
          Result.append ("%Nblock_number:")
          Result.append (l_block_number.out)
          Result.append ("%N")
        end
        if attached block_ as l_block_ then
          Result.append ("%Nblock_:")
          Result.append (l_block_.out)
          Result.append ("%N")
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached hash as l_hash then
          Result.append ("%Nhash:")
          Result.append (l_hash.out)
          Result.append ("%N")
        end
        if attached nonce as l_nonce then
          Result.append ("%Nnonce:")
          Result.append (l_nonce.out)
          Result.append ("%N")
        end
        if attached log_index as l_log_index then
          Result.append ("%Nlog_index:")
          Result.append (l_log_index.out)
          Result.append ("%N")
        end
        if attached gas_limit as l_gas_limit then
          Result.append ("%Ngas_limit:")
          Result.append (l_gas_limit.out)
          Result.append ("%N")
        end
        if attached gas_used as l_gas_used then
          Result.append ("%Ngas_used:")
          Result.append (l_gas_used.out)
          Result.append ("%N")
        end
        if attached gas_price as l_gas_price then
          Result.append ("%Ngas_price:")
          Result.append (l_gas_price.out)
          Result.append ("%N")
        end
        if attached protocol as l_protocol then
          Result.append ("%Nprotocol:")
          Result.append (l_protocol.out)
          Result.append ("%N")
        end
        if attached account as l_account then
          Result.append ("%Naccount:")
          Result.append (l_account.out)
          Result.append ("%N")
        end
        if attached pool as l_pool then
          Result.append ("%Npool:")
          Result.append (l_pool.out)
          Result.append ("%N")
        end
        if attached timestamp as l_timestamp then
          Result.append ("%Ntimestamp:")
          Result.append (l_timestamp.out)
          Result.append ("%N")
        end
        if attached tick as l_tick then
          Result.append ("%Ntick:")
          Result.append (l_tick.out)
          Result.append ("%N")
        end
        if attached token_in as l_token_in then
          Result.append ("%Ntoken_in:")
          Result.append (l_token_in.out)
          Result.append ("%N")
        end
        if attached amount_in as l_amount_in then
          Result.append ("%Namount_in:")
          Result.append (l_amount_in.out)
          Result.append ("%N")
        end
        if attached amount_in_usd as l_amount_in_usd then
          Result.append ("%Namount_in_usd:")
          Result.append (l_amount_in_usd.out)
          Result.append ("%N")
        end
        if attached token_out as l_token_out then
          Result.append ("%Ntoken_out:")
          Result.append (l_token_out.out)
          Result.append ("%N")
        end
        if attached amount_out as l_amount_out then
          Result.append ("%Namount_out:")
          Result.append (l_amount_out.out)
          Result.append ("%N")
        end
        if attached amount_out_usd as l_amount_out_usd then
          Result.append ("%Namount_out_usd:")
          Result.append (l_amount_out_usd.out)
          Result.append ("%N")
        end
        if attached reserve_amounts as l_reserve_amounts then
          across l_reserve_amounts as ic loop
            Result.append ("%N reserve_amounts:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached pool_id as l_pool_id then
          Result.append ("%Npool_id:")
          Result.append (l_pool_id.out)
          Result.append ("%N")
        end
        if attached transaction_id as l_transaction_id then
          Result.append ("%Ntransaction_id:")
          Result.append (l_transaction_id.out)
          Result.append ("%N")
        end
        if attached evaluated_price as l_evaluated_price then
          Result.append ("%Nevaluated_price:")
          Result.append (l_evaluated_price.out)
          Result.append ("%N")
        end
        if attached evaluated_amount as l_evaluated_amount then
          Result.append ("%Nevaluated_amount:")
          Result.append (l_evaluated_amount.out)
          Result.append ("%N")
        end
        if attached evaluated_aggressor as l_evaluated_aggressor then
          Result.append ("%Nevaluated_aggressor:")
          Result.append (l_evaluated_aggressor.out)
          Result.append ("%N")
        end
      end
end

