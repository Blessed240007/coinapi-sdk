note
 description:"[
		On Chain Dapps - REST API
 		 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
  		The version of the OpenAPI document: v1
 	    Contact: support@coinapi.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class PANCAKESWAP_V3_ETHEREUM_LIQUIDITY_POOL_HOURLY_SNAPSHOT_DTO




feature --Access

    entry_time: detachable DATE_TIME
      
    recv_time: detachable DATE_TIME
      
 	block_number: INTEGER_64
    	 -- Number of block in which entity was recorded.
 	vid: INTEGER_64
    	 -- 
    id: detachable STRING_32
      -- (Smart contract address of the pool)-( # of hours since Unix epoch time)
 	hour: INTEGER_32
    	 -- Number of hours since Unix epoch time
    protocol: detachable STRING_32
      -- The protocol this snapshot belongs to
    pool: detachable STRING_32
      -- The pool this snapshot belongs to
    tick: detachable STRING_32
      -- Current tick representing the price of token0/token1
    total_value_locked_usd: detachable STRING_32
      -- Current TVL (Total Value Locked) of this pool
    total_liquidity: detachable STRING_32
      -- The sum of all active and non-active liquidity for this pool.
    total_liquidity_usd: detachable STRING_32
      -- The sum of all active and non-active liquidity in USD for this pool.
    active_liquidity: detachable STRING_32
      -- All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pool's current tick.
    active_liquidity_usd: detachable STRING_32
      -- All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pool's current tick.
    uncollected_protocol_side_token_amounts: detachable LIST [STRING_32]
      -- All protocol-side value locked in token amounts that remains uncollected and unused in the pool.
    uncollected_protocol_side_values_usd: detachable LIST [STRING_32]
      -- All protocol-side value locking in USD that remains uncollected and unused in the pool.
    uncollected_supply_side_token_amounts: detachable LIST [STRING_32]
      -- All supply-side value locked in token amounts that remains uncollected and unused in the pool.
    uncollected_supply_side_values_usd: detachable LIST [STRING_32]
      -- All supply-side value locked in USD that remains uncollected and unused in the pool.
    cumulative_supply_side_revenue_usd: detachable STRING_32
      -- All revenue generated by the liquidity pool, accrued to the supply side.
    hourly_supply_side_revenue_usd: detachable STRING_32
      -- Hourly revenue generated by the liquidity pool, accrued to the supply side.
    cumulative_protocol_side_revenue_usd: detachable STRING_32
      -- All revenue generated by the liquidity pool, accrued to the protocol.
    hourly_protocol_side_revenue_usd: detachable STRING_32
      -- Hourly revenue generated by the liquidity pool, accrued to the protocol.
    cumulative_total_revenue_usd: detachable STRING_32
      -- All revenue generated by the liquidity pool.
    hourly_total_revenue_usd: detachable STRING_32
      -- Hourly revenue generated by the liquidity pool.
    cumulative_volume_usd: detachable STRING_32
      -- All historical trade volume occurred in this pool, in USD.
    hourly_volume_usd: detachable STRING_32
      -- All trade volume occurred in a given hour, in USD.
    cumulative_volume_by_token_amount: detachable LIST [STRING_32]
      -- All trade volume, in native amount. The ordering should be the same as the pool's `inputTokens` field.
    hourly_volume_by_token_amount: detachable LIST [STRING_32]
      -- All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field.
    cumulative_volume_by_token_usd: detachable LIST [STRING_32]
      -- All trade volume, in USD. The ordering should be the same as the pool's `inputTokens` field.
    hourly_volume_by_token_usd: detachable LIST [STRING_32]
      -- All trade volume occurred in a given hour for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.
    input_token_balances: detachable LIST [STRING_32]
      -- Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.
    input_token_balances_usd: detachable LIST [STRING_32]
      -- Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field.
    input_token_weights: detachable LIST [STRING_32]
      -- Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
    staked_output_token_amount: detachable STRING_32
      -- Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
    reward_token_emissions_amount: detachable LIST [STRING_32]
      -- Per-block reward token emission as of the current block normalized to a day (not hour), in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
    reward_token_emissions_usd: detachable LIST [STRING_32]
      -- Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
 	cumulative_deposit_count: INTEGER_32
    	 -- Total number of deposits (add liquidity)
 	hourly_deposit_count: INTEGER_32
    	 -- Total number of deposits (add liquidity) in an hour
 	cumulative_withdraw_count: INTEGER_32
    	 -- Total number of withdrawals (remove liquidity)
 	hourly_withdraw_count: INTEGER_32
    	 -- Total number of withdrawals (remove liquidity) in an hour
 	cumulative_swap_count: INTEGER_32
    	 -- Total number of trades (swaps)
 	hourly_swap_count: INTEGER_32
    	 -- Total number of trades (swaps) in an hour
 	position_count: INTEGER_32
    	 -- Number of positions in this market
 	open_position_count: INTEGER_32
    	 -- Number of open positions in this market
 	closed_position_count: INTEGER_32
    	 -- Number of closed positions in this market
    timestamp: detachable STRING_32
      -- Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)

feature -- Change Element

    set_entry_time (a_name: like entry_time)
        -- Set 'entry_time' with 'a_name'.
      do
        entry_time := a_name
      ensure
        entry_time_set: entry_time = a_name
      end

    set_recv_time (a_name: like recv_time)
        -- Set 'recv_time' with 'a_name'.
      do
        recv_time := a_name
      ensure
        recv_time_set: recv_time = a_name
      end

    set_block_number (a_name: like block_number)
        -- Set 'block_number' with 'a_name'.
      do
        block_number := a_name
      ensure
        block_number_set: block_number = a_name
      end

    set_vid (a_name: like vid)
        -- Set 'vid' with 'a_name'.
      do
        vid := a_name
      ensure
        vid_set: vid = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_hour (a_name: like hour)
        -- Set 'hour' with 'a_name'.
      do
        hour := a_name
      ensure
        hour_set: hour = a_name
      end

    set_protocol (a_name: like protocol)
        -- Set 'protocol' with 'a_name'.
      do
        protocol := a_name
      ensure
        protocol_set: protocol = a_name
      end

    set_pool (a_name: like pool)
        -- Set 'pool' with 'a_name'.
      do
        pool := a_name
      ensure
        pool_set: pool = a_name
      end

    set_tick (a_name: like tick)
        -- Set 'tick' with 'a_name'.
      do
        tick := a_name
      ensure
        tick_set: tick = a_name
      end

    set_total_value_locked_usd (a_name: like total_value_locked_usd)
        -- Set 'total_value_locked_usd' with 'a_name'.
      do
        total_value_locked_usd := a_name
      ensure
        total_value_locked_usd_set: total_value_locked_usd = a_name
      end

    set_total_liquidity (a_name: like total_liquidity)
        -- Set 'total_liquidity' with 'a_name'.
      do
        total_liquidity := a_name
      ensure
        total_liquidity_set: total_liquidity = a_name
      end

    set_total_liquidity_usd (a_name: like total_liquidity_usd)
        -- Set 'total_liquidity_usd' with 'a_name'.
      do
        total_liquidity_usd := a_name
      ensure
        total_liquidity_usd_set: total_liquidity_usd = a_name
      end

    set_active_liquidity (a_name: like active_liquidity)
        -- Set 'active_liquidity' with 'a_name'.
      do
        active_liquidity := a_name
      ensure
        active_liquidity_set: active_liquidity = a_name
      end

    set_active_liquidity_usd (a_name: like active_liquidity_usd)
        -- Set 'active_liquidity_usd' with 'a_name'.
      do
        active_liquidity_usd := a_name
      ensure
        active_liquidity_usd_set: active_liquidity_usd = a_name
      end

    set_uncollected_protocol_side_token_amounts (a_name: like uncollected_protocol_side_token_amounts)
        -- Set 'uncollected_protocol_side_token_amounts' with 'a_name'.
      do
        uncollected_protocol_side_token_amounts := a_name
      ensure
        uncollected_protocol_side_token_amounts_set: uncollected_protocol_side_token_amounts = a_name
      end

    set_uncollected_protocol_side_values_usd (a_name: like uncollected_protocol_side_values_usd)
        -- Set 'uncollected_protocol_side_values_usd' with 'a_name'.
      do
        uncollected_protocol_side_values_usd := a_name
      ensure
        uncollected_protocol_side_values_usd_set: uncollected_protocol_side_values_usd = a_name
      end

    set_uncollected_supply_side_token_amounts (a_name: like uncollected_supply_side_token_amounts)
        -- Set 'uncollected_supply_side_token_amounts' with 'a_name'.
      do
        uncollected_supply_side_token_amounts := a_name
      ensure
        uncollected_supply_side_token_amounts_set: uncollected_supply_side_token_amounts = a_name
      end

    set_uncollected_supply_side_values_usd (a_name: like uncollected_supply_side_values_usd)
        -- Set 'uncollected_supply_side_values_usd' with 'a_name'.
      do
        uncollected_supply_side_values_usd := a_name
      ensure
        uncollected_supply_side_values_usd_set: uncollected_supply_side_values_usd = a_name
      end

    set_cumulative_supply_side_revenue_usd (a_name: like cumulative_supply_side_revenue_usd)
        -- Set 'cumulative_supply_side_revenue_usd' with 'a_name'.
      do
        cumulative_supply_side_revenue_usd := a_name
      ensure
        cumulative_supply_side_revenue_usd_set: cumulative_supply_side_revenue_usd = a_name
      end

    set_hourly_supply_side_revenue_usd (a_name: like hourly_supply_side_revenue_usd)
        -- Set 'hourly_supply_side_revenue_usd' with 'a_name'.
      do
        hourly_supply_side_revenue_usd := a_name
      ensure
        hourly_supply_side_revenue_usd_set: hourly_supply_side_revenue_usd = a_name
      end

    set_cumulative_protocol_side_revenue_usd (a_name: like cumulative_protocol_side_revenue_usd)
        -- Set 'cumulative_protocol_side_revenue_usd' with 'a_name'.
      do
        cumulative_protocol_side_revenue_usd := a_name
      ensure
        cumulative_protocol_side_revenue_usd_set: cumulative_protocol_side_revenue_usd = a_name
      end

    set_hourly_protocol_side_revenue_usd (a_name: like hourly_protocol_side_revenue_usd)
        -- Set 'hourly_protocol_side_revenue_usd' with 'a_name'.
      do
        hourly_protocol_side_revenue_usd := a_name
      ensure
        hourly_protocol_side_revenue_usd_set: hourly_protocol_side_revenue_usd = a_name
      end

    set_cumulative_total_revenue_usd (a_name: like cumulative_total_revenue_usd)
        -- Set 'cumulative_total_revenue_usd' with 'a_name'.
      do
        cumulative_total_revenue_usd := a_name
      ensure
        cumulative_total_revenue_usd_set: cumulative_total_revenue_usd = a_name
      end

    set_hourly_total_revenue_usd (a_name: like hourly_total_revenue_usd)
        -- Set 'hourly_total_revenue_usd' with 'a_name'.
      do
        hourly_total_revenue_usd := a_name
      ensure
        hourly_total_revenue_usd_set: hourly_total_revenue_usd = a_name
      end

    set_cumulative_volume_usd (a_name: like cumulative_volume_usd)
        -- Set 'cumulative_volume_usd' with 'a_name'.
      do
        cumulative_volume_usd := a_name
      ensure
        cumulative_volume_usd_set: cumulative_volume_usd = a_name
      end

    set_hourly_volume_usd (a_name: like hourly_volume_usd)
        -- Set 'hourly_volume_usd' with 'a_name'.
      do
        hourly_volume_usd := a_name
      ensure
        hourly_volume_usd_set: hourly_volume_usd = a_name
      end

    set_cumulative_volume_by_token_amount (a_name: like cumulative_volume_by_token_amount)
        -- Set 'cumulative_volume_by_token_amount' with 'a_name'.
      do
        cumulative_volume_by_token_amount := a_name
      ensure
        cumulative_volume_by_token_amount_set: cumulative_volume_by_token_amount = a_name
      end

    set_hourly_volume_by_token_amount (a_name: like hourly_volume_by_token_amount)
        -- Set 'hourly_volume_by_token_amount' with 'a_name'.
      do
        hourly_volume_by_token_amount := a_name
      ensure
        hourly_volume_by_token_amount_set: hourly_volume_by_token_amount = a_name
      end

    set_cumulative_volume_by_token_usd (a_name: like cumulative_volume_by_token_usd)
        -- Set 'cumulative_volume_by_token_usd' with 'a_name'.
      do
        cumulative_volume_by_token_usd := a_name
      ensure
        cumulative_volume_by_token_usd_set: cumulative_volume_by_token_usd = a_name
      end

    set_hourly_volume_by_token_usd (a_name: like hourly_volume_by_token_usd)
        -- Set 'hourly_volume_by_token_usd' with 'a_name'.
      do
        hourly_volume_by_token_usd := a_name
      ensure
        hourly_volume_by_token_usd_set: hourly_volume_by_token_usd = a_name
      end

    set_input_token_balances (a_name: like input_token_balances)
        -- Set 'input_token_balances' with 'a_name'.
      do
        input_token_balances := a_name
      ensure
        input_token_balances_set: input_token_balances = a_name
      end

    set_input_token_balances_usd (a_name: like input_token_balances_usd)
        -- Set 'input_token_balances_usd' with 'a_name'.
      do
        input_token_balances_usd := a_name
      ensure
        input_token_balances_usd_set: input_token_balances_usd = a_name
      end

    set_input_token_weights (a_name: like input_token_weights)
        -- Set 'input_token_weights' with 'a_name'.
      do
        input_token_weights := a_name
      ensure
        input_token_weights_set: input_token_weights = a_name
      end

    set_staked_output_token_amount (a_name: like staked_output_token_amount)
        -- Set 'staked_output_token_amount' with 'a_name'.
      do
        staked_output_token_amount := a_name
      ensure
        staked_output_token_amount_set: staked_output_token_amount = a_name
      end

    set_reward_token_emissions_amount (a_name: like reward_token_emissions_amount)
        -- Set 'reward_token_emissions_amount' with 'a_name'.
      do
        reward_token_emissions_amount := a_name
      ensure
        reward_token_emissions_amount_set: reward_token_emissions_amount = a_name
      end

    set_reward_token_emissions_usd (a_name: like reward_token_emissions_usd)
        -- Set 'reward_token_emissions_usd' with 'a_name'.
      do
        reward_token_emissions_usd := a_name
      ensure
        reward_token_emissions_usd_set: reward_token_emissions_usd = a_name
      end

    set_cumulative_deposit_count (a_name: like cumulative_deposit_count)
        -- Set 'cumulative_deposit_count' with 'a_name'.
      do
        cumulative_deposit_count := a_name
      ensure
        cumulative_deposit_count_set: cumulative_deposit_count = a_name
      end

    set_hourly_deposit_count (a_name: like hourly_deposit_count)
        -- Set 'hourly_deposit_count' with 'a_name'.
      do
        hourly_deposit_count := a_name
      ensure
        hourly_deposit_count_set: hourly_deposit_count = a_name
      end

    set_cumulative_withdraw_count (a_name: like cumulative_withdraw_count)
        -- Set 'cumulative_withdraw_count' with 'a_name'.
      do
        cumulative_withdraw_count := a_name
      ensure
        cumulative_withdraw_count_set: cumulative_withdraw_count = a_name
      end

    set_hourly_withdraw_count (a_name: like hourly_withdraw_count)
        -- Set 'hourly_withdraw_count' with 'a_name'.
      do
        hourly_withdraw_count := a_name
      ensure
        hourly_withdraw_count_set: hourly_withdraw_count = a_name
      end

    set_cumulative_swap_count (a_name: like cumulative_swap_count)
        -- Set 'cumulative_swap_count' with 'a_name'.
      do
        cumulative_swap_count := a_name
      ensure
        cumulative_swap_count_set: cumulative_swap_count = a_name
      end

    set_hourly_swap_count (a_name: like hourly_swap_count)
        -- Set 'hourly_swap_count' with 'a_name'.
      do
        hourly_swap_count := a_name
      ensure
        hourly_swap_count_set: hourly_swap_count = a_name
      end

    set_position_count (a_name: like position_count)
        -- Set 'position_count' with 'a_name'.
      do
        position_count := a_name
      ensure
        position_count_set: position_count = a_name
      end

    set_open_position_count (a_name: like open_position_count)
        -- Set 'open_position_count' with 'a_name'.
      do
        open_position_count := a_name
      ensure
        open_position_count_set: open_position_count = a_name
      end

    set_closed_position_count (a_name: like closed_position_count)
        -- Set 'closed_position_count' with 'a_name'.
      do
        closed_position_count := a_name
      ensure
        closed_position_count_set: closed_position_count = a_name
      end

    set_timestamp (a_name: like timestamp)
        -- Set 'timestamp' with 'a_name'.
      do
        timestamp := a_name
      ensure
        timestamp_set: timestamp = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass PANCAKESWAP_V3_ETHEREUM_LIQUIDITY_POOL_HOURLY_SNAPSHOT_DTO%N")
        if attached entry_time as l_entry_time then
          Result.append ("%Nentry_time:")
          Result.append (l_entry_time.out)
          Result.append ("%N")
        end
        if attached recv_time as l_recv_time then
          Result.append ("%Nrecv_time:")
          Result.append (l_recv_time.out)
          Result.append ("%N")
        end
        if attached block_number as l_block_number then
          Result.append ("%Nblock_number:")
          Result.append (l_block_number.out)
          Result.append ("%N")
        end
        if attached vid as l_vid then
          Result.append ("%Nvid:")
          Result.append (l_vid.out)
          Result.append ("%N")
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached hour as l_hour then
          Result.append ("%Nhour:")
          Result.append (l_hour.out)
          Result.append ("%N")
        end
        if attached protocol as l_protocol then
          Result.append ("%Nprotocol:")
          Result.append (l_protocol.out)
          Result.append ("%N")
        end
        if attached pool as l_pool then
          Result.append ("%Npool:")
          Result.append (l_pool.out)
          Result.append ("%N")
        end
        if attached tick as l_tick then
          Result.append ("%Ntick:")
          Result.append (l_tick.out)
          Result.append ("%N")
        end
        if attached total_value_locked_usd as l_total_value_locked_usd then
          Result.append ("%Ntotal_value_locked_usd:")
          Result.append (l_total_value_locked_usd.out)
          Result.append ("%N")
        end
        if attached total_liquidity as l_total_liquidity then
          Result.append ("%Ntotal_liquidity:")
          Result.append (l_total_liquidity.out)
          Result.append ("%N")
        end
        if attached total_liquidity_usd as l_total_liquidity_usd then
          Result.append ("%Ntotal_liquidity_usd:")
          Result.append (l_total_liquidity_usd.out)
          Result.append ("%N")
        end
        if attached active_liquidity as l_active_liquidity then
          Result.append ("%Nactive_liquidity:")
          Result.append (l_active_liquidity.out)
          Result.append ("%N")
        end
        if attached active_liquidity_usd as l_active_liquidity_usd then
          Result.append ("%Nactive_liquidity_usd:")
          Result.append (l_active_liquidity_usd.out)
          Result.append ("%N")
        end
        if attached uncollected_protocol_side_token_amounts as l_uncollected_protocol_side_token_amounts then
          across l_uncollected_protocol_side_token_amounts as ic loop
            Result.append ("%N uncollected_protocol_side_token_amounts:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached uncollected_protocol_side_values_usd as l_uncollected_protocol_side_values_usd then
          across l_uncollected_protocol_side_values_usd as ic loop
            Result.append ("%N uncollected_protocol_side_values_usd:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached uncollected_supply_side_token_amounts as l_uncollected_supply_side_token_amounts then
          across l_uncollected_supply_side_token_amounts as ic loop
            Result.append ("%N uncollected_supply_side_token_amounts:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached uncollected_supply_side_values_usd as l_uncollected_supply_side_values_usd then
          across l_uncollected_supply_side_values_usd as ic loop
            Result.append ("%N uncollected_supply_side_values_usd:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached cumulative_supply_side_revenue_usd as l_cumulative_supply_side_revenue_usd then
          Result.append ("%Ncumulative_supply_side_revenue_usd:")
          Result.append (l_cumulative_supply_side_revenue_usd.out)
          Result.append ("%N")
        end
        if attached hourly_supply_side_revenue_usd as l_hourly_supply_side_revenue_usd then
          Result.append ("%Nhourly_supply_side_revenue_usd:")
          Result.append (l_hourly_supply_side_revenue_usd.out)
          Result.append ("%N")
        end
        if attached cumulative_protocol_side_revenue_usd as l_cumulative_protocol_side_revenue_usd then
          Result.append ("%Ncumulative_protocol_side_revenue_usd:")
          Result.append (l_cumulative_protocol_side_revenue_usd.out)
          Result.append ("%N")
        end
        if attached hourly_protocol_side_revenue_usd as l_hourly_protocol_side_revenue_usd then
          Result.append ("%Nhourly_protocol_side_revenue_usd:")
          Result.append (l_hourly_protocol_side_revenue_usd.out)
          Result.append ("%N")
        end
        if attached cumulative_total_revenue_usd as l_cumulative_total_revenue_usd then
          Result.append ("%Ncumulative_total_revenue_usd:")
          Result.append (l_cumulative_total_revenue_usd.out)
          Result.append ("%N")
        end
        if attached hourly_total_revenue_usd as l_hourly_total_revenue_usd then
          Result.append ("%Nhourly_total_revenue_usd:")
          Result.append (l_hourly_total_revenue_usd.out)
          Result.append ("%N")
        end
        if attached cumulative_volume_usd as l_cumulative_volume_usd then
          Result.append ("%Ncumulative_volume_usd:")
          Result.append (l_cumulative_volume_usd.out)
          Result.append ("%N")
        end
        if attached hourly_volume_usd as l_hourly_volume_usd then
          Result.append ("%Nhourly_volume_usd:")
          Result.append (l_hourly_volume_usd.out)
          Result.append ("%N")
        end
        if attached cumulative_volume_by_token_amount as l_cumulative_volume_by_token_amount then
          across l_cumulative_volume_by_token_amount as ic loop
            Result.append ("%N cumulative_volume_by_token_amount:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached hourly_volume_by_token_amount as l_hourly_volume_by_token_amount then
          across l_hourly_volume_by_token_amount as ic loop
            Result.append ("%N hourly_volume_by_token_amount:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached cumulative_volume_by_token_usd as l_cumulative_volume_by_token_usd then
          across l_cumulative_volume_by_token_usd as ic loop
            Result.append ("%N cumulative_volume_by_token_usd:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached hourly_volume_by_token_usd as l_hourly_volume_by_token_usd then
          across l_hourly_volume_by_token_usd as ic loop
            Result.append ("%N hourly_volume_by_token_usd:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached input_token_balances as l_input_token_balances then
          across l_input_token_balances as ic loop
            Result.append ("%N input_token_balances:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached input_token_balances_usd as l_input_token_balances_usd then
          across l_input_token_balances_usd as ic loop
            Result.append ("%N input_token_balances_usd:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached input_token_weights as l_input_token_weights then
          across l_input_token_weights as ic loop
            Result.append ("%N input_token_weights:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached staked_output_token_amount as l_staked_output_token_amount then
          Result.append ("%Nstaked_output_token_amount:")
          Result.append (l_staked_output_token_amount.out)
          Result.append ("%N")
        end
        if attached reward_token_emissions_amount as l_reward_token_emissions_amount then
          across l_reward_token_emissions_amount as ic loop
            Result.append ("%N reward_token_emissions_amount:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached reward_token_emissions_usd as l_reward_token_emissions_usd then
          across l_reward_token_emissions_usd as ic loop
            Result.append ("%N reward_token_emissions_usd:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached cumulative_deposit_count as l_cumulative_deposit_count then
          Result.append ("%Ncumulative_deposit_count:")
          Result.append (l_cumulative_deposit_count.out)
          Result.append ("%N")
        end
        if attached hourly_deposit_count as l_hourly_deposit_count then
          Result.append ("%Nhourly_deposit_count:")
          Result.append (l_hourly_deposit_count.out)
          Result.append ("%N")
        end
        if attached cumulative_withdraw_count as l_cumulative_withdraw_count then
          Result.append ("%Ncumulative_withdraw_count:")
          Result.append (l_cumulative_withdraw_count.out)
          Result.append ("%N")
        end
        if attached hourly_withdraw_count as l_hourly_withdraw_count then
          Result.append ("%Nhourly_withdraw_count:")
          Result.append (l_hourly_withdraw_count.out)
          Result.append ("%N")
        end
        if attached cumulative_swap_count as l_cumulative_swap_count then
          Result.append ("%Ncumulative_swap_count:")
          Result.append (l_cumulative_swap_count.out)
          Result.append ("%N")
        end
        if attached hourly_swap_count as l_hourly_swap_count then
          Result.append ("%Nhourly_swap_count:")
          Result.append (l_hourly_swap_count.out)
          Result.append ("%N")
        end
        if attached position_count as l_position_count then
          Result.append ("%Nposition_count:")
          Result.append (l_position_count.out)
          Result.append ("%N")
        end
        if attached open_position_count as l_open_position_count then
          Result.append ("%Nopen_position_count:")
          Result.append (l_open_position_count.out)
          Result.append ("%N")
        end
        if attached closed_position_count as l_closed_position_count then
          Result.append ("%Nclosed_position_count:")
          Result.append (l_closed_position_count.out)
          Result.append ("%N")
        end
        if attached timestamp as l_timestamp then
          Result.append ("%Ntimestamp:")
          Result.append (l_timestamp.out)
          Result.append ("%N")
        end
      end
end

