note
 description:"[
		On Chain Dapps - REST API
 		 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
  		The version of the OpenAPI document: v1
 	    Contact: support@coinapi.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class UNISWAP_V2_ETHEREUM_MASTER_CHEF_REWARDER_DTO




feature --Access

    entry_time: detachable DATE_TIME
      
    recv_time: detachable DATE_TIME
      
 	block_number: INTEGER_64
    	 -- Number of block in which entity was recorded.
    block_range: detachable STRING_32
      -- 
    id: detachable STRING_32
      -- Address of the rewarder contract associated to some staking pool
    pool: detachable STRING_32
      -- Staking pool to which this rewarder is associated
    reward_token: detachable STRING_32
      -- Address of the token given by this rewarder
    token_per_sec: detachable STRING_32
      -- Number of tokens rewarded per second per LP staked in pool by this rewarder
    rate_calculated_at: detachable STRING_32
      -- Timestamp from the last time tokenPerSec was calculated
 	has_funds: BOOLEAN
    	 -- A field to keep track if there are any funds to give away in the rewarder
    has_funds_at: detachable STRING_32
      -- When it was last checked that there were funds in the rewarder
 	can_retrieve_rate: BOOLEAN
    	 -- If true it means the rewardRate can be retrieved directly from the contract, without crazy math
 	reward_rate_calculation_in_progress: BOOLEAN
    	 -- Utility field to calculate the rewarder reward rate
    probes: detachable LIST [STRING_32]
      -- 

feature -- Change Element

    set_entry_time (a_name: like entry_time)
        -- Set 'entry_time' with 'a_name'.
      do
        entry_time := a_name
      ensure
        entry_time_set: entry_time = a_name
      end

    set_recv_time (a_name: like recv_time)
        -- Set 'recv_time' with 'a_name'.
      do
        recv_time := a_name
      ensure
        recv_time_set: recv_time = a_name
      end

    set_block_number (a_name: like block_number)
        -- Set 'block_number' with 'a_name'.
      do
        block_number := a_name
      ensure
        block_number_set: block_number = a_name
      end

    set_block_range (a_name: like block_range)
        -- Set 'block_range' with 'a_name'.
      do
        block_range := a_name
      ensure
        block_range_set: block_range = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_pool (a_name: like pool)
        -- Set 'pool' with 'a_name'.
      do
        pool := a_name
      ensure
        pool_set: pool = a_name
      end

    set_reward_token (a_name: like reward_token)
        -- Set 'reward_token' with 'a_name'.
      do
        reward_token := a_name
      ensure
        reward_token_set: reward_token = a_name
      end

    set_token_per_sec (a_name: like token_per_sec)
        -- Set 'token_per_sec' with 'a_name'.
      do
        token_per_sec := a_name
      ensure
        token_per_sec_set: token_per_sec = a_name
      end

    set_rate_calculated_at (a_name: like rate_calculated_at)
        -- Set 'rate_calculated_at' with 'a_name'.
      do
        rate_calculated_at := a_name
      ensure
        rate_calculated_at_set: rate_calculated_at = a_name
      end

    set_has_funds (a_name: like has_funds)
        -- Set 'has_funds' with 'a_name'.
      do
        has_funds := a_name
      ensure
        has_funds_set: has_funds = a_name
      end

    set_has_funds_at (a_name: like has_funds_at)
        -- Set 'has_funds_at' with 'a_name'.
      do
        has_funds_at := a_name
      ensure
        has_funds_at_set: has_funds_at = a_name
      end

    set_can_retrieve_rate (a_name: like can_retrieve_rate)
        -- Set 'can_retrieve_rate' with 'a_name'.
      do
        can_retrieve_rate := a_name
      ensure
        can_retrieve_rate_set: can_retrieve_rate = a_name
      end

    set_reward_rate_calculation_in_progress (a_name: like reward_rate_calculation_in_progress)
        -- Set 'reward_rate_calculation_in_progress' with 'a_name'.
      do
        reward_rate_calculation_in_progress := a_name
      ensure
        reward_rate_calculation_in_progress_set: reward_rate_calculation_in_progress = a_name
      end

    set_probes (a_name: like probes)
        -- Set 'probes' with 'a_name'.
      do
        probes := a_name
      ensure
        probes_set: probes = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass UNISWAP_V2_ETHEREUM_MASTER_CHEF_REWARDER_DTO%N")
        if attached entry_time as l_entry_time then
          Result.append ("%Nentry_time:")
          Result.append (l_entry_time.out)
          Result.append ("%N")
        end
        if attached recv_time as l_recv_time then
          Result.append ("%Nrecv_time:")
          Result.append (l_recv_time.out)
          Result.append ("%N")
        end
        if attached block_number as l_block_number then
          Result.append ("%Nblock_number:")
          Result.append (l_block_number.out)
          Result.append ("%N")
        end
        if attached block_range as l_block_range then
          Result.append ("%Nblock_range:")
          Result.append (l_block_range.out)
          Result.append ("%N")
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached pool as l_pool then
          Result.append ("%Npool:")
          Result.append (l_pool.out)
          Result.append ("%N")
        end
        if attached reward_token as l_reward_token then
          Result.append ("%Nreward_token:")
          Result.append (l_reward_token.out)
          Result.append ("%N")
        end
        if attached token_per_sec as l_token_per_sec then
          Result.append ("%Ntoken_per_sec:")
          Result.append (l_token_per_sec.out)
          Result.append ("%N")
        end
        if attached rate_calculated_at as l_rate_calculated_at then
          Result.append ("%Nrate_calculated_at:")
          Result.append (l_rate_calculated_at.out)
          Result.append ("%N")
        end
        if attached has_funds as l_has_funds then
          Result.append ("%Nhas_funds:")
          Result.append (l_has_funds.out)
          Result.append ("%N")
        end
        if attached has_funds_at as l_has_funds_at then
          Result.append ("%Nhas_funds_at:")
          Result.append (l_has_funds_at.out)
          Result.append ("%N")
        end
        if attached can_retrieve_rate as l_can_retrieve_rate then
          Result.append ("%Ncan_retrieve_rate:")
          Result.append (l_can_retrieve_rate.out)
          Result.append ("%N")
        end
        if attached reward_rate_calculation_in_progress as l_reward_rate_calculation_in_progress then
          Result.append ("%Nreward_rate_calculation_in_progress:")
          Result.append (l_reward_rate_calculation_in_progress.out)
          Result.append ("%N")
        end
        if attached probes as l_probes then
          across l_probes as ic loop
            Result.append ("%N probes:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

