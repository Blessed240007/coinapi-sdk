note
 description:"[
		On Chain Dapps - REST API
 		 This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
  		The version of the OpenAPI document: v1
 	    Contact: support@coinapi.io

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class CURVE_FINANCE_ETHEREUM_LIQUIDITY_POOL_DTO




feature --Access

    entry_time: detachable DATE_TIME
      
    recv_time: detachable DATE_TIME
      
 	block_number: INTEGER_64
    	 -- Number of block in which entity was recorded.
 	vid: INTEGER_64
    	 -- 
    id: detachable STRING_32
      -- Smart contract address of the pool
    protocol: detachable STRING_32
      -- The protocol this pool belongs to
    name: detachable STRING_32
      -- Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT)
    symbol: detachable STRING_32
      -- Symbol of liquidity pool (e.g. 3CRV)
    input_tokens: detachable LIST [STRING_32]
      -- Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer
    input_tokens_ordered: detachable LIST [STRING_32]
      -- inputTokens in native (contract) order
    output_token: detachable STRING_32
      -- Token that is minted to track ownership of position in protocol
    reward_tokens: detachable LIST [STRING_32]
      -- Aditional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon
    fees: detachable LIST [STRING_32]
      -- Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee.)
 	is_single_sided: BOOLEAN
    	 -- Whether this pool is single-sided (e.g. Bancor, Platypus's Alternative Pool). The specifics of the implementation depends on the protocol.
    created_timestamp: detachable STRING_32
      -- Creation timestamp
    created_block_number: detachable STRING_32
      -- Creation block number
    total_value_locked_usd: detachable STRING_32
      -- Current TVL (Total Value Locked) of this pool in USD
    cumulative_supply_side_revenue_usd: detachable STRING_32
      -- All revenue generated by the liquidity pool, accrued to the supply side.
    cumulative_protocol_side_revenue_usd: detachable STRING_32
      -- All revenue generated by the liquidity pool, accrued to the protocol.
    cumulative_total_revenue_usd: detachable STRING_32
      -- All revenue generated by the liquidity pool.
    cumulative_volume_usd: detachable STRING_32
      -- All historical trade volume occurred in this pool, in USD
    input_token_balances: detachable LIST [STRING_32]
      -- Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.
    input_token_weights: detachable LIST [STRING_32]
      -- Weights of input tokens in the liquidity pool in percentage values.
    output_token_supply: detachable STRING_32
      -- Total supply of output token.
    output_token_price_usd: detachable STRING_32
      -- Price per share of output token in USD
    staked_output_token_amount: detachable STRING_32
      -- Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
    reward_token_emissions_amount: detachable LIST [STRING_32]
      -- Per-block reward token emission as of the current block normalized to a day, in token's native amount.
    reward_token_emissions_usd: detachable LIST [STRING_32]
      -- Per-block reward token emission as of the current block normalized to a day, in USD value.
    registry_address: detachable STRING_32
      -- Registry that deployed this pool
    gauge_address: detachable STRING_32
      -- Liquidity Gauge assocaited with this pool
 	evaluated_ask: REAL_64
    	 

feature -- Change Element

    set_entry_time (a_name: like entry_time)
        -- Set 'entry_time' with 'a_name'.
      do
        entry_time := a_name
      ensure
        entry_time_set: entry_time = a_name
      end

    set_recv_time (a_name: like recv_time)
        -- Set 'recv_time' with 'a_name'.
      do
        recv_time := a_name
      ensure
        recv_time_set: recv_time = a_name
      end

    set_block_number (a_name: like block_number)
        -- Set 'block_number' with 'a_name'.
      do
        block_number := a_name
      ensure
        block_number_set: block_number = a_name
      end

    set_vid (a_name: like vid)
        -- Set 'vid' with 'a_name'.
      do
        vid := a_name
      ensure
        vid_set: vid = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_protocol (a_name: like protocol)
        -- Set 'protocol' with 'a_name'.
      do
        protocol := a_name
      ensure
        protocol_set: protocol = a_name
      end

    set_name (a_name: like name)
        -- Set 'name' with 'a_name'.
      do
        name := a_name
      ensure
        name_set: name = a_name
      end

    set_symbol (a_name: like symbol)
        -- Set 'symbol' with 'a_name'.
      do
        symbol := a_name
      ensure
        symbol_set: symbol = a_name
      end

    set_input_tokens (a_name: like input_tokens)
        -- Set 'input_tokens' with 'a_name'.
      do
        input_tokens := a_name
      ensure
        input_tokens_set: input_tokens = a_name
      end

    set_input_tokens_ordered (a_name: like input_tokens_ordered)
        -- Set 'input_tokens_ordered' with 'a_name'.
      do
        input_tokens_ordered := a_name
      ensure
        input_tokens_ordered_set: input_tokens_ordered = a_name
      end

    set_output_token (a_name: like output_token)
        -- Set 'output_token' with 'a_name'.
      do
        output_token := a_name
      ensure
        output_token_set: output_token = a_name
      end

    set_reward_tokens (a_name: like reward_tokens)
        -- Set 'reward_tokens' with 'a_name'.
      do
        reward_tokens := a_name
      ensure
        reward_tokens_set: reward_tokens = a_name
      end

    set_fees (a_name: like fees)
        -- Set 'fees' with 'a_name'.
      do
        fees := a_name
      ensure
        fees_set: fees = a_name
      end

    set_is_single_sided (a_name: like is_single_sided)
        -- Set 'is_single_sided' with 'a_name'.
      do
        is_single_sided := a_name
      ensure
        is_single_sided_set: is_single_sided = a_name
      end

    set_created_timestamp (a_name: like created_timestamp)
        -- Set 'created_timestamp' with 'a_name'.
      do
        created_timestamp := a_name
      ensure
        created_timestamp_set: created_timestamp = a_name
      end

    set_created_block_number (a_name: like created_block_number)
        -- Set 'created_block_number' with 'a_name'.
      do
        created_block_number := a_name
      ensure
        created_block_number_set: created_block_number = a_name
      end

    set_total_value_locked_usd (a_name: like total_value_locked_usd)
        -- Set 'total_value_locked_usd' with 'a_name'.
      do
        total_value_locked_usd := a_name
      ensure
        total_value_locked_usd_set: total_value_locked_usd = a_name
      end

    set_cumulative_supply_side_revenue_usd (a_name: like cumulative_supply_side_revenue_usd)
        -- Set 'cumulative_supply_side_revenue_usd' with 'a_name'.
      do
        cumulative_supply_side_revenue_usd := a_name
      ensure
        cumulative_supply_side_revenue_usd_set: cumulative_supply_side_revenue_usd = a_name
      end

    set_cumulative_protocol_side_revenue_usd (a_name: like cumulative_protocol_side_revenue_usd)
        -- Set 'cumulative_protocol_side_revenue_usd' with 'a_name'.
      do
        cumulative_protocol_side_revenue_usd := a_name
      ensure
        cumulative_protocol_side_revenue_usd_set: cumulative_protocol_side_revenue_usd = a_name
      end

    set_cumulative_total_revenue_usd (a_name: like cumulative_total_revenue_usd)
        -- Set 'cumulative_total_revenue_usd' with 'a_name'.
      do
        cumulative_total_revenue_usd := a_name
      ensure
        cumulative_total_revenue_usd_set: cumulative_total_revenue_usd = a_name
      end

    set_cumulative_volume_usd (a_name: like cumulative_volume_usd)
        -- Set 'cumulative_volume_usd' with 'a_name'.
      do
        cumulative_volume_usd := a_name
      ensure
        cumulative_volume_usd_set: cumulative_volume_usd = a_name
      end

    set_input_token_balances (a_name: like input_token_balances)
        -- Set 'input_token_balances' with 'a_name'.
      do
        input_token_balances := a_name
      ensure
        input_token_balances_set: input_token_balances = a_name
      end

    set_input_token_weights (a_name: like input_token_weights)
        -- Set 'input_token_weights' with 'a_name'.
      do
        input_token_weights := a_name
      ensure
        input_token_weights_set: input_token_weights = a_name
      end

    set_output_token_supply (a_name: like output_token_supply)
        -- Set 'output_token_supply' with 'a_name'.
      do
        output_token_supply := a_name
      ensure
        output_token_supply_set: output_token_supply = a_name
      end

    set_output_token_price_usd (a_name: like output_token_price_usd)
        -- Set 'output_token_price_usd' with 'a_name'.
      do
        output_token_price_usd := a_name
      ensure
        output_token_price_usd_set: output_token_price_usd = a_name
      end

    set_staked_output_token_amount (a_name: like staked_output_token_amount)
        -- Set 'staked_output_token_amount' with 'a_name'.
      do
        staked_output_token_amount := a_name
      ensure
        staked_output_token_amount_set: staked_output_token_amount = a_name
      end

    set_reward_token_emissions_amount (a_name: like reward_token_emissions_amount)
        -- Set 'reward_token_emissions_amount' with 'a_name'.
      do
        reward_token_emissions_amount := a_name
      ensure
        reward_token_emissions_amount_set: reward_token_emissions_amount = a_name
      end

    set_reward_token_emissions_usd (a_name: like reward_token_emissions_usd)
        -- Set 'reward_token_emissions_usd' with 'a_name'.
      do
        reward_token_emissions_usd := a_name
      ensure
        reward_token_emissions_usd_set: reward_token_emissions_usd = a_name
      end

    set_registry_address (a_name: like registry_address)
        -- Set 'registry_address' with 'a_name'.
      do
        registry_address := a_name
      ensure
        registry_address_set: registry_address = a_name
      end

    set_gauge_address (a_name: like gauge_address)
        -- Set 'gauge_address' with 'a_name'.
      do
        gauge_address := a_name
      ensure
        gauge_address_set: gauge_address = a_name
      end

    set_evaluated_ask (a_name: like evaluated_ask)
        -- Set 'evaluated_ask' with 'a_name'.
      do
        evaluated_ask := a_name
      ensure
        evaluated_ask_set: evaluated_ask = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass CURVE_FINANCE_ETHEREUM_LIQUIDITY_POOL_DTO%N")
        if attached entry_time as l_entry_time then
          Result.append ("%Nentry_time:")
          Result.append (l_entry_time.out)
          Result.append ("%N")
        end
        if attached recv_time as l_recv_time then
          Result.append ("%Nrecv_time:")
          Result.append (l_recv_time.out)
          Result.append ("%N")
        end
        if attached block_number as l_block_number then
          Result.append ("%Nblock_number:")
          Result.append (l_block_number.out)
          Result.append ("%N")
        end
        if attached vid as l_vid then
          Result.append ("%Nvid:")
          Result.append (l_vid.out)
          Result.append ("%N")
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached protocol as l_protocol then
          Result.append ("%Nprotocol:")
          Result.append (l_protocol.out)
          Result.append ("%N")
        end
        if attached name as l_name then
          Result.append ("%Nname:")
          Result.append (l_name.out)
          Result.append ("%N")
        end
        if attached symbol as l_symbol then
          Result.append ("%Nsymbol:")
          Result.append (l_symbol.out)
          Result.append ("%N")
        end
        if attached input_tokens as l_input_tokens then
          across l_input_tokens as ic loop
            Result.append ("%N input_tokens:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached input_tokens_ordered as l_input_tokens_ordered then
          across l_input_tokens_ordered as ic loop
            Result.append ("%N input_tokens_ordered:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached output_token as l_output_token then
          Result.append ("%Noutput_token:")
          Result.append (l_output_token.out)
          Result.append ("%N")
        end
        if attached reward_tokens as l_reward_tokens then
          across l_reward_tokens as ic loop
            Result.append ("%N reward_tokens:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached fees as l_fees then
          across l_fees as ic loop
            Result.append ("%N fees:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached is_single_sided as l_is_single_sided then
          Result.append ("%Nis_single_sided:")
          Result.append (l_is_single_sided.out)
          Result.append ("%N")
        end
        if attached created_timestamp as l_created_timestamp then
          Result.append ("%Ncreated_timestamp:")
          Result.append (l_created_timestamp.out)
          Result.append ("%N")
        end
        if attached created_block_number as l_created_block_number then
          Result.append ("%Ncreated_block_number:")
          Result.append (l_created_block_number.out)
          Result.append ("%N")
        end
        if attached total_value_locked_usd as l_total_value_locked_usd then
          Result.append ("%Ntotal_value_locked_usd:")
          Result.append (l_total_value_locked_usd.out)
          Result.append ("%N")
        end
        if attached cumulative_supply_side_revenue_usd as l_cumulative_supply_side_revenue_usd then
          Result.append ("%Ncumulative_supply_side_revenue_usd:")
          Result.append (l_cumulative_supply_side_revenue_usd.out)
          Result.append ("%N")
        end
        if attached cumulative_protocol_side_revenue_usd as l_cumulative_protocol_side_revenue_usd then
          Result.append ("%Ncumulative_protocol_side_revenue_usd:")
          Result.append (l_cumulative_protocol_side_revenue_usd.out)
          Result.append ("%N")
        end
        if attached cumulative_total_revenue_usd as l_cumulative_total_revenue_usd then
          Result.append ("%Ncumulative_total_revenue_usd:")
          Result.append (l_cumulative_total_revenue_usd.out)
          Result.append ("%N")
        end
        if attached cumulative_volume_usd as l_cumulative_volume_usd then
          Result.append ("%Ncumulative_volume_usd:")
          Result.append (l_cumulative_volume_usd.out)
          Result.append ("%N")
        end
        if attached input_token_balances as l_input_token_balances then
          across l_input_token_balances as ic loop
            Result.append ("%N input_token_balances:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached input_token_weights as l_input_token_weights then
          across l_input_token_weights as ic loop
            Result.append ("%N input_token_weights:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached output_token_supply as l_output_token_supply then
          Result.append ("%Noutput_token_supply:")
          Result.append (l_output_token_supply.out)
          Result.append ("%N")
        end
        if attached output_token_price_usd as l_output_token_price_usd then
          Result.append ("%Noutput_token_price_usd:")
          Result.append (l_output_token_price_usd.out)
          Result.append ("%N")
        end
        if attached staked_output_token_amount as l_staked_output_token_amount then
          Result.append ("%Nstaked_output_token_amount:")
          Result.append (l_staked_output_token_amount.out)
          Result.append ("%N")
        end
        if attached reward_token_emissions_amount as l_reward_token_emissions_amount then
          across l_reward_token_emissions_amount as ic loop
            Result.append ("%N reward_token_emissions_amount:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached reward_token_emissions_usd as l_reward_token_emissions_usd then
          across l_reward_token_emissions_usd as ic loop
            Result.append ("%N reward_token_emissions_usd:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached registry_address as l_registry_address then
          Result.append ("%Nregistry_address:")
          Result.append (l_registry_address.out)
          Result.append ("%N")
        end
        if attached gauge_address as l_gauge_address then
          Result.append ("%Ngauge_address:")
          Result.append (l_gauge_address.out)
          Result.append ("%N")
        end
        if attached evaluated_ask as l_evaluated_ask then
          Result.append ("%Nevaluated_ask:")
          Result.append (l_evaluated_ask.out)
          Result.append ("%N")
        end
      end
end

