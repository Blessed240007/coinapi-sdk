/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO
    : public ModelBase
{
public:
    PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO();
    virtual ~PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEntryTime() const;
    bool entryTimeIsSet() const;
    void unsetEntry_time();

    void setEntryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecvTime() const;
    bool recvTimeIsSet() const;
    void unsetRecv_time();

    void setRecvTime(const utility::datetime& value);

    /// <summary>
    /// Number of block in which entity was recorded.
    /// </summary>
    int64_t getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(int64_t value);

    /// <summary>
    ///  (position id )-( transaction hash )-( log index ) 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Transaction hash of the transaction that triggered this snapshot
    /// </summary>
    utility::string_t getHash() const;
    bool hashIsSet() const;
    void unsetHash();

    void setHash(const utility::string_t& value);

    /// <summary>
    /// Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0
    /// </summary>
    int32_t getLogIndex() const;
    bool logIndexIsSet() const;
    void unsetLog_index();

    void setLogIndex(int32_t value);

    /// <summary>
    /// Nonce of the transaction that triggered this snapshot
    /// </summary>
    utility::string_t getNonce() const;
    bool nonceIsSet() const;
    void unsetNonce();

    void setNonce(const utility::string_t& value);

    /// <summary>
    /// Position of this snapshot
    /// </summary>
    utility::string_t getPosition() const;
    bool positionIsSet() const;
    void unsetPosition();

    void setPosition(const utility::string_t& value);

    /// <summary>
    /// Type of token used to track liquidity
    /// </summary>
    utility::string_t getLiquidityTokenType() const;
    bool liquidityTokenTypeIsSet() const;
    void unsetLiquidity_token_type();

    void setLiquidityTokenType(const utility::string_t& value);

    /// <summary>
    /// total position liquidity
    /// </summary>
    utility::string_t getLiquidity() const;
    bool liquidityIsSet() const;
    void unsetLiquidity();

    void setLiquidity(const utility::string_t& value);

    /// <summary>
    /// total position liquidity in USD
    /// </summary>
    utility::string_t getLiquidityUsd() const;
    bool liquidityUsdIsSet() const;
    void unsetLiquidity_usd();

    void setLiquidityUsd(const utility::string_t& value);

    /// <summary>
    /// amount of tokens ever deposited to position
    /// </summary>
    std::vector<utility::string_t>& getCumulativeDepositTokenAmounts();
    bool cumulativeDepositTokenAmountsIsSet() const;
    void unsetCumulative_deposit_token_amounts();

    void setCumulativeDepositTokenAmounts(const std::vector<utility::string_t>& value);

    /// <summary>
    /// amount of tokens in USD deposited to position
    /// </summary>
    utility::string_t getCumulativeDepositUsd() const;
    bool cumulativeDepositUsdIsSet() const;
    void unsetCumulative_deposit_usd();

    void setCumulativeDepositUsd(const utility::string_t& value);

    /// <summary>
    /// amount of tokens ever withdrawn from position (without fees)
    /// </summary>
    std::vector<utility::string_t>& getCumulativeWithdrawTokenAmounts();
    bool cumulativeWithdrawTokenAmountsIsSet() const;
    void unsetCumulative_withdraw_token_amounts();

    void setCumulativeWithdrawTokenAmounts(const std::vector<utility::string_t>& value);

    /// <summary>
    /// amount of tokens in USD withdrawn from position (without fees)
    /// </summary>
    utility::string_t getCumulativeWithdrawUsd() const;
    bool cumulativeWithdrawUsdIsSet() const;
    void unsetCumulative_withdraw_usd();

    void setCumulativeWithdrawUsd(const utility::string_t& value);

    /// <summary>
    /// Total reward token accumulated under this position, in native amounts
    /// </summary>
    std::vector<utility::string_t>& getCumulativeRewardTokenAmounts();
    bool cumulativeRewardTokenAmountsIsSet() const;
    void unsetCumulative_reward_token_amounts();

    void setCumulativeRewardTokenAmounts(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Total reward token accumulated under this position, in USD
    /// </summary>
    std::vector<utility::string_t>& getCumulativeRewardUsd();
    bool cumulativeRewardUsdIsSet() const;
    void unsetCumulative_reward_usd();

    void setCumulativeRewardUsd(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Number of deposits related to this position
    /// </summary>
    int32_t getDepositCount() const;
    bool depositCountIsSet() const;
    void unsetDeposit_count();

    void setDepositCount(int32_t value);

    /// <summary>
    /// Number of withdrawals related to this position
    /// </summary>
    int32_t getWithdrawCount() const;
    bool withdrawCountIsSet() const;
    void unsetWithdraw_count();

    void setWithdrawCount(int32_t value);

    /// <summary>
    /// Timestamp of this snapshot
    /// </summary>
    utility::string_t getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();

    void setTimestamp(const utility::string_t& value);


protected:
    utility::datetime m_Entry_time;
    bool m_Entry_timeIsSet;
    utility::datetime m_Recv_time;
    bool m_Recv_timeIsSet;
    int64_t m_Block_number;
    bool m_Block_numberIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Hash;
    bool m_HashIsSet;
    int32_t m_Log_index;
    bool m_Log_indexIsSet;
    utility::string_t m_Nonce;
    bool m_NonceIsSet;
    utility::string_t m_Position;
    bool m_PositionIsSet;
    utility::string_t m_Liquidity_token_type;
    bool m_Liquidity_token_typeIsSet;
    utility::string_t m_Liquidity;
    bool m_LiquidityIsSet;
    utility::string_t m_Liquidity_usd;
    bool m_Liquidity_usdIsSet;
    std::vector<utility::string_t> m_Cumulative_deposit_token_amounts;
    bool m_Cumulative_deposit_token_amountsIsSet;
    utility::string_t m_Cumulative_deposit_usd;
    bool m_Cumulative_deposit_usdIsSet;
    std::vector<utility::string_t> m_Cumulative_withdraw_token_amounts;
    bool m_Cumulative_withdraw_token_amountsIsSet;
    utility::string_t m_Cumulative_withdraw_usd;
    bool m_Cumulative_withdraw_usdIsSet;
    std::vector<utility::string_t> m_Cumulative_reward_token_amounts;
    bool m_Cumulative_reward_token_amountsIsSet;
    std::vector<utility::string_t> m_Cumulative_reward_usd;
    bool m_Cumulative_reward_usdIsSet;
    int32_t m_Deposit_count;
    bool m_Deposit_countIsSet;
    int32_t m_Withdraw_count;
    bool m_Withdraw_countIsSet;
    utility::string_t m_Timestamp;
    bool m_TimestampIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO_H_ */
