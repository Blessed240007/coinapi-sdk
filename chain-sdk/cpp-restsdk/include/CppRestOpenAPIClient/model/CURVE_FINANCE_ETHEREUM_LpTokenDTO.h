/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CURVE_FINANCE_ETHEREUM_LpTokenDTO.h
 *
 * Entity for fetching the pool address from lpToken.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CURVE_FINANCE_ETHEREUM_LpTokenDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CURVE_FINANCE_ETHEREUM_LpTokenDTO_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Entity for fetching the pool address from lpToken.
/// </summary>
class  CURVE_FINANCE_ETHEREUM_LpTokenDTO
    : public ModelBase
{
public:
    CURVE_FINANCE_ETHEREUM_LpTokenDTO();
    virtual ~CURVE_FINANCE_ETHEREUM_LpTokenDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CURVE_FINANCE_ETHEREUM_LpTokenDTO members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEntryTime() const;
    bool entryTimeIsSet() const;
    void unsetEntry_time();

    void setEntryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecvTime() const;
    bool recvTimeIsSet() const;
    void unsetRecv_time();

    void setRecvTime(const utility::datetime& value);

    /// <summary>
    /// Number of block in which entity was recorded.
    /// </summary>
    int64_t getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(int64_t value);

    /// <summary>
    /// Address of the LP Token.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Address of the pool associated with this token.
    /// </summary>
    utility::string_t getPoolAddress() const;
    bool poolAddressIsSet() const;
    void unsetPool_address();

    void setPoolAddress(const utility::string_t& value);

    /// <summary>
    /// Address of the registry associated with this token.
    /// </summary>
    utility::string_t getRegistryAddress() const;
    bool registryAddressIsSet() const;
    void unsetRegistry_address();

    void setRegistryAddress(const utility::string_t& value);


protected:
    utility::datetime m_Entry_time;
    bool m_Entry_timeIsSet;
    utility::datetime m_Recv_time;
    bool m_Recv_timeIsSet;
    int64_t m_Block_number;
    bool m_Block_numberIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Pool_address;
    bool m_Pool_addressIsSet;
    utility::string_t m_Registry_address;
    bool m_Registry_addressIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CURVE_FINANCE_ETHEREUM_LpTokenDTO_H_ */
