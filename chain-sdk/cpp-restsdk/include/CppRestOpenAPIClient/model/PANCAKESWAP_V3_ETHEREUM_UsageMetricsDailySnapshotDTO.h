/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PANCAKESWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PANCAKESWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PANCAKESWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  PANCAKESWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO
    : public ModelBase
{
public:
    PANCAKESWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO();
    virtual ~PANCAKESWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PANCAKESWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEntryTime() const;
    bool entryTimeIsSet() const;
    void unsetEntry_time();

    void setEntryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecvTime() const;
    bool recvTimeIsSet() const;
    void unsetRecv_time();

    void setRecvTime(const utility::datetime& value);

    /// <summary>
    /// Number of block in which entity was recorded.
    /// </summary>
    int64_t getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(int64_t value);

    /// <summary>
    /// ID is # of days since Unix epoch time
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Number of days since Unix epoch time
    /// </summary>
    int32_t getDay() const;
    bool dayIsSet() const;
    void unsetDay();

    void setDay(int32_t value);

    /// <summary>
    /// Protocol this snapshot is associated with
    /// </summary>
    utility::string_t getProtocol() const;
    bool protocolIsSet() const;
    void unsetProtocol();

    void setProtocol(const utility::string_t& value);

    /// <summary>
    /// Number of unique daily active users
    /// </summary>
    int32_t getDailyActiveUsers() const;
    bool dailyActiveUsersIsSet() const;
    void unsetDaily_active_users();

    void setDailyActiveUsers(int32_t value);

    /// <summary>
    /// Number of cumulative unique users
    /// </summary>
    int32_t getCumulativeUniqueUsers() const;
    bool cumulativeUniqueUsersIsSet() const;
    void unsetCumulative_unique_users();

    void setCumulativeUniqueUsers(int32_t value);

    /// <summary>
    /// Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface.
    /// </summary>
    int32_t getDailyTransactionCount() const;
    bool dailyTransactionCountIsSet() const;
    void unsetDaily_transaction_count();

    void setDailyTransactionCount(int32_t value);

    /// <summary>
    /// Total number of pools
    /// </summary>
    int32_t getTotalPoolCount() const;
    bool totalPoolCountIsSet() const;
    void unsetTotal_pool_count();

    void setTotalPoolCount(int32_t value);

    /// <summary>
    /// Total number of deposits (add liquidity) in an day
    /// </summary>
    int32_t getDailyDepositCount() const;
    bool dailyDepositCountIsSet() const;
    void unsetDaily_deposit_count();

    void setDailyDepositCount(int32_t value);

    /// <summary>
    /// Total number of withdrawals (remove liquidity) in an day
    /// </summary>
    int32_t getDailyWithdrawCount() const;
    bool dailyWithdrawCountIsSet() const;
    void unsetDaily_withdraw_count();

    void setDailyWithdrawCount(int32_t value);

    /// <summary>
    /// Total number of trades (swaps) in an day
    /// </summary>
    int32_t getDailySwapCount() const;
    bool dailySwapCountIsSet() const;
    void unsetDaily_swap_count();

    void setDailySwapCount(int32_t value);

    /// <summary>
    /// Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)
    /// </summary>
    utility::string_t getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();

    void setTimestamp(const utility::string_t& value);


protected:
    utility::datetime m_Entry_time;
    bool m_Entry_timeIsSet;
    utility::datetime m_Recv_time;
    bool m_Recv_timeIsSet;
    int64_t m_Block_number;
    bool m_Block_numberIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    int32_t m_Day;
    bool m_DayIsSet;
    utility::string_t m_Protocol;
    bool m_ProtocolIsSet;
    int32_t m_Daily_active_users;
    bool m_Daily_active_usersIsSet;
    int32_t m_Cumulative_unique_users;
    bool m_Cumulative_unique_usersIsSet;
    int32_t m_Daily_transaction_count;
    bool m_Daily_transaction_countIsSet;
    int32_t m_Total_pool_count;
    bool m_Total_pool_countIsSet;
    int32_t m_Daily_deposit_count;
    bool m_Daily_deposit_countIsSet;
    int32_t m_Daily_withdraw_count;
    bool m_Daily_withdraw_countIsSet;
    int32_t m_Daily_swap_count;
    bool m_Daily_swap_countIsSet;
    utility::string_t m_Timestamp;
    bool m_TimestampIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PANCAKESWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO_H_ */
