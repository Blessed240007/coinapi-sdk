/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UNISWAP_V2_ETHEREUM_LiquidityPoolHourlySnapshotDTO.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_UNISWAP_V2_ETHEREUM_LiquidityPoolHourlySnapshotDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_UNISWAP_V2_ETHEREUM_LiquidityPoolHourlySnapshotDTO_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  UNISWAP_V2_ETHEREUM_LiquidityPoolHourlySnapshotDTO
    : public ModelBase
{
public:
    UNISWAP_V2_ETHEREUM_LiquidityPoolHourlySnapshotDTO();
    virtual ~UNISWAP_V2_ETHEREUM_LiquidityPoolHourlySnapshotDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UNISWAP_V2_ETHEREUM_LiquidityPoolHourlySnapshotDTO members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEntryTime() const;
    bool entryTimeIsSet() const;
    void unsetEntry_time();

    void setEntryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecvTime() const;
    bool recvTimeIsSet() const;
    void unsetRecv_time();

    void setRecvTime(const utility::datetime& value);

    /// <summary>
    /// Number of block in which entity was recorded.
    /// </summary>
    int64_t getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBlockRange() const;
    bool blockRangeIsSet() const;
    void unsetBlock_range();

    void setBlockRange(const utility::string_t& value);

    /// <summary>
    /// (smart contract address of the pool)-(# of hours since Unix epoch time)
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// The protocol this snapshot belongs to
    /// </summary>
    utility::string_t getProtocol() const;
    bool protocolIsSet() const;
    void unsetProtocol();

    void setProtocol(const utility::string_t& value);

    /// <summary>
    /// The pool this snapshot belongs to
    /// </summary>
    utility::string_t getPool() const;
    bool poolIsSet() const;
    void unsetPool();

    void setPool(const utility::string_t& value);

    /// <summary>
    /// Timestamp of this snapshot
    /// </summary>
    utility::string_t getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();

    void setTimestamp(const utility::string_t& value);

    /// <summary>
    /// Current TVL (Total Value Locked) of this pool
    /// </summary>
    utility::string_t getTotalValueLockedUsd() const;
    bool totalValueLockedUsdIsSet() const;
    void unsetTotal_value_locked_usd();

    void setTotalValueLockedUsd(const utility::string_t& value);

    /// <summary>
    /// All revenue generated by the liquidity pool, accrued to the supply side.
    /// </summary>
    utility::string_t getCumulativeSupplySideRevenueUsd() const;
    bool cumulativeSupplySideRevenueUsdIsSet() const;
    void unsetCumulative_supply_side_revenue_usd();

    void setCumulativeSupplySideRevenueUsd(const utility::string_t& value);

    /// <summary>
    /// Hourly revenue generated by the liquidity pool, accrued to the supply side.
    /// </summary>
    utility::string_t getHourlySupplySideRevenueUsd() const;
    bool hourlySupplySideRevenueUsdIsSet() const;
    void unsetHourly_supply_side_revenue_usd();

    void setHourlySupplySideRevenueUsd(const utility::string_t& value);

    /// <summary>
    /// All revenue generated by the liquidity pool, accrued to the protocol.
    /// </summary>
    utility::string_t getCumulativeProtocolSideRevenueUsd() const;
    bool cumulativeProtocolSideRevenueUsdIsSet() const;
    void unsetCumulative_protocol_side_revenue_usd();

    void setCumulativeProtocolSideRevenueUsd(const utility::string_t& value);

    /// <summary>
    /// Hourly revenue generated by the liquidity pool, accrued to the protocol.
    /// </summary>
    utility::string_t getHourlyProtocolSideRevenueUsd() const;
    bool hourlyProtocolSideRevenueUsdIsSet() const;
    void unsetHourly_protocol_side_revenue_usd();

    void setHourlyProtocolSideRevenueUsd(const utility::string_t& value);

    /// <summary>
    /// All revenue generated by the liquidity pool.
    /// </summary>
    utility::string_t getCumulativeTotalRevenueUsd() const;
    bool cumulativeTotalRevenueUsdIsSet() const;
    void unsetCumulative_total_revenue_usd();

    void setCumulativeTotalRevenueUsd(const utility::string_t& value);

    /// <summary>
    /// Hourly revenue generated by the liquidity pool.
    /// </summary>
    utility::string_t getHourlyTotalRevenueUsd() const;
    bool hourlyTotalRevenueUsdIsSet() const;
    void unsetHourly_total_revenue_usd();

    void setHourlyTotalRevenueUsd(const utility::string_t& value);

    /// <summary>
    /// All trade volume occurred in a given hour, in USD
    /// </summary>
    utility::string_t getHourlyVolumeUsd() const;
    bool hourlyVolumeUsdIsSet() const;
    void unsetHourly_volume_usd();

    void setHourlyVolumeUsd(const utility::string_t& value);

    /// <summary>
    /// All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#39;inputTokens&#39; field.
    /// </summary>
    std::vector<utility::string_t>& getHourlyVolumeByTokenAmount();
    bool hourlyVolumeByTokenAmountIsSet() const;
    void unsetHourly_volume_by_token_amount();

    void setHourlyVolumeByTokenAmount(const std::vector<utility::string_t>& value);

    /// <summary>
    /// All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#39;inputTokens&#39; field.
    /// </summary>
    std::vector<utility::string_t>& getHourlyVolumeByTokenUsd();
    bool hourlyVolumeByTokenUsdIsSet() const;
    void unsetHourly_volume_by_token_usd();

    void setHourlyVolumeByTokenUsd(const std::vector<utility::string_t>& value);

    /// <summary>
    /// All historical trade volume occurred in this pool, in USD
    /// </summary>
    utility::string_t getCumulativeVolumeUsd() const;
    bool cumulativeVolumeUsdIsSet() const;
    void unsetCumulative_volume_usd();

    void setCumulativeVolumeUsd(const utility::string_t& value);

    /// <summary>
    /// Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field
    /// </summary>
    std::vector<utility::string_t>& getInputTokenBalances();
    bool inputTokenBalancesIsSet() const;
    void unsetInput_token_balances();

    void setInputTokenBalances(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool
    /// </summary>
    std::vector<utility::string_t>& getInputTokenWeights();
    bool inputTokenWeightsIsSet() const;
    void unsetInput_token_weights();

    void setInputTokenWeights(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Total supply of output token. Note that certain DEXes don&#39;t have an output token (e.g. Bancor)
    /// </summary>
    utility::string_t getOutputTokenSupply() const;
    bool outputTokenSupplyIsSet() const;
    void unsetOutput_token_supply();

    void setOutputTokenSupply(const utility::string_t& value);

    /// <summary>
    /// Price per share of output token in USD
    /// </summary>
    utility::string_t getOutputTokenPriceUsd() const;
    bool outputTokenPriceUsdIsSet() const;
    void unsetOutput_token_price_usd();

    void setOutputTokenPriceUsd(const utility::string_t& value);

    /// <summary>
    /// Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
    /// </summary>
    utility::string_t getStakedOutputTokenAmount() const;
    bool stakedOutputTokenAmountIsSet() const;
    void unsetStaked_output_token_amount();

    void setStakedOutputTokenAmount(const utility::string_t& value);

    /// <summary>
    /// Per-block reward token emission as of the current block normalized to a day (not hour), in token&#39;s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
    /// </summary>
    std::vector<utility::string_t>& getRewardTokenEmissionsAmount();
    bool rewardTokenEmissionsAmountIsSet() const;
    void unsetReward_token_emissions_amount();

    void setRewardTokenEmissionsAmount(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
    /// </summary>
    std::vector<utility::string_t>& getRewardTokenEmissionsUsd();
    bool rewardTokenEmissionsUsdIsSet() const;
    void unsetReward_token_emissions_usd();

    void setRewardTokenEmissionsUsd(const std::vector<utility::string_t>& value);


protected:
    utility::datetime m_Entry_time;
    bool m_Entry_timeIsSet;
    utility::datetime m_Recv_time;
    bool m_Recv_timeIsSet;
    int64_t m_Block_number;
    bool m_Block_numberIsSet;
    utility::string_t m_Block_range;
    bool m_Block_rangeIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Protocol;
    bool m_ProtocolIsSet;
    utility::string_t m_Pool;
    bool m_PoolIsSet;
    utility::string_t m_Timestamp;
    bool m_TimestampIsSet;
    utility::string_t m_Total_value_locked_usd;
    bool m_Total_value_locked_usdIsSet;
    utility::string_t m_Cumulative_supply_side_revenue_usd;
    bool m_Cumulative_supply_side_revenue_usdIsSet;
    utility::string_t m_Hourly_supply_side_revenue_usd;
    bool m_Hourly_supply_side_revenue_usdIsSet;
    utility::string_t m_Cumulative_protocol_side_revenue_usd;
    bool m_Cumulative_protocol_side_revenue_usdIsSet;
    utility::string_t m_Hourly_protocol_side_revenue_usd;
    bool m_Hourly_protocol_side_revenue_usdIsSet;
    utility::string_t m_Cumulative_total_revenue_usd;
    bool m_Cumulative_total_revenue_usdIsSet;
    utility::string_t m_Hourly_total_revenue_usd;
    bool m_Hourly_total_revenue_usdIsSet;
    utility::string_t m_Hourly_volume_usd;
    bool m_Hourly_volume_usdIsSet;
    std::vector<utility::string_t> m_Hourly_volume_by_token_amount;
    bool m_Hourly_volume_by_token_amountIsSet;
    std::vector<utility::string_t> m_Hourly_volume_by_token_usd;
    bool m_Hourly_volume_by_token_usdIsSet;
    utility::string_t m_Cumulative_volume_usd;
    bool m_Cumulative_volume_usdIsSet;
    std::vector<utility::string_t> m_Input_token_balances;
    bool m_Input_token_balancesIsSet;
    std::vector<utility::string_t> m_Input_token_weights;
    bool m_Input_token_weightsIsSet;
    utility::string_t m_Output_token_supply;
    bool m_Output_token_supplyIsSet;
    utility::string_t m_Output_token_price_usd;
    bool m_Output_token_price_usdIsSet;
    utility::string_t m_Staked_output_token_amount;
    bool m_Staked_output_token_amountIsSet;
    std::vector<utility::string_t> m_Reward_token_emissions_amount;
    bool m_Reward_token_emissions_amountIsSet;
    std::vector<utility::string_t> m_Reward_token_emissions_usd;
    bool m_Reward_token_emissions_usdIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_UNISWAP_V2_ETHEREUM_LiquidityPoolHourlySnapshotDTO_H_ */
