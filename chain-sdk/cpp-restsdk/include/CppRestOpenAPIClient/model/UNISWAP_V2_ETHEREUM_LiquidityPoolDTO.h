/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UNISWAP_V2_ETHEREUM_LiquidityPoolDTO.h
 *
 * Pool-level metadata.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_UNISWAP_V2_ETHEREUM_LiquidityPoolDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_UNISWAP_V2_ETHEREUM_LiquidityPoolDTO_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Pool-level metadata.
/// </summary>
class  UNISWAP_V2_ETHEREUM_LiquidityPoolDTO
    : public ModelBase
{
public:
    UNISWAP_V2_ETHEREUM_LiquidityPoolDTO();
    virtual ~UNISWAP_V2_ETHEREUM_LiquidityPoolDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UNISWAP_V2_ETHEREUM_LiquidityPoolDTO members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEntryTime() const;
    bool entryTimeIsSet() const;
    void unsetEntry_time();

    void setEntryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecvTime() const;
    bool recvTimeIsSet() const;
    void unsetRecv_time();

    void setRecvTime(const utility::datetime& value);

    /// <summary>
    /// Number of block in which entity was recorded.
    /// </summary>
    int64_t getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(int64_t value);

    /// <summary>
    /// .
    /// </summary>
    int64_t getVid() const;
    bool vidIsSet() const;
    void unsetVid();

    void setVid(int64_t value);

    /// <summary>
    /// Smart contract address of the pool
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// The protocol this pool belongs to
    /// </summary>
    utility::string_t getProtocol() const;
    bool protocolIsSet() const;
    void unsetProtocol();

    void setProtocol(const utility::string_t& value);

    /// <summary>
    /// Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT)
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Symbol of liquidity pool (e.g. 3CRV)
    /// </summary>
    utility::string_t getSymbol() const;
    bool symbolIsSet() const;
    void unsetSymbol();

    void setSymbol(const utility::string_t& value);

    /// <summary>
    /// Tokens that need to be deposited to take a position in the protocol
    /// </summary>
    std::vector<utility::string_t>& getInputTokens();
    bool inputTokensIsSet() const;
    void unsetInput_tokens();

    void setInputTokens(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Token that is minted to track ownership of position in protocol
    /// </summary>
    utility::string_t getOutputToken() const;
    bool outputTokenIsSet() const;
    void unsetOutput_token();

    void setOutputToken(const utility::string_t& value);

    /// <summary>
    /// Aditional tokens that are given as reward for position in a protocol
    /// </summary>
    std::vector<utility::string_t>& getRewardTokens();
    bool rewardTokensIsSet() const;
    void unsetReward_tokens();

    void setRewardTokens(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Fees per trade incurred to the user
    /// </summary>
    std::vector<utility::string_t>& getFees();
    bool feesIsSet() const;
    void unsetFees();

    void setFees(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Whether this pool is single-sided
    /// </summary>
    bool isIsSingleSided() const;
    bool isSingleSidedIsSet() const;
    void unsetIs_single_sided();

    void setIsSingleSided(bool value);

    /// <summary>
    /// Creation timestamp
    /// </summary>
    utility::string_t getCreatedTimestamp() const;
    bool createdTimestampIsSet() const;
    void unsetCreated_timestamp();

    void setCreatedTimestamp(const utility::string_t& value);

    /// <summary>
    /// Creation block number
    /// </summary>
    utility::string_t getCreatedBlockNumber() const;
    bool createdBlockNumberIsSet() const;
    void unsetCreated_block_number();

    void setCreatedBlockNumber(const utility::string_t& value);

    /// <summary>
    /// Current TVL (Total Value Locked) of this pool in USD
    /// </summary>
    utility::string_t getTotalValueLockedUsd() const;
    bool totalValueLockedUsdIsSet() const;
    void unsetTotal_value_locked_usd();

    void setTotalValueLockedUsd(const utility::string_t& value);

    /// <summary>
    /// All revenue generated by the liquidity pool, accrued to the supply side
    /// </summary>
    utility::string_t getCumulativeSupplySideRevenueUsd() const;
    bool cumulativeSupplySideRevenueUsdIsSet() const;
    void unsetCumulative_supply_side_revenue_usd();

    void setCumulativeSupplySideRevenueUsd(const utility::string_t& value);

    /// <summary>
    /// All revenue generated by the liquidity pool, accrued to the protocol
    /// </summary>
    utility::string_t getCumulativeProtocolSideRevenueUsd() const;
    bool cumulativeProtocolSideRevenueUsdIsSet() const;
    void unsetCumulative_protocol_side_revenue_usd();

    void setCumulativeProtocolSideRevenueUsd(const utility::string_t& value);

    /// <summary>
    /// All revenue generated by the liquidity pool
    /// </summary>
    utility::string_t getCumulativeTotalRevenueUsd() const;
    bool cumulativeTotalRevenueUsdIsSet() const;
    void unsetCumulative_total_revenue_usd();

    void setCumulativeTotalRevenueUsd(const utility::string_t& value);

    /// <summary>
    /// All historical trade volume occurred in this pool, in USD
    /// </summary>
    utility::string_t getCumulativeVolumeUsd() const;
    bool cumulativeVolumeUsdIsSet() const;
    void unsetCumulative_volume_usd();

    void setCumulativeVolumeUsd(const utility::string_t& value);

    /// <summary>
    /// Amount of input tokens in the pool
    /// </summary>
    std::vector<utility::string_t>& getInputTokenBalances();
    bool inputTokenBalancesIsSet() const;
    void unsetInput_token_balances();

    void setInputTokenBalances(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Weights of input tokens in the liquidity pool in percentage values
    /// </summary>
    std::vector<utility::string_t>& getInputTokenWeights();
    bool inputTokenWeightsIsSet() const;
    void unsetInput_token_weights();

    void setInputTokenWeights(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Total supply of output token
    /// </summary>
    utility::string_t getOutputTokenSupply() const;
    bool outputTokenSupplyIsSet() const;
    void unsetOutput_token_supply();

    void setOutputTokenSupply(const utility::string_t& value);

    /// <summary>
    /// Price per share of output token in USD
    /// </summary>
    utility::string_t getOutputTokenPriceUsd() const;
    bool outputTokenPriceUsdIsSet() const;
    void unsetOutput_token_price_usd();

    void setOutputTokenPriceUsd(const utility::string_t& value);

    /// <summary>
    /// Total supply of output tokens that are staked
    /// </summary>
    utility::string_t getStakedOutputTokenAmount() const;
    bool stakedOutputTokenAmountIsSet() const;
    void unsetStaked_output_token_amount();

    void setStakedOutputTokenAmount(const utility::string_t& value);

    /// <summary>
    /// Per-block reward token emission as of the current block normalized to a day, in token&#39;s native amount
    /// </summary>
    std::vector<utility::string_t>& getRewardTokenEmissionsAmount();
    bool rewardTokenEmissionsAmountIsSet() const;
    void unsetReward_token_emissions_amount();

    void setRewardTokenEmissionsAmount(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Per-block reward token emission as of the current block normalized to a day, in USD value
    /// </summary>
    std::vector<utility::string_t>& getRewardTokenEmissionsUsd();
    bool rewardTokenEmissionsUsdIsSet() const;
    void unsetReward_token_emissions_usd();

    void setRewardTokenEmissionsUsd(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Evaluated ask value of the liquidity pool.
    /// </summary>
    double getEvaluatedAsk() const;
    bool evaluatedAskIsSet() const;
    void unsetEvaluated_ask();

    void setEvaluatedAsk(double value);


protected:
    utility::datetime m_Entry_time;
    bool m_Entry_timeIsSet;
    utility::datetime m_Recv_time;
    bool m_Recv_timeIsSet;
    int64_t m_Block_number;
    bool m_Block_numberIsSet;
    int64_t m_Vid;
    bool m_VidIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Protocol;
    bool m_ProtocolIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Symbol;
    bool m_SymbolIsSet;
    std::vector<utility::string_t> m_Input_tokens;
    bool m_Input_tokensIsSet;
    utility::string_t m_Output_token;
    bool m_Output_tokenIsSet;
    std::vector<utility::string_t> m_Reward_tokens;
    bool m_Reward_tokensIsSet;
    std::vector<utility::string_t> m_Fees;
    bool m_FeesIsSet;
    bool m_Is_single_sided;
    bool m_Is_single_sidedIsSet;
    utility::string_t m_Created_timestamp;
    bool m_Created_timestampIsSet;
    utility::string_t m_Created_block_number;
    bool m_Created_block_numberIsSet;
    utility::string_t m_Total_value_locked_usd;
    bool m_Total_value_locked_usdIsSet;
    utility::string_t m_Cumulative_supply_side_revenue_usd;
    bool m_Cumulative_supply_side_revenue_usdIsSet;
    utility::string_t m_Cumulative_protocol_side_revenue_usd;
    bool m_Cumulative_protocol_side_revenue_usdIsSet;
    utility::string_t m_Cumulative_total_revenue_usd;
    bool m_Cumulative_total_revenue_usdIsSet;
    utility::string_t m_Cumulative_volume_usd;
    bool m_Cumulative_volume_usdIsSet;
    std::vector<utility::string_t> m_Input_token_balances;
    bool m_Input_token_balancesIsSet;
    std::vector<utility::string_t> m_Input_token_weights;
    bool m_Input_token_weightsIsSet;
    utility::string_t m_Output_token_supply;
    bool m_Output_token_supplyIsSet;
    utility::string_t m_Output_token_price_usd;
    bool m_Output_token_price_usdIsSet;
    utility::string_t m_Staked_output_token_amount;
    bool m_Staked_output_token_amountIsSet;
    std::vector<utility::string_t> m_Reward_token_emissions_amount;
    bool m_Reward_token_emissions_amountIsSet;
    std::vector<utility::string_t> m_Reward_token_emissions_usd;
    bool m_Reward_token_emissions_usdIsSet;
    double m_Evaluated_ask;
    bool m_Evaluated_askIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_UNISWAP_V2_ETHEREUM_LiquidityPoolDTO_H_ */
