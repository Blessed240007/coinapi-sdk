/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UNISWAP_V2_ETHEREUM_MasterChefStakingPoolDTO.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_UNISWAP_V2_ETHEREUM_MasterChefStakingPoolDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_UNISWAP_V2_ETHEREUM_MasterChefStakingPoolDTO_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  UNISWAP_V2_ETHEREUM_MasterChefStakingPoolDTO
    : public ModelBase
{
public:
    UNISWAP_V2_ETHEREUM_MasterChefStakingPoolDTO();
    virtual ~UNISWAP_V2_ETHEREUM_MasterChefStakingPoolDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UNISWAP_V2_ETHEREUM_MasterChefStakingPoolDTO members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEntryTime() const;
    bool entryTimeIsSet() const;
    void unsetEntry_time();

    void setEntryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecvTime() const;
    bool recvTimeIsSet() const;
    void unsetRecv_time();

    void setRecvTime(const utility::datetime& value);

    /// <summary>
    /// Number of block in which entity was recorded.
    /// </summary>
    int64_t getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBlockRange() const;
    bool blockRangeIsSet() const;
    void unsetBlock_range();

    void setBlockRange(const utility::string_t& value);

    /// <summary>
    /// (masterchef type) - (pid referenced in the masterchef contract)
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Staking pool to which this rewarder is associated
    /// </summary>
    utility::string_t getPoolAddress() const;
    bool poolAddressIsSet() const;
    void unsetPool_address();

    void setPoolAddress(const utility::string_t& value);

    /// <summary>
    /// Allocation point of this MasterChef Staking pool
    /// </summary>
    utility::string_t getPoolAllocPoint() const;
    bool poolAllocPointIsSet() const;
    void unsetPool_alloc_point();

    void setPoolAllocPoint(const utility::string_t& value);

    /// <summary>
    /// Reward Multiplier for a given staking pool
    /// </summary>
    utility::string_t getMultiplier() const;
    bool multiplierIsSet() const;
    void unsetMultiplier();

    void setMultiplier(const utility::string_t& value);

    /// <summary>
    /// Last block where rewards were given out
    /// </summary>
    utility::string_t getLastRewardBlock() const;
    bool lastRewardBlockIsSet() const;
    void unsetLast_reward_block();

    void setLastRewardBlock(const utility::string_t& value);

    /// <summary>
    /// Optional address of a bonus rewarder, to give additional tokens on top of masterchefs
    /// </summary>
    utility::string_t getRewarder() const;
    bool rewarderIsSet() const;
    void unsetRewarder();

    void setRewarder(const utility::string_t& value);


protected:
    utility::datetime m_Entry_time;
    bool m_Entry_timeIsSet;
    utility::datetime m_Recv_time;
    bool m_Recv_timeIsSet;
    int64_t m_Block_number;
    bool m_Block_numberIsSet;
    utility::string_t m_Block_range;
    bool m_Block_rangeIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Pool_address;
    bool m_Pool_addressIsSet;
    utility::string_t m_Pool_alloc_point;
    bool m_Pool_alloc_pointIsSet;
    utility::string_t m_Multiplier;
    bool m_MultiplierIsSet;
    utility::string_t m_Last_reward_block;
    bool m_Last_reward_blockIsSet;
    utility::string_t m_Rewarder;
    bool m_RewarderIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_UNISWAP_V2_ETHEREUM_MasterChefStakingPoolDTO_H_ */
