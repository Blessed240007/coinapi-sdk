/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UNISWAP_V2_ETHEREUM_MasterChefDTO.h
 *
 * Smart contract that is used to manage the liquidity mining program on Uniswap V2.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_UNISWAP_V2_ETHEREUM_MasterChefDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_UNISWAP_V2_ETHEREUM_MasterChefDTO_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Smart contract that is used to manage the liquidity mining program on Uniswap V2.
/// </summary>
class  UNISWAP_V2_ETHEREUM_MasterChefDTO
    : public ModelBase
{
public:
    UNISWAP_V2_ETHEREUM_MasterChefDTO();
    virtual ~UNISWAP_V2_ETHEREUM_MasterChefDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UNISWAP_V2_ETHEREUM_MasterChefDTO members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEntryTime() const;
    bool entryTimeIsSet() const;
    void unsetEntry_time();

    void setEntryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecvTime() const;
    bool recvTimeIsSet() const;
    void unsetRecv_time();

    void setRecvTime(const utility::datetime& value);

    /// <summary>
    /// Number of block in which entity was recorded.
    /// </summary>
    int64_t getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBlockRange() const;
    bool blockRangeIsSet() const;
    void unsetBlock_range();

    void setBlockRange(const utility::string_t& value);

    /// <summary>
    /// (masterChef type) - (pid referenced in the masterchef contract)
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Address of the masterchef contract
    /// </summary>
    utility::string_t getAddress() const;
    bool addressIsSet() const;
    void unsetAddress();

    void setAddress(const utility::string_t& value);

    /// <summary>
    /// Total allocation point of all staking pools
    /// </summary>
    utility::string_t getTotalAllocPoint() const;
    bool totalAllocPointIsSet() const;
    void unsetTotal_alloc_point();

    void setTotalAllocPoint(const utility::string_t& value);

    /// <summary>
    /// Amount of reward tokens emitted per block or timestamp
    /// </summary>
    utility::string_t getRewardTokenRate() const;
    bool rewardTokenRateIsSet() const;
    void unsetReward_token_rate();

    void setRewardTokenRate(const utility::string_t& value);

    /// <summary>
    /// Indicates whether rewards are indicated by block or timestamp
    /// </summary>
    utility::string_t getRewardTokenInterval() const;
    bool rewardTokenIntervalIsSet() const;
    void unsetReward_token_interval();

    void setRewardTokenInterval(const utility::string_t& value);

    /// <summary>
    /// Reward token rate given after you adjust for allocations either burned or not applicable
    /// </summary>
    utility::string_t getAdjustedRewardTokenRate() const;
    bool adjustedRewardTokenRateIsSet() const;
    void unsetAdjusted_reward_token_rate();

    void setAdjustedRewardTokenRate(const utility::string_t& value);

    /// <summary>
    /// Last time the adjusted reward token rate was updated
    /// </summary>
    utility::string_t getLastUpdatedRewardRate() const;
    bool lastUpdatedRewardRateIsSet() const;
    void unsetLast_updated_reward_rate();

    void setLastUpdatedRewardRate(const utility::string_t& value);


protected:
    utility::datetime m_Entry_time;
    bool m_Entry_timeIsSet;
    utility::datetime m_Recv_time;
    bool m_Recv_timeIsSet;
    int64_t m_Block_number;
    bool m_Block_numberIsSet;
    utility::string_t m_Block_range;
    bool m_Block_rangeIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Address;
    bool m_AddressIsSet;
    utility::string_t m_Total_alloc_point;
    bool m_Total_alloc_pointIsSet;
    utility::string_t m_Reward_token_rate;
    bool m_Reward_token_rateIsSet;
    utility::string_t m_Reward_token_interval;
    bool m_Reward_token_intervalIsSet;
    utility::string_t m_Adjusted_reward_token_rate;
    bool m_Adjusted_reward_token_rateIsSet;
    utility::string_t m_Last_updated_reward_rate;
    bool m_Last_updated_reward_rateIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_UNISWAP_V2_ETHEREUM_MasterChefDTO_H_ */
