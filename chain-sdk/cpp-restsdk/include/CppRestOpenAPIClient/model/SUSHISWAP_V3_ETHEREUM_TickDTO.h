/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SUSHISWAP_V3_ETHEREUM_TickDTO.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_SUSHISWAP_V3_ETHEREUM_TickDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_SUSHISWAP_V3_ETHEREUM_TickDTO_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  SUSHISWAP_V3_ETHEREUM_TickDTO
    : public ModelBase
{
public:
    SUSHISWAP_V3_ETHEREUM_TickDTO();
    virtual ~SUSHISWAP_V3_ETHEREUM_TickDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SUSHISWAP_V3_ETHEREUM_TickDTO members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEntryTime() const;
    bool entryTimeIsSet() const;
    void unsetEntry_time();

    void setEntryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecvTime() const;
    bool recvTimeIsSet() const;
    void unsetRecv_time();

    void setRecvTime(const utility::datetime& value);

    /// <summary>
    /// Number of block in which entity was recorded.
    /// </summary>
    int64_t getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(int64_t value);

    /// <summary>
    /// (pool address)-(tick index)
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// tick index
    /// </summary>
    utility::string_t getIndex() const;
    bool indexIsSet() const;
    void unsetIndex();

    void setIndex(const utility::string_t& value);

    /// <summary>
    /// Liquidity pool this tick belongs to
    /// </summary>
    utility::string_t getPool() const;
    bool poolIsSet() const;
    void unsetPool();

    void setPool(const utility::string_t& value);

    /// <summary>
    /// Creation timestamp
    /// </summary>
    utility::string_t getCreatedTimestamp() const;
    bool createdTimestampIsSet() const;
    void unsetCreated_timestamp();

    void setCreatedTimestamp(const utility::string_t& value);

    /// <summary>
    /// Creation block number
    /// </summary>
    utility::string_t getCreatedBlockNumber() const;
    bool createdBlockNumberIsSet() const;
    void unsetCreated_block_number();

    void setCreatedBlockNumber(const utility::string_t& value);

    /// <summary>
    /// calculated price of token0 of tick within this pool - constant
    /// </summary>
    std::vector<utility::string_t>& getPrices();
    bool pricesIsSet() const;
    void unsetPrices();

    void setPrices(const std::vector<utility::string_t>& value);

    /// <summary>
    /// total liquidity pool has as tick lower or upper
    /// </summary>
    utility::string_t getLiquidityGross() const;
    bool liquidityGrossIsSet() const;
    void unsetLiquidity_gross();

    void setLiquidityGross(const utility::string_t& value);

    /// <summary>
    /// total liquidity in USD pool has as tick lower or upper
    /// </summary>
    utility::string_t getLiquidityGrossUsd() const;
    bool liquidityGrossUsdIsSet() const;
    void unsetLiquidity_gross_usd();

    void setLiquidityGrossUsd(const utility::string_t& value);

    /// <summary>
    /// how much liquidity changes when tick crossed
    /// </summary>
    utility::string_t getLiquidityNet() const;
    bool liquidityNetIsSet() const;
    void unsetLiquidity_net();

    void setLiquidityNet(const utility::string_t& value);

    /// <summary>
    /// how much liquidity in USD changes when tick crossed
    /// </summary>
    utility::string_t getLiquidityNetUsd() const;
    bool liquidityNetUsdIsSet() const;
    void unsetLiquidity_net_usd();

    void setLiquidityNetUsd(const utility::string_t& value);

    /// <summary>
    /// Day ID of the most recent daily snapshot
    /// </summary>
    int32_t getLastSnapshotDayId() const;
    bool lastSnapshotDayIdIsSet() const;
    void unsetLast_snapshot_day_id();

    void setLastSnapshotDayId(int32_t value);

    /// <summary>
    /// Hour ID of the most recent hourly snapshot
    /// </summary>
    int32_t getLastSnapshotHourId() const;
    bool lastSnapshotHourIdIsSet() const;
    void unsetLast_snapshot_hour_id();

    void setLastSnapshotHourId(int32_t value);

    /// <summary>
    /// Timestamp of the last time this entity was updated
    /// </summary>
    utility::string_t getLastUpdateTimestamp() const;
    bool lastUpdateTimestampIsSet() const;
    void unsetLast_update_timestamp();

    void setLastUpdateTimestamp(const utility::string_t& value);

    /// <summary>
    /// Block number of the last time this entity was updated
    /// </summary>
    utility::string_t getLastUpdateBlockNumber() const;
    bool lastUpdateBlockNumberIsSet() const;
    void unsetLast_update_block_number();

    void setLastUpdateBlockNumber(const utility::string_t& value);


protected:
    utility::datetime m_Entry_time;
    bool m_Entry_timeIsSet;
    utility::datetime m_Recv_time;
    bool m_Recv_timeIsSet;
    int64_t m_Block_number;
    bool m_Block_numberIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Index;
    bool m_IndexIsSet;
    utility::string_t m_Pool;
    bool m_PoolIsSet;
    utility::string_t m_Created_timestamp;
    bool m_Created_timestampIsSet;
    utility::string_t m_Created_block_number;
    bool m_Created_block_numberIsSet;
    std::vector<utility::string_t> m_Prices;
    bool m_PricesIsSet;
    utility::string_t m_Liquidity_gross;
    bool m_Liquidity_grossIsSet;
    utility::string_t m_Liquidity_gross_usd;
    bool m_Liquidity_gross_usdIsSet;
    utility::string_t m_Liquidity_net;
    bool m_Liquidity_netIsSet;
    utility::string_t m_Liquidity_net_usd;
    bool m_Liquidity_net_usdIsSet;
    int32_t m_Last_snapshot_day_id;
    bool m_Last_snapshot_day_idIsSet;
    int32_t m_Last_snapshot_hour_id;
    bool m_Last_snapshot_hour_idIsSet;
    utility::string_t m_Last_update_timestamp;
    bool m_Last_update_timestampIsSet;
    utility::string_t m_Last_update_block_number;
    bool m_Last_update_block_numberIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_SUSHISWAP_V3_ETHEREUM_TickDTO_H_ */
