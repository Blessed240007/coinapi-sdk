/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SUSHISWAP_V3_ETHEREUM_TokenDTO.h
 *
 * Stores aggregated information for a specific token across all pairs that token is included in.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_SUSHISWAP_V3_ETHEREUM_TokenDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_SUSHISWAP_V3_ETHEREUM_TokenDTO_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Stores aggregated information for a specific token across all pairs that token is included in.
/// </summary>
class  SUSHISWAP_V3_ETHEREUM_TokenDTO
    : public ModelBase
{
public:
    SUSHISWAP_V3_ETHEREUM_TokenDTO();
    virtual ~SUSHISWAP_V3_ETHEREUM_TokenDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SUSHISWAP_V3_ETHEREUM_TokenDTO members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEntryTime() const;
    bool entryTimeIsSet() const;
    void unsetEntry_time();

    void setEntryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecvTime() const;
    bool recvTimeIsSet() const;
    void unsetRecv_time();

    void setRecvTime(const utility::datetime& value);

    /// <summary>
    /// Number of block in which entity was recorded.
    /// </summary>
    int64_t getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(int64_t value);

    /// <summary>
    /// .
    /// </summary>
    int64_t getVid() const;
    bool vidIsSet() const;
    void unsetVid();

    void setVid(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBlockRange() const;
    bool blockRangeIsSet() const;
    void unsetBlock_range();

    void setBlockRange(const utility::string_t& value);

    /// <summary>
    /// Smart contract address of the token.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Name of the token, mirrored from the smart contract.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Symbol of the token, mirrored from the smart contract.
    /// </summary>
    utility::string_t getSymbol() const;
    bool symbolIsSet() const;
    void unsetSymbol();

    void setSymbol(const utility::string_t& value);

    /// <summary>
    /// The number of decimal places this token uses, default to 18.
    /// </summary>
    int32_t getDecimals() const;
    bool decimalsIsSet() const;
    void unsetDecimals();

    void setDecimals(int32_t value);

    /// <summary>
    /// Optional field to track the price of a token, mostly for caching purposes.
    /// </summary>
    utility::string_t getLastPriceUsd() const;
    bool lastPriceUsdIsSet() const;
    void unsetLast_price_usd();

    void setLastPriceUsd(const utility::string_t& value);

    /// <summary>
    /// Optional field to track the block number of the last token price.
    /// </summary>
    utility::string_t getLastPriceBlockNumber() const;
    bool lastPriceBlockNumberIsSet() const;
    void unsetLast_price_block_number();

    void setLastPriceBlockNumber(const utility::string_t& value);

    /// <summary>
    /// Last pool that gave this token a price.
    /// </summary>
    utility::string_t getLastPricePool() const;
    bool lastPricePoolIsSet() const;
    void unsetLast_price_pool();

    void setLastPricePool(const utility::string_t& value);

    /// <summary>
    /// Amount of tokens in the protocol.
    /// </summary>
    utility::string_t getTotalSupply() const;
    bool totalSupplyIsSet() const;
    void unsetTotal_supply();

    void setTotalSupply(const utility::string_t& value);

    /// <summary>
    /// Total value locked in the protocol.
    /// </summary>
    utility::string_t getTotalValueLockedUsd() const;
    bool totalValueLockedUsdIsSet() const;
    void unsetTotal_value_locked_usd();

    void setTotalValueLockedUsd(const utility::string_t& value);

    /// <summary>
    /// The buffer for detecting large price changes.
    /// </summary>
    int32_t getLargePriceChangeBuffer() const;
    bool largePriceChangeBufferIsSet() const;
    void unsetLarge_price_change_buffer();

    void setLargePriceChangeBuffer(int32_t value);

    /// <summary>
    /// The buffer for detecting large TVL (Total Value Locked) impact.
    /// </summary>
    int32_t getLargeTvlImpactBuffer() const;
    bool largeTvlImpactBufferIsSet() const;
    void unsetLarge_tvl_impact_buffer();

    void setLargeTvlImpactBuffer(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTokenSymbol() const;
    bool tokenSymbolIsSet() const;
    void unsetToken_symbol();

    void setTokenSymbol(const utility::string_t& value);


protected:
    utility::datetime m_Entry_time;
    bool m_Entry_timeIsSet;
    utility::datetime m_Recv_time;
    bool m_Recv_timeIsSet;
    int64_t m_Block_number;
    bool m_Block_numberIsSet;
    int64_t m_Vid;
    bool m_VidIsSet;
    utility::string_t m_Block_range;
    bool m_Block_rangeIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Symbol;
    bool m_SymbolIsSet;
    int32_t m_Decimals;
    bool m_DecimalsIsSet;
    utility::string_t m_Last_price_usd;
    bool m_Last_price_usdIsSet;
    utility::string_t m_Last_price_block_number;
    bool m_Last_price_block_numberIsSet;
    utility::string_t m_Last_price_pool;
    bool m_Last_price_poolIsSet;
    utility::string_t m_Total_supply;
    bool m_Total_supplyIsSet;
    utility::string_t m_Total_value_locked_usd;
    bool m_Total_value_locked_usdIsSet;
    int32_t m_Large_price_change_buffer;
    bool m_Large_price_change_bufferIsSet;
    int32_t m_Large_tvl_impact_buffer;
    bool m_Large_tvl_impact_bufferIsSet;
    utility::string_t m_Token_symbol;
    bool m_Token_symbolIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_SUSHISWAP_V3_ETHEREUM_TokenDTO_H_ */
