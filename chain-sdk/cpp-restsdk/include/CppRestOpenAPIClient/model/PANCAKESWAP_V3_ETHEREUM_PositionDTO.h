/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PANCAKESWAP_V3_ETHEREUM_PositionDTO.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PANCAKESWAP_V3_ETHEREUM_PositionDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PANCAKESWAP_V3_ETHEREUM_PositionDTO_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  PANCAKESWAP_V3_ETHEREUM_PositionDTO
    : public ModelBase
{
public:
    PANCAKESWAP_V3_ETHEREUM_PositionDTO();
    virtual ~PANCAKESWAP_V3_ETHEREUM_PositionDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PANCAKESWAP_V3_ETHEREUM_PositionDTO members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEntryTime() const;
    bool entryTimeIsSet() const;
    void unsetEntry_time();

    void setEntryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecvTime() const;
    bool recvTimeIsSet() const;
    void unsetRecv_time();

    void setRecvTime(const utility::datetime& value);

    /// <summary>
    /// Number of block in which entity was recorded.
    /// </summary>
    int64_t getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(int64_t value);

    /// <summary>
    /// (account address)-(market address)-(count)
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Account that owns this position
    /// </summary>
    utility::string_t getAccount() const;
    bool accountIsSet() const;
    void unsetAccount();

    void setAccount(const utility::string_t& value);

    /// <summary>
    /// The liquidity pool in which this position was opened
    /// </summary>
    utility::string_t getPool() const;
    bool poolIsSet() const;
    void unsetPool();

    void setPool(const utility::string_t& value);

    /// <summary>
    /// The hash of the transaction that opened this position
    /// </summary>
    utility::string_t getHashOpened() const;
    bool hashOpenedIsSet() const;
    void unsetHash_opened();

    void setHashOpened(const utility::string_t& value);

    /// <summary>
    /// The hash of the transaction that closed this position
    /// </summary>
    utility::string_t getHashClosed() const;
    bool hashClosedIsSet() const;
    void unsetHash_closed();

    void setHashClosed(const utility::string_t& value);

    /// <summary>
    /// Block number of when the position was opened
    /// </summary>
    utility::string_t getBlockNumberOpened() const;
    bool blockNumberOpenedIsSet() const;
    void unsetBlock_number_opened();

    void setBlockNumberOpened(const utility::string_t& value);

    /// <summary>
    /// Timestamp when the position was opened
    /// </summary>
    utility::string_t getTimestampOpened() const;
    bool timestampOpenedIsSet() const;
    void unsetTimestamp_opened();

    void setTimestampOpened(const utility::string_t& value);

    /// <summary>
    /// Block number of when the position was closed (0 if still open)
    /// </summary>
    utility::string_t getBlockNumberClosed() const;
    bool blockNumberClosedIsSet() const;
    void unsetBlock_number_closed();

    void setBlockNumberClosed(const utility::string_t& value);

    /// <summary>
    /// Timestamp when the position was closed (0 if still open)
    /// </summary>
    utility::string_t getTimestampClosed() const;
    bool timestampClosedIsSet() const;
    void unsetTimestamp_closed();

    void setTimestampClosed(const utility::string_t& value);

    /// <summary>
    /// lower tick of the position
    /// </summary>
    utility::string_t getTickLower() const;
    bool tickLowerIsSet() const;
    void unsetTick_lower();

    void setTickLower(const utility::string_t& value);

    /// <summary>
    /// upper tick of the position
    /// </summary>
    utility::string_t getTickUpper() const;
    bool tickUpperIsSet() const;
    void unsetTick_upper();

    void setTickUpper(const utility::string_t& value);

    /// <summary>
    /// Token that is to represent ownership of liquidity
    /// </summary>
    utility::string_t getLiquidityToken() const;
    bool liquidityTokenIsSet() const;
    void unsetLiquidity_token();

    void setLiquidityToken(const utility::string_t& value);

    /// <summary>
    /// Type of token used to track liquidity
    /// </summary>
    utility::string_t getLiquidityTokenType() const;
    bool liquidityTokenTypeIsSet() const;
    void unsetLiquidity_token_type();

    void setLiquidityTokenType(const utility::string_t& value);

    /// <summary>
    /// total position liquidity
    /// </summary>
    utility::string_t getLiquidity() const;
    bool liquidityIsSet() const;
    void unsetLiquidity();

    void setLiquidity(const utility::string_t& value);

    /// <summary>
    /// total position liquidity in USD
    /// </summary>
    utility::string_t getLiquidityUsd() const;
    bool liquidityUsdIsSet() const;
    void unsetLiquidity_usd();

    void setLiquidityUsd(const utility::string_t& value);

    /// <summary>
    /// amount of tokens ever deposited to position
    /// </summary>
    std::vector<utility::string_t>& getCumulativeDepositTokenAmounts();
    bool cumulativeDepositTokenAmountsIsSet() const;
    void unsetCumulative_deposit_token_amounts();

    void setCumulativeDepositTokenAmounts(const std::vector<utility::string_t>& value);

    /// <summary>
    /// amount of tokens in USD deposited to position
    /// </summary>
    utility::string_t getCumulativeDepositUsd() const;
    bool cumulativeDepositUsdIsSet() const;
    void unsetCumulative_deposit_usd();

    void setCumulativeDepositUsd(const utility::string_t& value);

    /// <summary>
    /// amount of tokens ever withdrawn from position (without fees)
    /// </summary>
    std::vector<utility::string_t>& getCumulativeWithdrawTokenAmounts();
    bool cumulativeWithdrawTokenAmountsIsSet() const;
    void unsetCumulative_withdraw_token_amounts();

    void setCumulativeWithdrawTokenAmounts(const std::vector<utility::string_t>& value);

    /// <summary>
    /// amount of tokens in USD withdrawn from position (without fees)
    /// </summary>
    utility::string_t getCumulativeWithdrawUsd() const;
    bool cumulativeWithdrawUsdIsSet() const;
    void unsetCumulative_withdraw_usd();

    void setCumulativeWithdrawUsd(const utility::string_t& value);

    /// <summary>
    /// Total reward token accumulated under this position, in USD
    /// </summary>
    std::vector<utility::string_t>& getCumulativeRewardUsd();
    bool cumulativeRewardUsdIsSet() const;
    void unsetCumulative_reward_usd();

    void setCumulativeRewardUsd(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Number of deposits related to this position
    /// </summary>
    int32_t getDepositCount() const;
    bool depositCountIsSet() const;
    void unsetDeposit_count();

    void setDepositCount(int32_t value);

    /// <summary>
    /// Number of withdrawals related to this position
    /// </summary>
    int32_t getWithdrawCount() const;
    bool withdrawCountIsSet() const;
    void unsetWithdraw_count();

    void setWithdrawCount(int32_t value);


protected:
    utility::datetime m_Entry_time;
    bool m_Entry_timeIsSet;
    utility::datetime m_Recv_time;
    bool m_Recv_timeIsSet;
    int64_t m_Block_number;
    bool m_Block_numberIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Account;
    bool m_AccountIsSet;
    utility::string_t m_Pool;
    bool m_PoolIsSet;
    utility::string_t m_Hash_opened;
    bool m_Hash_openedIsSet;
    utility::string_t m_Hash_closed;
    bool m_Hash_closedIsSet;
    utility::string_t m_Block_number_opened;
    bool m_Block_number_openedIsSet;
    utility::string_t m_Timestamp_opened;
    bool m_Timestamp_openedIsSet;
    utility::string_t m_Block_number_closed;
    bool m_Block_number_closedIsSet;
    utility::string_t m_Timestamp_closed;
    bool m_Timestamp_closedIsSet;
    utility::string_t m_Tick_lower;
    bool m_Tick_lowerIsSet;
    utility::string_t m_Tick_upper;
    bool m_Tick_upperIsSet;
    utility::string_t m_Liquidity_token;
    bool m_Liquidity_tokenIsSet;
    utility::string_t m_Liquidity_token_type;
    bool m_Liquidity_token_typeIsSet;
    utility::string_t m_Liquidity;
    bool m_LiquidityIsSet;
    utility::string_t m_Liquidity_usd;
    bool m_Liquidity_usdIsSet;
    std::vector<utility::string_t> m_Cumulative_deposit_token_amounts;
    bool m_Cumulative_deposit_token_amountsIsSet;
    utility::string_t m_Cumulative_deposit_usd;
    bool m_Cumulative_deposit_usdIsSet;
    std::vector<utility::string_t> m_Cumulative_withdraw_token_amounts;
    bool m_Cumulative_withdraw_token_amountsIsSet;
    utility::string_t m_Cumulative_withdraw_usd;
    bool m_Cumulative_withdraw_usdIsSet;
    std::vector<utility::string_t> m_Cumulative_reward_usd;
    bool m_Cumulative_reward_usdIsSet;
    int32_t m_Deposit_count;
    bool m_Deposit_countIsSet;
    int32_t m_Withdraw_count;
    bool m_Withdraw_countIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PANCAKESWAP_V3_ETHEREUM_PositionDTO_H_ */
