/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO
    : public ModelBase
{
public:
    UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO();
    virtual ~UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEntryTime() const;
    bool entryTimeIsSet() const;
    void unsetEntry_time();

    void setEntryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecvTime() const;
    bool recvTimeIsSet() const;
    void unsetRecv_time();

    void setRecvTime(const utility::datetime& value);

    /// <summary>
    /// Number of block in which entity was recorded.
    /// </summary>
    int64_t getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBlockRange() const;
    bool blockRangeIsSet() const;
    void unsetBlock_range();

    void setBlockRange(const utility::string_t& value);

    /// <summary>
    /// Address of the rewarder contract associated to some staking pool
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Staking pool to which this rewarder is associated
    /// </summary>
    utility::string_t getPool() const;
    bool poolIsSet() const;
    void unsetPool();

    void setPool(const utility::string_t& value);

    /// <summary>
    /// Address of the token given by this rewarder
    /// </summary>
    utility::string_t getRewardToken() const;
    bool rewardTokenIsSet() const;
    void unsetReward_token();

    void setRewardToken(const utility::string_t& value);

    /// <summary>
    /// Number of tokens rewarded per second per LP staked in pool by this rewarder
    /// </summary>
    utility::string_t getTokenPerSec() const;
    bool tokenPerSecIsSet() const;
    void unsetToken_per_sec();

    void setTokenPerSec(const utility::string_t& value);

    /// <summary>
    /// Timestamp from the last time tokenPerSec was calculated
    /// </summary>
    utility::string_t getRateCalculatedAt() const;
    bool rateCalculatedAtIsSet() const;
    void unsetRate_calculated_at();

    void setRateCalculatedAt(const utility::string_t& value);

    /// <summary>
    /// A field to keep track if there are any funds to give away in the rewarder
    /// </summary>
    bool isHasFunds() const;
    bool hasFundsIsSet() const;
    void unsetHas_funds();

    void setHasFunds(bool value);

    /// <summary>
    /// When it was last checked that there were funds in the rewarder
    /// </summary>
    utility::string_t getHasFundsAt() const;
    bool hasFundsAtIsSet() const;
    void unsetHas_funds_at();

    void setHasFundsAt(const utility::string_t& value);

    /// <summary>
    /// If true it means the rewardRate can be retrieved directly from the contract, without crazy math
    /// </summary>
    bool isCanRetrieveRate() const;
    bool canRetrieveRateIsSet() const;
    void unsetCan_retrieve_rate();

    void setCanRetrieveRate(bool value);

    /// <summary>
    /// Utility field to calculate the rewarder reward rate
    /// </summary>
    bool isRewardRateCalculationInProgress() const;
    bool rewardRateCalculationInProgressIsSet() const;
    void unsetReward_rate_calculation_in_progress();

    void setRewardRateCalculationInProgress(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getProbes();
    bool probesIsSet() const;
    void unsetProbes();

    void setProbes(const std::vector<utility::string_t>& value);


protected:
    utility::datetime m_Entry_time;
    bool m_Entry_timeIsSet;
    utility::datetime m_Recv_time;
    bool m_Recv_timeIsSet;
    int64_t m_Block_number;
    bool m_Block_numberIsSet;
    utility::string_t m_Block_range;
    bool m_Block_rangeIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Pool;
    bool m_PoolIsSet;
    utility::string_t m_Reward_token;
    bool m_Reward_tokenIsSet;
    utility::string_t m_Token_per_sec;
    bool m_Token_per_secIsSet;
    utility::string_t m_Rate_calculated_at;
    bool m_Rate_calculated_atIsSet;
    bool m_Has_funds;
    bool m_Has_fundsIsSet;
    utility::string_t m_Has_funds_at;
    bool m_Has_funds_atIsSet;
    bool m_Can_retrieve_rate;
    bool m_Can_retrieve_rateIsSet;
    bool m_Reward_rate_calculation_in_progress;
    bool m_Reward_rate_calculation_in_progressIsSet;
    std::vector<utility::string_t> m_Probes;
    bool m_ProbesIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO_H_ */
