/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UNISWAP_V3_ETHEREUM_DepositDTO.h
 *
 * Entity represents a user action in the protocol involving the addition of funds to a liquidity pool.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_UNISWAP_V3_ETHEREUM_DepositDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_UNISWAP_V3_ETHEREUM_DepositDTO_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Entity represents a user action in the protocol involving the addition of funds to a liquidity pool.
/// </summary>
class  UNISWAP_V3_ETHEREUM_DepositDTO
    : public ModelBase
{
public:
    UNISWAP_V3_ETHEREUM_DepositDTO();
    virtual ~UNISWAP_V3_ETHEREUM_DepositDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UNISWAP_V3_ETHEREUM_DepositDTO members

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getEntryTime() const;
    bool entryTimeIsSet() const;
    void unsetEntry_time();

    void setEntryTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getRecvTime() const;
    bool recvTimeIsSet() const;
    void unsetRecv_time();

    void setRecvTime(const utility::datetime& value);

    /// <summary>
    /// Number of block in which entity was recorded.
    /// </summary>
    int64_t getBlockNumber() const;
    bool blockNumberIsSet() const;
    void unsetBlock_number();

    void setBlockNumber(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getBlock() const;
    bool blockIsSet() const;
    void unsetBlock_();

    void setBlock(int32_t value);

    /// <summary>
    /// Identifier, format: (transaction hash)-(log index)
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Transaction hash of the transaction that emitted this event.
    /// </summary>
    utility::string_t getHash() const;
    bool hashIsSet() const;
    void unsetHash();

    void setHash(const utility::string_t& value);

    /// <summary>
    /// Nonce of the transaction that emitted this event.
    /// </summary>
    utility::string_t getNonce() const;
    bool nonceIsSet() const;
    void unsetNonce();

    void setNonce(const utility::string_t& value);

    /// <summary>
    /// Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0.
    /// </summary>
    int32_t getLogIndex() const;
    bool logIndexIsSet() const;
    void unsetLog_index();

    void setLogIndex(int32_t value);

    /// <summary>
    /// Gas limit of the transaction that emitted this event.
    /// </summary>
    utility::string_t getGasLimit() const;
    bool gasLimitIsSet() const;
    void unsetGas_limit();

    void setGasLimit(const utility::string_t& value);

    /// <summary>
    /// Gas used in this transaction. (Optional because not every chain will support this).
    /// </summary>
    utility::string_t getGasUsed() const;
    bool gasUsedIsSet() const;
    void unsetGas_used();

    void setGasUsed(const utility::string_t& value);

    /// <summary>
    /// Gas price of the transaction that emitted this event.
    /// </summary>
    utility::string_t getGasPrice() const;
    bool gasPriceIsSet() const;
    void unsetGas_price();

    void setGasPrice(const utility::string_t& value);

    /// <summary>
    /// The protocol this transaction belongs to.
    /// </summary>
    utility::string_t getProtocol() const;
    bool protocolIsSet() const;
    void unsetProtocol();

    void setProtocol(const utility::string_t& value);

    /// <summary>
    /// Account that emitted this event.
    /// </summary>
    utility::string_t getAccount() const;
    bool accountIsSet() const;
    void unsetAccount();

    void setAccount(const utility::string_t& value);

    /// <summary>
    /// The user position changed by this event.
    /// </summary>
    utility::string_t getPosition() const;
    bool positionIsSet() const;
    void unsetPosition();

    void setPosition(const utility::string_t& value);

    /// <summary>
    /// The pool involving this event.
    /// </summary>
    utility::string_t getPool() const;
    bool poolIsSet() const;
    void unsetPool();

    void setPool(const utility::string_t& value);

    /// <summary>
    /// Lower tick of position.
    /// </summary>
    utility::string_t getTickLower() const;
    bool tickLowerIsSet() const;
    void unsetTick_lower();

    void setTickLower(const utility::string_t& value);

    /// <summary>
    /// Upper tick of position.
    /// </summary>
    utility::string_t getTickUpper() const;
    bool tickUpperIsSet() const;
    void unsetTick_upper();

    void setTickUpper(const utility::string_t& value);

    /// <summary>
    /// Timestamp of this event.
    /// </summary>
    utility::string_t getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();

    void setTimestamp(const utility::string_t& value);

    /// <summary>
    /// Amount of liquidity minted.
    /// </summary>
    utility::string_t getLiquidity() const;
    bool liquidityIsSet() const;
    void unsetLiquidity();

    void setLiquidity(const utility::string_t& value);

    /// <summary>
    /// Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool.
    /// </summary>
    std::vector<utility::string_t>& getInputTokens();
    bool inputTokensIsSet() const;
    void unsetInput_tokens();

    void setInputTokens(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Amount of input tokens in the token&#39;s native unit.
    /// </summary>
    std::vector<utility::string_t>& getInputTokenAmounts();
    bool inputTokenAmountsIsSet() const;
    void unsetInput_token_amounts();

    void setInputTokenAmounts(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Amount of input tokens in the liquidity pool.
    /// </summary>
    std::vector<utility::string_t>& getReserveAmounts();
    bool reserveAmountsIsSet() const;
    void unsetReserve_amounts();

    void setReserveAmounts(const std::vector<utility::string_t>& value);

    /// <summary>
    /// USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool).
    /// </summary>
    utility::string_t getAmountUsd() const;
    bool amountUsdIsSet() const;
    void unsetAmount_usd();

    void setAmountUsd(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBlockRange() const;
    bool blockRangeIsSet() const;
    void unsetBlock_range();

    void setBlockRange(const utility::string_t& value);


protected:
    utility::datetime m_Entry_time;
    bool m_Entry_timeIsSet;
    utility::datetime m_Recv_time;
    bool m_Recv_timeIsSet;
    int64_t m_Block_number;
    bool m_Block_numberIsSet;
    int32_t m_Block_;
    bool m_Block_IsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Hash;
    bool m_HashIsSet;
    utility::string_t m_Nonce;
    bool m_NonceIsSet;
    int32_t m_Log_index;
    bool m_Log_indexIsSet;
    utility::string_t m_Gas_limit;
    bool m_Gas_limitIsSet;
    utility::string_t m_Gas_used;
    bool m_Gas_usedIsSet;
    utility::string_t m_Gas_price;
    bool m_Gas_priceIsSet;
    utility::string_t m_Protocol;
    bool m_ProtocolIsSet;
    utility::string_t m_Account;
    bool m_AccountIsSet;
    utility::string_t m_Position;
    bool m_PositionIsSet;
    utility::string_t m_Pool;
    bool m_PoolIsSet;
    utility::string_t m_Tick_lower;
    bool m_Tick_lowerIsSet;
    utility::string_t m_Tick_upper;
    bool m_Tick_upperIsSet;
    utility::string_t m_Timestamp;
    bool m_TimestampIsSet;
    utility::string_t m_Liquidity;
    bool m_LiquidityIsSet;
    std::vector<utility::string_t> m_Input_tokens;
    bool m_Input_tokensIsSet;
    std::vector<utility::string_t> m_Input_token_amounts;
    bool m_Input_token_amountsIsSet;
    std::vector<utility::string_t> m_Reserve_amounts;
    bool m_Reserve_amountsIsSet;
    utility::string_t m_Amount_usd;
    bool m_Amount_usdIsSet;
    utility::string_t m_Block_range;
    bool m_Block_rangeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_UNISWAP_V3_ETHEREUM_DepositDTO_H_ */
