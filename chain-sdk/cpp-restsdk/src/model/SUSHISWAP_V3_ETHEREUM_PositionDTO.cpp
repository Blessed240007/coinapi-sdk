/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SUSHISWAP_V3_ETHEREUM_PositionDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SUSHISWAP_V3_ETHEREUM_PositionDTO::SUSHISWAP_V3_ETHEREUM_PositionDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Account = utility::conversions::to_string_t("");
    m_AccountIsSet = false;
    m_Pool = utility::conversions::to_string_t("");
    m_PoolIsSet = false;
    m_Hash_opened = utility::conversions::to_string_t("");
    m_Hash_openedIsSet = false;
    m_Hash_closed = utility::conversions::to_string_t("");
    m_Hash_closedIsSet = false;
    m_Block_number_opened = utility::conversions::to_string_t("");
    m_Block_number_openedIsSet = false;
    m_Timestamp_opened = utility::conversions::to_string_t("");
    m_Timestamp_openedIsSet = false;
    m_Block_number_closed = utility::conversions::to_string_t("");
    m_Block_number_closedIsSet = false;
    m_Timestamp_closed = utility::conversions::to_string_t("");
    m_Timestamp_closedIsSet = false;
    m_Tick_lower = utility::conversions::to_string_t("");
    m_Tick_lowerIsSet = false;
    m_Tick_upper = utility::conversions::to_string_t("");
    m_Tick_upperIsSet = false;
    m_Liquidity_token = utility::conversions::to_string_t("");
    m_Liquidity_tokenIsSet = false;
    m_Liquidity_token_type = utility::conversions::to_string_t("");
    m_Liquidity_token_typeIsSet = false;
    m_Liquidity = utility::conversions::to_string_t("");
    m_LiquidityIsSet = false;
    m_Liquidity_usd = utility::conversions::to_string_t("");
    m_Liquidity_usdIsSet = false;
    m_Cumulative_deposit_token_amountsIsSet = false;
    m_Cumulative_deposit_usd = utility::conversions::to_string_t("");
    m_Cumulative_deposit_usdIsSet = false;
    m_Cumulative_withdraw_token_amountsIsSet = false;
    m_Cumulative_withdraw_usd = utility::conversions::to_string_t("");
    m_Cumulative_withdraw_usdIsSet = false;
    m_Cumulative_reward_usdIsSet = false;
    m_Deposit_count = 0;
    m_Deposit_countIsSet = false;
    m_Withdraw_count = 0;
    m_Withdraw_countIsSet = false;
}

SUSHISWAP_V3_ETHEREUM_PositionDTO::~SUSHISWAP_V3_ETHEREUM_PositionDTO()
{
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::validate()
{
    // TODO: implement validation
}

web::json::value SUSHISWAP_V3_ETHEREUM_PositionDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_AccountIsSet)
    {
        val[utility::conversions::to_string_t(U("account"))] = ModelBase::toJson(m_Account);
    }
    if(m_PoolIsSet)
    {
        val[utility::conversions::to_string_t(U("pool"))] = ModelBase::toJson(m_Pool);
    }
    if(m_Hash_openedIsSet)
    {
        val[utility::conversions::to_string_t(U("hash_opened"))] = ModelBase::toJson(m_Hash_opened);
    }
    if(m_Hash_closedIsSet)
    {
        val[utility::conversions::to_string_t(U("hash_closed"))] = ModelBase::toJson(m_Hash_closed);
    }
    if(m_Block_number_openedIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number_opened"))] = ModelBase::toJson(m_Block_number_opened);
    }
    if(m_Timestamp_openedIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp_opened"))] = ModelBase::toJson(m_Timestamp_opened);
    }
    if(m_Block_number_closedIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number_closed"))] = ModelBase::toJson(m_Block_number_closed);
    }
    if(m_Timestamp_closedIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp_closed"))] = ModelBase::toJson(m_Timestamp_closed);
    }
    if(m_Tick_lowerIsSet)
    {
        val[utility::conversions::to_string_t(U("tick_lower"))] = ModelBase::toJson(m_Tick_lower);
    }
    if(m_Tick_upperIsSet)
    {
        val[utility::conversions::to_string_t(U("tick_upper"))] = ModelBase::toJson(m_Tick_upper);
    }
    if(m_Liquidity_tokenIsSet)
    {
        val[utility::conversions::to_string_t(U("liquidity_token"))] = ModelBase::toJson(m_Liquidity_token);
    }
    if(m_Liquidity_token_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("liquidity_token_type"))] = ModelBase::toJson(m_Liquidity_token_type);
    }
    if(m_LiquidityIsSet)
    {
        val[utility::conversions::to_string_t(U("liquidity"))] = ModelBase::toJson(m_Liquidity);
    }
    if(m_Liquidity_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("liquidity_usd"))] = ModelBase::toJson(m_Liquidity_usd);
    }
    if(m_Cumulative_deposit_token_amountsIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_deposit_token_amounts"))] = ModelBase::toJson(m_Cumulative_deposit_token_amounts);
    }
    if(m_Cumulative_deposit_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_deposit_usd"))] = ModelBase::toJson(m_Cumulative_deposit_usd);
    }
    if(m_Cumulative_withdraw_token_amountsIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_withdraw_token_amounts"))] = ModelBase::toJson(m_Cumulative_withdraw_token_amounts);
    }
    if(m_Cumulative_withdraw_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_withdraw_usd"))] = ModelBase::toJson(m_Cumulative_withdraw_usd);
    }
    if(m_Cumulative_reward_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_reward_usd"))] = ModelBase::toJson(m_Cumulative_reward_usd);
    }
    if(m_Deposit_countIsSet)
    {
        val[utility::conversions::to_string_t(U("deposit_count"))] = ModelBase::toJson(m_Deposit_count);
    }
    if(m_Withdraw_countIsSet)
    {
        val[utility::conversions::to_string_t(U("withdraw_count"))] = ModelBase::toJson(m_Withdraw_count);
    }

    return val;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("account"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("account")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccount);
            setAccount(refVal_setAccount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pool"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pool")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPool;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPool);
            setPool(refVal_setPool);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hash_opened"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hash_opened")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHashOpened;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHashOpened);
            setHashOpened(refVal_setHashOpened);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hash_closed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hash_closed")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHashClosed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHashClosed);
            setHashClosed(refVal_setHashClosed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number_opened"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number_opened")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBlockNumberOpened;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumberOpened);
            setBlockNumberOpened(refVal_setBlockNumberOpened);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp_opened"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp_opened")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTimestampOpened;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestampOpened);
            setTimestampOpened(refVal_setTimestampOpened);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number_closed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number_closed")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBlockNumberClosed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumberClosed);
            setBlockNumberClosed(refVal_setBlockNumberClosed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp_closed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp_closed")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTimestampClosed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestampClosed);
            setTimestampClosed(refVal_setTimestampClosed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tick_lower"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tick_lower")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTickLower;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTickLower);
            setTickLower(refVal_setTickLower);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tick_upper"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tick_upper")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTickUpper;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTickUpper);
            setTickUpper(refVal_setTickUpper);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("liquidity_token"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("liquidity_token")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLiquidityToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLiquidityToken);
            setLiquidityToken(refVal_setLiquidityToken);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("liquidity_token_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("liquidity_token_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLiquidityTokenType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLiquidityTokenType);
            setLiquidityTokenType(refVal_setLiquidityTokenType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("liquidity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("liquidity")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLiquidity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLiquidity);
            setLiquidity(refVal_setLiquidity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("liquidity_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("liquidity_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLiquidityUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLiquidityUsd);
            setLiquidityUsd(refVal_setLiquidityUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_deposit_token_amounts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_deposit_token_amounts")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCumulativeDepositTokenAmounts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeDepositTokenAmounts);
            setCumulativeDepositTokenAmounts(refVal_setCumulativeDepositTokenAmounts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_deposit_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_deposit_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCumulativeDepositUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeDepositUsd);
            setCumulativeDepositUsd(refVal_setCumulativeDepositUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_withdraw_token_amounts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_withdraw_token_amounts")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCumulativeWithdrawTokenAmounts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeWithdrawTokenAmounts);
            setCumulativeWithdrawTokenAmounts(refVal_setCumulativeWithdrawTokenAmounts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_withdraw_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_withdraw_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCumulativeWithdrawUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeWithdrawUsd);
            setCumulativeWithdrawUsd(refVal_setCumulativeWithdrawUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_reward_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_reward_usd")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCumulativeRewardUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeRewardUsd);
            setCumulativeRewardUsd(refVal_setCumulativeRewardUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deposit_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deposit_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDepositCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDepositCount);
            setDepositCount(refVal_setDepositCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("withdraw_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("withdraw_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setWithdrawCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWithdrawCount);
            setWithdrawCount(refVal_setWithdrawCount);
        }
    }
    return ok;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_AccountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("account")), m_Account));
    }
    if(m_PoolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pool")), m_Pool));
    }
    if(m_Hash_openedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hash_opened")), m_Hash_opened));
    }
    if(m_Hash_closedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hash_closed")), m_Hash_closed));
    }
    if(m_Block_number_openedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number_opened")), m_Block_number_opened));
    }
    if(m_Timestamp_openedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp_opened")), m_Timestamp_opened));
    }
    if(m_Block_number_closedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number_closed")), m_Block_number_closed));
    }
    if(m_Timestamp_closedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp_closed")), m_Timestamp_closed));
    }
    if(m_Tick_lowerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tick_lower")), m_Tick_lower));
    }
    if(m_Tick_upperIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tick_upper")), m_Tick_upper));
    }
    if(m_Liquidity_tokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("liquidity_token")), m_Liquidity_token));
    }
    if(m_Liquidity_token_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("liquidity_token_type")), m_Liquidity_token_type));
    }
    if(m_LiquidityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("liquidity")), m_Liquidity));
    }
    if(m_Liquidity_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("liquidity_usd")), m_Liquidity_usd));
    }
    if(m_Cumulative_deposit_token_amountsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_deposit_token_amounts")), m_Cumulative_deposit_token_amounts));
    }
    if(m_Cumulative_deposit_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_deposit_usd")), m_Cumulative_deposit_usd));
    }
    if(m_Cumulative_withdraw_token_amountsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_withdraw_token_amounts")), m_Cumulative_withdraw_token_amounts));
    }
    if(m_Cumulative_withdraw_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_withdraw_usd")), m_Cumulative_withdraw_usd));
    }
    if(m_Cumulative_reward_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_reward_usd")), m_Cumulative_reward_usd));
    }
    if(m_Deposit_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deposit_count")), m_Deposit_count));
    }
    if(m_Withdraw_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("withdraw_count")), m_Withdraw_count));
    }
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("account"))))
    {
        utility::string_t refVal_setAccount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("account"))), refVal_setAccount );
        setAccount(refVal_setAccount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pool"))))
    {
        utility::string_t refVal_setPool;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pool"))), refVal_setPool );
        setPool(refVal_setPool);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hash_opened"))))
    {
        utility::string_t refVal_setHashOpened;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hash_opened"))), refVal_setHashOpened );
        setHashOpened(refVal_setHashOpened);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hash_closed"))))
    {
        utility::string_t refVal_setHashClosed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hash_closed"))), refVal_setHashClosed );
        setHashClosed(refVal_setHashClosed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number_opened"))))
    {
        utility::string_t refVal_setBlockNumberOpened;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number_opened"))), refVal_setBlockNumberOpened );
        setBlockNumberOpened(refVal_setBlockNumberOpened);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp_opened"))))
    {
        utility::string_t refVal_setTimestampOpened;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp_opened"))), refVal_setTimestampOpened );
        setTimestampOpened(refVal_setTimestampOpened);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number_closed"))))
    {
        utility::string_t refVal_setBlockNumberClosed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number_closed"))), refVal_setBlockNumberClosed );
        setBlockNumberClosed(refVal_setBlockNumberClosed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp_closed"))))
    {
        utility::string_t refVal_setTimestampClosed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp_closed"))), refVal_setTimestampClosed );
        setTimestampClosed(refVal_setTimestampClosed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tick_lower"))))
    {
        utility::string_t refVal_setTickLower;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tick_lower"))), refVal_setTickLower );
        setTickLower(refVal_setTickLower);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tick_upper"))))
    {
        utility::string_t refVal_setTickUpper;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tick_upper"))), refVal_setTickUpper );
        setTickUpper(refVal_setTickUpper);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("liquidity_token"))))
    {
        utility::string_t refVal_setLiquidityToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("liquidity_token"))), refVal_setLiquidityToken );
        setLiquidityToken(refVal_setLiquidityToken);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("liquidity_token_type"))))
    {
        utility::string_t refVal_setLiquidityTokenType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("liquidity_token_type"))), refVal_setLiquidityTokenType );
        setLiquidityTokenType(refVal_setLiquidityTokenType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("liquidity"))))
    {
        utility::string_t refVal_setLiquidity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("liquidity"))), refVal_setLiquidity );
        setLiquidity(refVal_setLiquidity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("liquidity_usd"))))
    {
        utility::string_t refVal_setLiquidityUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("liquidity_usd"))), refVal_setLiquidityUsd );
        setLiquidityUsd(refVal_setLiquidityUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_deposit_token_amounts"))))
    {
        std::vector<utility::string_t> refVal_setCumulativeDepositTokenAmounts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_deposit_token_amounts"))), refVal_setCumulativeDepositTokenAmounts );
        setCumulativeDepositTokenAmounts(refVal_setCumulativeDepositTokenAmounts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_deposit_usd"))))
    {
        utility::string_t refVal_setCumulativeDepositUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_deposit_usd"))), refVal_setCumulativeDepositUsd );
        setCumulativeDepositUsd(refVal_setCumulativeDepositUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_withdraw_token_amounts"))))
    {
        std::vector<utility::string_t> refVal_setCumulativeWithdrawTokenAmounts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_withdraw_token_amounts"))), refVal_setCumulativeWithdrawTokenAmounts );
        setCumulativeWithdrawTokenAmounts(refVal_setCumulativeWithdrawTokenAmounts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_withdraw_usd"))))
    {
        utility::string_t refVal_setCumulativeWithdrawUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_withdraw_usd"))), refVal_setCumulativeWithdrawUsd );
        setCumulativeWithdrawUsd(refVal_setCumulativeWithdrawUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_reward_usd"))))
    {
        std::vector<utility::string_t> refVal_setCumulativeRewardUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_reward_usd"))), refVal_setCumulativeRewardUsd );
        setCumulativeRewardUsd(refVal_setCumulativeRewardUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deposit_count"))))
    {
        int32_t refVal_setDepositCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deposit_count"))), refVal_setDepositCount );
        setDepositCount(refVal_setDepositCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("withdraw_count"))))
    {
        int32_t refVal_setWithdrawCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("withdraw_count"))), refVal_setWithdrawCount );
        setWithdrawCount(refVal_setWithdrawCount);
    }
    return ok;
}

utility::datetime SUSHISWAP_V3_ETHEREUM_PositionDTO::getEntryTime() const
{
    return m_Entry_time;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime SUSHISWAP_V3_ETHEREUM_PositionDTO::getRecvTime() const
{
    return m_Recv_time;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t SUSHISWAP_V3_ETHEREUM_PositionDTO::getBlockNumber() const
{
    return m_Block_number;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_PositionDTO::getId() const
{
    return m_Id;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::idIsSet() const
{
    return m_IdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_PositionDTO::getAccount() const
{
    return m_Account;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setAccount(const utility::string_t& value)
{
    m_Account = value;
    m_AccountIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::accountIsSet() const
{
    return m_AccountIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetAccount()
{
    m_AccountIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_PositionDTO::getPool() const
{
    return m_Pool;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setPool(const utility::string_t& value)
{
    m_Pool = value;
    m_PoolIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::poolIsSet() const
{
    return m_PoolIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetPool()
{
    m_PoolIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_PositionDTO::getHashOpened() const
{
    return m_Hash_opened;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setHashOpened(const utility::string_t& value)
{
    m_Hash_opened = value;
    m_Hash_openedIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::hashOpenedIsSet() const
{
    return m_Hash_openedIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetHash_opened()
{
    m_Hash_openedIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_PositionDTO::getHashClosed() const
{
    return m_Hash_closed;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setHashClosed(const utility::string_t& value)
{
    m_Hash_closed = value;
    m_Hash_closedIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::hashClosedIsSet() const
{
    return m_Hash_closedIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetHash_closed()
{
    m_Hash_closedIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_PositionDTO::getBlockNumberOpened() const
{
    return m_Block_number_opened;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setBlockNumberOpened(const utility::string_t& value)
{
    m_Block_number_opened = value;
    m_Block_number_openedIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::blockNumberOpenedIsSet() const
{
    return m_Block_number_openedIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetBlock_number_opened()
{
    m_Block_number_openedIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_PositionDTO::getTimestampOpened() const
{
    return m_Timestamp_opened;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setTimestampOpened(const utility::string_t& value)
{
    m_Timestamp_opened = value;
    m_Timestamp_openedIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::timestampOpenedIsSet() const
{
    return m_Timestamp_openedIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetTimestamp_opened()
{
    m_Timestamp_openedIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_PositionDTO::getBlockNumberClosed() const
{
    return m_Block_number_closed;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setBlockNumberClosed(const utility::string_t& value)
{
    m_Block_number_closed = value;
    m_Block_number_closedIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::blockNumberClosedIsSet() const
{
    return m_Block_number_closedIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetBlock_number_closed()
{
    m_Block_number_closedIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_PositionDTO::getTimestampClosed() const
{
    return m_Timestamp_closed;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setTimestampClosed(const utility::string_t& value)
{
    m_Timestamp_closed = value;
    m_Timestamp_closedIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::timestampClosedIsSet() const
{
    return m_Timestamp_closedIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetTimestamp_closed()
{
    m_Timestamp_closedIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_PositionDTO::getTickLower() const
{
    return m_Tick_lower;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setTickLower(const utility::string_t& value)
{
    m_Tick_lower = value;
    m_Tick_lowerIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::tickLowerIsSet() const
{
    return m_Tick_lowerIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetTick_lower()
{
    m_Tick_lowerIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_PositionDTO::getTickUpper() const
{
    return m_Tick_upper;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setTickUpper(const utility::string_t& value)
{
    m_Tick_upper = value;
    m_Tick_upperIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::tickUpperIsSet() const
{
    return m_Tick_upperIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetTick_upper()
{
    m_Tick_upperIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_PositionDTO::getLiquidityToken() const
{
    return m_Liquidity_token;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setLiquidityToken(const utility::string_t& value)
{
    m_Liquidity_token = value;
    m_Liquidity_tokenIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::liquidityTokenIsSet() const
{
    return m_Liquidity_tokenIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetLiquidity_token()
{
    m_Liquidity_tokenIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_PositionDTO::getLiquidityTokenType() const
{
    return m_Liquidity_token_type;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setLiquidityTokenType(const utility::string_t& value)
{
    m_Liquidity_token_type = value;
    m_Liquidity_token_typeIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::liquidityTokenTypeIsSet() const
{
    return m_Liquidity_token_typeIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetLiquidity_token_type()
{
    m_Liquidity_token_typeIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_PositionDTO::getLiquidity() const
{
    return m_Liquidity;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setLiquidity(const utility::string_t& value)
{
    m_Liquidity = value;
    m_LiquidityIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::liquidityIsSet() const
{
    return m_LiquidityIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetLiquidity()
{
    m_LiquidityIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_PositionDTO::getLiquidityUsd() const
{
    return m_Liquidity_usd;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setLiquidityUsd(const utility::string_t& value)
{
    m_Liquidity_usd = value;
    m_Liquidity_usdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::liquidityUsdIsSet() const
{
    return m_Liquidity_usdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetLiquidity_usd()
{
    m_Liquidity_usdIsSet = false;
}
std::vector<utility::string_t>& SUSHISWAP_V3_ETHEREUM_PositionDTO::getCumulativeDepositTokenAmounts()
{
    return m_Cumulative_deposit_token_amounts;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setCumulativeDepositTokenAmounts(const std::vector<utility::string_t>& value)
{
    m_Cumulative_deposit_token_amounts = value;
    m_Cumulative_deposit_token_amountsIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::cumulativeDepositTokenAmountsIsSet() const
{
    return m_Cumulative_deposit_token_amountsIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetCumulative_deposit_token_amounts()
{
    m_Cumulative_deposit_token_amountsIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_PositionDTO::getCumulativeDepositUsd() const
{
    return m_Cumulative_deposit_usd;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setCumulativeDepositUsd(const utility::string_t& value)
{
    m_Cumulative_deposit_usd = value;
    m_Cumulative_deposit_usdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::cumulativeDepositUsdIsSet() const
{
    return m_Cumulative_deposit_usdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetCumulative_deposit_usd()
{
    m_Cumulative_deposit_usdIsSet = false;
}
std::vector<utility::string_t>& SUSHISWAP_V3_ETHEREUM_PositionDTO::getCumulativeWithdrawTokenAmounts()
{
    return m_Cumulative_withdraw_token_amounts;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setCumulativeWithdrawTokenAmounts(const std::vector<utility::string_t>& value)
{
    m_Cumulative_withdraw_token_amounts = value;
    m_Cumulative_withdraw_token_amountsIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::cumulativeWithdrawTokenAmountsIsSet() const
{
    return m_Cumulative_withdraw_token_amountsIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetCumulative_withdraw_token_amounts()
{
    m_Cumulative_withdraw_token_amountsIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_PositionDTO::getCumulativeWithdrawUsd() const
{
    return m_Cumulative_withdraw_usd;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setCumulativeWithdrawUsd(const utility::string_t& value)
{
    m_Cumulative_withdraw_usd = value;
    m_Cumulative_withdraw_usdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::cumulativeWithdrawUsdIsSet() const
{
    return m_Cumulative_withdraw_usdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetCumulative_withdraw_usd()
{
    m_Cumulative_withdraw_usdIsSet = false;
}
std::vector<utility::string_t>& SUSHISWAP_V3_ETHEREUM_PositionDTO::getCumulativeRewardUsd()
{
    return m_Cumulative_reward_usd;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setCumulativeRewardUsd(const std::vector<utility::string_t>& value)
{
    m_Cumulative_reward_usd = value;
    m_Cumulative_reward_usdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::cumulativeRewardUsdIsSet() const
{
    return m_Cumulative_reward_usdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetCumulative_reward_usd()
{
    m_Cumulative_reward_usdIsSet = false;
}
int32_t SUSHISWAP_V3_ETHEREUM_PositionDTO::getDepositCount() const
{
    return m_Deposit_count;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setDepositCount(int32_t value)
{
    m_Deposit_count = value;
    m_Deposit_countIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::depositCountIsSet() const
{
    return m_Deposit_countIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetDeposit_count()
{
    m_Deposit_countIsSet = false;
}
int32_t SUSHISWAP_V3_ETHEREUM_PositionDTO::getWithdrawCount() const
{
    return m_Withdraw_count;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::setWithdrawCount(int32_t value)
{
    m_Withdraw_count = value;
    m_Withdraw_countIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_PositionDTO::withdrawCountIsSet() const
{
    return m_Withdraw_countIsSet;
}

void SUSHISWAP_V3_ETHEREUM_PositionDTO::unsetWithdraw_count()
{
    m_Withdraw_countIsSet = false;
}
}
}
}
}


