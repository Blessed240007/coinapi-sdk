/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UNISWAP_V2_ETHEREUM_MasterChefDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UNISWAP_V2_ETHEREUM_MasterChefDTO::UNISWAP_V2_ETHEREUM_MasterChefDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Block_range = utility::conversions::to_string_t("");
    m_Block_rangeIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Address = utility::conversions::to_string_t("");
    m_AddressIsSet = false;
    m_Total_alloc_point = utility::conversions::to_string_t("");
    m_Total_alloc_pointIsSet = false;
    m_Reward_token_rate = utility::conversions::to_string_t("");
    m_Reward_token_rateIsSet = false;
    m_Reward_token_interval = utility::conversions::to_string_t("");
    m_Reward_token_intervalIsSet = false;
    m_Adjusted_reward_token_rate = utility::conversions::to_string_t("");
    m_Adjusted_reward_token_rateIsSet = false;
    m_Last_updated_reward_rate = utility::conversions::to_string_t("");
    m_Last_updated_reward_rateIsSet = false;
}

UNISWAP_V2_ETHEREUM_MasterChefDTO::~UNISWAP_V2_ETHEREUM_MasterChefDTO()
{
}

void UNISWAP_V2_ETHEREUM_MasterChefDTO::validate()
{
    // TODO: implement validation
}

web::json::value UNISWAP_V2_ETHEREUM_MasterChefDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_Block_rangeIsSet)
    {
        val[utility::conversions::to_string_t(U("block_range"))] = ModelBase::toJson(m_Block_range);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_AddressIsSet)
    {
        val[utility::conversions::to_string_t(U("address"))] = ModelBase::toJson(m_Address);
    }
    if(m_Total_alloc_pointIsSet)
    {
        val[utility::conversions::to_string_t(U("total_alloc_point"))] = ModelBase::toJson(m_Total_alloc_point);
    }
    if(m_Reward_token_rateIsSet)
    {
        val[utility::conversions::to_string_t(U("reward_token_rate"))] = ModelBase::toJson(m_Reward_token_rate);
    }
    if(m_Reward_token_intervalIsSet)
    {
        val[utility::conversions::to_string_t(U("reward_token_interval"))] = ModelBase::toJson(m_Reward_token_interval);
    }
    if(m_Adjusted_reward_token_rateIsSet)
    {
        val[utility::conversions::to_string_t(U("adjusted_reward_token_rate"))] = ModelBase::toJson(m_Adjusted_reward_token_rate);
    }
    if(m_Last_updated_reward_rateIsSet)
    {
        val[utility::conversions::to_string_t(U("last_updated_reward_rate"))] = ModelBase::toJson(m_Last_updated_reward_rate);
    }

    return val;
}

bool UNISWAP_V2_ETHEREUM_MasterChefDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_range"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_range")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBlockRange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockRange);
            setBlockRange(refVal_setBlockRange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("address")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddress);
            setAddress(refVal_setAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_alloc_point"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_alloc_point")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalAllocPoint;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalAllocPoint);
            setTotalAllocPoint(refVal_setTotalAllocPoint);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reward_token_rate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reward_token_rate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRewardTokenRate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRewardTokenRate);
            setRewardTokenRate(refVal_setRewardTokenRate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reward_token_interval"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reward_token_interval")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRewardTokenInterval;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRewardTokenInterval);
            setRewardTokenInterval(refVal_setRewardTokenInterval);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("adjusted_reward_token_rate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("adjusted_reward_token_rate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdjustedRewardTokenRate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdjustedRewardTokenRate);
            setAdjustedRewardTokenRate(refVal_setAdjustedRewardTokenRate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_updated_reward_rate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_updated_reward_rate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLastUpdatedRewardRate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastUpdatedRewardRate);
            setLastUpdatedRewardRate(refVal_setLastUpdatedRewardRate);
        }
    }
    return ok;
}

void UNISWAP_V2_ETHEREUM_MasterChefDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_Block_rangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_range")), m_Block_range));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_AddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("address")), m_Address));
    }
    if(m_Total_alloc_pointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_alloc_point")), m_Total_alloc_point));
    }
    if(m_Reward_token_rateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reward_token_rate")), m_Reward_token_rate));
    }
    if(m_Reward_token_intervalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reward_token_interval")), m_Reward_token_interval));
    }
    if(m_Adjusted_reward_token_rateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adjusted_reward_token_rate")), m_Adjusted_reward_token_rate));
    }
    if(m_Last_updated_reward_rateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_updated_reward_rate")), m_Last_updated_reward_rate));
    }
}

bool UNISWAP_V2_ETHEREUM_MasterChefDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_range"))))
    {
        utility::string_t refVal_setBlockRange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_range"))), refVal_setBlockRange );
        setBlockRange(refVal_setBlockRange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("address"))))
    {
        utility::string_t refVal_setAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("address"))), refVal_setAddress );
        setAddress(refVal_setAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_alloc_point"))))
    {
        utility::string_t refVal_setTotalAllocPoint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_alloc_point"))), refVal_setTotalAllocPoint );
        setTotalAllocPoint(refVal_setTotalAllocPoint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reward_token_rate"))))
    {
        utility::string_t refVal_setRewardTokenRate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reward_token_rate"))), refVal_setRewardTokenRate );
        setRewardTokenRate(refVal_setRewardTokenRate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reward_token_interval"))))
    {
        utility::string_t refVal_setRewardTokenInterval;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reward_token_interval"))), refVal_setRewardTokenInterval );
        setRewardTokenInterval(refVal_setRewardTokenInterval);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adjusted_reward_token_rate"))))
    {
        utility::string_t refVal_setAdjustedRewardTokenRate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adjusted_reward_token_rate"))), refVal_setAdjustedRewardTokenRate );
        setAdjustedRewardTokenRate(refVal_setAdjustedRewardTokenRate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_updated_reward_rate"))))
    {
        utility::string_t refVal_setLastUpdatedRewardRate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_updated_reward_rate"))), refVal_setLastUpdatedRewardRate );
        setLastUpdatedRewardRate(refVal_setLastUpdatedRewardRate);
    }
    return ok;
}

utility::datetime UNISWAP_V2_ETHEREUM_MasterChefDTO::getEntryTime() const
{
    return m_Entry_time;
}

void UNISWAP_V2_ETHEREUM_MasterChefDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime UNISWAP_V2_ETHEREUM_MasterChefDTO::getRecvTime() const
{
    return m_Recv_time;
}

void UNISWAP_V2_ETHEREUM_MasterChefDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t UNISWAP_V2_ETHEREUM_MasterChefDTO::getBlockNumber() const
{
    return m_Block_number;
}

void UNISWAP_V2_ETHEREUM_MasterChefDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_MasterChefDTO::getBlockRange() const
{
    return m_Block_range;
}

void UNISWAP_V2_ETHEREUM_MasterChefDTO::setBlockRange(const utility::string_t& value)
{
    m_Block_range = value;
    m_Block_rangeIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefDTO::blockRangeIsSet() const
{
    return m_Block_rangeIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefDTO::unsetBlock_range()
{
    m_Block_rangeIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_MasterChefDTO::getId() const
{
    return m_Id;
}

void UNISWAP_V2_ETHEREUM_MasterChefDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefDTO::idIsSet() const
{
    return m_IdIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_MasterChefDTO::getAddress() const
{
    return m_Address;
}

void UNISWAP_V2_ETHEREUM_MasterChefDTO::setAddress(const utility::string_t& value)
{
    m_Address = value;
    m_AddressIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefDTO::addressIsSet() const
{
    return m_AddressIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefDTO::unsetAddress()
{
    m_AddressIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_MasterChefDTO::getTotalAllocPoint() const
{
    return m_Total_alloc_point;
}

void UNISWAP_V2_ETHEREUM_MasterChefDTO::setTotalAllocPoint(const utility::string_t& value)
{
    m_Total_alloc_point = value;
    m_Total_alloc_pointIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefDTO::totalAllocPointIsSet() const
{
    return m_Total_alloc_pointIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefDTO::unsetTotal_alloc_point()
{
    m_Total_alloc_pointIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_MasterChefDTO::getRewardTokenRate() const
{
    return m_Reward_token_rate;
}

void UNISWAP_V2_ETHEREUM_MasterChefDTO::setRewardTokenRate(const utility::string_t& value)
{
    m_Reward_token_rate = value;
    m_Reward_token_rateIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefDTO::rewardTokenRateIsSet() const
{
    return m_Reward_token_rateIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefDTO::unsetReward_token_rate()
{
    m_Reward_token_rateIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_MasterChefDTO::getRewardTokenInterval() const
{
    return m_Reward_token_interval;
}

void UNISWAP_V2_ETHEREUM_MasterChefDTO::setRewardTokenInterval(const utility::string_t& value)
{
    m_Reward_token_interval = value;
    m_Reward_token_intervalIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefDTO::rewardTokenIntervalIsSet() const
{
    return m_Reward_token_intervalIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefDTO::unsetReward_token_interval()
{
    m_Reward_token_intervalIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_MasterChefDTO::getAdjustedRewardTokenRate() const
{
    return m_Adjusted_reward_token_rate;
}

void UNISWAP_V2_ETHEREUM_MasterChefDTO::setAdjustedRewardTokenRate(const utility::string_t& value)
{
    m_Adjusted_reward_token_rate = value;
    m_Adjusted_reward_token_rateIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefDTO::adjustedRewardTokenRateIsSet() const
{
    return m_Adjusted_reward_token_rateIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefDTO::unsetAdjusted_reward_token_rate()
{
    m_Adjusted_reward_token_rateIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_MasterChefDTO::getLastUpdatedRewardRate() const
{
    return m_Last_updated_reward_rate;
}

void UNISWAP_V2_ETHEREUM_MasterChefDTO::setLastUpdatedRewardRate(const utility::string_t& value)
{
    m_Last_updated_reward_rate = value;
    m_Last_updated_reward_rateIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefDTO::lastUpdatedRewardRateIsSet() const
{
    return m_Last_updated_reward_rateIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefDTO::unsetLast_updated_reward_rate()
{
    m_Last_updated_reward_rateIsSet = false;
}
}
}
}
}


