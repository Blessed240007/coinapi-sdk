/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Hash = utility::conversions::to_string_t("");
    m_HashIsSet = false;
    m_Log_index = 0;
    m_Log_indexIsSet = false;
    m_Nonce = utility::conversions::to_string_t("");
    m_NonceIsSet = false;
    m_Position = utility::conversions::to_string_t("");
    m_PositionIsSet = false;
    m_Liquidity_token_type = utility::conversions::to_string_t("");
    m_Liquidity_token_typeIsSet = false;
    m_Liquidity = utility::conversions::to_string_t("");
    m_LiquidityIsSet = false;
    m_Liquidity_usd = utility::conversions::to_string_t("");
    m_Liquidity_usdIsSet = false;
    m_Cumulative_deposit_token_amountsIsSet = false;
    m_Cumulative_deposit_usd = utility::conversions::to_string_t("");
    m_Cumulative_deposit_usdIsSet = false;
    m_Cumulative_withdraw_token_amountsIsSet = false;
    m_Cumulative_withdraw_usd = utility::conversions::to_string_t("");
    m_Cumulative_withdraw_usdIsSet = false;
    m_Cumulative_reward_token_amountsIsSet = false;
    m_Cumulative_reward_usdIsSet = false;
    m_Deposit_count = 0;
    m_Deposit_countIsSet = false;
    m_Withdraw_count = 0;
    m_Withdraw_countIsSet = false;
    m_Timestamp = utility::conversions::to_string_t("");
    m_TimestampIsSet = false;
}

PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::~PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO()
{
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::validate()
{
    // TODO: implement validation
}

web::json::value PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_HashIsSet)
    {
        val[utility::conversions::to_string_t(U("hash"))] = ModelBase::toJson(m_Hash);
    }
    if(m_Log_indexIsSet)
    {
        val[utility::conversions::to_string_t(U("log_index"))] = ModelBase::toJson(m_Log_index);
    }
    if(m_NonceIsSet)
    {
        val[utility::conversions::to_string_t(U("nonce"))] = ModelBase::toJson(m_Nonce);
    }
    if(m_PositionIsSet)
    {
        val[utility::conversions::to_string_t(U("position"))] = ModelBase::toJson(m_Position);
    }
    if(m_Liquidity_token_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("liquidity_token_type"))] = ModelBase::toJson(m_Liquidity_token_type);
    }
    if(m_LiquidityIsSet)
    {
        val[utility::conversions::to_string_t(U("liquidity"))] = ModelBase::toJson(m_Liquidity);
    }
    if(m_Liquidity_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("liquidity_usd"))] = ModelBase::toJson(m_Liquidity_usd);
    }
    if(m_Cumulative_deposit_token_amountsIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_deposit_token_amounts"))] = ModelBase::toJson(m_Cumulative_deposit_token_amounts);
    }
    if(m_Cumulative_deposit_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_deposit_usd"))] = ModelBase::toJson(m_Cumulative_deposit_usd);
    }
    if(m_Cumulative_withdraw_token_amountsIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_withdraw_token_amounts"))] = ModelBase::toJson(m_Cumulative_withdraw_token_amounts);
    }
    if(m_Cumulative_withdraw_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_withdraw_usd"))] = ModelBase::toJson(m_Cumulative_withdraw_usd);
    }
    if(m_Cumulative_reward_token_amountsIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_reward_token_amounts"))] = ModelBase::toJson(m_Cumulative_reward_token_amounts);
    }
    if(m_Cumulative_reward_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_reward_usd"))] = ModelBase::toJson(m_Cumulative_reward_usd);
    }
    if(m_Deposit_countIsSet)
    {
        val[utility::conversions::to_string_t(U("deposit_count"))] = ModelBase::toJson(m_Deposit_count);
    }
    if(m_Withdraw_countIsSet)
    {
        val[utility::conversions::to_string_t(U("withdraw_count"))] = ModelBase::toJson(m_Withdraw_count);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }

    return val;
}

bool PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hash"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hash")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHash;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHash);
            setHash(refVal_setHash);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("log_index"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("log_index")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLogIndex;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLogIndex);
            setLogIndex(refVal_setLogIndex);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nonce"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nonce")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNonce;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNonce);
            setNonce(refVal_setNonce);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("position"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("position")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPosition;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPosition);
            setPosition(refVal_setPosition);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("liquidity_token_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("liquidity_token_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLiquidityTokenType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLiquidityTokenType);
            setLiquidityTokenType(refVal_setLiquidityTokenType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("liquidity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("liquidity")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLiquidity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLiquidity);
            setLiquidity(refVal_setLiquidity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("liquidity_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("liquidity_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLiquidityUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLiquidityUsd);
            setLiquidityUsd(refVal_setLiquidityUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_deposit_token_amounts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_deposit_token_amounts")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCumulativeDepositTokenAmounts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeDepositTokenAmounts);
            setCumulativeDepositTokenAmounts(refVal_setCumulativeDepositTokenAmounts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_deposit_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_deposit_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCumulativeDepositUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeDepositUsd);
            setCumulativeDepositUsd(refVal_setCumulativeDepositUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_withdraw_token_amounts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_withdraw_token_amounts")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCumulativeWithdrawTokenAmounts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeWithdrawTokenAmounts);
            setCumulativeWithdrawTokenAmounts(refVal_setCumulativeWithdrawTokenAmounts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_withdraw_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_withdraw_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCumulativeWithdrawUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeWithdrawUsd);
            setCumulativeWithdrawUsd(refVal_setCumulativeWithdrawUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_reward_token_amounts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_reward_token_amounts")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCumulativeRewardTokenAmounts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeRewardTokenAmounts);
            setCumulativeRewardTokenAmounts(refVal_setCumulativeRewardTokenAmounts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_reward_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_reward_usd")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCumulativeRewardUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeRewardUsd);
            setCumulativeRewardUsd(refVal_setCumulativeRewardUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deposit_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deposit_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDepositCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDepositCount);
            setDepositCount(refVal_setDepositCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("withdraw_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("withdraw_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setWithdrawCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWithdrawCount);
            setWithdrawCount(refVal_setWithdrawCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
        }
    }
    return ok;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_HashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hash")), m_Hash));
    }
    if(m_Log_indexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("log_index")), m_Log_index));
    }
    if(m_NonceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nonce")), m_Nonce));
    }
    if(m_PositionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("position")), m_Position));
    }
    if(m_Liquidity_token_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("liquidity_token_type")), m_Liquidity_token_type));
    }
    if(m_LiquidityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("liquidity")), m_Liquidity));
    }
    if(m_Liquidity_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("liquidity_usd")), m_Liquidity_usd));
    }
    if(m_Cumulative_deposit_token_amountsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_deposit_token_amounts")), m_Cumulative_deposit_token_amounts));
    }
    if(m_Cumulative_deposit_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_deposit_usd")), m_Cumulative_deposit_usd));
    }
    if(m_Cumulative_withdraw_token_amountsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_withdraw_token_amounts")), m_Cumulative_withdraw_token_amounts));
    }
    if(m_Cumulative_withdraw_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_withdraw_usd")), m_Cumulative_withdraw_usd));
    }
    if(m_Cumulative_reward_token_amountsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_reward_token_amounts")), m_Cumulative_reward_token_amounts));
    }
    if(m_Cumulative_reward_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_reward_usd")), m_Cumulative_reward_usd));
    }
    if(m_Deposit_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deposit_count")), m_Deposit_count));
    }
    if(m_Withdraw_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("withdraw_count")), m_Withdraw_count));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
}

bool PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hash"))))
    {
        utility::string_t refVal_setHash;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hash"))), refVal_setHash );
        setHash(refVal_setHash);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("log_index"))))
    {
        int32_t refVal_setLogIndex;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("log_index"))), refVal_setLogIndex );
        setLogIndex(refVal_setLogIndex);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nonce"))))
    {
        utility::string_t refVal_setNonce;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nonce"))), refVal_setNonce );
        setNonce(refVal_setNonce);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("position"))))
    {
        utility::string_t refVal_setPosition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("position"))), refVal_setPosition );
        setPosition(refVal_setPosition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("liquidity_token_type"))))
    {
        utility::string_t refVal_setLiquidityTokenType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("liquidity_token_type"))), refVal_setLiquidityTokenType );
        setLiquidityTokenType(refVal_setLiquidityTokenType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("liquidity"))))
    {
        utility::string_t refVal_setLiquidity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("liquidity"))), refVal_setLiquidity );
        setLiquidity(refVal_setLiquidity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("liquidity_usd"))))
    {
        utility::string_t refVal_setLiquidityUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("liquidity_usd"))), refVal_setLiquidityUsd );
        setLiquidityUsd(refVal_setLiquidityUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_deposit_token_amounts"))))
    {
        std::vector<utility::string_t> refVal_setCumulativeDepositTokenAmounts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_deposit_token_amounts"))), refVal_setCumulativeDepositTokenAmounts );
        setCumulativeDepositTokenAmounts(refVal_setCumulativeDepositTokenAmounts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_deposit_usd"))))
    {
        utility::string_t refVal_setCumulativeDepositUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_deposit_usd"))), refVal_setCumulativeDepositUsd );
        setCumulativeDepositUsd(refVal_setCumulativeDepositUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_withdraw_token_amounts"))))
    {
        std::vector<utility::string_t> refVal_setCumulativeWithdrawTokenAmounts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_withdraw_token_amounts"))), refVal_setCumulativeWithdrawTokenAmounts );
        setCumulativeWithdrawTokenAmounts(refVal_setCumulativeWithdrawTokenAmounts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_withdraw_usd"))))
    {
        utility::string_t refVal_setCumulativeWithdrawUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_withdraw_usd"))), refVal_setCumulativeWithdrawUsd );
        setCumulativeWithdrawUsd(refVal_setCumulativeWithdrawUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_reward_token_amounts"))))
    {
        std::vector<utility::string_t> refVal_setCumulativeRewardTokenAmounts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_reward_token_amounts"))), refVal_setCumulativeRewardTokenAmounts );
        setCumulativeRewardTokenAmounts(refVal_setCumulativeRewardTokenAmounts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_reward_usd"))))
    {
        std::vector<utility::string_t> refVal_setCumulativeRewardUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_reward_usd"))), refVal_setCumulativeRewardUsd );
        setCumulativeRewardUsd(refVal_setCumulativeRewardUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deposit_count"))))
    {
        int32_t refVal_setDepositCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deposit_count"))), refVal_setDepositCount );
        setDepositCount(refVal_setDepositCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("withdraw_count"))))
    {
        int32_t refVal_setWithdrawCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("withdraw_count"))), refVal_setWithdrawCount );
        setWithdrawCount(refVal_setWithdrawCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::string_t refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    return ok;
}

utility::datetime PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::getEntryTime() const
{
    return m_Entry_time;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::getRecvTime() const
{
    return m_Recv_time;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::getBlockNumber() const
{
    return m_Block_number;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::getId() const
{
    return m_Id;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::idIsSet() const
{
    return m_IdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::getHash() const
{
    return m_Hash;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::setHash(const utility::string_t& value)
{
    m_Hash = value;
    m_HashIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::hashIsSet() const
{
    return m_HashIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::unsetHash()
{
    m_HashIsSet = false;
}
int32_t PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::getLogIndex() const
{
    return m_Log_index;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::setLogIndex(int32_t value)
{
    m_Log_index = value;
    m_Log_indexIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::logIndexIsSet() const
{
    return m_Log_indexIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::unsetLog_index()
{
    m_Log_indexIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::getNonce() const
{
    return m_Nonce;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::setNonce(const utility::string_t& value)
{
    m_Nonce = value;
    m_NonceIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::nonceIsSet() const
{
    return m_NonceIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::unsetNonce()
{
    m_NonceIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::getPosition() const
{
    return m_Position;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::setPosition(const utility::string_t& value)
{
    m_Position = value;
    m_PositionIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::positionIsSet() const
{
    return m_PositionIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::unsetPosition()
{
    m_PositionIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::getLiquidityTokenType() const
{
    return m_Liquidity_token_type;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::setLiquidityTokenType(const utility::string_t& value)
{
    m_Liquidity_token_type = value;
    m_Liquidity_token_typeIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::liquidityTokenTypeIsSet() const
{
    return m_Liquidity_token_typeIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::unsetLiquidity_token_type()
{
    m_Liquidity_token_typeIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::getLiquidity() const
{
    return m_Liquidity;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::setLiquidity(const utility::string_t& value)
{
    m_Liquidity = value;
    m_LiquidityIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::liquidityIsSet() const
{
    return m_LiquidityIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::unsetLiquidity()
{
    m_LiquidityIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::getLiquidityUsd() const
{
    return m_Liquidity_usd;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::setLiquidityUsd(const utility::string_t& value)
{
    m_Liquidity_usd = value;
    m_Liquidity_usdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::liquidityUsdIsSet() const
{
    return m_Liquidity_usdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::unsetLiquidity_usd()
{
    m_Liquidity_usdIsSet = false;
}
std::vector<utility::string_t>& PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::getCumulativeDepositTokenAmounts()
{
    return m_Cumulative_deposit_token_amounts;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::setCumulativeDepositTokenAmounts(const std::vector<utility::string_t>& value)
{
    m_Cumulative_deposit_token_amounts = value;
    m_Cumulative_deposit_token_amountsIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::cumulativeDepositTokenAmountsIsSet() const
{
    return m_Cumulative_deposit_token_amountsIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::unsetCumulative_deposit_token_amounts()
{
    m_Cumulative_deposit_token_amountsIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::getCumulativeDepositUsd() const
{
    return m_Cumulative_deposit_usd;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::setCumulativeDepositUsd(const utility::string_t& value)
{
    m_Cumulative_deposit_usd = value;
    m_Cumulative_deposit_usdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::cumulativeDepositUsdIsSet() const
{
    return m_Cumulative_deposit_usdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::unsetCumulative_deposit_usd()
{
    m_Cumulative_deposit_usdIsSet = false;
}
std::vector<utility::string_t>& PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::getCumulativeWithdrawTokenAmounts()
{
    return m_Cumulative_withdraw_token_amounts;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::setCumulativeWithdrawTokenAmounts(const std::vector<utility::string_t>& value)
{
    m_Cumulative_withdraw_token_amounts = value;
    m_Cumulative_withdraw_token_amountsIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::cumulativeWithdrawTokenAmountsIsSet() const
{
    return m_Cumulative_withdraw_token_amountsIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::unsetCumulative_withdraw_token_amounts()
{
    m_Cumulative_withdraw_token_amountsIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::getCumulativeWithdrawUsd() const
{
    return m_Cumulative_withdraw_usd;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::setCumulativeWithdrawUsd(const utility::string_t& value)
{
    m_Cumulative_withdraw_usd = value;
    m_Cumulative_withdraw_usdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::cumulativeWithdrawUsdIsSet() const
{
    return m_Cumulative_withdraw_usdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::unsetCumulative_withdraw_usd()
{
    m_Cumulative_withdraw_usdIsSet = false;
}
std::vector<utility::string_t>& PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::getCumulativeRewardTokenAmounts()
{
    return m_Cumulative_reward_token_amounts;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::setCumulativeRewardTokenAmounts(const std::vector<utility::string_t>& value)
{
    m_Cumulative_reward_token_amounts = value;
    m_Cumulative_reward_token_amountsIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::cumulativeRewardTokenAmountsIsSet() const
{
    return m_Cumulative_reward_token_amountsIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::unsetCumulative_reward_token_amounts()
{
    m_Cumulative_reward_token_amountsIsSet = false;
}
std::vector<utility::string_t>& PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::getCumulativeRewardUsd()
{
    return m_Cumulative_reward_usd;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::setCumulativeRewardUsd(const std::vector<utility::string_t>& value)
{
    m_Cumulative_reward_usd = value;
    m_Cumulative_reward_usdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::cumulativeRewardUsdIsSet() const
{
    return m_Cumulative_reward_usdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::unsetCumulative_reward_usd()
{
    m_Cumulative_reward_usdIsSet = false;
}
int32_t PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::getDepositCount() const
{
    return m_Deposit_count;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::setDepositCount(int32_t value)
{
    m_Deposit_count = value;
    m_Deposit_countIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::depositCountIsSet() const
{
    return m_Deposit_countIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::unsetDeposit_count()
{
    m_Deposit_countIsSet = false;
}
int32_t PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::getWithdrawCount() const
{
    return m_Withdraw_count;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::setWithdrawCount(int32_t value)
{
    m_Withdraw_count = value;
    m_Withdraw_countIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::withdrawCountIsSet() const
{
    return m_Withdraw_countIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::unsetWithdraw_count()
{
    m_Withdraw_countIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::getTimestamp() const
{
    return m_Timestamp;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::setTimestamp(const utility::string_t& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_PositionSnapshotDTO::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
}
}
}
}


