/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0;
    m_Block_numberIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Day = 0;
    m_DayIsSet = false;
    m_Protocol = utility::conversions::to_string_t("");
    m_ProtocolIsSet = false;
    m_Total_value_locked_usd = utility::conversions::to_string_t("");
    m_Total_value_locked_usdIsSet = false;
    m_Total_liquidity_usd = utility::conversions::to_string_t("");
    m_Total_liquidity_usdIsSet = false;
    m_Active_liquidity_usd = utility::conversions::to_string_t("");
    m_Active_liquidity_usdIsSet = false;
    m_Uncollected_protocol_side_value_usd = utility::conversions::to_string_t("");
    m_Uncollected_protocol_side_value_usdIsSet = false;
    m_Uncollected_supply_side_value_usd = utility::conversions::to_string_t("");
    m_Uncollected_supply_side_value_usdIsSet = false;
    m_Protocol_controlled_value_usd = utility::conversions::to_string_t("");
    m_Protocol_controlled_value_usdIsSet = false;
    m_Daily_volume_usd = utility::conversions::to_string_t("");
    m_Daily_volume_usdIsSet = false;
    m_Cumulative_volume_usd = utility::conversions::to_string_t("");
    m_Cumulative_volume_usdIsSet = false;
    m_Daily_supply_side_revenue_usd = utility::conversions::to_string_t("");
    m_Daily_supply_side_revenue_usdIsSet = false;
    m_Cumulative_supply_side_revenue_usd = utility::conversions::to_string_t("");
    m_Cumulative_supply_side_revenue_usdIsSet = false;
    m_Daily_protocol_side_revenue_usd = utility::conversions::to_string_t("");
    m_Daily_protocol_side_revenue_usdIsSet = false;
    m_Cumulative_protocol_side_revenue_usd = utility::conversions::to_string_t("");
    m_Cumulative_protocol_side_revenue_usdIsSet = false;
    m_Daily_total_revenue_usd = utility::conversions::to_string_t("");
    m_Daily_total_revenue_usdIsSet = false;
    m_Cumulative_total_revenue_usd = utility::conversions::to_string_t("");
    m_Cumulative_total_revenue_usdIsSet = false;
    m_Timestamp = utility::conversions::to_string_t("");
    m_TimestampIsSet = false;
}

SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::~SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO()
{
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::validate()
{
    // TODO: implement validation
}

web::json::value SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_DayIsSet)
    {
        val[utility::conversions::to_string_t(U("day"))] = ModelBase::toJson(m_Day);
    }
    if(m_ProtocolIsSet)
    {
        val[utility::conversions::to_string_t(U("protocol"))] = ModelBase::toJson(m_Protocol);
    }
    if(m_Total_value_locked_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("total_value_locked_usd"))] = ModelBase::toJson(m_Total_value_locked_usd);
    }
    if(m_Total_liquidity_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("total_liquidity_usd"))] = ModelBase::toJson(m_Total_liquidity_usd);
    }
    if(m_Active_liquidity_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("active_liquidity_usd"))] = ModelBase::toJson(m_Active_liquidity_usd);
    }
    if(m_Uncollected_protocol_side_value_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("uncollected_protocol_side_value_usd"))] = ModelBase::toJson(m_Uncollected_protocol_side_value_usd);
    }
    if(m_Uncollected_supply_side_value_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("uncollected_supply_side_value_usd"))] = ModelBase::toJson(m_Uncollected_supply_side_value_usd);
    }
    if(m_Protocol_controlled_value_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("protocol_controlled_value_usd"))] = ModelBase::toJson(m_Protocol_controlled_value_usd);
    }
    if(m_Daily_volume_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("daily_volume_usd"))] = ModelBase::toJson(m_Daily_volume_usd);
    }
    if(m_Cumulative_volume_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_volume_usd"))] = ModelBase::toJson(m_Cumulative_volume_usd);
    }
    if(m_Daily_supply_side_revenue_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("daily_supply_side_revenue_usd"))] = ModelBase::toJson(m_Daily_supply_side_revenue_usd);
    }
    if(m_Cumulative_supply_side_revenue_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_supply_side_revenue_usd"))] = ModelBase::toJson(m_Cumulative_supply_side_revenue_usd);
    }
    if(m_Daily_protocol_side_revenue_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("daily_protocol_side_revenue_usd"))] = ModelBase::toJson(m_Daily_protocol_side_revenue_usd);
    }
    if(m_Cumulative_protocol_side_revenue_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_protocol_side_revenue_usd"))] = ModelBase::toJson(m_Cumulative_protocol_side_revenue_usd);
    }
    if(m_Daily_total_revenue_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("daily_total_revenue_usd"))] = ModelBase::toJson(m_Daily_total_revenue_usd);
    }
    if(m_Cumulative_total_revenue_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_total_revenue_usd"))] = ModelBase::toJson(m_Cumulative_total_revenue_usd);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }

    return val;
}

bool SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("day"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("day")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDay;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDay);
            setDay(refVal_setDay);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("protocol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("protocol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProtocol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProtocol);
            setProtocol(refVal_setProtocol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_value_locked_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_value_locked_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalValueLockedUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalValueLockedUsd);
            setTotalValueLockedUsd(refVal_setTotalValueLockedUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_liquidity_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_liquidity_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalLiquidityUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalLiquidityUsd);
            setTotalLiquidityUsd(refVal_setTotalLiquidityUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("active_liquidity_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("active_liquidity_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setActiveLiquidityUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActiveLiquidityUsd);
            setActiveLiquidityUsd(refVal_setActiveLiquidityUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uncollected_protocol_side_value_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uncollected_protocol_side_value_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUncollectedProtocolSideValueUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUncollectedProtocolSideValueUsd);
            setUncollectedProtocolSideValueUsd(refVal_setUncollectedProtocolSideValueUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uncollected_supply_side_value_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uncollected_supply_side_value_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUncollectedSupplySideValueUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUncollectedSupplySideValueUsd);
            setUncollectedSupplySideValueUsd(refVal_setUncollectedSupplySideValueUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("protocol_controlled_value_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("protocol_controlled_value_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProtocolControlledValueUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProtocolControlledValueUsd);
            setProtocolControlledValueUsd(refVal_setProtocolControlledValueUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("daily_volume_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("daily_volume_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDailyVolumeUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDailyVolumeUsd);
            setDailyVolumeUsd(refVal_setDailyVolumeUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_volume_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_volume_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCumulativeVolumeUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeVolumeUsd);
            setCumulativeVolumeUsd(refVal_setCumulativeVolumeUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("daily_supply_side_revenue_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("daily_supply_side_revenue_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDailySupplySideRevenueUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDailySupplySideRevenueUsd);
            setDailySupplySideRevenueUsd(refVal_setDailySupplySideRevenueUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_supply_side_revenue_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_supply_side_revenue_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCumulativeSupplySideRevenueUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeSupplySideRevenueUsd);
            setCumulativeSupplySideRevenueUsd(refVal_setCumulativeSupplySideRevenueUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("daily_protocol_side_revenue_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("daily_protocol_side_revenue_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDailyProtocolSideRevenueUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDailyProtocolSideRevenueUsd);
            setDailyProtocolSideRevenueUsd(refVal_setDailyProtocolSideRevenueUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_protocol_side_revenue_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_protocol_side_revenue_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCumulativeProtocolSideRevenueUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeProtocolSideRevenueUsd);
            setCumulativeProtocolSideRevenueUsd(refVal_setCumulativeProtocolSideRevenueUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("daily_total_revenue_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("daily_total_revenue_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDailyTotalRevenueUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDailyTotalRevenueUsd);
            setDailyTotalRevenueUsd(refVal_setDailyTotalRevenueUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_total_revenue_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_total_revenue_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCumulativeTotalRevenueUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeTotalRevenueUsd);
            setCumulativeTotalRevenueUsd(refVal_setCumulativeTotalRevenueUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
        }
    }
    return ok;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_DayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("day")), m_Day));
    }
    if(m_ProtocolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("protocol")), m_Protocol));
    }
    if(m_Total_value_locked_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_value_locked_usd")), m_Total_value_locked_usd));
    }
    if(m_Total_liquidity_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_liquidity_usd")), m_Total_liquidity_usd));
    }
    if(m_Active_liquidity_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("active_liquidity_usd")), m_Active_liquidity_usd));
    }
    if(m_Uncollected_protocol_side_value_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uncollected_protocol_side_value_usd")), m_Uncollected_protocol_side_value_usd));
    }
    if(m_Uncollected_supply_side_value_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uncollected_supply_side_value_usd")), m_Uncollected_supply_side_value_usd));
    }
    if(m_Protocol_controlled_value_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("protocol_controlled_value_usd")), m_Protocol_controlled_value_usd));
    }
    if(m_Daily_volume_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("daily_volume_usd")), m_Daily_volume_usd));
    }
    if(m_Cumulative_volume_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_volume_usd")), m_Cumulative_volume_usd));
    }
    if(m_Daily_supply_side_revenue_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("daily_supply_side_revenue_usd")), m_Daily_supply_side_revenue_usd));
    }
    if(m_Cumulative_supply_side_revenue_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_supply_side_revenue_usd")), m_Cumulative_supply_side_revenue_usd));
    }
    if(m_Daily_protocol_side_revenue_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("daily_protocol_side_revenue_usd")), m_Daily_protocol_side_revenue_usd));
    }
    if(m_Cumulative_protocol_side_revenue_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_protocol_side_revenue_usd")), m_Cumulative_protocol_side_revenue_usd));
    }
    if(m_Daily_total_revenue_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("daily_total_revenue_usd")), m_Daily_total_revenue_usd));
    }
    if(m_Cumulative_total_revenue_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_total_revenue_usd")), m_Cumulative_total_revenue_usd));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
}

bool SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int32_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("day"))))
    {
        int32_t refVal_setDay;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("day"))), refVal_setDay );
        setDay(refVal_setDay);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("protocol"))))
    {
        utility::string_t refVal_setProtocol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("protocol"))), refVal_setProtocol );
        setProtocol(refVal_setProtocol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_value_locked_usd"))))
    {
        utility::string_t refVal_setTotalValueLockedUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_value_locked_usd"))), refVal_setTotalValueLockedUsd );
        setTotalValueLockedUsd(refVal_setTotalValueLockedUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_liquidity_usd"))))
    {
        utility::string_t refVal_setTotalLiquidityUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_liquidity_usd"))), refVal_setTotalLiquidityUsd );
        setTotalLiquidityUsd(refVal_setTotalLiquidityUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("active_liquidity_usd"))))
    {
        utility::string_t refVal_setActiveLiquidityUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("active_liquidity_usd"))), refVal_setActiveLiquidityUsd );
        setActiveLiquidityUsd(refVal_setActiveLiquidityUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uncollected_protocol_side_value_usd"))))
    {
        utility::string_t refVal_setUncollectedProtocolSideValueUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uncollected_protocol_side_value_usd"))), refVal_setUncollectedProtocolSideValueUsd );
        setUncollectedProtocolSideValueUsd(refVal_setUncollectedProtocolSideValueUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uncollected_supply_side_value_usd"))))
    {
        utility::string_t refVal_setUncollectedSupplySideValueUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uncollected_supply_side_value_usd"))), refVal_setUncollectedSupplySideValueUsd );
        setUncollectedSupplySideValueUsd(refVal_setUncollectedSupplySideValueUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("protocol_controlled_value_usd"))))
    {
        utility::string_t refVal_setProtocolControlledValueUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("protocol_controlled_value_usd"))), refVal_setProtocolControlledValueUsd );
        setProtocolControlledValueUsd(refVal_setProtocolControlledValueUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("daily_volume_usd"))))
    {
        utility::string_t refVal_setDailyVolumeUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("daily_volume_usd"))), refVal_setDailyVolumeUsd );
        setDailyVolumeUsd(refVal_setDailyVolumeUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_volume_usd"))))
    {
        utility::string_t refVal_setCumulativeVolumeUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_volume_usd"))), refVal_setCumulativeVolumeUsd );
        setCumulativeVolumeUsd(refVal_setCumulativeVolumeUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("daily_supply_side_revenue_usd"))))
    {
        utility::string_t refVal_setDailySupplySideRevenueUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("daily_supply_side_revenue_usd"))), refVal_setDailySupplySideRevenueUsd );
        setDailySupplySideRevenueUsd(refVal_setDailySupplySideRevenueUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_supply_side_revenue_usd"))))
    {
        utility::string_t refVal_setCumulativeSupplySideRevenueUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_supply_side_revenue_usd"))), refVal_setCumulativeSupplySideRevenueUsd );
        setCumulativeSupplySideRevenueUsd(refVal_setCumulativeSupplySideRevenueUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("daily_protocol_side_revenue_usd"))))
    {
        utility::string_t refVal_setDailyProtocolSideRevenueUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("daily_protocol_side_revenue_usd"))), refVal_setDailyProtocolSideRevenueUsd );
        setDailyProtocolSideRevenueUsd(refVal_setDailyProtocolSideRevenueUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_protocol_side_revenue_usd"))))
    {
        utility::string_t refVal_setCumulativeProtocolSideRevenueUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_protocol_side_revenue_usd"))), refVal_setCumulativeProtocolSideRevenueUsd );
        setCumulativeProtocolSideRevenueUsd(refVal_setCumulativeProtocolSideRevenueUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("daily_total_revenue_usd"))))
    {
        utility::string_t refVal_setDailyTotalRevenueUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("daily_total_revenue_usd"))), refVal_setDailyTotalRevenueUsd );
        setDailyTotalRevenueUsd(refVal_setDailyTotalRevenueUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_total_revenue_usd"))))
    {
        utility::string_t refVal_setCumulativeTotalRevenueUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_total_revenue_usd"))), refVal_setCumulativeTotalRevenueUsd );
        setCumulativeTotalRevenueUsd(refVal_setCumulativeTotalRevenueUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::string_t refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    return ok;
}

utility::datetime SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::getEntryTime() const
{
    return m_Entry_time;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::getRecvTime() const
{
    return m_Recv_time;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int32_t SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::getBlockNumber() const
{
    return m_Block_number;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::setBlockNumber(int32_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::getId() const
{
    return m_Id;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::idIsSet() const
{
    return m_IdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::unsetId()
{
    m_IdIsSet = false;
}
int32_t SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::getDay() const
{
    return m_Day;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::setDay(int32_t value)
{
    m_Day = value;
    m_DayIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::dayIsSet() const
{
    return m_DayIsSet;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::unsetDay()
{
    m_DayIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::getProtocol() const
{
    return m_Protocol;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::setProtocol(const utility::string_t& value)
{
    m_Protocol = value;
    m_ProtocolIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::protocolIsSet() const
{
    return m_ProtocolIsSet;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::unsetProtocol()
{
    m_ProtocolIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::getTotalValueLockedUsd() const
{
    return m_Total_value_locked_usd;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::setTotalValueLockedUsd(const utility::string_t& value)
{
    m_Total_value_locked_usd = value;
    m_Total_value_locked_usdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::totalValueLockedUsdIsSet() const
{
    return m_Total_value_locked_usdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::unsetTotal_value_locked_usd()
{
    m_Total_value_locked_usdIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::getTotalLiquidityUsd() const
{
    return m_Total_liquidity_usd;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::setTotalLiquidityUsd(const utility::string_t& value)
{
    m_Total_liquidity_usd = value;
    m_Total_liquidity_usdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::totalLiquidityUsdIsSet() const
{
    return m_Total_liquidity_usdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::unsetTotal_liquidity_usd()
{
    m_Total_liquidity_usdIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::getActiveLiquidityUsd() const
{
    return m_Active_liquidity_usd;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::setActiveLiquidityUsd(const utility::string_t& value)
{
    m_Active_liquidity_usd = value;
    m_Active_liquidity_usdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::activeLiquidityUsdIsSet() const
{
    return m_Active_liquidity_usdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::unsetActive_liquidity_usd()
{
    m_Active_liquidity_usdIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::getUncollectedProtocolSideValueUsd() const
{
    return m_Uncollected_protocol_side_value_usd;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::setUncollectedProtocolSideValueUsd(const utility::string_t& value)
{
    m_Uncollected_protocol_side_value_usd = value;
    m_Uncollected_protocol_side_value_usdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::uncollectedProtocolSideValueUsdIsSet() const
{
    return m_Uncollected_protocol_side_value_usdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::unsetUncollected_protocol_side_value_usd()
{
    m_Uncollected_protocol_side_value_usdIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::getUncollectedSupplySideValueUsd() const
{
    return m_Uncollected_supply_side_value_usd;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::setUncollectedSupplySideValueUsd(const utility::string_t& value)
{
    m_Uncollected_supply_side_value_usd = value;
    m_Uncollected_supply_side_value_usdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::uncollectedSupplySideValueUsdIsSet() const
{
    return m_Uncollected_supply_side_value_usdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::unsetUncollected_supply_side_value_usd()
{
    m_Uncollected_supply_side_value_usdIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::getProtocolControlledValueUsd() const
{
    return m_Protocol_controlled_value_usd;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::setProtocolControlledValueUsd(const utility::string_t& value)
{
    m_Protocol_controlled_value_usd = value;
    m_Protocol_controlled_value_usdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::protocolControlledValueUsdIsSet() const
{
    return m_Protocol_controlled_value_usdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::unsetProtocol_controlled_value_usd()
{
    m_Protocol_controlled_value_usdIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::getDailyVolumeUsd() const
{
    return m_Daily_volume_usd;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::setDailyVolumeUsd(const utility::string_t& value)
{
    m_Daily_volume_usd = value;
    m_Daily_volume_usdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::dailyVolumeUsdIsSet() const
{
    return m_Daily_volume_usdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::unsetDaily_volume_usd()
{
    m_Daily_volume_usdIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::getCumulativeVolumeUsd() const
{
    return m_Cumulative_volume_usd;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::setCumulativeVolumeUsd(const utility::string_t& value)
{
    m_Cumulative_volume_usd = value;
    m_Cumulative_volume_usdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::cumulativeVolumeUsdIsSet() const
{
    return m_Cumulative_volume_usdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::unsetCumulative_volume_usd()
{
    m_Cumulative_volume_usdIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::getDailySupplySideRevenueUsd() const
{
    return m_Daily_supply_side_revenue_usd;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::setDailySupplySideRevenueUsd(const utility::string_t& value)
{
    m_Daily_supply_side_revenue_usd = value;
    m_Daily_supply_side_revenue_usdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::dailySupplySideRevenueUsdIsSet() const
{
    return m_Daily_supply_side_revenue_usdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::unsetDaily_supply_side_revenue_usd()
{
    m_Daily_supply_side_revenue_usdIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::getCumulativeSupplySideRevenueUsd() const
{
    return m_Cumulative_supply_side_revenue_usd;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::setCumulativeSupplySideRevenueUsd(const utility::string_t& value)
{
    m_Cumulative_supply_side_revenue_usd = value;
    m_Cumulative_supply_side_revenue_usdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::cumulativeSupplySideRevenueUsdIsSet() const
{
    return m_Cumulative_supply_side_revenue_usdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::unsetCumulative_supply_side_revenue_usd()
{
    m_Cumulative_supply_side_revenue_usdIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::getDailyProtocolSideRevenueUsd() const
{
    return m_Daily_protocol_side_revenue_usd;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::setDailyProtocolSideRevenueUsd(const utility::string_t& value)
{
    m_Daily_protocol_side_revenue_usd = value;
    m_Daily_protocol_side_revenue_usdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::dailyProtocolSideRevenueUsdIsSet() const
{
    return m_Daily_protocol_side_revenue_usdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::unsetDaily_protocol_side_revenue_usd()
{
    m_Daily_protocol_side_revenue_usdIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::getCumulativeProtocolSideRevenueUsd() const
{
    return m_Cumulative_protocol_side_revenue_usd;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::setCumulativeProtocolSideRevenueUsd(const utility::string_t& value)
{
    m_Cumulative_protocol_side_revenue_usd = value;
    m_Cumulative_protocol_side_revenue_usdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::cumulativeProtocolSideRevenueUsdIsSet() const
{
    return m_Cumulative_protocol_side_revenue_usdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::unsetCumulative_protocol_side_revenue_usd()
{
    m_Cumulative_protocol_side_revenue_usdIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::getDailyTotalRevenueUsd() const
{
    return m_Daily_total_revenue_usd;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::setDailyTotalRevenueUsd(const utility::string_t& value)
{
    m_Daily_total_revenue_usd = value;
    m_Daily_total_revenue_usdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::dailyTotalRevenueUsdIsSet() const
{
    return m_Daily_total_revenue_usdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::unsetDaily_total_revenue_usd()
{
    m_Daily_total_revenue_usdIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::getCumulativeTotalRevenueUsd() const
{
    return m_Cumulative_total_revenue_usd;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::setCumulativeTotalRevenueUsd(const utility::string_t& value)
{
    m_Cumulative_total_revenue_usd = value;
    m_Cumulative_total_revenue_usdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::cumulativeTotalRevenueUsdIsSet() const
{
    return m_Cumulative_total_revenue_usdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::unsetCumulative_total_revenue_usd()
{
    m_Cumulative_total_revenue_usdIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::getTimestamp() const
{
    return m_Timestamp;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::setTimestamp(const utility::string_t& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void SUSHISWAP_V3_ETHEREUM_FinancialsDailySnapshotDTO::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
}
}
}
}


