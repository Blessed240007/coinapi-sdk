/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SUSHISWAP_V3_ETHEREUM_SwapDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SUSHISWAP_V3_ETHEREUM_SwapDTO::SUSHISWAP_V3_ETHEREUM_SwapDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Block_ = 0;
    m_Block_IsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Hash = utility::conversions::to_string_t("");
    m_HashIsSet = false;
    m_Nonce = utility::conversions::to_string_t("");
    m_NonceIsSet = false;
    m_Log_index = 0;
    m_Log_indexIsSet = false;
    m_Gas_limit = utility::conversions::to_string_t("");
    m_Gas_limitIsSet = false;
    m_Gas_used = utility::conversions::to_string_t("");
    m_Gas_usedIsSet = false;
    m_Gas_price = utility::conversions::to_string_t("");
    m_Gas_priceIsSet = false;
    m_Protocol = utility::conversions::to_string_t("");
    m_ProtocolIsSet = false;
    m_Account = utility::conversions::to_string_t("");
    m_AccountIsSet = false;
    m_Pool = utility::conversions::to_string_t("");
    m_PoolIsSet = false;
    m_Timestamp = utility::conversions::to_string_t("");
    m_TimestampIsSet = false;
    m_Tick = utility::conversions::to_string_t("");
    m_TickIsSet = false;
    m_Token_in = utility::conversions::to_string_t("");
    m_Token_inIsSet = false;
    m_Amount_in = utility::conversions::to_string_t("");
    m_Amount_inIsSet = false;
    m_Amount_in_usd = utility::conversions::to_string_t("");
    m_Amount_in_usdIsSet = false;
    m_Token_out = utility::conversions::to_string_t("");
    m_Token_outIsSet = false;
    m_Amount_out = utility::conversions::to_string_t("");
    m_Amount_outIsSet = false;
    m_Amount_out_usd = utility::conversions::to_string_t("");
    m_Amount_out_usdIsSet = false;
    m_Reserve_amountsIsSet = false;
    m_Pool_id = utility::conversions::to_string_t("");
    m_Pool_idIsSet = false;
    m_Transaction_id = utility::conversions::to_string_t("");
    m_Transaction_idIsSet = false;
    m_Evaluated_price = 0.0;
    m_Evaluated_priceIsSet = false;
    m_Evaluated_amount = 0.0;
    m_Evaluated_amountIsSet = false;
    m_Evaluated_aggressorIsSet = false;
}

SUSHISWAP_V3_ETHEREUM_SwapDTO::~SUSHISWAP_V3_ETHEREUM_SwapDTO()
{
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::validate()
{
    // TODO: implement validation
}

web::json::value SUSHISWAP_V3_ETHEREUM_SwapDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_Block_IsSet)
    {
        val[utility::conversions::to_string_t(U("block_"))] = ModelBase::toJson(m_Block_);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_HashIsSet)
    {
        val[utility::conversions::to_string_t(U("hash"))] = ModelBase::toJson(m_Hash);
    }
    if(m_NonceIsSet)
    {
        val[utility::conversions::to_string_t(U("nonce"))] = ModelBase::toJson(m_Nonce);
    }
    if(m_Log_indexIsSet)
    {
        val[utility::conversions::to_string_t(U("log_index"))] = ModelBase::toJson(m_Log_index);
    }
    if(m_Gas_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("gas_limit"))] = ModelBase::toJson(m_Gas_limit);
    }
    if(m_Gas_usedIsSet)
    {
        val[utility::conversions::to_string_t(U("gas_used"))] = ModelBase::toJson(m_Gas_used);
    }
    if(m_Gas_priceIsSet)
    {
        val[utility::conversions::to_string_t(U("gas_price"))] = ModelBase::toJson(m_Gas_price);
    }
    if(m_ProtocolIsSet)
    {
        val[utility::conversions::to_string_t(U("protocol"))] = ModelBase::toJson(m_Protocol);
    }
    if(m_AccountIsSet)
    {
        val[utility::conversions::to_string_t(U("account"))] = ModelBase::toJson(m_Account);
    }
    if(m_PoolIsSet)
    {
        val[utility::conversions::to_string_t(U("pool"))] = ModelBase::toJson(m_Pool);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_TickIsSet)
    {
        val[utility::conversions::to_string_t(U("tick"))] = ModelBase::toJson(m_Tick);
    }
    if(m_Token_inIsSet)
    {
        val[utility::conversions::to_string_t(U("token_in"))] = ModelBase::toJson(m_Token_in);
    }
    if(m_Amount_inIsSet)
    {
        val[utility::conversions::to_string_t(U("amount_in"))] = ModelBase::toJson(m_Amount_in);
    }
    if(m_Amount_in_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("amount_in_usd"))] = ModelBase::toJson(m_Amount_in_usd);
    }
    if(m_Token_outIsSet)
    {
        val[utility::conversions::to_string_t(U("token_out"))] = ModelBase::toJson(m_Token_out);
    }
    if(m_Amount_outIsSet)
    {
        val[utility::conversions::to_string_t(U("amount_out"))] = ModelBase::toJson(m_Amount_out);
    }
    if(m_Amount_out_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("amount_out_usd"))] = ModelBase::toJson(m_Amount_out_usd);
    }
    if(m_Reserve_amountsIsSet)
    {
        val[utility::conversions::to_string_t(U("reserve_amounts"))] = ModelBase::toJson(m_Reserve_amounts);
    }
    if(m_Pool_idIsSet)
    {
        val[utility::conversions::to_string_t(U("pool_id"))] = ModelBase::toJson(m_Pool_id);
    }
    if(m_Transaction_idIsSet)
    {
        val[utility::conversions::to_string_t(U("transaction_id"))] = ModelBase::toJson(m_Transaction_id);
    }
    if(m_Evaluated_priceIsSet)
    {
        val[utility::conversions::to_string_t(U("evaluated_price"))] = ModelBase::toJson(m_Evaluated_price);
    }
    if(m_Evaluated_amountIsSet)
    {
        val[utility::conversions::to_string_t(U("evaluated_amount"))] = ModelBase::toJson(m_Evaluated_amount);
    }
    if(m_Evaluated_aggressorIsSet)
    {
        val[utility::conversions::to_string_t(U("evaluated_aggressor"))] = ModelBase::toJson(m_Evaluated_aggressor);
    }

    return val;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBlock;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlock);
            setBlock(refVal_setBlock);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hash"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hash")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHash;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHash);
            setHash(refVal_setHash);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nonce"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nonce")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNonce;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNonce);
            setNonce(refVal_setNonce);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("log_index"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("log_index")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLogIndex;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLogIndex);
            setLogIndex(refVal_setLogIndex);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gas_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gas_limit")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGasLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGasLimit);
            setGasLimit(refVal_setGasLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gas_used"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gas_used")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGasUsed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGasUsed);
            setGasUsed(refVal_setGasUsed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gas_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gas_price")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGasPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGasPrice);
            setGasPrice(refVal_setGasPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("protocol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("protocol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProtocol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProtocol);
            setProtocol(refVal_setProtocol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("account"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("account")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccount);
            setAccount(refVal_setAccount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pool"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pool")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPool;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPool);
            setPool(refVal_setPool);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tick"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tick")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTick;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTick);
            setTick(refVal_setTick);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("token_in"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("token_in")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTokenIn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTokenIn);
            setTokenIn(refVal_setTokenIn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("amount_in"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("amount_in")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAmountIn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAmountIn);
            setAmountIn(refVal_setAmountIn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("amount_in_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("amount_in_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAmountInUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAmountInUsd);
            setAmountInUsd(refVal_setAmountInUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("token_out"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("token_out")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTokenOut;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTokenOut);
            setTokenOut(refVal_setTokenOut);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("amount_out"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("amount_out")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAmountOut;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAmountOut);
            setAmountOut(refVal_setAmountOut);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("amount_out_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("amount_out_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAmountOutUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAmountOutUsd);
            setAmountOutUsd(refVal_setAmountOutUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reserve_amounts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reserve_amounts")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setReserveAmounts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReserveAmounts);
            setReserveAmounts(refVal_setReserveAmounts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pool_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pool_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPoolId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPoolId);
            setPoolId(refVal_setPoolId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("transaction_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("transaction_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTransactionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTransactionId);
            setTransactionId(refVal_setTransactionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("evaluated_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("evaluated_price")));
        if(!fieldValue.is_null())
        {
            double refVal_setEvaluatedPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEvaluatedPrice);
            setEvaluatedPrice(refVal_setEvaluatedPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("evaluated_amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("evaluated_amount")));
        if(!fieldValue.is_null())
        {
            double refVal_setEvaluatedAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEvaluatedAmount);
            setEvaluatedAmount(refVal_setEvaluatedAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("evaluated_aggressor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("evaluated_aggressor")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Transactions_ETradeAggressiveSide> refVal_setEvaluatedAggressor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEvaluatedAggressor);
            setEvaluatedAggressor(refVal_setEvaluatedAggressor);
        }
    }
    return ok;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_Block_IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_")), m_Block_));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_HashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hash")), m_Hash));
    }
    if(m_NonceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nonce")), m_Nonce));
    }
    if(m_Log_indexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("log_index")), m_Log_index));
    }
    if(m_Gas_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gas_limit")), m_Gas_limit));
    }
    if(m_Gas_usedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gas_used")), m_Gas_used));
    }
    if(m_Gas_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gas_price")), m_Gas_price));
    }
    if(m_ProtocolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("protocol")), m_Protocol));
    }
    if(m_AccountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("account")), m_Account));
    }
    if(m_PoolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pool")), m_Pool));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_TickIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tick")), m_Tick));
    }
    if(m_Token_inIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("token_in")), m_Token_in));
    }
    if(m_Amount_inIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("amount_in")), m_Amount_in));
    }
    if(m_Amount_in_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("amount_in_usd")), m_Amount_in_usd));
    }
    if(m_Token_outIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("token_out")), m_Token_out));
    }
    if(m_Amount_outIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("amount_out")), m_Amount_out));
    }
    if(m_Amount_out_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("amount_out_usd")), m_Amount_out_usd));
    }
    if(m_Reserve_amountsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reserve_amounts")), m_Reserve_amounts));
    }
    if(m_Pool_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pool_id")), m_Pool_id));
    }
    if(m_Transaction_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("transaction_id")), m_Transaction_id));
    }
    if(m_Evaluated_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("evaluated_price")), m_Evaluated_price));
    }
    if(m_Evaluated_amountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("evaluated_amount")), m_Evaluated_amount));
    }
    if(m_Evaluated_aggressorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("evaluated_aggressor")), m_Evaluated_aggressor));
    }
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_"))))
    {
        int32_t refVal_setBlock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_"))), refVal_setBlock );
        setBlock(refVal_setBlock);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hash"))))
    {
        utility::string_t refVal_setHash;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hash"))), refVal_setHash );
        setHash(refVal_setHash);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nonce"))))
    {
        utility::string_t refVal_setNonce;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nonce"))), refVal_setNonce );
        setNonce(refVal_setNonce);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("log_index"))))
    {
        int32_t refVal_setLogIndex;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("log_index"))), refVal_setLogIndex );
        setLogIndex(refVal_setLogIndex);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gas_limit"))))
    {
        utility::string_t refVal_setGasLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gas_limit"))), refVal_setGasLimit );
        setGasLimit(refVal_setGasLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gas_used"))))
    {
        utility::string_t refVal_setGasUsed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gas_used"))), refVal_setGasUsed );
        setGasUsed(refVal_setGasUsed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gas_price"))))
    {
        utility::string_t refVal_setGasPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gas_price"))), refVal_setGasPrice );
        setGasPrice(refVal_setGasPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("protocol"))))
    {
        utility::string_t refVal_setProtocol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("protocol"))), refVal_setProtocol );
        setProtocol(refVal_setProtocol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("account"))))
    {
        utility::string_t refVal_setAccount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("account"))), refVal_setAccount );
        setAccount(refVal_setAccount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pool"))))
    {
        utility::string_t refVal_setPool;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pool"))), refVal_setPool );
        setPool(refVal_setPool);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::string_t refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tick"))))
    {
        utility::string_t refVal_setTick;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tick"))), refVal_setTick );
        setTick(refVal_setTick);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("token_in"))))
    {
        utility::string_t refVal_setTokenIn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("token_in"))), refVal_setTokenIn );
        setTokenIn(refVal_setTokenIn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("amount_in"))))
    {
        utility::string_t refVal_setAmountIn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("amount_in"))), refVal_setAmountIn );
        setAmountIn(refVal_setAmountIn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("amount_in_usd"))))
    {
        utility::string_t refVal_setAmountInUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("amount_in_usd"))), refVal_setAmountInUsd );
        setAmountInUsd(refVal_setAmountInUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("token_out"))))
    {
        utility::string_t refVal_setTokenOut;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("token_out"))), refVal_setTokenOut );
        setTokenOut(refVal_setTokenOut);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("amount_out"))))
    {
        utility::string_t refVal_setAmountOut;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("amount_out"))), refVal_setAmountOut );
        setAmountOut(refVal_setAmountOut);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("amount_out_usd"))))
    {
        utility::string_t refVal_setAmountOutUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("amount_out_usd"))), refVal_setAmountOutUsd );
        setAmountOutUsd(refVal_setAmountOutUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reserve_amounts"))))
    {
        std::vector<utility::string_t> refVal_setReserveAmounts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reserve_amounts"))), refVal_setReserveAmounts );
        setReserveAmounts(refVal_setReserveAmounts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pool_id"))))
    {
        utility::string_t refVal_setPoolId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pool_id"))), refVal_setPoolId );
        setPoolId(refVal_setPoolId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("transaction_id"))))
    {
        utility::string_t refVal_setTransactionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("transaction_id"))), refVal_setTransactionId );
        setTransactionId(refVal_setTransactionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("evaluated_price"))))
    {
        double refVal_setEvaluatedPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("evaluated_price"))), refVal_setEvaluatedPrice );
        setEvaluatedPrice(refVal_setEvaluatedPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("evaluated_amount"))))
    {
        double refVal_setEvaluatedAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("evaluated_amount"))), refVal_setEvaluatedAmount );
        setEvaluatedAmount(refVal_setEvaluatedAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("evaluated_aggressor"))))
    {
        std::shared_ptr<Transactions_ETradeAggressiveSide> refVal_setEvaluatedAggressor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("evaluated_aggressor"))), refVal_setEvaluatedAggressor );
        setEvaluatedAggressor(refVal_setEvaluatedAggressor);
    }
    return ok;
}

utility::datetime SUSHISWAP_V3_ETHEREUM_SwapDTO::getEntryTime() const
{
    return m_Entry_time;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime SUSHISWAP_V3_ETHEREUM_SwapDTO::getRecvTime() const
{
    return m_Recv_time;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t SUSHISWAP_V3_ETHEREUM_SwapDTO::getBlockNumber() const
{
    return m_Block_number;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
int32_t SUSHISWAP_V3_ETHEREUM_SwapDTO::getBlock() const
{
    return m_Block_;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setBlock(int32_t value)
{
    m_Block_ = value;
    m_Block_IsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::blockIsSet() const
{
    return m_Block_IsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetBlock_()
{
    m_Block_IsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_SwapDTO::getId() const
{
    return m_Id;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::idIsSet() const
{
    return m_IdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_SwapDTO::getHash() const
{
    return m_Hash;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setHash(const utility::string_t& value)
{
    m_Hash = value;
    m_HashIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::hashIsSet() const
{
    return m_HashIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetHash()
{
    m_HashIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_SwapDTO::getNonce() const
{
    return m_Nonce;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setNonce(const utility::string_t& value)
{
    m_Nonce = value;
    m_NonceIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::nonceIsSet() const
{
    return m_NonceIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetNonce()
{
    m_NonceIsSet = false;
}
int32_t SUSHISWAP_V3_ETHEREUM_SwapDTO::getLogIndex() const
{
    return m_Log_index;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setLogIndex(int32_t value)
{
    m_Log_index = value;
    m_Log_indexIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::logIndexIsSet() const
{
    return m_Log_indexIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetLog_index()
{
    m_Log_indexIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_SwapDTO::getGasLimit() const
{
    return m_Gas_limit;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setGasLimit(const utility::string_t& value)
{
    m_Gas_limit = value;
    m_Gas_limitIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::gasLimitIsSet() const
{
    return m_Gas_limitIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetGas_limit()
{
    m_Gas_limitIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_SwapDTO::getGasUsed() const
{
    return m_Gas_used;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setGasUsed(const utility::string_t& value)
{
    m_Gas_used = value;
    m_Gas_usedIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::gasUsedIsSet() const
{
    return m_Gas_usedIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetGas_used()
{
    m_Gas_usedIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_SwapDTO::getGasPrice() const
{
    return m_Gas_price;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setGasPrice(const utility::string_t& value)
{
    m_Gas_price = value;
    m_Gas_priceIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::gasPriceIsSet() const
{
    return m_Gas_priceIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetGas_price()
{
    m_Gas_priceIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_SwapDTO::getProtocol() const
{
    return m_Protocol;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setProtocol(const utility::string_t& value)
{
    m_Protocol = value;
    m_ProtocolIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::protocolIsSet() const
{
    return m_ProtocolIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetProtocol()
{
    m_ProtocolIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_SwapDTO::getAccount() const
{
    return m_Account;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setAccount(const utility::string_t& value)
{
    m_Account = value;
    m_AccountIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::accountIsSet() const
{
    return m_AccountIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetAccount()
{
    m_AccountIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_SwapDTO::getPool() const
{
    return m_Pool;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setPool(const utility::string_t& value)
{
    m_Pool = value;
    m_PoolIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::poolIsSet() const
{
    return m_PoolIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetPool()
{
    m_PoolIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_SwapDTO::getTimestamp() const
{
    return m_Timestamp;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setTimestamp(const utility::string_t& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_SwapDTO::getTick() const
{
    return m_Tick;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setTick(const utility::string_t& value)
{
    m_Tick = value;
    m_TickIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::tickIsSet() const
{
    return m_TickIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetTick()
{
    m_TickIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_SwapDTO::getTokenIn() const
{
    return m_Token_in;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setTokenIn(const utility::string_t& value)
{
    m_Token_in = value;
    m_Token_inIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::tokenInIsSet() const
{
    return m_Token_inIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetToken_in()
{
    m_Token_inIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_SwapDTO::getAmountIn() const
{
    return m_Amount_in;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setAmountIn(const utility::string_t& value)
{
    m_Amount_in = value;
    m_Amount_inIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::amountInIsSet() const
{
    return m_Amount_inIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetAmount_in()
{
    m_Amount_inIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_SwapDTO::getAmountInUsd() const
{
    return m_Amount_in_usd;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setAmountInUsd(const utility::string_t& value)
{
    m_Amount_in_usd = value;
    m_Amount_in_usdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::amountInUsdIsSet() const
{
    return m_Amount_in_usdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetAmount_in_usd()
{
    m_Amount_in_usdIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_SwapDTO::getTokenOut() const
{
    return m_Token_out;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setTokenOut(const utility::string_t& value)
{
    m_Token_out = value;
    m_Token_outIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::tokenOutIsSet() const
{
    return m_Token_outIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetToken_out()
{
    m_Token_outIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_SwapDTO::getAmountOut() const
{
    return m_Amount_out;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setAmountOut(const utility::string_t& value)
{
    m_Amount_out = value;
    m_Amount_outIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::amountOutIsSet() const
{
    return m_Amount_outIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetAmount_out()
{
    m_Amount_outIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_SwapDTO::getAmountOutUsd() const
{
    return m_Amount_out_usd;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setAmountOutUsd(const utility::string_t& value)
{
    m_Amount_out_usd = value;
    m_Amount_out_usdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::amountOutUsdIsSet() const
{
    return m_Amount_out_usdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetAmount_out_usd()
{
    m_Amount_out_usdIsSet = false;
}
std::vector<utility::string_t>& SUSHISWAP_V3_ETHEREUM_SwapDTO::getReserveAmounts()
{
    return m_Reserve_amounts;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setReserveAmounts(const std::vector<utility::string_t>& value)
{
    m_Reserve_amounts = value;
    m_Reserve_amountsIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::reserveAmountsIsSet() const
{
    return m_Reserve_amountsIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetReserve_amounts()
{
    m_Reserve_amountsIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_SwapDTO::getPoolId() const
{
    return m_Pool_id;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setPoolId(const utility::string_t& value)
{
    m_Pool_id = value;
    m_Pool_idIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::poolIdIsSet() const
{
    return m_Pool_idIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetPool_id()
{
    m_Pool_idIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_SwapDTO::getTransactionId() const
{
    return m_Transaction_id;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setTransactionId(const utility::string_t& value)
{
    m_Transaction_id = value;
    m_Transaction_idIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::transactionIdIsSet() const
{
    return m_Transaction_idIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetTransaction_id()
{
    m_Transaction_idIsSet = false;
}
double SUSHISWAP_V3_ETHEREUM_SwapDTO::getEvaluatedPrice() const
{
    return m_Evaluated_price;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setEvaluatedPrice(double value)
{
    m_Evaluated_price = value;
    m_Evaluated_priceIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::evaluatedPriceIsSet() const
{
    return m_Evaluated_priceIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetEvaluated_price()
{
    m_Evaluated_priceIsSet = false;
}
double SUSHISWAP_V3_ETHEREUM_SwapDTO::getEvaluatedAmount() const
{
    return m_Evaluated_amount;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setEvaluatedAmount(double value)
{
    m_Evaluated_amount = value;
    m_Evaluated_amountIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::evaluatedAmountIsSet() const
{
    return m_Evaluated_amountIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetEvaluated_amount()
{
    m_Evaluated_amountIsSet = false;
}
std::shared_ptr<Transactions_ETradeAggressiveSide> SUSHISWAP_V3_ETHEREUM_SwapDTO::getEvaluatedAggressor() const
{
    return m_Evaluated_aggressor;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::setEvaluatedAggressor(const std::shared_ptr<Transactions_ETradeAggressiveSide>& value)
{
    m_Evaluated_aggressor = value;
    m_Evaluated_aggressorIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_SwapDTO::evaluatedAggressorIsSet() const
{
    return m_Evaluated_aggressorIsSet;
}

void SUSHISWAP_V3_ETHEREUM_SwapDTO::unsetEvaluated_aggressor()
{
    m_Evaluated_aggressorIsSet = false;
}
}
}
}
}


