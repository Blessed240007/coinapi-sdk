/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Hour = 0;
    m_HourIsSet = false;
    m_Protocol = utility::conversions::to_string_t("");
    m_ProtocolIsSet = false;
    m_Pool = utility::conversions::to_string_t("");
    m_PoolIsSet = false;
    m_Tick = utility::conversions::to_string_t("");
    m_TickIsSet = false;
    m_Total_value_locked_usd = utility::conversions::to_string_t("");
    m_Total_value_locked_usdIsSet = false;
    m_Total_liquidity = utility::conversions::to_string_t("");
    m_Total_liquidityIsSet = false;
    m_Total_liquidity_usd = utility::conversions::to_string_t("");
    m_Total_liquidity_usdIsSet = false;
    m_Active_liquidity = utility::conversions::to_string_t("");
    m_Active_liquidityIsSet = false;
    m_Active_liquidity_usd = utility::conversions::to_string_t("");
    m_Active_liquidity_usdIsSet = false;
    m_Uncollected_protocol_side_token_amountsIsSet = false;
    m_Uncollected_protocol_side_values_usdIsSet = false;
    m_Uncollected_supply_side_token_amountsIsSet = false;
    m_Uncollected_supply_side_values_usdIsSet = false;
    m_Cumulative_supply_side_revenue_usd = utility::conversions::to_string_t("");
    m_Cumulative_supply_side_revenue_usdIsSet = false;
    m_Hourly_supply_side_revenue_usd = utility::conversions::to_string_t("");
    m_Hourly_supply_side_revenue_usdIsSet = false;
    m_Cumulative_protocol_side_revenue_usd = utility::conversions::to_string_t("");
    m_Cumulative_protocol_side_revenue_usdIsSet = false;
    m_Hourly_protocol_side_revenue_usd = utility::conversions::to_string_t("");
    m_Hourly_protocol_side_revenue_usdIsSet = false;
    m_Cumulative_total_revenue_usd = utility::conversions::to_string_t("");
    m_Cumulative_total_revenue_usdIsSet = false;
    m_Hourly_total_revenue_usd = utility::conversions::to_string_t("");
    m_Hourly_total_revenue_usdIsSet = false;
    m_Cumulative_volume_usd = utility::conversions::to_string_t("");
    m_Cumulative_volume_usdIsSet = false;
    m_Hourly_volume_usd = utility::conversions::to_string_t("");
    m_Hourly_volume_usdIsSet = false;
    m_Cumulative_volume_by_token_amountIsSet = false;
    m_Hourly_volume_by_token_amountIsSet = false;
    m_Cumulative_volume_by_token_usdIsSet = false;
    m_Hourly_volume_by_token_usdIsSet = false;
    m_Input_token_balancesIsSet = false;
    m_Input_token_balances_usdIsSet = false;
    m_Input_token_weightsIsSet = false;
    m_Staked_output_token_amount = utility::conversions::to_string_t("");
    m_Staked_output_token_amountIsSet = false;
    m_Reward_token_emissions_amountIsSet = false;
    m_Reward_token_emissions_usdIsSet = false;
    m_Cumulative_deposit_count = 0;
    m_Cumulative_deposit_countIsSet = false;
    m_Hourly_deposit_count = 0;
    m_Hourly_deposit_countIsSet = false;
    m_Cumulative_withdraw_count = 0;
    m_Cumulative_withdraw_countIsSet = false;
    m_Hourly_withdraw_count = 0;
    m_Hourly_withdraw_countIsSet = false;
    m_Cumulative_swap_count = 0;
    m_Cumulative_swap_countIsSet = false;
    m_Hourly_swap_count = 0;
    m_Hourly_swap_countIsSet = false;
    m_Position_count = 0;
    m_Position_countIsSet = false;
    m_Open_position_count = 0;
    m_Open_position_countIsSet = false;
    m_Closed_position_count = 0;
    m_Closed_position_countIsSet = false;
    m_Timestamp = utility::conversions::to_string_t("");
    m_TimestampIsSet = false;
}

PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::~PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO()
{
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::validate()
{
    // TODO: implement validation
}

web::json::value PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_HourIsSet)
    {
        val[utility::conversions::to_string_t(U("hour"))] = ModelBase::toJson(m_Hour);
    }
    if(m_ProtocolIsSet)
    {
        val[utility::conversions::to_string_t(U("protocol"))] = ModelBase::toJson(m_Protocol);
    }
    if(m_PoolIsSet)
    {
        val[utility::conversions::to_string_t(U("pool"))] = ModelBase::toJson(m_Pool);
    }
    if(m_TickIsSet)
    {
        val[utility::conversions::to_string_t(U("tick"))] = ModelBase::toJson(m_Tick);
    }
    if(m_Total_value_locked_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("total_value_locked_usd"))] = ModelBase::toJson(m_Total_value_locked_usd);
    }
    if(m_Total_liquidityIsSet)
    {
        val[utility::conversions::to_string_t(U("total_liquidity"))] = ModelBase::toJson(m_Total_liquidity);
    }
    if(m_Total_liquidity_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("total_liquidity_usd"))] = ModelBase::toJson(m_Total_liquidity_usd);
    }
    if(m_Active_liquidityIsSet)
    {
        val[utility::conversions::to_string_t(U("active_liquidity"))] = ModelBase::toJson(m_Active_liquidity);
    }
    if(m_Active_liquidity_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("active_liquidity_usd"))] = ModelBase::toJson(m_Active_liquidity_usd);
    }
    if(m_Uncollected_protocol_side_token_amountsIsSet)
    {
        val[utility::conversions::to_string_t(U("uncollected_protocol_side_token_amounts"))] = ModelBase::toJson(m_Uncollected_protocol_side_token_amounts);
    }
    if(m_Uncollected_protocol_side_values_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("uncollected_protocol_side_values_usd"))] = ModelBase::toJson(m_Uncollected_protocol_side_values_usd);
    }
    if(m_Uncollected_supply_side_token_amountsIsSet)
    {
        val[utility::conversions::to_string_t(U("uncollected_supply_side_token_amounts"))] = ModelBase::toJson(m_Uncollected_supply_side_token_amounts);
    }
    if(m_Uncollected_supply_side_values_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("uncollected_supply_side_values_usd"))] = ModelBase::toJson(m_Uncollected_supply_side_values_usd);
    }
    if(m_Cumulative_supply_side_revenue_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_supply_side_revenue_usd"))] = ModelBase::toJson(m_Cumulative_supply_side_revenue_usd);
    }
    if(m_Hourly_supply_side_revenue_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("hourly_supply_side_revenue_usd"))] = ModelBase::toJson(m_Hourly_supply_side_revenue_usd);
    }
    if(m_Cumulative_protocol_side_revenue_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_protocol_side_revenue_usd"))] = ModelBase::toJson(m_Cumulative_protocol_side_revenue_usd);
    }
    if(m_Hourly_protocol_side_revenue_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("hourly_protocol_side_revenue_usd"))] = ModelBase::toJson(m_Hourly_protocol_side_revenue_usd);
    }
    if(m_Cumulative_total_revenue_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_total_revenue_usd"))] = ModelBase::toJson(m_Cumulative_total_revenue_usd);
    }
    if(m_Hourly_total_revenue_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("hourly_total_revenue_usd"))] = ModelBase::toJson(m_Hourly_total_revenue_usd);
    }
    if(m_Cumulative_volume_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_volume_usd"))] = ModelBase::toJson(m_Cumulative_volume_usd);
    }
    if(m_Hourly_volume_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("hourly_volume_usd"))] = ModelBase::toJson(m_Hourly_volume_usd);
    }
    if(m_Cumulative_volume_by_token_amountIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_volume_by_token_amount"))] = ModelBase::toJson(m_Cumulative_volume_by_token_amount);
    }
    if(m_Hourly_volume_by_token_amountIsSet)
    {
        val[utility::conversions::to_string_t(U("hourly_volume_by_token_amount"))] = ModelBase::toJson(m_Hourly_volume_by_token_amount);
    }
    if(m_Cumulative_volume_by_token_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_volume_by_token_usd"))] = ModelBase::toJson(m_Cumulative_volume_by_token_usd);
    }
    if(m_Hourly_volume_by_token_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("hourly_volume_by_token_usd"))] = ModelBase::toJson(m_Hourly_volume_by_token_usd);
    }
    if(m_Input_token_balancesIsSet)
    {
        val[utility::conversions::to_string_t(U("input_token_balances"))] = ModelBase::toJson(m_Input_token_balances);
    }
    if(m_Input_token_balances_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("input_token_balances_usd"))] = ModelBase::toJson(m_Input_token_balances_usd);
    }
    if(m_Input_token_weightsIsSet)
    {
        val[utility::conversions::to_string_t(U("input_token_weights"))] = ModelBase::toJson(m_Input_token_weights);
    }
    if(m_Staked_output_token_amountIsSet)
    {
        val[utility::conversions::to_string_t(U("staked_output_token_amount"))] = ModelBase::toJson(m_Staked_output_token_amount);
    }
    if(m_Reward_token_emissions_amountIsSet)
    {
        val[utility::conversions::to_string_t(U("reward_token_emissions_amount"))] = ModelBase::toJson(m_Reward_token_emissions_amount);
    }
    if(m_Reward_token_emissions_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("reward_token_emissions_usd"))] = ModelBase::toJson(m_Reward_token_emissions_usd);
    }
    if(m_Cumulative_deposit_countIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_deposit_count"))] = ModelBase::toJson(m_Cumulative_deposit_count);
    }
    if(m_Hourly_deposit_countIsSet)
    {
        val[utility::conversions::to_string_t(U("hourly_deposit_count"))] = ModelBase::toJson(m_Hourly_deposit_count);
    }
    if(m_Cumulative_withdraw_countIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_withdraw_count"))] = ModelBase::toJson(m_Cumulative_withdraw_count);
    }
    if(m_Hourly_withdraw_countIsSet)
    {
        val[utility::conversions::to_string_t(U("hourly_withdraw_count"))] = ModelBase::toJson(m_Hourly_withdraw_count);
    }
    if(m_Cumulative_swap_countIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_swap_count"))] = ModelBase::toJson(m_Cumulative_swap_count);
    }
    if(m_Hourly_swap_countIsSet)
    {
        val[utility::conversions::to_string_t(U("hourly_swap_count"))] = ModelBase::toJson(m_Hourly_swap_count);
    }
    if(m_Position_countIsSet)
    {
        val[utility::conversions::to_string_t(U("position_count"))] = ModelBase::toJson(m_Position_count);
    }
    if(m_Open_position_countIsSet)
    {
        val[utility::conversions::to_string_t(U("open_position_count"))] = ModelBase::toJson(m_Open_position_count);
    }
    if(m_Closed_position_countIsSet)
    {
        val[utility::conversions::to_string_t(U("closed_position_count"))] = ModelBase::toJson(m_Closed_position_count);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }

    return val;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hour"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hour")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHour;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHour);
            setHour(refVal_setHour);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("protocol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("protocol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProtocol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProtocol);
            setProtocol(refVal_setProtocol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pool"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pool")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPool;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPool);
            setPool(refVal_setPool);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tick"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tick")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTick;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTick);
            setTick(refVal_setTick);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_value_locked_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_value_locked_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalValueLockedUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalValueLockedUsd);
            setTotalValueLockedUsd(refVal_setTotalValueLockedUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_liquidity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_liquidity")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalLiquidity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalLiquidity);
            setTotalLiquidity(refVal_setTotalLiquidity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_liquidity_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_liquidity_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalLiquidityUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalLiquidityUsd);
            setTotalLiquidityUsd(refVal_setTotalLiquidityUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("active_liquidity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("active_liquidity")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setActiveLiquidity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActiveLiquidity);
            setActiveLiquidity(refVal_setActiveLiquidity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("active_liquidity_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("active_liquidity_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setActiveLiquidityUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActiveLiquidityUsd);
            setActiveLiquidityUsd(refVal_setActiveLiquidityUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uncollected_protocol_side_token_amounts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uncollected_protocol_side_token_amounts")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setUncollectedProtocolSideTokenAmounts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUncollectedProtocolSideTokenAmounts);
            setUncollectedProtocolSideTokenAmounts(refVal_setUncollectedProtocolSideTokenAmounts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uncollected_protocol_side_values_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uncollected_protocol_side_values_usd")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setUncollectedProtocolSideValuesUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUncollectedProtocolSideValuesUsd);
            setUncollectedProtocolSideValuesUsd(refVal_setUncollectedProtocolSideValuesUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uncollected_supply_side_token_amounts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uncollected_supply_side_token_amounts")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setUncollectedSupplySideTokenAmounts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUncollectedSupplySideTokenAmounts);
            setUncollectedSupplySideTokenAmounts(refVal_setUncollectedSupplySideTokenAmounts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uncollected_supply_side_values_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uncollected_supply_side_values_usd")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setUncollectedSupplySideValuesUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUncollectedSupplySideValuesUsd);
            setUncollectedSupplySideValuesUsd(refVal_setUncollectedSupplySideValuesUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_supply_side_revenue_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_supply_side_revenue_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCumulativeSupplySideRevenueUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeSupplySideRevenueUsd);
            setCumulativeSupplySideRevenueUsd(refVal_setCumulativeSupplySideRevenueUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hourly_supply_side_revenue_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly_supply_side_revenue_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHourlySupplySideRevenueUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourlySupplySideRevenueUsd);
            setHourlySupplySideRevenueUsd(refVal_setHourlySupplySideRevenueUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_protocol_side_revenue_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_protocol_side_revenue_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCumulativeProtocolSideRevenueUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeProtocolSideRevenueUsd);
            setCumulativeProtocolSideRevenueUsd(refVal_setCumulativeProtocolSideRevenueUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hourly_protocol_side_revenue_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly_protocol_side_revenue_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHourlyProtocolSideRevenueUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourlyProtocolSideRevenueUsd);
            setHourlyProtocolSideRevenueUsd(refVal_setHourlyProtocolSideRevenueUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_total_revenue_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_total_revenue_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCumulativeTotalRevenueUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeTotalRevenueUsd);
            setCumulativeTotalRevenueUsd(refVal_setCumulativeTotalRevenueUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hourly_total_revenue_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly_total_revenue_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHourlyTotalRevenueUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourlyTotalRevenueUsd);
            setHourlyTotalRevenueUsd(refVal_setHourlyTotalRevenueUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_volume_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_volume_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCumulativeVolumeUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeVolumeUsd);
            setCumulativeVolumeUsd(refVal_setCumulativeVolumeUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hourly_volume_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly_volume_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHourlyVolumeUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourlyVolumeUsd);
            setHourlyVolumeUsd(refVal_setHourlyVolumeUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_volume_by_token_amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_volume_by_token_amount")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCumulativeVolumeByTokenAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeVolumeByTokenAmount);
            setCumulativeVolumeByTokenAmount(refVal_setCumulativeVolumeByTokenAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hourly_volume_by_token_amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly_volume_by_token_amount")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setHourlyVolumeByTokenAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourlyVolumeByTokenAmount);
            setHourlyVolumeByTokenAmount(refVal_setHourlyVolumeByTokenAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_volume_by_token_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_volume_by_token_usd")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCumulativeVolumeByTokenUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeVolumeByTokenUsd);
            setCumulativeVolumeByTokenUsd(refVal_setCumulativeVolumeByTokenUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hourly_volume_by_token_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly_volume_by_token_usd")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setHourlyVolumeByTokenUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourlyVolumeByTokenUsd);
            setHourlyVolumeByTokenUsd(refVal_setHourlyVolumeByTokenUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("input_token_balances"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("input_token_balances")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setInputTokenBalances;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInputTokenBalances);
            setInputTokenBalances(refVal_setInputTokenBalances);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("input_token_balances_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("input_token_balances_usd")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setInputTokenBalancesUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInputTokenBalancesUsd);
            setInputTokenBalancesUsd(refVal_setInputTokenBalancesUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("input_token_weights"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("input_token_weights")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setInputTokenWeights;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInputTokenWeights);
            setInputTokenWeights(refVal_setInputTokenWeights);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("staked_output_token_amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("staked_output_token_amount")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStakedOutputTokenAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStakedOutputTokenAmount);
            setStakedOutputTokenAmount(refVal_setStakedOutputTokenAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reward_token_emissions_amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reward_token_emissions_amount")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setRewardTokenEmissionsAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRewardTokenEmissionsAmount);
            setRewardTokenEmissionsAmount(refVal_setRewardTokenEmissionsAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reward_token_emissions_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reward_token_emissions_usd")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setRewardTokenEmissionsUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRewardTokenEmissionsUsd);
            setRewardTokenEmissionsUsd(refVal_setRewardTokenEmissionsUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_deposit_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_deposit_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCumulativeDepositCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeDepositCount);
            setCumulativeDepositCount(refVal_setCumulativeDepositCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hourly_deposit_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly_deposit_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHourlyDepositCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourlyDepositCount);
            setHourlyDepositCount(refVal_setHourlyDepositCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_withdraw_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_withdraw_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCumulativeWithdrawCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeWithdrawCount);
            setCumulativeWithdrawCount(refVal_setCumulativeWithdrawCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hourly_withdraw_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly_withdraw_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHourlyWithdrawCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourlyWithdrawCount);
            setHourlyWithdrawCount(refVal_setHourlyWithdrawCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_swap_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_swap_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCumulativeSwapCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeSwapCount);
            setCumulativeSwapCount(refVal_setCumulativeSwapCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hourly_swap_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly_swap_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHourlySwapCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourlySwapCount);
            setHourlySwapCount(refVal_setHourlySwapCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("position_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("position_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPositionCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPositionCount);
            setPositionCount(refVal_setPositionCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("open_position_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("open_position_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setOpenPositionCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOpenPositionCount);
            setOpenPositionCount(refVal_setOpenPositionCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("closed_position_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("closed_position_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setClosedPositionCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClosedPositionCount);
            setClosedPositionCount(refVal_setClosedPositionCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
        }
    }
    return ok;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_HourIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hour")), m_Hour));
    }
    if(m_ProtocolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("protocol")), m_Protocol));
    }
    if(m_PoolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pool")), m_Pool));
    }
    if(m_TickIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tick")), m_Tick));
    }
    if(m_Total_value_locked_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_value_locked_usd")), m_Total_value_locked_usd));
    }
    if(m_Total_liquidityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_liquidity")), m_Total_liquidity));
    }
    if(m_Total_liquidity_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_liquidity_usd")), m_Total_liquidity_usd));
    }
    if(m_Active_liquidityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("active_liquidity")), m_Active_liquidity));
    }
    if(m_Active_liquidity_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("active_liquidity_usd")), m_Active_liquidity_usd));
    }
    if(m_Uncollected_protocol_side_token_amountsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uncollected_protocol_side_token_amounts")), m_Uncollected_protocol_side_token_amounts));
    }
    if(m_Uncollected_protocol_side_values_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uncollected_protocol_side_values_usd")), m_Uncollected_protocol_side_values_usd));
    }
    if(m_Uncollected_supply_side_token_amountsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uncollected_supply_side_token_amounts")), m_Uncollected_supply_side_token_amounts));
    }
    if(m_Uncollected_supply_side_values_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uncollected_supply_side_values_usd")), m_Uncollected_supply_side_values_usd));
    }
    if(m_Cumulative_supply_side_revenue_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_supply_side_revenue_usd")), m_Cumulative_supply_side_revenue_usd));
    }
    if(m_Hourly_supply_side_revenue_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly_supply_side_revenue_usd")), m_Hourly_supply_side_revenue_usd));
    }
    if(m_Cumulative_protocol_side_revenue_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_protocol_side_revenue_usd")), m_Cumulative_protocol_side_revenue_usd));
    }
    if(m_Hourly_protocol_side_revenue_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly_protocol_side_revenue_usd")), m_Hourly_protocol_side_revenue_usd));
    }
    if(m_Cumulative_total_revenue_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_total_revenue_usd")), m_Cumulative_total_revenue_usd));
    }
    if(m_Hourly_total_revenue_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly_total_revenue_usd")), m_Hourly_total_revenue_usd));
    }
    if(m_Cumulative_volume_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_volume_usd")), m_Cumulative_volume_usd));
    }
    if(m_Hourly_volume_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly_volume_usd")), m_Hourly_volume_usd));
    }
    if(m_Cumulative_volume_by_token_amountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_volume_by_token_amount")), m_Cumulative_volume_by_token_amount));
    }
    if(m_Hourly_volume_by_token_amountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly_volume_by_token_amount")), m_Hourly_volume_by_token_amount));
    }
    if(m_Cumulative_volume_by_token_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_volume_by_token_usd")), m_Cumulative_volume_by_token_usd));
    }
    if(m_Hourly_volume_by_token_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly_volume_by_token_usd")), m_Hourly_volume_by_token_usd));
    }
    if(m_Input_token_balancesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("input_token_balances")), m_Input_token_balances));
    }
    if(m_Input_token_balances_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("input_token_balances_usd")), m_Input_token_balances_usd));
    }
    if(m_Input_token_weightsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("input_token_weights")), m_Input_token_weights));
    }
    if(m_Staked_output_token_amountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("staked_output_token_amount")), m_Staked_output_token_amount));
    }
    if(m_Reward_token_emissions_amountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reward_token_emissions_amount")), m_Reward_token_emissions_amount));
    }
    if(m_Reward_token_emissions_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reward_token_emissions_usd")), m_Reward_token_emissions_usd));
    }
    if(m_Cumulative_deposit_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_deposit_count")), m_Cumulative_deposit_count));
    }
    if(m_Hourly_deposit_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly_deposit_count")), m_Hourly_deposit_count));
    }
    if(m_Cumulative_withdraw_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_withdraw_count")), m_Cumulative_withdraw_count));
    }
    if(m_Hourly_withdraw_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly_withdraw_count")), m_Hourly_withdraw_count));
    }
    if(m_Cumulative_swap_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_swap_count")), m_Cumulative_swap_count));
    }
    if(m_Hourly_swap_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly_swap_count")), m_Hourly_swap_count));
    }
    if(m_Position_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("position_count")), m_Position_count));
    }
    if(m_Open_position_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("open_position_count")), m_Open_position_count));
    }
    if(m_Closed_position_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("closed_position_count")), m_Closed_position_count));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hour"))))
    {
        int32_t refVal_setHour;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hour"))), refVal_setHour );
        setHour(refVal_setHour);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("protocol"))))
    {
        utility::string_t refVal_setProtocol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("protocol"))), refVal_setProtocol );
        setProtocol(refVal_setProtocol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pool"))))
    {
        utility::string_t refVal_setPool;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pool"))), refVal_setPool );
        setPool(refVal_setPool);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tick"))))
    {
        utility::string_t refVal_setTick;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tick"))), refVal_setTick );
        setTick(refVal_setTick);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_value_locked_usd"))))
    {
        utility::string_t refVal_setTotalValueLockedUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_value_locked_usd"))), refVal_setTotalValueLockedUsd );
        setTotalValueLockedUsd(refVal_setTotalValueLockedUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_liquidity"))))
    {
        utility::string_t refVal_setTotalLiquidity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_liquidity"))), refVal_setTotalLiquidity );
        setTotalLiquidity(refVal_setTotalLiquidity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_liquidity_usd"))))
    {
        utility::string_t refVal_setTotalLiquidityUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_liquidity_usd"))), refVal_setTotalLiquidityUsd );
        setTotalLiquidityUsd(refVal_setTotalLiquidityUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("active_liquidity"))))
    {
        utility::string_t refVal_setActiveLiquidity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("active_liquidity"))), refVal_setActiveLiquidity );
        setActiveLiquidity(refVal_setActiveLiquidity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("active_liquidity_usd"))))
    {
        utility::string_t refVal_setActiveLiquidityUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("active_liquidity_usd"))), refVal_setActiveLiquidityUsd );
        setActiveLiquidityUsd(refVal_setActiveLiquidityUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uncollected_protocol_side_token_amounts"))))
    {
        std::vector<utility::string_t> refVal_setUncollectedProtocolSideTokenAmounts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uncollected_protocol_side_token_amounts"))), refVal_setUncollectedProtocolSideTokenAmounts );
        setUncollectedProtocolSideTokenAmounts(refVal_setUncollectedProtocolSideTokenAmounts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uncollected_protocol_side_values_usd"))))
    {
        std::vector<utility::string_t> refVal_setUncollectedProtocolSideValuesUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uncollected_protocol_side_values_usd"))), refVal_setUncollectedProtocolSideValuesUsd );
        setUncollectedProtocolSideValuesUsd(refVal_setUncollectedProtocolSideValuesUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uncollected_supply_side_token_amounts"))))
    {
        std::vector<utility::string_t> refVal_setUncollectedSupplySideTokenAmounts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uncollected_supply_side_token_amounts"))), refVal_setUncollectedSupplySideTokenAmounts );
        setUncollectedSupplySideTokenAmounts(refVal_setUncollectedSupplySideTokenAmounts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uncollected_supply_side_values_usd"))))
    {
        std::vector<utility::string_t> refVal_setUncollectedSupplySideValuesUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uncollected_supply_side_values_usd"))), refVal_setUncollectedSupplySideValuesUsd );
        setUncollectedSupplySideValuesUsd(refVal_setUncollectedSupplySideValuesUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_supply_side_revenue_usd"))))
    {
        utility::string_t refVal_setCumulativeSupplySideRevenueUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_supply_side_revenue_usd"))), refVal_setCumulativeSupplySideRevenueUsd );
        setCumulativeSupplySideRevenueUsd(refVal_setCumulativeSupplySideRevenueUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly_supply_side_revenue_usd"))))
    {
        utility::string_t refVal_setHourlySupplySideRevenueUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly_supply_side_revenue_usd"))), refVal_setHourlySupplySideRevenueUsd );
        setHourlySupplySideRevenueUsd(refVal_setHourlySupplySideRevenueUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_protocol_side_revenue_usd"))))
    {
        utility::string_t refVal_setCumulativeProtocolSideRevenueUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_protocol_side_revenue_usd"))), refVal_setCumulativeProtocolSideRevenueUsd );
        setCumulativeProtocolSideRevenueUsd(refVal_setCumulativeProtocolSideRevenueUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly_protocol_side_revenue_usd"))))
    {
        utility::string_t refVal_setHourlyProtocolSideRevenueUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly_protocol_side_revenue_usd"))), refVal_setHourlyProtocolSideRevenueUsd );
        setHourlyProtocolSideRevenueUsd(refVal_setHourlyProtocolSideRevenueUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_total_revenue_usd"))))
    {
        utility::string_t refVal_setCumulativeTotalRevenueUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_total_revenue_usd"))), refVal_setCumulativeTotalRevenueUsd );
        setCumulativeTotalRevenueUsd(refVal_setCumulativeTotalRevenueUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly_total_revenue_usd"))))
    {
        utility::string_t refVal_setHourlyTotalRevenueUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly_total_revenue_usd"))), refVal_setHourlyTotalRevenueUsd );
        setHourlyTotalRevenueUsd(refVal_setHourlyTotalRevenueUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_volume_usd"))))
    {
        utility::string_t refVal_setCumulativeVolumeUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_volume_usd"))), refVal_setCumulativeVolumeUsd );
        setCumulativeVolumeUsd(refVal_setCumulativeVolumeUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly_volume_usd"))))
    {
        utility::string_t refVal_setHourlyVolumeUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly_volume_usd"))), refVal_setHourlyVolumeUsd );
        setHourlyVolumeUsd(refVal_setHourlyVolumeUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_volume_by_token_amount"))))
    {
        std::vector<utility::string_t> refVal_setCumulativeVolumeByTokenAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_volume_by_token_amount"))), refVal_setCumulativeVolumeByTokenAmount );
        setCumulativeVolumeByTokenAmount(refVal_setCumulativeVolumeByTokenAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly_volume_by_token_amount"))))
    {
        std::vector<utility::string_t> refVal_setHourlyVolumeByTokenAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly_volume_by_token_amount"))), refVal_setHourlyVolumeByTokenAmount );
        setHourlyVolumeByTokenAmount(refVal_setHourlyVolumeByTokenAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_volume_by_token_usd"))))
    {
        std::vector<utility::string_t> refVal_setCumulativeVolumeByTokenUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_volume_by_token_usd"))), refVal_setCumulativeVolumeByTokenUsd );
        setCumulativeVolumeByTokenUsd(refVal_setCumulativeVolumeByTokenUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly_volume_by_token_usd"))))
    {
        std::vector<utility::string_t> refVal_setHourlyVolumeByTokenUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly_volume_by_token_usd"))), refVal_setHourlyVolumeByTokenUsd );
        setHourlyVolumeByTokenUsd(refVal_setHourlyVolumeByTokenUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("input_token_balances"))))
    {
        std::vector<utility::string_t> refVal_setInputTokenBalances;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("input_token_balances"))), refVal_setInputTokenBalances );
        setInputTokenBalances(refVal_setInputTokenBalances);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("input_token_balances_usd"))))
    {
        std::vector<utility::string_t> refVal_setInputTokenBalancesUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("input_token_balances_usd"))), refVal_setInputTokenBalancesUsd );
        setInputTokenBalancesUsd(refVal_setInputTokenBalancesUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("input_token_weights"))))
    {
        std::vector<utility::string_t> refVal_setInputTokenWeights;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("input_token_weights"))), refVal_setInputTokenWeights );
        setInputTokenWeights(refVal_setInputTokenWeights);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("staked_output_token_amount"))))
    {
        utility::string_t refVal_setStakedOutputTokenAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("staked_output_token_amount"))), refVal_setStakedOutputTokenAmount );
        setStakedOutputTokenAmount(refVal_setStakedOutputTokenAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reward_token_emissions_amount"))))
    {
        std::vector<utility::string_t> refVal_setRewardTokenEmissionsAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reward_token_emissions_amount"))), refVal_setRewardTokenEmissionsAmount );
        setRewardTokenEmissionsAmount(refVal_setRewardTokenEmissionsAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reward_token_emissions_usd"))))
    {
        std::vector<utility::string_t> refVal_setRewardTokenEmissionsUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reward_token_emissions_usd"))), refVal_setRewardTokenEmissionsUsd );
        setRewardTokenEmissionsUsd(refVal_setRewardTokenEmissionsUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_deposit_count"))))
    {
        int32_t refVal_setCumulativeDepositCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_deposit_count"))), refVal_setCumulativeDepositCount );
        setCumulativeDepositCount(refVal_setCumulativeDepositCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly_deposit_count"))))
    {
        int32_t refVal_setHourlyDepositCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly_deposit_count"))), refVal_setHourlyDepositCount );
        setHourlyDepositCount(refVal_setHourlyDepositCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_withdraw_count"))))
    {
        int32_t refVal_setCumulativeWithdrawCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_withdraw_count"))), refVal_setCumulativeWithdrawCount );
        setCumulativeWithdrawCount(refVal_setCumulativeWithdrawCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly_withdraw_count"))))
    {
        int32_t refVal_setHourlyWithdrawCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly_withdraw_count"))), refVal_setHourlyWithdrawCount );
        setHourlyWithdrawCount(refVal_setHourlyWithdrawCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_swap_count"))))
    {
        int32_t refVal_setCumulativeSwapCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_swap_count"))), refVal_setCumulativeSwapCount );
        setCumulativeSwapCount(refVal_setCumulativeSwapCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly_swap_count"))))
    {
        int32_t refVal_setHourlySwapCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly_swap_count"))), refVal_setHourlySwapCount );
        setHourlySwapCount(refVal_setHourlySwapCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("position_count"))))
    {
        int32_t refVal_setPositionCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("position_count"))), refVal_setPositionCount );
        setPositionCount(refVal_setPositionCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("open_position_count"))))
    {
        int32_t refVal_setOpenPositionCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("open_position_count"))), refVal_setOpenPositionCount );
        setOpenPositionCount(refVal_setOpenPositionCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("closed_position_count"))))
    {
        int32_t refVal_setClosedPositionCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("closed_position_count"))), refVal_setClosedPositionCount );
        setClosedPositionCount(refVal_setClosedPositionCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::string_t refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    return ok;
}

utility::datetime PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getEntryTime() const
{
    return m_Entry_time;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getRecvTime() const
{
    return m_Recv_time;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getBlockNumber() const
{
    return m_Block_number;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getId() const
{
    return m_Id;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::idIsSet() const
{
    return m_IdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetId()
{
    m_IdIsSet = false;
}
int32_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getHour() const
{
    return m_Hour;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setHour(int32_t value)
{
    m_Hour = value;
    m_HourIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::hourIsSet() const
{
    return m_HourIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetHour()
{
    m_HourIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getProtocol() const
{
    return m_Protocol;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setProtocol(const utility::string_t& value)
{
    m_Protocol = value;
    m_ProtocolIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::protocolIsSet() const
{
    return m_ProtocolIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetProtocol()
{
    m_ProtocolIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getPool() const
{
    return m_Pool;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setPool(const utility::string_t& value)
{
    m_Pool = value;
    m_PoolIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::poolIsSet() const
{
    return m_PoolIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetPool()
{
    m_PoolIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getTick() const
{
    return m_Tick;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setTick(const utility::string_t& value)
{
    m_Tick = value;
    m_TickIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::tickIsSet() const
{
    return m_TickIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetTick()
{
    m_TickIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getTotalValueLockedUsd() const
{
    return m_Total_value_locked_usd;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setTotalValueLockedUsd(const utility::string_t& value)
{
    m_Total_value_locked_usd = value;
    m_Total_value_locked_usdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::totalValueLockedUsdIsSet() const
{
    return m_Total_value_locked_usdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetTotal_value_locked_usd()
{
    m_Total_value_locked_usdIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getTotalLiquidity() const
{
    return m_Total_liquidity;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setTotalLiquidity(const utility::string_t& value)
{
    m_Total_liquidity = value;
    m_Total_liquidityIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::totalLiquidityIsSet() const
{
    return m_Total_liquidityIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetTotal_liquidity()
{
    m_Total_liquidityIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getTotalLiquidityUsd() const
{
    return m_Total_liquidity_usd;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setTotalLiquidityUsd(const utility::string_t& value)
{
    m_Total_liquidity_usd = value;
    m_Total_liquidity_usdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::totalLiquidityUsdIsSet() const
{
    return m_Total_liquidity_usdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetTotal_liquidity_usd()
{
    m_Total_liquidity_usdIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getActiveLiquidity() const
{
    return m_Active_liquidity;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setActiveLiquidity(const utility::string_t& value)
{
    m_Active_liquidity = value;
    m_Active_liquidityIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::activeLiquidityIsSet() const
{
    return m_Active_liquidityIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetActive_liquidity()
{
    m_Active_liquidityIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getActiveLiquidityUsd() const
{
    return m_Active_liquidity_usd;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setActiveLiquidityUsd(const utility::string_t& value)
{
    m_Active_liquidity_usd = value;
    m_Active_liquidity_usdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::activeLiquidityUsdIsSet() const
{
    return m_Active_liquidity_usdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetActive_liquidity_usd()
{
    m_Active_liquidity_usdIsSet = false;
}
std::vector<utility::string_t>& PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getUncollectedProtocolSideTokenAmounts()
{
    return m_Uncollected_protocol_side_token_amounts;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setUncollectedProtocolSideTokenAmounts(const std::vector<utility::string_t>& value)
{
    m_Uncollected_protocol_side_token_amounts = value;
    m_Uncollected_protocol_side_token_amountsIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::uncollectedProtocolSideTokenAmountsIsSet() const
{
    return m_Uncollected_protocol_side_token_amountsIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetUncollected_protocol_side_token_amounts()
{
    m_Uncollected_protocol_side_token_amountsIsSet = false;
}
std::vector<utility::string_t>& PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getUncollectedProtocolSideValuesUsd()
{
    return m_Uncollected_protocol_side_values_usd;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setUncollectedProtocolSideValuesUsd(const std::vector<utility::string_t>& value)
{
    m_Uncollected_protocol_side_values_usd = value;
    m_Uncollected_protocol_side_values_usdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::uncollectedProtocolSideValuesUsdIsSet() const
{
    return m_Uncollected_protocol_side_values_usdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetUncollected_protocol_side_values_usd()
{
    m_Uncollected_protocol_side_values_usdIsSet = false;
}
std::vector<utility::string_t>& PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getUncollectedSupplySideTokenAmounts()
{
    return m_Uncollected_supply_side_token_amounts;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setUncollectedSupplySideTokenAmounts(const std::vector<utility::string_t>& value)
{
    m_Uncollected_supply_side_token_amounts = value;
    m_Uncollected_supply_side_token_amountsIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::uncollectedSupplySideTokenAmountsIsSet() const
{
    return m_Uncollected_supply_side_token_amountsIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetUncollected_supply_side_token_amounts()
{
    m_Uncollected_supply_side_token_amountsIsSet = false;
}
std::vector<utility::string_t>& PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getUncollectedSupplySideValuesUsd()
{
    return m_Uncollected_supply_side_values_usd;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setUncollectedSupplySideValuesUsd(const std::vector<utility::string_t>& value)
{
    m_Uncollected_supply_side_values_usd = value;
    m_Uncollected_supply_side_values_usdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::uncollectedSupplySideValuesUsdIsSet() const
{
    return m_Uncollected_supply_side_values_usdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetUncollected_supply_side_values_usd()
{
    m_Uncollected_supply_side_values_usdIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getCumulativeSupplySideRevenueUsd() const
{
    return m_Cumulative_supply_side_revenue_usd;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setCumulativeSupplySideRevenueUsd(const utility::string_t& value)
{
    m_Cumulative_supply_side_revenue_usd = value;
    m_Cumulative_supply_side_revenue_usdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::cumulativeSupplySideRevenueUsdIsSet() const
{
    return m_Cumulative_supply_side_revenue_usdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetCumulative_supply_side_revenue_usd()
{
    m_Cumulative_supply_side_revenue_usdIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getHourlySupplySideRevenueUsd() const
{
    return m_Hourly_supply_side_revenue_usd;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setHourlySupplySideRevenueUsd(const utility::string_t& value)
{
    m_Hourly_supply_side_revenue_usd = value;
    m_Hourly_supply_side_revenue_usdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::hourlySupplySideRevenueUsdIsSet() const
{
    return m_Hourly_supply_side_revenue_usdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetHourly_supply_side_revenue_usd()
{
    m_Hourly_supply_side_revenue_usdIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getCumulativeProtocolSideRevenueUsd() const
{
    return m_Cumulative_protocol_side_revenue_usd;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setCumulativeProtocolSideRevenueUsd(const utility::string_t& value)
{
    m_Cumulative_protocol_side_revenue_usd = value;
    m_Cumulative_protocol_side_revenue_usdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::cumulativeProtocolSideRevenueUsdIsSet() const
{
    return m_Cumulative_protocol_side_revenue_usdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetCumulative_protocol_side_revenue_usd()
{
    m_Cumulative_protocol_side_revenue_usdIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getHourlyProtocolSideRevenueUsd() const
{
    return m_Hourly_protocol_side_revenue_usd;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setHourlyProtocolSideRevenueUsd(const utility::string_t& value)
{
    m_Hourly_protocol_side_revenue_usd = value;
    m_Hourly_protocol_side_revenue_usdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::hourlyProtocolSideRevenueUsdIsSet() const
{
    return m_Hourly_protocol_side_revenue_usdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetHourly_protocol_side_revenue_usd()
{
    m_Hourly_protocol_side_revenue_usdIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getCumulativeTotalRevenueUsd() const
{
    return m_Cumulative_total_revenue_usd;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setCumulativeTotalRevenueUsd(const utility::string_t& value)
{
    m_Cumulative_total_revenue_usd = value;
    m_Cumulative_total_revenue_usdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::cumulativeTotalRevenueUsdIsSet() const
{
    return m_Cumulative_total_revenue_usdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetCumulative_total_revenue_usd()
{
    m_Cumulative_total_revenue_usdIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getHourlyTotalRevenueUsd() const
{
    return m_Hourly_total_revenue_usd;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setHourlyTotalRevenueUsd(const utility::string_t& value)
{
    m_Hourly_total_revenue_usd = value;
    m_Hourly_total_revenue_usdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::hourlyTotalRevenueUsdIsSet() const
{
    return m_Hourly_total_revenue_usdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetHourly_total_revenue_usd()
{
    m_Hourly_total_revenue_usdIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getCumulativeVolumeUsd() const
{
    return m_Cumulative_volume_usd;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setCumulativeVolumeUsd(const utility::string_t& value)
{
    m_Cumulative_volume_usd = value;
    m_Cumulative_volume_usdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::cumulativeVolumeUsdIsSet() const
{
    return m_Cumulative_volume_usdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetCumulative_volume_usd()
{
    m_Cumulative_volume_usdIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getHourlyVolumeUsd() const
{
    return m_Hourly_volume_usd;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setHourlyVolumeUsd(const utility::string_t& value)
{
    m_Hourly_volume_usd = value;
    m_Hourly_volume_usdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::hourlyVolumeUsdIsSet() const
{
    return m_Hourly_volume_usdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetHourly_volume_usd()
{
    m_Hourly_volume_usdIsSet = false;
}
std::vector<utility::string_t>& PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getCumulativeVolumeByTokenAmount()
{
    return m_Cumulative_volume_by_token_amount;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setCumulativeVolumeByTokenAmount(const std::vector<utility::string_t>& value)
{
    m_Cumulative_volume_by_token_amount = value;
    m_Cumulative_volume_by_token_amountIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::cumulativeVolumeByTokenAmountIsSet() const
{
    return m_Cumulative_volume_by_token_amountIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetCumulative_volume_by_token_amount()
{
    m_Cumulative_volume_by_token_amountIsSet = false;
}
std::vector<utility::string_t>& PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getHourlyVolumeByTokenAmount()
{
    return m_Hourly_volume_by_token_amount;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setHourlyVolumeByTokenAmount(const std::vector<utility::string_t>& value)
{
    m_Hourly_volume_by_token_amount = value;
    m_Hourly_volume_by_token_amountIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::hourlyVolumeByTokenAmountIsSet() const
{
    return m_Hourly_volume_by_token_amountIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetHourly_volume_by_token_amount()
{
    m_Hourly_volume_by_token_amountIsSet = false;
}
std::vector<utility::string_t>& PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getCumulativeVolumeByTokenUsd()
{
    return m_Cumulative_volume_by_token_usd;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setCumulativeVolumeByTokenUsd(const std::vector<utility::string_t>& value)
{
    m_Cumulative_volume_by_token_usd = value;
    m_Cumulative_volume_by_token_usdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::cumulativeVolumeByTokenUsdIsSet() const
{
    return m_Cumulative_volume_by_token_usdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetCumulative_volume_by_token_usd()
{
    m_Cumulative_volume_by_token_usdIsSet = false;
}
std::vector<utility::string_t>& PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getHourlyVolumeByTokenUsd()
{
    return m_Hourly_volume_by_token_usd;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setHourlyVolumeByTokenUsd(const std::vector<utility::string_t>& value)
{
    m_Hourly_volume_by_token_usd = value;
    m_Hourly_volume_by_token_usdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::hourlyVolumeByTokenUsdIsSet() const
{
    return m_Hourly_volume_by_token_usdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetHourly_volume_by_token_usd()
{
    m_Hourly_volume_by_token_usdIsSet = false;
}
std::vector<utility::string_t>& PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getInputTokenBalances()
{
    return m_Input_token_balances;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setInputTokenBalances(const std::vector<utility::string_t>& value)
{
    m_Input_token_balances = value;
    m_Input_token_balancesIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::inputTokenBalancesIsSet() const
{
    return m_Input_token_balancesIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetInput_token_balances()
{
    m_Input_token_balancesIsSet = false;
}
std::vector<utility::string_t>& PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getInputTokenBalancesUsd()
{
    return m_Input_token_balances_usd;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setInputTokenBalancesUsd(const std::vector<utility::string_t>& value)
{
    m_Input_token_balances_usd = value;
    m_Input_token_balances_usdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::inputTokenBalancesUsdIsSet() const
{
    return m_Input_token_balances_usdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetInput_token_balances_usd()
{
    m_Input_token_balances_usdIsSet = false;
}
std::vector<utility::string_t>& PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getInputTokenWeights()
{
    return m_Input_token_weights;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setInputTokenWeights(const std::vector<utility::string_t>& value)
{
    m_Input_token_weights = value;
    m_Input_token_weightsIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::inputTokenWeightsIsSet() const
{
    return m_Input_token_weightsIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetInput_token_weights()
{
    m_Input_token_weightsIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getStakedOutputTokenAmount() const
{
    return m_Staked_output_token_amount;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setStakedOutputTokenAmount(const utility::string_t& value)
{
    m_Staked_output_token_amount = value;
    m_Staked_output_token_amountIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::stakedOutputTokenAmountIsSet() const
{
    return m_Staked_output_token_amountIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetStaked_output_token_amount()
{
    m_Staked_output_token_amountIsSet = false;
}
std::vector<utility::string_t>& PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getRewardTokenEmissionsAmount()
{
    return m_Reward_token_emissions_amount;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setRewardTokenEmissionsAmount(const std::vector<utility::string_t>& value)
{
    m_Reward_token_emissions_amount = value;
    m_Reward_token_emissions_amountIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::rewardTokenEmissionsAmountIsSet() const
{
    return m_Reward_token_emissions_amountIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetReward_token_emissions_amount()
{
    m_Reward_token_emissions_amountIsSet = false;
}
std::vector<utility::string_t>& PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getRewardTokenEmissionsUsd()
{
    return m_Reward_token_emissions_usd;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setRewardTokenEmissionsUsd(const std::vector<utility::string_t>& value)
{
    m_Reward_token_emissions_usd = value;
    m_Reward_token_emissions_usdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::rewardTokenEmissionsUsdIsSet() const
{
    return m_Reward_token_emissions_usdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetReward_token_emissions_usd()
{
    m_Reward_token_emissions_usdIsSet = false;
}
int32_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getCumulativeDepositCount() const
{
    return m_Cumulative_deposit_count;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setCumulativeDepositCount(int32_t value)
{
    m_Cumulative_deposit_count = value;
    m_Cumulative_deposit_countIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::cumulativeDepositCountIsSet() const
{
    return m_Cumulative_deposit_countIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetCumulative_deposit_count()
{
    m_Cumulative_deposit_countIsSet = false;
}
int32_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getHourlyDepositCount() const
{
    return m_Hourly_deposit_count;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setHourlyDepositCount(int32_t value)
{
    m_Hourly_deposit_count = value;
    m_Hourly_deposit_countIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::hourlyDepositCountIsSet() const
{
    return m_Hourly_deposit_countIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetHourly_deposit_count()
{
    m_Hourly_deposit_countIsSet = false;
}
int32_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getCumulativeWithdrawCount() const
{
    return m_Cumulative_withdraw_count;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setCumulativeWithdrawCount(int32_t value)
{
    m_Cumulative_withdraw_count = value;
    m_Cumulative_withdraw_countIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::cumulativeWithdrawCountIsSet() const
{
    return m_Cumulative_withdraw_countIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetCumulative_withdraw_count()
{
    m_Cumulative_withdraw_countIsSet = false;
}
int32_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getHourlyWithdrawCount() const
{
    return m_Hourly_withdraw_count;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setHourlyWithdrawCount(int32_t value)
{
    m_Hourly_withdraw_count = value;
    m_Hourly_withdraw_countIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::hourlyWithdrawCountIsSet() const
{
    return m_Hourly_withdraw_countIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetHourly_withdraw_count()
{
    m_Hourly_withdraw_countIsSet = false;
}
int32_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getCumulativeSwapCount() const
{
    return m_Cumulative_swap_count;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setCumulativeSwapCount(int32_t value)
{
    m_Cumulative_swap_count = value;
    m_Cumulative_swap_countIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::cumulativeSwapCountIsSet() const
{
    return m_Cumulative_swap_countIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetCumulative_swap_count()
{
    m_Cumulative_swap_countIsSet = false;
}
int32_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getHourlySwapCount() const
{
    return m_Hourly_swap_count;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setHourlySwapCount(int32_t value)
{
    m_Hourly_swap_count = value;
    m_Hourly_swap_countIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::hourlySwapCountIsSet() const
{
    return m_Hourly_swap_countIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetHourly_swap_count()
{
    m_Hourly_swap_countIsSet = false;
}
int32_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getPositionCount() const
{
    return m_Position_count;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setPositionCount(int32_t value)
{
    m_Position_count = value;
    m_Position_countIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::positionCountIsSet() const
{
    return m_Position_countIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetPosition_count()
{
    m_Position_countIsSet = false;
}
int32_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getOpenPositionCount() const
{
    return m_Open_position_count;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setOpenPositionCount(int32_t value)
{
    m_Open_position_count = value;
    m_Open_position_countIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::openPositionCountIsSet() const
{
    return m_Open_position_countIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetOpen_position_count()
{
    m_Open_position_countIsSet = false;
}
int32_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getClosedPositionCount() const
{
    return m_Closed_position_count;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setClosedPositionCount(int32_t value)
{
    m_Closed_position_count = value;
    m_Closed_position_countIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::closedPositionCountIsSet() const
{
    return m_Closed_position_countIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetClosed_position_count()
{
    m_Closed_position_countIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getTimestamp() const
{
    return m_Timestamp;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setTimestamp(const utility::string_t& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
}
}
}
}


