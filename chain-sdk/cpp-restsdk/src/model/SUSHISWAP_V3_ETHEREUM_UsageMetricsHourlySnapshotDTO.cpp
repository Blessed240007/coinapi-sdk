/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Hour = 0;
    m_HourIsSet = false;
    m_Protocol = utility::conversions::to_string_t("");
    m_ProtocolIsSet = false;
    m_Hourly_active_users = 0;
    m_Hourly_active_usersIsSet = false;
    m_Cumulative_unique_users = 0;
    m_Cumulative_unique_usersIsSet = false;
    m_Hourly_transaction_count = 0;
    m_Hourly_transaction_countIsSet = false;
    m_Hourly_deposit_count = 0;
    m_Hourly_deposit_countIsSet = false;
    m_Hourly_withdraw_count = 0;
    m_Hourly_withdraw_countIsSet = false;
    m_Hourly_swap_count = 0;
    m_Hourly_swap_countIsSet = false;
    m_Timestamp = utility::conversions::to_string_t("");
    m_TimestampIsSet = false;
}

SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::~SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO()
{
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::validate()
{
    // TODO: implement validation
}

web::json::value SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_HourIsSet)
    {
        val[utility::conversions::to_string_t(U("hour"))] = ModelBase::toJson(m_Hour);
    }
    if(m_ProtocolIsSet)
    {
        val[utility::conversions::to_string_t(U("protocol"))] = ModelBase::toJson(m_Protocol);
    }
    if(m_Hourly_active_usersIsSet)
    {
        val[utility::conversions::to_string_t(U("hourly_active_users"))] = ModelBase::toJson(m_Hourly_active_users);
    }
    if(m_Cumulative_unique_usersIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_unique_users"))] = ModelBase::toJson(m_Cumulative_unique_users);
    }
    if(m_Hourly_transaction_countIsSet)
    {
        val[utility::conversions::to_string_t(U("hourly_transaction_count"))] = ModelBase::toJson(m_Hourly_transaction_count);
    }
    if(m_Hourly_deposit_countIsSet)
    {
        val[utility::conversions::to_string_t(U("hourly_deposit_count"))] = ModelBase::toJson(m_Hourly_deposit_count);
    }
    if(m_Hourly_withdraw_countIsSet)
    {
        val[utility::conversions::to_string_t(U("hourly_withdraw_count"))] = ModelBase::toJson(m_Hourly_withdraw_count);
    }
    if(m_Hourly_swap_countIsSet)
    {
        val[utility::conversions::to_string_t(U("hourly_swap_count"))] = ModelBase::toJson(m_Hourly_swap_count);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }

    return val;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hour"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hour")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHour;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHour);
            setHour(refVal_setHour);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("protocol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("protocol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProtocol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProtocol);
            setProtocol(refVal_setProtocol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hourly_active_users"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly_active_users")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHourlyActiveUsers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourlyActiveUsers);
            setHourlyActiveUsers(refVal_setHourlyActiveUsers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_unique_users"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_unique_users")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCumulativeUniqueUsers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeUniqueUsers);
            setCumulativeUniqueUsers(refVal_setCumulativeUniqueUsers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hourly_transaction_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly_transaction_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHourlyTransactionCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourlyTransactionCount);
            setHourlyTransactionCount(refVal_setHourlyTransactionCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hourly_deposit_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly_deposit_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHourlyDepositCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourlyDepositCount);
            setHourlyDepositCount(refVal_setHourlyDepositCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hourly_withdraw_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly_withdraw_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHourlyWithdrawCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourlyWithdrawCount);
            setHourlyWithdrawCount(refVal_setHourlyWithdrawCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hourly_swap_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly_swap_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHourlySwapCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourlySwapCount);
            setHourlySwapCount(refVal_setHourlySwapCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
        }
    }
    return ok;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_HourIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hour")), m_Hour));
    }
    if(m_ProtocolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("protocol")), m_Protocol));
    }
    if(m_Hourly_active_usersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly_active_users")), m_Hourly_active_users));
    }
    if(m_Cumulative_unique_usersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_unique_users")), m_Cumulative_unique_users));
    }
    if(m_Hourly_transaction_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly_transaction_count")), m_Hourly_transaction_count));
    }
    if(m_Hourly_deposit_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly_deposit_count")), m_Hourly_deposit_count));
    }
    if(m_Hourly_withdraw_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly_withdraw_count")), m_Hourly_withdraw_count));
    }
    if(m_Hourly_swap_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly_swap_count")), m_Hourly_swap_count));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hour"))))
    {
        int32_t refVal_setHour;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hour"))), refVal_setHour );
        setHour(refVal_setHour);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("protocol"))))
    {
        utility::string_t refVal_setProtocol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("protocol"))), refVal_setProtocol );
        setProtocol(refVal_setProtocol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly_active_users"))))
    {
        int32_t refVal_setHourlyActiveUsers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly_active_users"))), refVal_setHourlyActiveUsers );
        setHourlyActiveUsers(refVal_setHourlyActiveUsers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_unique_users"))))
    {
        int32_t refVal_setCumulativeUniqueUsers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_unique_users"))), refVal_setCumulativeUniqueUsers );
        setCumulativeUniqueUsers(refVal_setCumulativeUniqueUsers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly_transaction_count"))))
    {
        int32_t refVal_setHourlyTransactionCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly_transaction_count"))), refVal_setHourlyTransactionCount );
        setHourlyTransactionCount(refVal_setHourlyTransactionCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly_deposit_count"))))
    {
        int32_t refVal_setHourlyDepositCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly_deposit_count"))), refVal_setHourlyDepositCount );
        setHourlyDepositCount(refVal_setHourlyDepositCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly_withdraw_count"))))
    {
        int32_t refVal_setHourlyWithdrawCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly_withdraw_count"))), refVal_setHourlyWithdrawCount );
        setHourlyWithdrawCount(refVal_setHourlyWithdrawCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly_swap_count"))))
    {
        int32_t refVal_setHourlySwapCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly_swap_count"))), refVal_setHourlySwapCount );
        setHourlySwapCount(refVal_setHourlySwapCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::string_t refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    return ok;
}

utility::datetime SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::getEntryTime() const
{
    return m_Entry_time;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::getRecvTime() const
{
    return m_Recv_time;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::getBlockNumber() const
{
    return m_Block_number;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::getId() const
{
    return m_Id;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::idIsSet() const
{
    return m_IdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::unsetId()
{
    m_IdIsSet = false;
}
int32_t SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::getHour() const
{
    return m_Hour;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::setHour(int32_t value)
{
    m_Hour = value;
    m_HourIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::hourIsSet() const
{
    return m_HourIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::unsetHour()
{
    m_HourIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::getProtocol() const
{
    return m_Protocol;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::setProtocol(const utility::string_t& value)
{
    m_Protocol = value;
    m_ProtocolIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::protocolIsSet() const
{
    return m_ProtocolIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::unsetProtocol()
{
    m_ProtocolIsSet = false;
}
int32_t SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::getHourlyActiveUsers() const
{
    return m_Hourly_active_users;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::setHourlyActiveUsers(int32_t value)
{
    m_Hourly_active_users = value;
    m_Hourly_active_usersIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::hourlyActiveUsersIsSet() const
{
    return m_Hourly_active_usersIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::unsetHourly_active_users()
{
    m_Hourly_active_usersIsSet = false;
}
int32_t SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::getCumulativeUniqueUsers() const
{
    return m_Cumulative_unique_users;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::setCumulativeUniqueUsers(int32_t value)
{
    m_Cumulative_unique_users = value;
    m_Cumulative_unique_usersIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::cumulativeUniqueUsersIsSet() const
{
    return m_Cumulative_unique_usersIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::unsetCumulative_unique_users()
{
    m_Cumulative_unique_usersIsSet = false;
}
int32_t SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::getHourlyTransactionCount() const
{
    return m_Hourly_transaction_count;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::setHourlyTransactionCount(int32_t value)
{
    m_Hourly_transaction_count = value;
    m_Hourly_transaction_countIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::hourlyTransactionCountIsSet() const
{
    return m_Hourly_transaction_countIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::unsetHourly_transaction_count()
{
    m_Hourly_transaction_countIsSet = false;
}
int32_t SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::getHourlyDepositCount() const
{
    return m_Hourly_deposit_count;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::setHourlyDepositCount(int32_t value)
{
    m_Hourly_deposit_count = value;
    m_Hourly_deposit_countIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::hourlyDepositCountIsSet() const
{
    return m_Hourly_deposit_countIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::unsetHourly_deposit_count()
{
    m_Hourly_deposit_countIsSet = false;
}
int32_t SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::getHourlyWithdrawCount() const
{
    return m_Hourly_withdraw_count;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::setHourlyWithdrawCount(int32_t value)
{
    m_Hourly_withdraw_count = value;
    m_Hourly_withdraw_countIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::hourlyWithdrawCountIsSet() const
{
    return m_Hourly_withdraw_countIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::unsetHourly_withdraw_count()
{
    m_Hourly_withdraw_countIsSet = false;
}
int32_t SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::getHourlySwapCount() const
{
    return m_Hourly_swap_count;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::setHourlySwapCount(int32_t value)
{
    m_Hourly_swap_count = value;
    m_Hourly_swap_countIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::hourlySwapCountIsSet() const
{
    return m_Hourly_swap_countIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::unsetHourly_swap_count()
{
    m_Hourly_swap_countIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::getTimestamp() const
{
    return m_Timestamp;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::setTimestamp(const utility::string_t& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsHourlySnapshotDTO::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
}
}
}
}


