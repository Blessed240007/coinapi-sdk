/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Day = 0;
    m_DayIsSet = false;
    m_Protocol = utility::conversions::to_string_t("");
    m_ProtocolIsSet = false;
    m_Daily_active_users = 0;
    m_Daily_active_usersIsSet = false;
    m_Cumulative_unique_users = 0;
    m_Cumulative_unique_usersIsSet = false;
    m_Daily_transaction_count = 0;
    m_Daily_transaction_countIsSet = false;
    m_Total_pool_count = 0;
    m_Total_pool_countIsSet = false;
    m_Daily_deposit_count = 0;
    m_Daily_deposit_countIsSet = false;
    m_Daily_withdraw_count = 0;
    m_Daily_withdraw_countIsSet = false;
    m_Daily_swap_count = 0;
    m_Daily_swap_countIsSet = false;
    m_Timestamp = utility::conversions::to_string_t("");
    m_TimestampIsSet = false;
}

SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::~SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO()
{
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::validate()
{
    // TODO: implement validation
}

web::json::value SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_DayIsSet)
    {
        val[utility::conversions::to_string_t(U("day"))] = ModelBase::toJson(m_Day);
    }
    if(m_ProtocolIsSet)
    {
        val[utility::conversions::to_string_t(U("protocol"))] = ModelBase::toJson(m_Protocol);
    }
    if(m_Daily_active_usersIsSet)
    {
        val[utility::conversions::to_string_t(U("daily_active_users"))] = ModelBase::toJson(m_Daily_active_users);
    }
    if(m_Cumulative_unique_usersIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_unique_users"))] = ModelBase::toJson(m_Cumulative_unique_users);
    }
    if(m_Daily_transaction_countIsSet)
    {
        val[utility::conversions::to_string_t(U("daily_transaction_count"))] = ModelBase::toJson(m_Daily_transaction_count);
    }
    if(m_Total_pool_countIsSet)
    {
        val[utility::conversions::to_string_t(U("total_pool_count"))] = ModelBase::toJson(m_Total_pool_count);
    }
    if(m_Daily_deposit_countIsSet)
    {
        val[utility::conversions::to_string_t(U("daily_deposit_count"))] = ModelBase::toJson(m_Daily_deposit_count);
    }
    if(m_Daily_withdraw_countIsSet)
    {
        val[utility::conversions::to_string_t(U("daily_withdraw_count"))] = ModelBase::toJson(m_Daily_withdraw_count);
    }
    if(m_Daily_swap_countIsSet)
    {
        val[utility::conversions::to_string_t(U("daily_swap_count"))] = ModelBase::toJson(m_Daily_swap_count);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }

    return val;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("day"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("day")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDay;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDay);
            setDay(refVal_setDay);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("protocol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("protocol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProtocol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProtocol);
            setProtocol(refVal_setProtocol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("daily_active_users"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("daily_active_users")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDailyActiveUsers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDailyActiveUsers);
            setDailyActiveUsers(refVal_setDailyActiveUsers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_unique_users"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_unique_users")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCumulativeUniqueUsers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeUniqueUsers);
            setCumulativeUniqueUsers(refVal_setCumulativeUniqueUsers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("daily_transaction_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("daily_transaction_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDailyTransactionCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDailyTransactionCount);
            setDailyTransactionCount(refVal_setDailyTransactionCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_pool_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_pool_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTotalPoolCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalPoolCount);
            setTotalPoolCount(refVal_setTotalPoolCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("daily_deposit_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("daily_deposit_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDailyDepositCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDailyDepositCount);
            setDailyDepositCount(refVal_setDailyDepositCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("daily_withdraw_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("daily_withdraw_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDailyWithdrawCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDailyWithdrawCount);
            setDailyWithdrawCount(refVal_setDailyWithdrawCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("daily_swap_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("daily_swap_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDailySwapCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDailySwapCount);
            setDailySwapCount(refVal_setDailySwapCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
        }
    }
    return ok;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_DayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("day")), m_Day));
    }
    if(m_ProtocolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("protocol")), m_Protocol));
    }
    if(m_Daily_active_usersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("daily_active_users")), m_Daily_active_users));
    }
    if(m_Cumulative_unique_usersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_unique_users")), m_Cumulative_unique_users));
    }
    if(m_Daily_transaction_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("daily_transaction_count")), m_Daily_transaction_count));
    }
    if(m_Total_pool_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_pool_count")), m_Total_pool_count));
    }
    if(m_Daily_deposit_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("daily_deposit_count")), m_Daily_deposit_count));
    }
    if(m_Daily_withdraw_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("daily_withdraw_count")), m_Daily_withdraw_count));
    }
    if(m_Daily_swap_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("daily_swap_count")), m_Daily_swap_count));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("day"))))
    {
        int32_t refVal_setDay;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("day"))), refVal_setDay );
        setDay(refVal_setDay);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("protocol"))))
    {
        utility::string_t refVal_setProtocol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("protocol"))), refVal_setProtocol );
        setProtocol(refVal_setProtocol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("daily_active_users"))))
    {
        int32_t refVal_setDailyActiveUsers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("daily_active_users"))), refVal_setDailyActiveUsers );
        setDailyActiveUsers(refVal_setDailyActiveUsers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_unique_users"))))
    {
        int32_t refVal_setCumulativeUniqueUsers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_unique_users"))), refVal_setCumulativeUniqueUsers );
        setCumulativeUniqueUsers(refVal_setCumulativeUniqueUsers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("daily_transaction_count"))))
    {
        int32_t refVal_setDailyTransactionCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("daily_transaction_count"))), refVal_setDailyTransactionCount );
        setDailyTransactionCount(refVal_setDailyTransactionCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_pool_count"))))
    {
        int32_t refVal_setTotalPoolCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_pool_count"))), refVal_setTotalPoolCount );
        setTotalPoolCount(refVal_setTotalPoolCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("daily_deposit_count"))))
    {
        int32_t refVal_setDailyDepositCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("daily_deposit_count"))), refVal_setDailyDepositCount );
        setDailyDepositCount(refVal_setDailyDepositCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("daily_withdraw_count"))))
    {
        int32_t refVal_setDailyWithdrawCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("daily_withdraw_count"))), refVal_setDailyWithdrawCount );
        setDailyWithdrawCount(refVal_setDailyWithdrawCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("daily_swap_count"))))
    {
        int32_t refVal_setDailySwapCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("daily_swap_count"))), refVal_setDailySwapCount );
        setDailySwapCount(refVal_setDailySwapCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::string_t refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    return ok;
}

utility::datetime SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::getEntryTime() const
{
    return m_Entry_time;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::getRecvTime() const
{
    return m_Recv_time;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::getBlockNumber() const
{
    return m_Block_number;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::getId() const
{
    return m_Id;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::idIsSet() const
{
    return m_IdIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::unsetId()
{
    m_IdIsSet = false;
}
int32_t SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::getDay() const
{
    return m_Day;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::setDay(int32_t value)
{
    m_Day = value;
    m_DayIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::dayIsSet() const
{
    return m_DayIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::unsetDay()
{
    m_DayIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::getProtocol() const
{
    return m_Protocol;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::setProtocol(const utility::string_t& value)
{
    m_Protocol = value;
    m_ProtocolIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::protocolIsSet() const
{
    return m_ProtocolIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::unsetProtocol()
{
    m_ProtocolIsSet = false;
}
int32_t SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::getDailyActiveUsers() const
{
    return m_Daily_active_users;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::setDailyActiveUsers(int32_t value)
{
    m_Daily_active_users = value;
    m_Daily_active_usersIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::dailyActiveUsersIsSet() const
{
    return m_Daily_active_usersIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::unsetDaily_active_users()
{
    m_Daily_active_usersIsSet = false;
}
int32_t SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::getCumulativeUniqueUsers() const
{
    return m_Cumulative_unique_users;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::setCumulativeUniqueUsers(int32_t value)
{
    m_Cumulative_unique_users = value;
    m_Cumulative_unique_usersIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::cumulativeUniqueUsersIsSet() const
{
    return m_Cumulative_unique_usersIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::unsetCumulative_unique_users()
{
    m_Cumulative_unique_usersIsSet = false;
}
int32_t SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::getDailyTransactionCount() const
{
    return m_Daily_transaction_count;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::setDailyTransactionCount(int32_t value)
{
    m_Daily_transaction_count = value;
    m_Daily_transaction_countIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::dailyTransactionCountIsSet() const
{
    return m_Daily_transaction_countIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::unsetDaily_transaction_count()
{
    m_Daily_transaction_countIsSet = false;
}
int32_t SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::getTotalPoolCount() const
{
    return m_Total_pool_count;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::setTotalPoolCount(int32_t value)
{
    m_Total_pool_count = value;
    m_Total_pool_countIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::totalPoolCountIsSet() const
{
    return m_Total_pool_countIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::unsetTotal_pool_count()
{
    m_Total_pool_countIsSet = false;
}
int32_t SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::getDailyDepositCount() const
{
    return m_Daily_deposit_count;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::setDailyDepositCount(int32_t value)
{
    m_Daily_deposit_count = value;
    m_Daily_deposit_countIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::dailyDepositCountIsSet() const
{
    return m_Daily_deposit_countIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::unsetDaily_deposit_count()
{
    m_Daily_deposit_countIsSet = false;
}
int32_t SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::getDailyWithdrawCount() const
{
    return m_Daily_withdraw_count;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::setDailyWithdrawCount(int32_t value)
{
    m_Daily_withdraw_count = value;
    m_Daily_withdraw_countIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::dailyWithdrawCountIsSet() const
{
    return m_Daily_withdraw_countIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::unsetDaily_withdraw_count()
{
    m_Daily_withdraw_countIsSet = false;
}
int32_t SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::getDailySwapCount() const
{
    return m_Daily_swap_count;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::setDailySwapCount(int32_t value)
{
    m_Daily_swap_count = value;
    m_Daily_swap_countIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::dailySwapCountIsSet() const
{
    return m_Daily_swap_countIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::unsetDaily_swap_count()
{
    m_Daily_swap_countIsSet = false;
}
utility::string_t SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::getTimestamp() const
{
    return m_Timestamp;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::setTimestamp(const utility::string_t& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void SUSHISWAP_V3_ETHEREUM_UsageMetricsDailySnapshotDTO::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
}
}
}
}


