/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UNISWAP_V2_ETHEREUM_RewarderProbeDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UNISWAP_V2_ETHEREUM_RewarderProbeDTO::UNISWAP_V2_ETHEREUM_RewarderProbeDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Block_range = utility::conversions::to_string_t("");
    m_Block_rangeIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_User = utility::conversions::to_string_t("");
    m_UserIsSet = false;
    m_Pending = utility::conversions::to_string_t("");
    m_PendingIsSet = false;
    m_Block_num = utility::conversions::to_string_t("");
    m_Block_numIsSet = false;
    m_Timestamp = utility::conversions::to_string_t("");
    m_TimestampIsSet = false;
    m_Lp_staked = utility::conversions::to_string_t("");
    m_Lp_stakedIsSet = false;
}

UNISWAP_V2_ETHEREUM_RewarderProbeDTO::~UNISWAP_V2_ETHEREUM_RewarderProbeDTO()
{
}

void UNISWAP_V2_ETHEREUM_RewarderProbeDTO::validate()
{
    // TODO: implement validation
}

web::json::value UNISWAP_V2_ETHEREUM_RewarderProbeDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_Block_rangeIsSet)
    {
        val[utility::conversions::to_string_t(U("block_range"))] = ModelBase::toJson(m_Block_range);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_UserIsSet)
    {
        val[utility::conversions::to_string_t(U("user"))] = ModelBase::toJson(m_User);
    }
    if(m_PendingIsSet)
    {
        val[utility::conversions::to_string_t(U("pending"))] = ModelBase::toJson(m_Pending);
    }
    if(m_Block_numIsSet)
    {
        val[utility::conversions::to_string_t(U("block_num"))] = ModelBase::toJson(m_Block_num);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_Lp_stakedIsSet)
    {
        val[utility::conversions::to_string_t(U("lp_staked"))] = ModelBase::toJson(m_Lp_staked);
    }

    return val;
}

bool UNISWAP_V2_ETHEREUM_RewarderProbeDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_range"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_range")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBlockRange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockRange);
            setBlockRange(refVal_setBlockRange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUser);
            setUser(refVal_setUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pending"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pending")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPending;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPending);
            setPending(refVal_setPending);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_num"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_num")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBlockNum;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNum);
            setBlockNum(refVal_setBlockNum);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lp_staked"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lp_staked")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLpStaked;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLpStaked);
            setLpStaked(refVal_setLpStaked);
        }
    }
    return ok;
}

void UNISWAP_V2_ETHEREUM_RewarderProbeDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_Block_rangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_range")), m_Block_range));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_UserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user")), m_User));
    }
    if(m_PendingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pending")), m_Pending));
    }
    if(m_Block_numIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_num")), m_Block_num));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_Lp_stakedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lp_staked")), m_Lp_staked));
    }
}

bool UNISWAP_V2_ETHEREUM_RewarderProbeDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_range"))))
    {
        utility::string_t refVal_setBlockRange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_range"))), refVal_setBlockRange );
        setBlockRange(refVal_setBlockRange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user"))))
    {
        utility::string_t refVal_setUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user"))), refVal_setUser );
        setUser(refVal_setUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pending"))))
    {
        utility::string_t refVal_setPending;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pending"))), refVal_setPending );
        setPending(refVal_setPending);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_num"))))
    {
        utility::string_t refVal_setBlockNum;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_num"))), refVal_setBlockNum );
        setBlockNum(refVal_setBlockNum);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::string_t refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lp_staked"))))
    {
        utility::string_t refVal_setLpStaked;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lp_staked"))), refVal_setLpStaked );
        setLpStaked(refVal_setLpStaked);
    }
    return ok;
}

utility::datetime UNISWAP_V2_ETHEREUM_RewarderProbeDTO::getEntryTime() const
{
    return m_Entry_time;
}

void UNISWAP_V2_ETHEREUM_RewarderProbeDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_RewarderProbeDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void UNISWAP_V2_ETHEREUM_RewarderProbeDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime UNISWAP_V2_ETHEREUM_RewarderProbeDTO::getRecvTime() const
{
    return m_Recv_time;
}

void UNISWAP_V2_ETHEREUM_RewarderProbeDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_RewarderProbeDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void UNISWAP_V2_ETHEREUM_RewarderProbeDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t UNISWAP_V2_ETHEREUM_RewarderProbeDTO::getBlockNumber() const
{
    return m_Block_number;
}

void UNISWAP_V2_ETHEREUM_RewarderProbeDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_RewarderProbeDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void UNISWAP_V2_ETHEREUM_RewarderProbeDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_RewarderProbeDTO::getBlockRange() const
{
    return m_Block_range;
}

void UNISWAP_V2_ETHEREUM_RewarderProbeDTO::setBlockRange(const utility::string_t& value)
{
    m_Block_range = value;
    m_Block_rangeIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_RewarderProbeDTO::blockRangeIsSet() const
{
    return m_Block_rangeIsSet;
}

void UNISWAP_V2_ETHEREUM_RewarderProbeDTO::unsetBlock_range()
{
    m_Block_rangeIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_RewarderProbeDTO::getId() const
{
    return m_Id;
}

void UNISWAP_V2_ETHEREUM_RewarderProbeDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_RewarderProbeDTO::idIsSet() const
{
    return m_IdIsSet;
}

void UNISWAP_V2_ETHEREUM_RewarderProbeDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_RewarderProbeDTO::getUser() const
{
    return m_User;
}

void UNISWAP_V2_ETHEREUM_RewarderProbeDTO::setUser(const utility::string_t& value)
{
    m_User = value;
    m_UserIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_RewarderProbeDTO::userIsSet() const
{
    return m_UserIsSet;
}

void UNISWAP_V2_ETHEREUM_RewarderProbeDTO::unsetUser()
{
    m_UserIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_RewarderProbeDTO::getPending() const
{
    return m_Pending;
}

void UNISWAP_V2_ETHEREUM_RewarderProbeDTO::setPending(const utility::string_t& value)
{
    m_Pending = value;
    m_PendingIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_RewarderProbeDTO::pendingIsSet() const
{
    return m_PendingIsSet;
}

void UNISWAP_V2_ETHEREUM_RewarderProbeDTO::unsetPending()
{
    m_PendingIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_RewarderProbeDTO::getBlockNum() const
{
    return m_Block_num;
}

void UNISWAP_V2_ETHEREUM_RewarderProbeDTO::setBlockNum(const utility::string_t& value)
{
    m_Block_num = value;
    m_Block_numIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_RewarderProbeDTO::blockNumIsSet() const
{
    return m_Block_numIsSet;
}

void UNISWAP_V2_ETHEREUM_RewarderProbeDTO::unsetBlock_num()
{
    m_Block_numIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_RewarderProbeDTO::getTimestamp() const
{
    return m_Timestamp;
}

void UNISWAP_V2_ETHEREUM_RewarderProbeDTO::setTimestamp(const utility::string_t& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_RewarderProbeDTO::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void UNISWAP_V2_ETHEREUM_RewarderProbeDTO::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_RewarderProbeDTO::getLpStaked() const
{
    return m_Lp_staked;
}

void UNISWAP_V2_ETHEREUM_RewarderProbeDTO::setLpStaked(const utility::string_t& value)
{
    m_Lp_staked = value;
    m_Lp_stakedIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_RewarderProbeDTO::lpStakedIsSet() const
{
    return m_Lp_stakedIsSet;
}

void UNISWAP_V2_ETHEREUM_RewarderProbeDTO::unsetLp_staked()
{
    m_Lp_stakedIsSet = false;
}
}
}
}
}


