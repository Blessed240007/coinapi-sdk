/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CURVE_FINANCE_ETHEREUM_LpTokenDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CURVE_FINANCE_ETHEREUM_LpTokenDTO::CURVE_FINANCE_ETHEREUM_LpTokenDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Pool_address = utility::conversions::to_string_t("");
    m_Pool_addressIsSet = false;
    m_Registry_address = utility::conversions::to_string_t("");
    m_Registry_addressIsSet = false;
}

CURVE_FINANCE_ETHEREUM_LpTokenDTO::~CURVE_FINANCE_ETHEREUM_LpTokenDTO()
{
}

void CURVE_FINANCE_ETHEREUM_LpTokenDTO::validate()
{
    // TODO: implement validation
}

web::json::value CURVE_FINANCE_ETHEREUM_LpTokenDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Pool_addressIsSet)
    {
        val[utility::conversions::to_string_t(U("pool_address"))] = ModelBase::toJson(m_Pool_address);
    }
    if(m_Registry_addressIsSet)
    {
        val[utility::conversions::to_string_t(U("registry_address"))] = ModelBase::toJson(m_Registry_address);
    }

    return val;
}

bool CURVE_FINANCE_ETHEREUM_LpTokenDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pool_address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pool_address")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPoolAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPoolAddress);
            setPoolAddress(refVal_setPoolAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("registry_address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("registry_address")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRegistryAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRegistryAddress);
            setRegistryAddress(refVal_setRegistryAddress);
        }
    }
    return ok;
}

void CURVE_FINANCE_ETHEREUM_LpTokenDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Pool_addressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pool_address")), m_Pool_address));
    }
    if(m_Registry_addressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("registry_address")), m_Registry_address));
    }
}

bool CURVE_FINANCE_ETHEREUM_LpTokenDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pool_address"))))
    {
        utility::string_t refVal_setPoolAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pool_address"))), refVal_setPoolAddress );
        setPoolAddress(refVal_setPoolAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("registry_address"))))
    {
        utility::string_t refVal_setRegistryAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("registry_address"))), refVal_setRegistryAddress );
        setRegistryAddress(refVal_setRegistryAddress);
    }
    return ok;
}

utility::datetime CURVE_FINANCE_ETHEREUM_LpTokenDTO::getEntryTime() const
{
    return m_Entry_time;
}

void CURVE_FINANCE_ETHEREUM_LpTokenDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LpTokenDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void CURVE_FINANCE_ETHEREUM_LpTokenDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime CURVE_FINANCE_ETHEREUM_LpTokenDTO::getRecvTime() const
{
    return m_Recv_time;
}

void CURVE_FINANCE_ETHEREUM_LpTokenDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LpTokenDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void CURVE_FINANCE_ETHEREUM_LpTokenDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t CURVE_FINANCE_ETHEREUM_LpTokenDTO::getBlockNumber() const
{
    return m_Block_number;
}

void CURVE_FINANCE_ETHEREUM_LpTokenDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LpTokenDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void CURVE_FINANCE_ETHEREUM_LpTokenDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_LpTokenDTO::getId() const
{
    return m_Id;
}

void CURVE_FINANCE_ETHEREUM_LpTokenDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LpTokenDTO::idIsSet() const
{
    return m_IdIsSet;
}

void CURVE_FINANCE_ETHEREUM_LpTokenDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_LpTokenDTO::getPoolAddress() const
{
    return m_Pool_address;
}

void CURVE_FINANCE_ETHEREUM_LpTokenDTO::setPoolAddress(const utility::string_t& value)
{
    m_Pool_address = value;
    m_Pool_addressIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LpTokenDTO::poolAddressIsSet() const
{
    return m_Pool_addressIsSet;
}

void CURVE_FINANCE_ETHEREUM_LpTokenDTO::unsetPool_address()
{
    m_Pool_addressIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_LpTokenDTO::getRegistryAddress() const
{
    return m_Registry_address;
}

void CURVE_FINANCE_ETHEREUM_LpTokenDTO::setRegistryAddress(const utility::string_t& value)
{
    m_Registry_address = value;
    m_Registry_addressIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LpTokenDTO::registryAddressIsSet() const
{
    return m_Registry_addressIsSet;
}

void CURVE_FINANCE_ETHEREUM_LpTokenDTO::unsetRegistry_address()
{
    m_Registry_addressIsSet = false;
}
}
}
}
}


