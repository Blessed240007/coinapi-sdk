/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Block_range = utility::conversions::to_string_t("");
    m_Block_rangeIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Protocol = utility::conversions::to_string_t("");
    m_ProtocolIsSet = false;
    m_Pool = utility::conversions::to_string_t("");
    m_PoolIsSet = false;
    m_Timestamp = utility::conversions::to_string_t("");
    m_TimestampIsSet = false;
    m_Total_value_locked_usd = utility::conversions::to_string_t("");
    m_Total_value_locked_usdIsSet = false;
    m_Cumulative_supply_side_revenue_usd = utility::conversions::to_string_t("");
    m_Cumulative_supply_side_revenue_usdIsSet = false;
    m_Hourly_supply_side_revenue_usd = utility::conversions::to_string_t("");
    m_Hourly_supply_side_revenue_usdIsSet = false;
    m_Cumulative_protocol_side_revenue_usd = utility::conversions::to_string_t("");
    m_Cumulative_protocol_side_revenue_usdIsSet = false;
    m_Hourly_protocol_side_revenue_usd = utility::conversions::to_string_t("");
    m_Hourly_protocol_side_revenue_usdIsSet = false;
    m_Cumulative_total_revenue_usd = utility::conversions::to_string_t("");
    m_Cumulative_total_revenue_usdIsSet = false;
    m_Hourly_total_revenue_usd = utility::conversions::to_string_t("");
    m_Hourly_total_revenue_usdIsSet = false;
    m_Hourly_volume_usd = utility::conversions::to_string_t("");
    m_Hourly_volume_usdIsSet = false;
    m_Hourly_volume_by_token_amountIsSet = false;
    m_Hourly_volume_by_token_usdIsSet = false;
    m_Cumulative_volume_usd = utility::conversions::to_string_t("");
    m_Cumulative_volume_usdIsSet = false;
    m_Input_token_balancesIsSet = false;
    m_Input_token_weightsIsSet = false;
    m_Output_token_supply = utility::conversions::to_string_t("");
    m_Output_token_supplyIsSet = false;
    m_Output_token_price_usd = utility::conversions::to_string_t("");
    m_Output_token_price_usdIsSet = false;
    m_Staked_output_token_amount = utility::conversions::to_string_t("");
    m_Staked_output_token_amountIsSet = false;
    m_Reward_token_emissions_amountIsSet = false;
    m_Reward_token_emissions_usdIsSet = false;
}

CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::~CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO()
{
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::validate()
{
    // TODO: implement validation
}

web::json::value CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_Block_rangeIsSet)
    {
        val[utility::conversions::to_string_t(U("block_range"))] = ModelBase::toJson(m_Block_range);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_ProtocolIsSet)
    {
        val[utility::conversions::to_string_t(U("protocol"))] = ModelBase::toJson(m_Protocol);
    }
    if(m_PoolIsSet)
    {
        val[utility::conversions::to_string_t(U("pool"))] = ModelBase::toJson(m_Pool);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_Total_value_locked_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("total_value_locked_usd"))] = ModelBase::toJson(m_Total_value_locked_usd);
    }
    if(m_Cumulative_supply_side_revenue_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_supply_side_revenue_usd"))] = ModelBase::toJson(m_Cumulative_supply_side_revenue_usd);
    }
    if(m_Hourly_supply_side_revenue_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("hourly_supply_side_revenue_usd"))] = ModelBase::toJson(m_Hourly_supply_side_revenue_usd);
    }
    if(m_Cumulative_protocol_side_revenue_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_protocol_side_revenue_usd"))] = ModelBase::toJson(m_Cumulative_protocol_side_revenue_usd);
    }
    if(m_Hourly_protocol_side_revenue_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("hourly_protocol_side_revenue_usd"))] = ModelBase::toJson(m_Hourly_protocol_side_revenue_usd);
    }
    if(m_Cumulative_total_revenue_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_total_revenue_usd"))] = ModelBase::toJson(m_Cumulative_total_revenue_usd);
    }
    if(m_Hourly_total_revenue_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("hourly_total_revenue_usd"))] = ModelBase::toJson(m_Hourly_total_revenue_usd);
    }
    if(m_Hourly_volume_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("hourly_volume_usd"))] = ModelBase::toJson(m_Hourly_volume_usd);
    }
    if(m_Hourly_volume_by_token_amountIsSet)
    {
        val[utility::conversions::to_string_t(U("hourly_volume_by_token_amount"))] = ModelBase::toJson(m_Hourly_volume_by_token_amount);
    }
    if(m_Hourly_volume_by_token_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("hourly_volume_by_token_usd"))] = ModelBase::toJson(m_Hourly_volume_by_token_usd);
    }
    if(m_Cumulative_volume_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_volume_usd"))] = ModelBase::toJson(m_Cumulative_volume_usd);
    }
    if(m_Input_token_balancesIsSet)
    {
        val[utility::conversions::to_string_t(U("input_token_balances"))] = ModelBase::toJson(m_Input_token_balances);
    }
    if(m_Input_token_weightsIsSet)
    {
        val[utility::conversions::to_string_t(U("input_token_weights"))] = ModelBase::toJson(m_Input_token_weights);
    }
    if(m_Output_token_supplyIsSet)
    {
        val[utility::conversions::to_string_t(U("output_token_supply"))] = ModelBase::toJson(m_Output_token_supply);
    }
    if(m_Output_token_price_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("output_token_price_usd"))] = ModelBase::toJson(m_Output_token_price_usd);
    }
    if(m_Staked_output_token_amountIsSet)
    {
        val[utility::conversions::to_string_t(U("staked_output_token_amount"))] = ModelBase::toJson(m_Staked_output_token_amount);
    }
    if(m_Reward_token_emissions_amountIsSet)
    {
        val[utility::conversions::to_string_t(U("reward_token_emissions_amount"))] = ModelBase::toJson(m_Reward_token_emissions_amount);
    }
    if(m_Reward_token_emissions_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("reward_token_emissions_usd"))] = ModelBase::toJson(m_Reward_token_emissions_usd);
    }

    return val;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_range"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_range")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBlockRange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockRange);
            setBlockRange(refVal_setBlockRange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("protocol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("protocol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProtocol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProtocol);
            setProtocol(refVal_setProtocol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pool"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pool")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPool;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPool);
            setPool(refVal_setPool);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_value_locked_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_value_locked_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalValueLockedUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalValueLockedUsd);
            setTotalValueLockedUsd(refVal_setTotalValueLockedUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_supply_side_revenue_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_supply_side_revenue_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCumulativeSupplySideRevenueUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeSupplySideRevenueUsd);
            setCumulativeSupplySideRevenueUsd(refVal_setCumulativeSupplySideRevenueUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hourly_supply_side_revenue_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly_supply_side_revenue_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHourlySupplySideRevenueUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourlySupplySideRevenueUsd);
            setHourlySupplySideRevenueUsd(refVal_setHourlySupplySideRevenueUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_protocol_side_revenue_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_protocol_side_revenue_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCumulativeProtocolSideRevenueUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeProtocolSideRevenueUsd);
            setCumulativeProtocolSideRevenueUsd(refVal_setCumulativeProtocolSideRevenueUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hourly_protocol_side_revenue_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly_protocol_side_revenue_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHourlyProtocolSideRevenueUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourlyProtocolSideRevenueUsd);
            setHourlyProtocolSideRevenueUsd(refVal_setHourlyProtocolSideRevenueUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_total_revenue_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_total_revenue_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCumulativeTotalRevenueUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeTotalRevenueUsd);
            setCumulativeTotalRevenueUsd(refVal_setCumulativeTotalRevenueUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hourly_total_revenue_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly_total_revenue_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHourlyTotalRevenueUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourlyTotalRevenueUsd);
            setHourlyTotalRevenueUsd(refVal_setHourlyTotalRevenueUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hourly_volume_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly_volume_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHourlyVolumeUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourlyVolumeUsd);
            setHourlyVolumeUsd(refVal_setHourlyVolumeUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hourly_volume_by_token_amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly_volume_by_token_amount")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setHourlyVolumeByTokenAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourlyVolumeByTokenAmount);
            setHourlyVolumeByTokenAmount(refVal_setHourlyVolumeByTokenAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hourly_volume_by_token_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly_volume_by_token_usd")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setHourlyVolumeByTokenUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourlyVolumeByTokenUsd);
            setHourlyVolumeByTokenUsd(refVal_setHourlyVolumeByTokenUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_volume_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_volume_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCumulativeVolumeUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeVolumeUsd);
            setCumulativeVolumeUsd(refVal_setCumulativeVolumeUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("input_token_balances"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("input_token_balances")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setInputTokenBalances;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInputTokenBalances);
            setInputTokenBalances(refVal_setInputTokenBalances);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("input_token_weights"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("input_token_weights")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setInputTokenWeights;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInputTokenWeights);
            setInputTokenWeights(refVal_setInputTokenWeights);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("output_token_supply"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("output_token_supply")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOutputTokenSupply;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOutputTokenSupply);
            setOutputTokenSupply(refVal_setOutputTokenSupply);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("output_token_price_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("output_token_price_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOutputTokenPriceUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOutputTokenPriceUsd);
            setOutputTokenPriceUsd(refVal_setOutputTokenPriceUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("staked_output_token_amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("staked_output_token_amount")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStakedOutputTokenAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStakedOutputTokenAmount);
            setStakedOutputTokenAmount(refVal_setStakedOutputTokenAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reward_token_emissions_amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reward_token_emissions_amount")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setRewardTokenEmissionsAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRewardTokenEmissionsAmount);
            setRewardTokenEmissionsAmount(refVal_setRewardTokenEmissionsAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reward_token_emissions_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reward_token_emissions_usd")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setRewardTokenEmissionsUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRewardTokenEmissionsUsd);
            setRewardTokenEmissionsUsd(refVal_setRewardTokenEmissionsUsd);
        }
    }
    return ok;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_Block_rangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_range")), m_Block_range));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_ProtocolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("protocol")), m_Protocol));
    }
    if(m_PoolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pool")), m_Pool));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_Total_value_locked_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_value_locked_usd")), m_Total_value_locked_usd));
    }
    if(m_Cumulative_supply_side_revenue_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_supply_side_revenue_usd")), m_Cumulative_supply_side_revenue_usd));
    }
    if(m_Hourly_supply_side_revenue_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly_supply_side_revenue_usd")), m_Hourly_supply_side_revenue_usd));
    }
    if(m_Cumulative_protocol_side_revenue_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_protocol_side_revenue_usd")), m_Cumulative_protocol_side_revenue_usd));
    }
    if(m_Hourly_protocol_side_revenue_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly_protocol_side_revenue_usd")), m_Hourly_protocol_side_revenue_usd));
    }
    if(m_Cumulative_total_revenue_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_total_revenue_usd")), m_Cumulative_total_revenue_usd));
    }
    if(m_Hourly_total_revenue_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly_total_revenue_usd")), m_Hourly_total_revenue_usd));
    }
    if(m_Hourly_volume_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly_volume_usd")), m_Hourly_volume_usd));
    }
    if(m_Hourly_volume_by_token_amountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly_volume_by_token_amount")), m_Hourly_volume_by_token_amount));
    }
    if(m_Hourly_volume_by_token_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly_volume_by_token_usd")), m_Hourly_volume_by_token_usd));
    }
    if(m_Cumulative_volume_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_volume_usd")), m_Cumulative_volume_usd));
    }
    if(m_Input_token_balancesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("input_token_balances")), m_Input_token_balances));
    }
    if(m_Input_token_weightsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("input_token_weights")), m_Input_token_weights));
    }
    if(m_Output_token_supplyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("output_token_supply")), m_Output_token_supply));
    }
    if(m_Output_token_price_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("output_token_price_usd")), m_Output_token_price_usd));
    }
    if(m_Staked_output_token_amountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("staked_output_token_amount")), m_Staked_output_token_amount));
    }
    if(m_Reward_token_emissions_amountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reward_token_emissions_amount")), m_Reward_token_emissions_amount));
    }
    if(m_Reward_token_emissions_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reward_token_emissions_usd")), m_Reward_token_emissions_usd));
    }
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_range"))))
    {
        utility::string_t refVal_setBlockRange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_range"))), refVal_setBlockRange );
        setBlockRange(refVal_setBlockRange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("protocol"))))
    {
        utility::string_t refVal_setProtocol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("protocol"))), refVal_setProtocol );
        setProtocol(refVal_setProtocol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pool"))))
    {
        utility::string_t refVal_setPool;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pool"))), refVal_setPool );
        setPool(refVal_setPool);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::string_t refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_value_locked_usd"))))
    {
        utility::string_t refVal_setTotalValueLockedUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_value_locked_usd"))), refVal_setTotalValueLockedUsd );
        setTotalValueLockedUsd(refVal_setTotalValueLockedUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_supply_side_revenue_usd"))))
    {
        utility::string_t refVal_setCumulativeSupplySideRevenueUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_supply_side_revenue_usd"))), refVal_setCumulativeSupplySideRevenueUsd );
        setCumulativeSupplySideRevenueUsd(refVal_setCumulativeSupplySideRevenueUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly_supply_side_revenue_usd"))))
    {
        utility::string_t refVal_setHourlySupplySideRevenueUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly_supply_side_revenue_usd"))), refVal_setHourlySupplySideRevenueUsd );
        setHourlySupplySideRevenueUsd(refVal_setHourlySupplySideRevenueUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_protocol_side_revenue_usd"))))
    {
        utility::string_t refVal_setCumulativeProtocolSideRevenueUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_protocol_side_revenue_usd"))), refVal_setCumulativeProtocolSideRevenueUsd );
        setCumulativeProtocolSideRevenueUsd(refVal_setCumulativeProtocolSideRevenueUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly_protocol_side_revenue_usd"))))
    {
        utility::string_t refVal_setHourlyProtocolSideRevenueUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly_protocol_side_revenue_usd"))), refVal_setHourlyProtocolSideRevenueUsd );
        setHourlyProtocolSideRevenueUsd(refVal_setHourlyProtocolSideRevenueUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_total_revenue_usd"))))
    {
        utility::string_t refVal_setCumulativeTotalRevenueUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_total_revenue_usd"))), refVal_setCumulativeTotalRevenueUsd );
        setCumulativeTotalRevenueUsd(refVal_setCumulativeTotalRevenueUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly_total_revenue_usd"))))
    {
        utility::string_t refVal_setHourlyTotalRevenueUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly_total_revenue_usd"))), refVal_setHourlyTotalRevenueUsd );
        setHourlyTotalRevenueUsd(refVal_setHourlyTotalRevenueUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly_volume_usd"))))
    {
        utility::string_t refVal_setHourlyVolumeUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly_volume_usd"))), refVal_setHourlyVolumeUsd );
        setHourlyVolumeUsd(refVal_setHourlyVolumeUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly_volume_by_token_amount"))))
    {
        std::vector<utility::string_t> refVal_setHourlyVolumeByTokenAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly_volume_by_token_amount"))), refVal_setHourlyVolumeByTokenAmount );
        setHourlyVolumeByTokenAmount(refVal_setHourlyVolumeByTokenAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly_volume_by_token_usd"))))
    {
        std::vector<utility::string_t> refVal_setHourlyVolumeByTokenUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly_volume_by_token_usd"))), refVal_setHourlyVolumeByTokenUsd );
        setHourlyVolumeByTokenUsd(refVal_setHourlyVolumeByTokenUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_volume_usd"))))
    {
        utility::string_t refVal_setCumulativeVolumeUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_volume_usd"))), refVal_setCumulativeVolumeUsd );
        setCumulativeVolumeUsd(refVal_setCumulativeVolumeUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("input_token_balances"))))
    {
        std::vector<utility::string_t> refVal_setInputTokenBalances;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("input_token_balances"))), refVal_setInputTokenBalances );
        setInputTokenBalances(refVal_setInputTokenBalances);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("input_token_weights"))))
    {
        std::vector<utility::string_t> refVal_setInputTokenWeights;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("input_token_weights"))), refVal_setInputTokenWeights );
        setInputTokenWeights(refVal_setInputTokenWeights);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("output_token_supply"))))
    {
        utility::string_t refVal_setOutputTokenSupply;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("output_token_supply"))), refVal_setOutputTokenSupply );
        setOutputTokenSupply(refVal_setOutputTokenSupply);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("output_token_price_usd"))))
    {
        utility::string_t refVal_setOutputTokenPriceUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("output_token_price_usd"))), refVal_setOutputTokenPriceUsd );
        setOutputTokenPriceUsd(refVal_setOutputTokenPriceUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("staked_output_token_amount"))))
    {
        utility::string_t refVal_setStakedOutputTokenAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("staked_output_token_amount"))), refVal_setStakedOutputTokenAmount );
        setStakedOutputTokenAmount(refVal_setStakedOutputTokenAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reward_token_emissions_amount"))))
    {
        std::vector<utility::string_t> refVal_setRewardTokenEmissionsAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reward_token_emissions_amount"))), refVal_setRewardTokenEmissionsAmount );
        setRewardTokenEmissionsAmount(refVal_setRewardTokenEmissionsAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reward_token_emissions_usd"))))
    {
        std::vector<utility::string_t> refVal_setRewardTokenEmissionsUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reward_token_emissions_usd"))), refVal_setRewardTokenEmissionsUsd );
        setRewardTokenEmissionsUsd(refVal_setRewardTokenEmissionsUsd);
    }
    return ok;
}

utility::datetime CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getEntryTime() const
{
    return m_Entry_time;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getRecvTime() const
{
    return m_Recv_time;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getBlockNumber() const
{
    return m_Block_number;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getBlockRange() const
{
    return m_Block_range;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setBlockRange(const utility::string_t& value)
{
    m_Block_range = value;
    m_Block_rangeIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::blockRangeIsSet() const
{
    return m_Block_rangeIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetBlock_range()
{
    m_Block_rangeIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getId() const
{
    return m_Id;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::idIsSet() const
{
    return m_IdIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getProtocol() const
{
    return m_Protocol;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setProtocol(const utility::string_t& value)
{
    m_Protocol = value;
    m_ProtocolIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::protocolIsSet() const
{
    return m_ProtocolIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetProtocol()
{
    m_ProtocolIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getPool() const
{
    return m_Pool;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setPool(const utility::string_t& value)
{
    m_Pool = value;
    m_PoolIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::poolIsSet() const
{
    return m_PoolIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetPool()
{
    m_PoolIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getTimestamp() const
{
    return m_Timestamp;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setTimestamp(const utility::string_t& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getTotalValueLockedUsd() const
{
    return m_Total_value_locked_usd;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setTotalValueLockedUsd(const utility::string_t& value)
{
    m_Total_value_locked_usd = value;
    m_Total_value_locked_usdIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::totalValueLockedUsdIsSet() const
{
    return m_Total_value_locked_usdIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetTotal_value_locked_usd()
{
    m_Total_value_locked_usdIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getCumulativeSupplySideRevenueUsd() const
{
    return m_Cumulative_supply_side_revenue_usd;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setCumulativeSupplySideRevenueUsd(const utility::string_t& value)
{
    m_Cumulative_supply_side_revenue_usd = value;
    m_Cumulative_supply_side_revenue_usdIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::cumulativeSupplySideRevenueUsdIsSet() const
{
    return m_Cumulative_supply_side_revenue_usdIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetCumulative_supply_side_revenue_usd()
{
    m_Cumulative_supply_side_revenue_usdIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getHourlySupplySideRevenueUsd() const
{
    return m_Hourly_supply_side_revenue_usd;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setHourlySupplySideRevenueUsd(const utility::string_t& value)
{
    m_Hourly_supply_side_revenue_usd = value;
    m_Hourly_supply_side_revenue_usdIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::hourlySupplySideRevenueUsdIsSet() const
{
    return m_Hourly_supply_side_revenue_usdIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetHourly_supply_side_revenue_usd()
{
    m_Hourly_supply_side_revenue_usdIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getCumulativeProtocolSideRevenueUsd() const
{
    return m_Cumulative_protocol_side_revenue_usd;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setCumulativeProtocolSideRevenueUsd(const utility::string_t& value)
{
    m_Cumulative_protocol_side_revenue_usd = value;
    m_Cumulative_protocol_side_revenue_usdIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::cumulativeProtocolSideRevenueUsdIsSet() const
{
    return m_Cumulative_protocol_side_revenue_usdIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetCumulative_protocol_side_revenue_usd()
{
    m_Cumulative_protocol_side_revenue_usdIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getHourlyProtocolSideRevenueUsd() const
{
    return m_Hourly_protocol_side_revenue_usd;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setHourlyProtocolSideRevenueUsd(const utility::string_t& value)
{
    m_Hourly_protocol_side_revenue_usd = value;
    m_Hourly_protocol_side_revenue_usdIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::hourlyProtocolSideRevenueUsdIsSet() const
{
    return m_Hourly_protocol_side_revenue_usdIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetHourly_protocol_side_revenue_usd()
{
    m_Hourly_protocol_side_revenue_usdIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getCumulativeTotalRevenueUsd() const
{
    return m_Cumulative_total_revenue_usd;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setCumulativeTotalRevenueUsd(const utility::string_t& value)
{
    m_Cumulative_total_revenue_usd = value;
    m_Cumulative_total_revenue_usdIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::cumulativeTotalRevenueUsdIsSet() const
{
    return m_Cumulative_total_revenue_usdIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetCumulative_total_revenue_usd()
{
    m_Cumulative_total_revenue_usdIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getHourlyTotalRevenueUsd() const
{
    return m_Hourly_total_revenue_usd;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setHourlyTotalRevenueUsd(const utility::string_t& value)
{
    m_Hourly_total_revenue_usd = value;
    m_Hourly_total_revenue_usdIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::hourlyTotalRevenueUsdIsSet() const
{
    return m_Hourly_total_revenue_usdIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetHourly_total_revenue_usd()
{
    m_Hourly_total_revenue_usdIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getHourlyVolumeUsd() const
{
    return m_Hourly_volume_usd;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setHourlyVolumeUsd(const utility::string_t& value)
{
    m_Hourly_volume_usd = value;
    m_Hourly_volume_usdIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::hourlyVolumeUsdIsSet() const
{
    return m_Hourly_volume_usdIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetHourly_volume_usd()
{
    m_Hourly_volume_usdIsSet = false;
}
std::vector<utility::string_t>& CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getHourlyVolumeByTokenAmount()
{
    return m_Hourly_volume_by_token_amount;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setHourlyVolumeByTokenAmount(const std::vector<utility::string_t>& value)
{
    m_Hourly_volume_by_token_amount = value;
    m_Hourly_volume_by_token_amountIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::hourlyVolumeByTokenAmountIsSet() const
{
    return m_Hourly_volume_by_token_amountIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetHourly_volume_by_token_amount()
{
    m_Hourly_volume_by_token_amountIsSet = false;
}
std::vector<utility::string_t>& CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getHourlyVolumeByTokenUsd()
{
    return m_Hourly_volume_by_token_usd;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setHourlyVolumeByTokenUsd(const std::vector<utility::string_t>& value)
{
    m_Hourly_volume_by_token_usd = value;
    m_Hourly_volume_by_token_usdIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::hourlyVolumeByTokenUsdIsSet() const
{
    return m_Hourly_volume_by_token_usdIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetHourly_volume_by_token_usd()
{
    m_Hourly_volume_by_token_usdIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getCumulativeVolumeUsd() const
{
    return m_Cumulative_volume_usd;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setCumulativeVolumeUsd(const utility::string_t& value)
{
    m_Cumulative_volume_usd = value;
    m_Cumulative_volume_usdIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::cumulativeVolumeUsdIsSet() const
{
    return m_Cumulative_volume_usdIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetCumulative_volume_usd()
{
    m_Cumulative_volume_usdIsSet = false;
}
std::vector<utility::string_t>& CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getInputTokenBalances()
{
    return m_Input_token_balances;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setInputTokenBalances(const std::vector<utility::string_t>& value)
{
    m_Input_token_balances = value;
    m_Input_token_balancesIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::inputTokenBalancesIsSet() const
{
    return m_Input_token_balancesIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetInput_token_balances()
{
    m_Input_token_balancesIsSet = false;
}
std::vector<utility::string_t>& CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getInputTokenWeights()
{
    return m_Input_token_weights;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setInputTokenWeights(const std::vector<utility::string_t>& value)
{
    m_Input_token_weights = value;
    m_Input_token_weightsIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::inputTokenWeightsIsSet() const
{
    return m_Input_token_weightsIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetInput_token_weights()
{
    m_Input_token_weightsIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getOutputTokenSupply() const
{
    return m_Output_token_supply;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setOutputTokenSupply(const utility::string_t& value)
{
    m_Output_token_supply = value;
    m_Output_token_supplyIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::outputTokenSupplyIsSet() const
{
    return m_Output_token_supplyIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetOutput_token_supply()
{
    m_Output_token_supplyIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getOutputTokenPriceUsd() const
{
    return m_Output_token_price_usd;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setOutputTokenPriceUsd(const utility::string_t& value)
{
    m_Output_token_price_usd = value;
    m_Output_token_price_usdIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::outputTokenPriceUsdIsSet() const
{
    return m_Output_token_price_usdIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetOutput_token_price_usd()
{
    m_Output_token_price_usdIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getStakedOutputTokenAmount() const
{
    return m_Staked_output_token_amount;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setStakedOutputTokenAmount(const utility::string_t& value)
{
    m_Staked_output_token_amount = value;
    m_Staked_output_token_amountIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::stakedOutputTokenAmountIsSet() const
{
    return m_Staked_output_token_amountIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetStaked_output_token_amount()
{
    m_Staked_output_token_amountIsSet = false;
}
std::vector<utility::string_t>& CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getRewardTokenEmissionsAmount()
{
    return m_Reward_token_emissions_amount;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setRewardTokenEmissionsAmount(const std::vector<utility::string_t>& value)
{
    m_Reward_token_emissions_amount = value;
    m_Reward_token_emissions_amountIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::rewardTokenEmissionsAmountIsSet() const
{
    return m_Reward_token_emissions_amountIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetReward_token_emissions_amount()
{
    m_Reward_token_emissions_amountIsSet = false;
}
std::vector<utility::string_t>& CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::getRewardTokenEmissionsUsd()
{
    return m_Reward_token_emissions_usd;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::setRewardTokenEmissionsUsd(const std::vector<utility::string_t>& value)
{
    m_Reward_token_emissions_usd = value;
    m_Reward_token_emissions_usdIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::rewardTokenEmissionsUsdIsSet() const
{
    return m_Reward_token_emissions_usdIsSet;
}

void CURVE_FINANCE_ETHEREUM_LiquidityPoolHourlySnapshotDTO::unsetReward_token_emissions_usd()
{
    m_Reward_token_emissions_usdIsSet = false;
}
}
}
}
}


