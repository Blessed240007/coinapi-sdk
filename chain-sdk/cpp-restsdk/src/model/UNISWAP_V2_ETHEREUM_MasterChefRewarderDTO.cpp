/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Block_range = utility::conversions::to_string_t("");
    m_Block_rangeIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Pool = utility::conversions::to_string_t("");
    m_PoolIsSet = false;
    m_Reward_token = utility::conversions::to_string_t("");
    m_Reward_tokenIsSet = false;
    m_Token_per_sec = utility::conversions::to_string_t("");
    m_Token_per_secIsSet = false;
    m_Rate_calculated_at = utility::conversions::to_string_t("");
    m_Rate_calculated_atIsSet = false;
    m_Has_funds = false;
    m_Has_fundsIsSet = false;
    m_Has_funds_at = utility::conversions::to_string_t("");
    m_Has_funds_atIsSet = false;
    m_Can_retrieve_rate = false;
    m_Can_retrieve_rateIsSet = false;
    m_Reward_rate_calculation_in_progress = false;
    m_Reward_rate_calculation_in_progressIsSet = false;
    m_ProbesIsSet = false;
}

UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::~UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO()
{
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::validate()
{
    // TODO: implement validation
}

web::json::value UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_Block_rangeIsSet)
    {
        val[utility::conversions::to_string_t(U("block_range"))] = ModelBase::toJson(m_Block_range);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_PoolIsSet)
    {
        val[utility::conversions::to_string_t(U("pool"))] = ModelBase::toJson(m_Pool);
    }
    if(m_Reward_tokenIsSet)
    {
        val[utility::conversions::to_string_t(U("reward_token"))] = ModelBase::toJson(m_Reward_token);
    }
    if(m_Token_per_secIsSet)
    {
        val[utility::conversions::to_string_t(U("token_per_sec"))] = ModelBase::toJson(m_Token_per_sec);
    }
    if(m_Rate_calculated_atIsSet)
    {
        val[utility::conversions::to_string_t(U("rate_calculated_at"))] = ModelBase::toJson(m_Rate_calculated_at);
    }
    if(m_Has_fundsIsSet)
    {
        val[utility::conversions::to_string_t(U("has_funds"))] = ModelBase::toJson(m_Has_funds);
    }
    if(m_Has_funds_atIsSet)
    {
        val[utility::conversions::to_string_t(U("has_funds_at"))] = ModelBase::toJson(m_Has_funds_at);
    }
    if(m_Can_retrieve_rateIsSet)
    {
        val[utility::conversions::to_string_t(U("can_retrieve_rate"))] = ModelBase::toJson(m_Can_retrieve_rate);
    }
    if(m_Reward_rate_calculation_in_progressIsSet)
    {
        val[utility::conversions::to_string_t(U("reward_rate_calculation_in_progress"))] = ModelBase::toJson(m_Reward_rate_calculation_in_progress);
    }
    if(m_ProbesIsSet)
    {
        val[utility::conversions::to_string_t(U("probes"))] = ModelBase::toJson(m_Probes);
    }

    return val;
}

bool UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_range"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_range")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBlockRange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockRange);
            setBlockRange(refVal_setBlockRange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pool"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pool")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPool;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPool);
            setPool(refVal_setPool);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reward_token"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reward_token")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRewardToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRewardToken);
            setRewardToken(refVal_setRewardToken);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("token_per_sec"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("token_per_sec")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTokenPerSec;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTokenPerSec);
            setTokenPerSec(refVal_setTokenPerSec);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rate_calculated_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rate_calculated_at")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRateCalculatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRateCalculatedAt);
            setRateCalculatedAt(refVal_setRateCalculatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("has_funds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("has_funds")));
        if(!fieldValue.is_null())
        {
            bool refVal_setHasFunds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHasFunds);
            setHasFunds(refVal_setHasFunds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("has_funds_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("has_funds_at")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHasFundsAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHasFundsAt);
            setHasFundsAt(refVal_setHasFundsAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("can_retrieve_rate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("can_retrieve_rate")));
        if(!fieldValue.is_null())
        {
            bool refVal_setCanRetrieveRate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCanRetrieveRate);
            setCanRetrieveRate(refVal_setCanRetrieveRate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reward_rate_calculation_in_progress"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reward_rate_calculation_in_progress")));
        if(!fieldValue.is_null())
        {
            bool refVal_setRewardRateCalculationInProgress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRewardRateCalculationInProgress);
            setRewardRateCalculationInProgress(refVal_setRewardRateCalculationInProgress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("probes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("probes")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setProbes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProbes);
            setProbes(refVal_setProbes);
        }
    }
    return ok;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_Block_rangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_range")), m_Block_range));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_PoolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pool")), m_Pool));
    }
    if(m_Reward_tokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reward_token")), m_Reward_token));
    }
    if(m_Token_per_secIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("token_per_sec")), m_Token_per_sec));
    }
    if(m_Rate_calculated_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rate_calculated_at")), m_Rate_calculated_at));
    }
    if(m_Has_fundsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("has_funds")), m_Has_funds));
    }
    if(m_Has_funds_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("has_funds_at")), m_Has_funds_at));
    }
    if(m_Can_retrieve_rateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("can_retrieve_rate")), m_Can_retrieve_rate));
    }
    if(m_Reward_rate_calculation_in_progressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reward_rate_calculation_in_progress")), m_Reward_rate_calculation_in_progress));
    }
    if(m_ProbesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("probes")), m_Probes));
    }
}

bool UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_range"))))
    {
        utility::string_t refVal_setBlockRange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_range"))), refVal_setBlockRange );
        setBlockRange(refVal_setBlockRange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pool"))))
    {
        utility::string_t refVal_setPool;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pool"))), refVal_setPool );
        setPool(refVal_setPool);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reward_token"))))
    {
        utility::string_t refVal_setRewardToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reward_token"))), refVal_setRewardToken );
        setRewardToken(refVal_setRewardToken);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("token_per_sec"))))
    {
        utility::string_t refVal_setTokenPerSec;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("token_per_sec"))), refVal_setTokenPerSec );
        setTokenPerSec(refVal_setTokenPerSec);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rate_calculated_at"))))
    {
        utility::string_t refVal_setRateCalculatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rate_calculated_at"))), refVal_setRateCalculatedAt );
        setRateCalculatedAt(refVal_setRateCalculatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("has_funds"))))
    {
        bool refVal_setHasFunds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("has_funds"))), refVal_setHasFunds );
        setHasFunds(refVal_setHasFunds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("has_funds_at"))))
    {
        utility::string_t refVal_setHasFundsAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("has_funds_at"))), refVal_setHasFundsAt );
        setHasFundsAt(refVal_setHasFundsAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("can_retrieve_rate"))))
    {
        bool refVal_setCanRetrieveRate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("can_retrieve_rate"))), refVal_setCanRetrieveRate );
        setCanRetrieveRate(refVal_setCanRetrieveRate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reward_rate_calculation_in_progress"))))
    {
        bool refVal_setRewardRateCalculationInProgress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reward_rate_calculation_in_progress"))), refVal_setRewardRateCalculationInProgress );
        setRewardRateCalculationInProgress(refVal_setRewardRateCalculationInProgress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("probes"))))
    {
        std::vector<utility::string_t> refVal_setProbes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("probes"))), refVal_setProbes );
        setProbes(refVal_setProbes);
    }
    return ok;
}

utility::datetime UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::getEntryTime() const
{
    return m_Entry_time;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::getRecvTime() const
{
    return m_Recv_time;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::getBlockNumber() const
{
    return m_Block_number;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::getBlockRange() const
{
    return m_Block_range;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::setBlockRange(const utility::string_t& value)
{
    m_Block_range = value;
    m_Block_rangeIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::blockRangeIsSet() const
{
    return m_Block_rangeIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::unsetBlock_range()
{
    m_Block_rangeIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::getId() const
{
    return m_Id;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::idIsSet() const
{
    return m_IdIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::getPool() const
{
    return m_Pool;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::setPool(const utility::string_t& value)
{
    m_Pool = value;
    m_PoolIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::poolIsSet() const
{
    return m_PoolIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::unsetPool()
{
    m_PoolIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::getRewardToken() const
{
    return m_Reward_token;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::setRewardToken(const utility::string_t& value)
{
    m_Reward_token = value;
    m_Reward_tokenIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::rewardTokenIsSet() const
{
    return m_Reward_tokenIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::unsetReward_token()
{
    m_Reward_tokenIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::getTokenPerSec() const
{
    return m_Token_per_sec;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::setTokenPerSec(const utility::string_t& value)
{
    m_Token_per_sec = value;
    m_Token_per_secIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::tokenPerSecIsSet() const
{
    return m_Token_per_secIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::unsetToken_per_sec()
{
    m_Token_per_secIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::getRateCalculatedAt() const
{
    return m_Rate_calculated_at;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::setRateCalculatedAt(const utility::string_t& value)
{
    m_Rate_calculated_at = value;
    m_Rate_calculated_atIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::rateCalculatedAtIsSet() const
{
    return m_Rate_calculated_atIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::unsetRate_calculated_at()
{
    m_Rate_calculated_atIsSet = false;
}
bool UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::isHasFunds() const
{
    return m_Has_funds;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::setHasFunds(bool value)
{
    m_Has_funds = value;
    m_Has_fundsIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::hasFundsIsSet() const
{
    return m_Has_fundsIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::unsetHas_funds()
{
    m_Has_fundsIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::getHasFundsAt() const
{
    return m_Has_funds_at;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::setHasFundsAt(const utility::string_t& value)
{
    m_Has_funds_at = value;
    m_Has_funds_atIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::hasFundsAtIsSet() const
{
    return m_Has_funds_atIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::unsetHas_funds_at()
{
    m_Has_funds_atIsSet = false;
}
bool UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::isCanRetrieveRate() const
{
    return m_Can_retrieve_rate;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::setCanRetrieveRate(bool value)
{
    m_Can_retrieve_rate = value;
    m_Can_retrieve_rateIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::canRetrieveRateIsSet() const
{
    return m_Can_retrieve_rateIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::unsetCan_retrieve_rate()
{
    m_Can_retrieve_rateIsSet = false;
}
bool UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::isRewardRateCalculationInProgress() const
{
    return m_Reward_rate_calculation_in_progress;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::setRewardRateCalculationInProgress(bool value)
{
    m_Reward_rate_calculation_in_progress = value;
    m_Reward_rate_calculation_in_progressIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::rewardRateCalculationInProgressIsSet() const
{
    return m_Reward_rate_calculation_in_progressIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::unsetReward_rate_calculation_in_progress()
{
    m_Reward_rate_calculation_in_progressIsSet = false;
}
std::vector<utility::string_t>& UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::getProbes()
{
    return m_Probes;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::setProbes(const std::vector<utility::string_t>& value)
{
    m_Probes = value;
    m_ProbesIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::probesIsSet() const
{
    return m_ProbesIsSet;
}

void UNISWAP_V2_ETHEREUM_MasterChefRewarderDTO::unsetProbes()
{
    m_ProbesIsSet = false;
}
}
}
}
}


