/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PANCAKESWAP_V3_ETHEREUM_WithdrawDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::PANCAKESWAP_V3_ETHEREUM_WithdrawDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Hash = utility::conversions::to_string_t("");
    m_HashIsSet = false;
    m_Nonce = utility::conversions::to_string_t("");
    m_NonceIsSet = false;
    m_Log_index = 0;
    m_Log_indexIsSet = false;
    m_Gas_limit = utility::conversions::to_string_t("");
    m_Gas_limitIsSet = false;
    m_Gas_used = utility::conversions::to_string_t("");
    m_Gas_usedIsSet = false;
    m_Gas_price = utility::conversions::to_string_t("");
    m_Gas_priceIsSet = false;
    m_Protocol = utility::conversions::to_string_t("");
    m_ProtocolIsSet = false;
    m_Account = utility::conversions::to_string_t("");
    m_AccountIsSet = false;
    m_Position = utility::conversions::to_string_t("");
    m_PositionIsSet = false;
    m_Tick_lower = utility::conversions::to_string_t("");
    m_Tick_lowerIsSet = false;
    m_Tick_upper = utility::conversions::to_string_t("");
    m_Tick_upperIsSet = false;
    m_Pool = utility::conversions::to_string_t("");
    m_PoolIsSet = false;
    m_Timestamp = utility::conversions::to_string_t("");
    m_TimestampIsSet = false;
    m_Liquidity = utility::conversions::to_string_t("");
    m_LiquidityIsSet = false;
    m_Input_tokensIsSet = false;
    m_Input_token_amountsIsSet = false;
    m_Reserve_amountsIsSet = false;
    m_Amount_usd = utility::conversions::to_string_t("");
    m_Amount_usdIsSet = false;
}

PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::~PANCAKESWAP_V3_ETHEREUM_WithdrawDTO()
{
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::validate()
{
    // TODO: implement validation
}

web::json::value PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_HashIsSet)
    {
        val[utility::conversions::to_string_t(U("hash"))] = ModelBase::toJson(m_Hash);
    }
    if(m_NonceIsSet)
    {
        val[utility::conversions::to_string_t(U("nonce"))] = ModelBase::toJson(m_Nonce);
    }
    if(m_Log_indexIsSet)
    {
        val[utility::conversions::to_string_t(U("log_index"))] = ModelBase::toJson(m_Log_index);
    }
    if(m_Gas_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("gas_limit"))] = ModelBase::toJson(m_Gas_limit);
    }
    if(m_Gas_usedIsSet)
    {
        val[utility::conversions::to_string_t(U("gas_used"))] = ModelBase::toJson(m_Gas_used);
    }
    if(m_Gas_priceIsSet)
    {
        val[utility::conversions::to_string_t(U("gas_price"))] = ModelBase::toJson(m_Gas_price);
    }
    if(m_ProtocolIsSet)
    {
        val[utility::conversions::to_string_t(U("protocol"))] = ModelBase::toJson(m_Protocol);
    }
    if(m_AccountIsSet)
    {
        val[utility::conversions::to_string_t(U("account"))] = ModelBase::toJson(m_Account);
    }
    if(m_PositionIsSet)
    {
        val[utility::conversions::to_string_t(U("position"))] = ModelBase::toJson(m_Position);
    }
    if(m_Tick_lowerIsSet)
    {
        val[utility::conversions::to_string_t(U("tick_lower"))] = ModelBase::toJson(m_Tick_lower);
    }
    if(m_Tick_upperIsSet)
    {
        val[utility::conversions::to_string_t(U("tick_upper"))] = ModelBase::toJson(m_Tick_upper);
    }
    if(m_PoolIsSet)
    {
        val[utility::conversions::to_string_t(U("pool"))] = ModelBase::toJson(m_Pool);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_LiquidityIsSet)
    {
        val[utility::conversions::to_string_t(U("liquidity"))] = ModelBase::toJson(m_Liquidity);
    }
    if(m_Input_tokensIsSet)
    {
        val[utility::conversions::to_string_t(U("input_tokens"))] = ModelBase::toJson(m_Input_tokens);
    }
    if(m_Input_token_amountsIsSet)
    {
        val[utility::conversions::to_string_t(U("input_token_amounts"))] = ModelBase::toJson(m_Input_token_amounts);
    }
    if(m_Reserve_amountsIsSet)
    {
        val[utility::conversions::to_string_t(U("reserve_amounts"))] = ModelBase::toJson(m_Reserve_amounts);
    }
    if(m_Amount_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("amount_usd"))] = ModelBase::toJson(m_Amount_usd);
    }

    return val;
}

bool PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hash"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hash")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHash;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHash);
            setHash(refVal_setHash);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nonce"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nonce")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNonce;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNonce);
            setNonce(refVal_setNonce);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("log_index"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("log_index")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLogIndex;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLogIndex);
            setLogIndex(refVal_setLogIndex);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gas_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gas_limit")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGasLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGasLimit);
            setGasLimit(refVal_setGasLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gas_used"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gas_used")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGasUsed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGasUsed);
            setGasUsed(refVal_setGasUsed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gas_price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gas_price")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGasPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGasPrice);
            setGasPrice(refVal_setGasPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("protocol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("protocol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProtocol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProtocol);
            setProtocol(refVal_setProtocol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("account"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("account")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccount);
            setAccount(refVal_setAccount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("position"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("position")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPosition;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPosition);
            setPosition(refVal_setPosition);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tick_lower"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tick_lower")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTickLower;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTickLower);
            setTickLower(refVal_setTickLower);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tick_upper"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tick_upper")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTickUpper;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTickUpper);
            setTickUpper(refVal_setTickUpper);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pool"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pool")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPool;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPool);
            setPool(refVal_setPool);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("liquidity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("liquidity")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLiquidity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLiquidity);
            setLiquidity(refVal_setLiquidity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("input_tokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("input_tokens")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setInputTokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInputTokens);
            setInputTokens(refVal_setInputTokens);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("input_token_amounts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("input_token_amounts")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setInputTokenAmounts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInputTokenAmounts);
            setInputTokenAmounts(refVal_setInputTokenAmounts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reserve_amounts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reserve_amounts")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setReserveAmounts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReserveAmounts);
            setReserveAmounts(refVal_setReserveAmounts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("amount_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("amount_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAmountUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAmountUsd);
            setAmountUsd(refVal_setAmountUsd);
        }
    }
    return ok;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_HashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hash")), m_Hash));
    }
    if(m_NonceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nonce")), m_Nonce));
    }
    if(m_Log_indexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("log_index")), m_Log_index));
    }
    if(m_Gas_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gas_limit")), m_Gas_limit));
    }
    if(m_Gas_usedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gas_used")), m_Gas_used));
    }
    if(m_Gas_priceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gas_price")), m_Gas_price));
    }
    if(m_ProtocolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("protocol")), m_Protocol));
    }
    if(m_AccountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("account")), m_Account));
    }
    if(m_PositionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("position")), m_Position));
    }
    if(m_Tick_lowerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tick_lower")), m_Tick_lower));
    }
    if(m_Tick_upperIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tick_upper")), m_Tick_upper));
    }
    if(m_PoolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pool")), m_Pool));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_LiquidityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("liquidity")), m_Liquidity));
    }
    if(m_Input_tokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("input_tokens")), m_Input_tokens));
    }
    if(m_Input_token_amountsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("input_token_amounts")), m_Input_token_amounts));
    }
    if(m_Reserve_amountsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reserve_amounts")), m_Reserve_amounts));
    }
    if(m_Amount_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("amount_usd")), m_Amount_usd));
    }
}

bool PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hash"))))
    {
        utility::string_t refVal_setHash;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hash"))), refVal_setHash );
        setHash(refVal_setHash);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nonce"))))
    {
        utility::string_t refVal_setNonce;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nonce"))), refVal_setNonce );
        setNonce(refVal_setNonce);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("log_index"))))
    {
        int32_t refVal_setLogIndex;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("log_index"))), refVal_setLogIndex );
        setLogIndex(refVal_setLogIndex);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gas_limit"))))
    {
        utility::string_t refVal_setGasLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gas_limit"))), refVal_setGasLimit );
        setGasLimit(refVal_setGasLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gas_used"))))
    {
        utility::string_t refVal_setGasUsed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gas_used"))), refVal_setGasUsed );
        setGasUsed(refVal_setGasUsed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gas_price"))))
    {
        utility::string_t refVal_setGasPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gas_price"))), refVal_setGasPrice );
        setGasPrice(refVal_setGasPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("protocol"))))
    {
        utility::string_t refVal_setProtocol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("protocol"))), refVal_setProtocol );
        setProtocol(refVal_setProtocol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("account"))))
    {
        utility::string_t refVal_setAccount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("account"))), refVal_setAccount );
        setAccount(refVal_setAccount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("position"))))
    {
        utility::string_t refVal_setPosition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("position"))), refVal_setPosition );
        setPosition(refVal_setPosition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tick_lower"))))
    {
        utility::string_t refVal_setTickLower;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tick_lower"))), refVal_setTickLower );
        setTickLower(refVal_setTickLower);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tick_upper"))))
    {
        utility::string_t refVal_setTickUpper;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tick_upper"))), refVal_setTickUpper );
        setTickUpper(refVal_setTickUpper);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pool"))))
    {
        utility::string_t refVal_setPool;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pool"))), refVal_setPool );
        setPool(refVal_setPool);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::string_t refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("liquidity"))))
    {
        utility::string_t refVal_setLiquidity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("liquidity"))), refVal_setLiquidity );
        setLiquidity(refVal_setLiquidity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("input_tokens"))))
    {
        std::vector<utility::string_t> refVal_setInputTokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("input_tokens"))), refVal_setInputTokens );
        setInputTokens(refVal_setInputTokens);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("input_token_amounts"))))
    {
        std::vector<utility::string_t> refVal_setInputTokenAmounts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("input_token_amounts"))), refVal_setInputTokenAmounts );
        setInputTokenAmounts(refVal_setInputTokenAmounts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reserve_amounts"))))
    {
        std::vector<utility::string_t> refVal_setReserveAmounts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reserve_amounts"))), refVal_setReserveAmounts );
        setReserveAmounts(refVal_setReserveAmounts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("amount_usd"))))
    {
        utility::string_t refVal_setAmountUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("amount_usd"))), refVal_setAmountUsd );
        setAmountUsd(refVal_setAmountUsd);
    }
    return ok;
}

utility::datetime PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::getEntryTime() const
{
    return m_Entry_time;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::getRecvTime() const
{
    return m_Recv_time;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::getBlockNumber() const
{
    return m_Block_number;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::getId() const
{
    return m_Id;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::idIsSet() const
{
    return m_IdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::getHash() const
{
    return m_Hash;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::setHash(const utility::string_t& value)
{
    m_Hash = value;
    m_HashIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::hashIsSet() const
{
    return m_HashIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::unsetHash()
{
    m_HashIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::getNonce() const
{
    return m_Nonce;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::setNonce(const utility::string_t& value)
{
    m_Nonce = value;
    m_NonceIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::nonceIsSet() const
{
    return m_NonceIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::unsetNonce()
{
    m_NonceIsSet = false;
}
int32_t PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::getLogIndex() const
{
    return m_Log_index;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::setLogIndex(int32_t value)
{
    m_Log_index = value;
    m_Log_indexIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::logIndexIsSet() const
{
    return m_Log_indexIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::unsetLog_index()
{
    m_Log_indexIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::getGasLimit() const
{
    return m_Gas_limit;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::setGasLimit(const utility::string_t& value)
{
    m_Gas_limit = value;
    m_Gas_limitIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::gasLimitIsSet() const
{
    return m_Gas_limitIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::unsetGas_limit()
{
    m_Gas_limitIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::getGasUsed() const
{
    return m_Gas_used;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::setGasUsed(const utility::string_t& value)
{
    m_Gas_used = value;
    m_Gas_usedIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::gasUsedIsSet() const
{
    return m_Gas_usedIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::unsetGas_used()
{
    m_Gas_usedIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::getGasPrice() const
{
    return m_Gas_price;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::setGasPrice(const utility::string_t& value)
{
    m_Gas_price = value;
    m_Gas_priceIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::gasPriceIsSet() const
{
    return m_Gas_priceIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::unsetGas_price()
{
    m_Gas_priceIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::getProtocol() const
{
    return m_Protocol;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::setProtocol(const utility::string_t& value)
{
    m_Protocol = value;
    m_ProtocolIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::protocolIsSet() const
{
    return m_ProtocolIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::unsetProtocol()
{
    m_ProtocolIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::getAccount() const
{
    return m_Account;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::setAccount(const utility::string_t& value)
{
    m_Account = value;
    m_AccountIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::accountIsSet() const
{
    return m_AccountIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::unsetAccount()
{
    m_AccountIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::getPosition() const
{
    return m_Position;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::setPosition(const utility::string_t& value)
{
    m_Position = value;
    m_PositionIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::positionIsSet() const
{
    return m_PositionIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::unsetPosition()
{
    m_PositionIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::getTickLower() const
{
    return m_Tick_lower;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::setTickLower(const utility::string_t& value)
{
    m_Tick_lower = value;
    m_Tick_lowerIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::tickLowerIsSet() const
{
    return m_Tick_lowerIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::unsetTick_lower()
{
    m_Tick_lowerIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::getTickUpper() const
{
    return m_Tick_upper;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::setTickUpper(const utility::string_t& value)
{
    m_Tick_upper = value;
    m_Tick_upperIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::tickUpperIsSet() const
{
    return m_Tick_upperIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::unsetTick_upper()
{
    m_Tick_upperIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::getPool() const
{
    return m_Pool;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::setPool(const utility::string_t& value)
{
    m_Pool = value;
    m_PoolIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::poolIsSet() const
{
    return m_PoolIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::unsetPool()
{
    m_PoolIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::getTimestamp() const
{
    return m_Timestamp;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::setTimestamp(const utility::string_t& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::getLiquidity() const
{
    return m_Liquidity;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::setLiquidity(const utility::string_t& value)
{
    m_Liquidity = value;
    m_LiquidityIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::liquidityIsSet() const
{
    return m_LiquidityIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::unsetLiquidity()
{
    m_LiquidityIsSet = false;
}
std::vector<utility::string_t>& PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::getInputTokens()
{
    return m_Input_tokens;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::setInputTokens(const std::vector<utility::string_t>& value)
{
    m_Input_tokens = value;
    m_Input_tokensIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::inputTokensIsSet() const
{
    return m_Input_tokensIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::unsetInput_tokens()
{
    m_Input_tokensIsSet = false;
}
std::vector<utility::string_t>& PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::getInputTokenAmounts()
{
    return m_Input_token_amounts;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::setInputTokenAmounts(const std::vector<utility::string_t>& value)
{
    m_Input_token_amounts = value;
    m_Input_token_amountsIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::inputTokenAmountsIsSet() const
{
    return m_Input_token_amountsIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::unsetInput_token_amounts()
{
    m_Input_token_amountsIsSet = false;
}
std::vector<utility::string_t>& PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::getReserveAmounts()
{
    return m_Reserve_amounts;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::setReserveAmounts(const std::vector<utility::string_t>& value)
{
    m_Reserve_amounts = value;
    m_Reserve_amountsIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::reserveAmountsIsSet() const
{
    return m_Reserve_amountsIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::unsetReserve_amounts()
{
    m_Reserve_amountsIsSet = false;
}
utility::string_t PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::getAmountUsd() const
{
    return m_Amount_usd;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::setAmountUsd(const utility::string_t& value)
{
    m_Amount_usd = value;
    m_Amount_usdIsSet = true;
}

bool PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::amountUsdIsSet() const
{
    return m_Amount_usdIsSet;
}

void PANCAKESWAP_V3_ETHEREUM_WithdrawDTO::unsetAmount_usd()
{
    m_Amount_usdIsSet = false;
}
}
}
}
}


