/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UNISWAP_V2_ETHEREUM_LiquidityPoolDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::UNISWAP_V2_ETHEREUM_LiquidityPoolDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Vid = 0L;
    m_VidIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Protocol = utility::conversions::to_string_t("");
    m_ProtocolIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Input_tokensIsSet = false;
    m_Output_token = utility::conversions::to_string_t("");
    m_Output_tokenIsSet = false;
    m_Reward_tokensIsSet = false;
    m_FeesIsSet = false;
    m_Is_single_sided = false;
    m_Is_single_sidedIsSet = false;
    m_Created_timestamp = utility::conversions::to_string_t("");
    m_Created_timestampIsSet = false;
    m_Created_block_number = utility::conversions::to_string_t("");
    m_Created_block_numberIsSet = false;
    m_Total_value_locked_usd = utility::conversions::to_string_t("");
    m_Total_value_locked_usdIsSet = false;
    m_Cumulative_supply_side_revenue_usd = utility::conversions::to_string_t("");
    m_Cumulative_supply_side_revenue_usdIsSet = false;
    m_Cumulative_protocol_side_revenue_usd = utility::conversions::to_string_t("");
    m_Cumulative_protocol_side_revenue_usdIsSet = false;
    m_Cumulative_total_revenue_usd = utility::conversions::to_string_t("");
    m_Cumulative_total_revenue_usdIsSet = false;
    m_Cumulative_volume_usd = utility::conversions::to_string_t("");
    m_Cumulative_volume_usdIsSet = false;
    m_Input_token_balancesIsSet = false;
    m_Input_token_weightsIsSet = false;
    m_Output_token_supply = utility::conversions::to_string_t("");
    m_Output_token_supplyIsSet = false;
    m_Output_token_price_usd = utility::conversions::to_string_t("");
    m_Output_token_price_usdIsSet = false;
    m_Staked_output_token_amount = utility::conversions::to_string_t("");
    m_Staked_output_token_amountIsSet = false;
    m_Reward_token_emissions_amountIsSet = false;
    m_Reward_token_emissions_usdIsSet = false;
    m_Evaluated_ask = 0.0;
    m_Evaluated_askIsSet = false;
}

UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::~UNISWAP_V2_ETHEREUM_LiquidityPoolDTO()
{
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::validate()
{
    // TODO: implement validation
}

web::json::value UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_VidIsSet)
    {
        val[utility::conversions::to_string_t(U("vid"))] = ModelBase::toJson(m_Vid);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_ProtocolIsSet)
    {
        val[utility::conversions::to_string_t(U("protocol"))] = ModelBase::toJson(m_Protocol);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_Input_tokensIsSet)
    {
        val[utility::conversions::to_string_t(U("input_tokens"))] = ModelBase::toJson(m_Input_tokens);
    }
    if(m_Output_tokenIsSet)
    {
        val[utility::conversions::to_string_t(U("output_token"))] = ModelBase::toJson(m_Output_token);
    }
    if(m_Reward_tokensIsSet)
    {
        val[utility::conversions::to_string_t(U("reward_tokens"))] = ModelBase::toJson(m_Reward_tokens);
    }
    if(m_FeesIsSet)
    {
        val[utility::conversions::to_string_t(U("fees"))] = ModelBase::toJson(m_Fees);
    }
    if(m_Is_single_sidedIsSet)
    {
        val[utility::conversions::to_string_t(U("is_single_sided"))] = ModelBase::toJson(m_Is_single_sided);
    }
    if(m_Created_timestampIsSet)
    {
        val[utility::conversions::to_string_t(U("created_timestamp"))] = ModelBase::toJson(m_Created_timestamp);
    }
    if(m_Created_block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("created_block_number"))] = ModelBase::toJson(m_Created_block_number);
    }
    if(m_Total_value_locked_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("total_value_locked_usd"))] = ModelBase::toJson(m_Total_value_locked_usd);
    }
    if(m_Cumulative_supply_side_revenue_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_supply_side_revenue_usd"))] = ModelBase::toJson(m_Cumulative_supply_side_revenue_usd);
    }
    if(m_Cumulative_protocol_side_revenue_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_protocol_side_revenue_usd"))] = ModelBase::toJson(m_Cumulative_protocol_side_revenue_usd);
    }
    if(m_Cumulative_total_revenue_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_total_revenue_usd"))] = ModelBase::toJson(m_Cumulative_total_revenue_usd);
    }
    if(m_Cumulative_volume_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("cumulative_volume_usd"))] = ModelBase::toJson(m_Cumulative_volume_usd);
    }
    if(m_Input_token_balancesIsSet)
    {
        val[utility::conversions::to_string_t(U("input_token_balances"))] = ModelBase::toJson(m_Input_token_balances);
    }
    if(m_Input_token_weightsIsSet)
    {
        val[utility::conversions::to_string_t(U("input_token_weights"))] = ModelBase::toJson(m_Input_token_weights);
    }
    if(m_Output_token_supplyIsSet)
    {
        val[utility::conversions::to_string_t(U("output_token_supply"))] = ModelBase::toJson(m_Output_token_supply);
    }
    if(m_Output_token_price_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("output_token_price_usd"))] = ModelBase::toJson(m_Output_token_price_usd);
    }
    if(m_Staked_output_token_amountIsSet)
    {
        val[utility::conversions::to_string_t(U("staked_output_token_amount"))] = ModelBase::toJson(m_Staked_output_token_amount);
    }
    if(m_Reward_token_emissions_amountIsSet)
    {
        val[utility::conversions::to_string_t(U("reward_token_emissions_amount"))] = ModelBase::toJson(m_Reward_token_emissions_amount);
    }
    if(m_Reward_token_emissions_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("reward_token_emissions_usd"))] = ModelBase::toJson(m_Reward_token_emissions_usd);
    }
    if(m_Evaluated_askIsSet)
    {
        val[utility::conversions::to_string_t(U("evaluated_ask"))] = ModelBase::toJson(m_Evaluated_ask);
    }

    return val;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vid")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setVid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVid);
            setVid(refVal_setVid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("protocol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("protocol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProtocol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProtocol);
            setProtocol(refVal_setProtocol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("input_tokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("input_tokens")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setInputTokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInputTokens);
            setInputTokens(refVal_setInputTokens);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("output_token"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("output_token")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOutputToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOutputToken);
            setOutputToken(refVal_setOutputToken);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reward_tokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reward_tokens")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setRewardTokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRewardTokens);
            setRewardTokens(refVal_setRewardTokens);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fees"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fees")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setFees;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFees);
            setFees(refVal_setFees);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("is_single_sided"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("is_single_sided")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsSingleSided;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsSingleSided);
            setIsSingleSided(refVal_setIsSingleSided);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_timestamp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCreatedTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedTimestamp);
            setCreatedTimestamp(refVal_setCreatedTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created_block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created_block_number")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCreatedBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedBlockNumber);
            setCreatedBlockNumber(refVal_setCreatedBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_value_locked_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_value_locked_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTotalValueLockedUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalValueLockedUsd);
            setTotalValueLockedUsd(refVal_setTotalValueLockedUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_supply_side_revenue_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_supply_side_revenue_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCumulativeSupplySideRevenueUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeSupplySideRevenueUsd);
            setCumulativeSupplySideRevenueUsd(refVal_setCumulativeSupplySideRevenueUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_protocol_side_revenue_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_protocol_side_revenue_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCumulativeProtocolSideRevenueUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeProtocolSideRevenueUsd);
            setCumulativeProtocolSideRevenueUsd(refVal_setCumulativeProtocolSideRevenueUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_total_revenue_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_total_revenue_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCumulativeTotalRevenueUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeTotalRevenueUsd);
            setCumulativeTotalRevenueUsd(refVal_setCumulativeTotalRevenueUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cumulative_volume_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cumulative_volume_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCumulativeVolumeUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCumulativeVolumeUsd);
            setCumulativeVolumeUsd(refVal_setCumulativeVolumeUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("input_token_balances"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("input_token_balances")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setInputTokenBalances;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInputTokenBalances);
            setInputTokenBalances(refVal_setInputTokenBalances);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("input_token_weights"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("input_token_weights")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setInputTokenWeights;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInputTokenWeights);
            setInputTokenWeights(refVal_setInputTokenWeights);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("output_token_supply"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("output_token_supply")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOutputTokenSupply;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOutputTokenSupply);
            setOutputTokenSupply(refVal_setOutputTokenSupply);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("output_token_price_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("output_token_price_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOutputTokenPriceUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOutputTokenPriceUsd);
            setOutputTokenPriceUsd(refVal_setOutputTokenPriceUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("staked_output_token_amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("staked_output_token_amount")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStakedOutputTokenAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStakedOutputTokenAmount);
            setStakedOutputTokenAmount(refVal_setStakedOutputTokenAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reward_token_emissions_amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reward_token_emissions_amount")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setRewardTokenEmissionsAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRewardTokenEmissionsAmount);
            setRewardTokenEmissionsAmount(refVal_setRewardTokenEmissionsAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reward_token_emissions_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reward_token_emissions_usd")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setRewardTokenEmissionsUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRewardTokenEmissionsUsd);
            setRewardTokenEmissionsUsd(refVal_setRewardTokenEmissionsUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("evaluated_ask"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("evaluated_ask")));
        if(!fieldValue.is_null())
        {
            double refVal_setEvaluatedAsk;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEvaluatedAsk);
            setEvaluatedAsk(refVal_setEvaluatedAsk);
        }
    }
    return ok;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_VidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vid")), m_Vid));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_ProtocolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("protocol")), m_Protocol));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol")), m_Symbol));
    }
    if(m_Input_tokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("input_tokens")), m_Input_tokens));
    }
    if(m_Output_tokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("output_token")), m_Output_token));
    }
    if(m_Reward_tokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reward_tokens")), m_Reward_tokens));
    }
    if(m_FeesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fees")), m_Fees));
    }
    if(m_Is_single_sidedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("is_single_sided")), m_Is_single_sided));
    }
    if(m_Created_timestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_timestamp")), m_Created_timestamp));
    }
    if(m_Created_block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created_block_number")), m_Created_block_number));
    }
    if(m_Total_value_locked_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_value_locked_usd")), m_Total_value_locked_usd));
    }
    if(m_Cumulative_supply_side_revenue_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_supply_side_revenue_usd")), m_Cumulative_supply_side_revenue_usd));
    }
    if(m_Cumulative_protocol_side_revenue_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_protocol_side_revenue_usd")), m_Cumulative_protocol_side_revenue_usd));
    }
    if(m_Cumulative_total_revenue_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_total_revenue_usd")), m_Cumulative_total_revenue_usd));
    }
    if(m_Cumulative_volume_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cumulative_volume_usd")), m_Cumulative_volume_usd));
    }
    if(m_Input_token_balancesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("input_token_balances")), m_Input_token_balances));
    }
    if(m_Input_token_weightsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("input_token_weights")), m_Input_token_weights));
    }
    if(m_Output_token_supplyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("output_token_supply")), m_Output_token_supply));
    }
    if(m_Output_token_price_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("output_token_price_usd")), m_Output_token_price_usd));
    }
    if(m_Staked_output_token_amountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("staked_output_token_amount")), m_Staked_output_token_amount));
    }
    if(m_Reward_token_emissions_amountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reward_token_emissions_amount")), m_Reward_token_emissions_amount));
    }
    if(m_Reward_token_emissions_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reward_token_emissions_usd")), m_Reward_token_emissions_usd));
    }
    if(m_Evaluated_askIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("evaluated_ask")), m_Evaluated_ask));
    }
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vid"))))
    {
        int64_t refVal_setVid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vid"))), refVal_setVid );
        setVid(refVal_setVid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("protocol"))))
    {
        utility::string_t refVal_setProtocol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("protocol"))), refVal_setProtocol );
        setProtocol(refVal_setProtocol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("input_tokens"))))
    {
        std::vector<utility::string_t> refVal_setInputTokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("input_tokens"))), refVal_setInputTokens );
        setInputTokens(refVal_setInputTokens);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("output_token"))))
    {
        utility::string_t refVal_setOutputToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("output_token"))), refVal_setOutputToken );
        setOutputToken(refVal_setOutputToken);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reward_tokens"))))
    {
        std::vector<utility::string_t> refVal_setRewardTokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reward_tokens"))), refVal_setRewardTokens );
        setRewardTokens(refVal_setRewardTokens);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fees"))))
    {
        std::vector<utility::string_t> refVal_setFees;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fees"))), refVal_setFees );
        setFees(refVal_setFees);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("is_single_sided"))))
    {
        bool refVal_setIsSingleSided;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("is_single_sided"))), refVal_setIsSingleSided );
        setIsSingleSided(refVal_setIsSingleSided);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_timestamp"))))
    {
        utility::string_t refVal_setCreatedTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_timestamp"))), refVal_setCreatedTimestamp );
        setCreatedTimestamp(refVal_setCreatedTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created_block_number"))))
    {
        utility::string_t refVal_setCreatedBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created_block_number"))), refVal_setCreatedBlockNumber );
        setCreatedBlockNumber(refVal_setCreatedBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_value_locked_usd"))))
    {
        utility::string_t refVal_setTotalValueLockedUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_value_locked_usd"))), refVal_setTotalValueLockedUsd );
        setTotalValueLockedUsd(refVal_setTotalValueLockedUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_supply_side_revenue_usd"))))
    {
        utility::string_t refVal_setCumulativeSupplySideRevenueUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_supply_side_revenue_usd"))), refVal_setCumulativeSupplySideRevenueUsd );
        setCumulativeSupplySideRevenueUsd(refVal_setCumulativeSupplySideRevenueUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_protocol_side_revenue_usd"))))
    {
        utility::string_t refVal_setCumulativeProtocolSideRevenueUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_protocol_side_revenue_usd"))), refVal_setCumulativeProtocolSideRevenueUsd );
        setCumulativeProtocolSideRevenueUsd(refVal_setCumulativeProtocolSideRevenueUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_total_revenue_usd"))))
    {
        utility::string_t refVal_setCumulativeTotalRevenueUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_total_revenue_usd"))), refVal_setCumulativeTotalRevenueUsd );
        setCumulativeTotalRevenueUsd(refVal_setCumulativeTotalRevenueUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cumulative_volume_usd"))))
    {
        utility::string_t refVal_setCumulativeVolumeUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cumulative_volume_usd"))), refVal_setCumulativeVolumeUsd );
        setCumulativeVolumeUsd(refVal_setCumulativeVolumeUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("input_token_balances"))))
    {
        std::vector<utility::string_t> refVal_setInputTokenBalances;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("input_token_balances"))), refVal_setInputTokenBalances );
        setInputTokenBalances(refVal_setInputTokenBalances);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("input_token_weights"))))
    {
        std::vector<utility::string_t> refVal_setInputTokenWeights;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("input_token_weights"))), refVal_setInputTokenWeights );
        setInputTokenWeights(refVal_setInputTokenWeights);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("output_token_supply"))))
    {
        utility::string_t refVal_setOutputTokenSupply;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("output_token_supply"))), refVal_setOutputTokenSupply );
        setOutputTokenSupply(refVal_setOutputTokenSupply);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("output_token_price_usd"))))
    {
        utility::string_t refVal_setOutputTokenPriceUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("output_token_price_usd"))), refVal_setOutputTokenPriceUsd );
        setOutputTokenPriceUsd(refVal_setOutputTokenPriceUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("staked_output_token_amount"))))
    {
        utility::string_t refVal_setStakedOutputTokenAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("staked_output_token_amount"))), refVal_setStakedOutputTokenAmount );
        setStakedOutputTokenAmount(refVal_setStakedOutputTokenAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reward_token_emissions_amount"))))
    {
        std::vector<utility::string_t> refVal_setRewardTokenEmissionsAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reward_token_emissions_amount"))), refVal_setRewardTokenEmissionsAmount );
        setRewardTokenEmissionsAmount(refVal_setRewardTokenEmissionsAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reward_token_emissions_usd"))))
    {
        std::vector<utility::string_t> refVal_setRewardTokenEmissionsUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reward_token_emissions_usd"))), refVal_setRewardTokenEmissionsUsd );
        setRewardTokenEmissionsUsd(refVal_setRewardTokenEmissionsUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("evaluated_ask"))))
    {
        double refVal_setEvaluatedAsk;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("evaluated_ask"))), refVal_setEvaluatedAsk );
        setEvaluatedAsk(refVal_setEvaluatedAsk);
    }
    return ok;
}

utility::datetime UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getEntryTime() const
{
    return m_Entry_time;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getRecvTime() const
{
    return m_Recv_time;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getBlockNumber() const
{
    return m_Block_number;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
int64_t UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getVid() const
{
    return m_Vid;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setVid(int64_t value)
{
    m_Vid = value;
    m_VidIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::vidIsSet() const
{
    return m_VidIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetVid()
{
    m_VidIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getId() const
{
    return m_Id;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::idIsSet() const
{
    return m_IdIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getProtocol() const
{
    return m_Protocol;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setProtocol(const utility::string_t& value)
{
    m_Protocol = value;
    m_ProtocolIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::protocolIsSet() const
{
    return m_ProtocolIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetProtocol()
{
    m_ProtocolIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getName() const
{
    return m_Name;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::nameIsSet() const
{
    return m_NameIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getSymbol() const
{
    return m_Symbol;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetSymbol()
{
    m_SymbolIsSet = false;
}
std::vector<utility::string_t>& UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getInputTokens()
{
    return m_Input_tokens;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setInputTokens(const std::vector<utility::string_t>& value)
{
    m_Input_tokens = value;
    m_Input_tokensIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::inputTokensIsSet() const
{
    return m_Input_tokensIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetInput_tokens()
{
    m_Input_tokensIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getOutputToken() const
{
    return m_Output_token;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setOutputToken(const utility::string_t& value)
{
    m_Output_token = value;
    m_Output_tokenIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::outputTokenIsSet() const
{
    return m_Output_tokenIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetOutput_token()
{
    m_Output_tokenIsSet = false;
}
std::vector<utility::string_t>& UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getRewardTokens()
{
    return m_Reward_tokens;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setRewardTokens(const std::vector<utility::string_t>& value)
{
    m_Reward_tokens = value;
    m_Reward_tokensIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::rewardTokensIsSet() const
{
    return m_Reward_tokensIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetReward_tokens()
{
    m_Reward_tokensIsSet = false;
}
std::vector<utility::string_t>& UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getFees()
{
    return m_Fees;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setFees(const std::vector<utility::string_t>& value)
{
    m_Fees = value;
    m_FeesIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::feesIsSet() const
{
    return m_FeesIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetFees()
{
    m_FeesIsSet = false;
}
bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::isIsSingleSided() const
{
    return m_Is_single_sided;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setIsSingleSided(bool value)
{
    m_Is_single_sided = value;
    m_Is_single_sidedIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::isSingleSidedIsSet() const
{
    return m_Is_single_sidedIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetIs_single_sided()
{
    m_Is_single_sidedIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getCreatedTimestamp() const
{
    return m_Created_timestamp;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setCreatedTimestamp(const utility::string_t& value)
{
    m_Created_timestamp = value;
    m_Created_timestampIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::createdTimestampIsSet() const
{
    return m_Created_timestampIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetCreated_timestamp()
{
    m_Created_timestampIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getCreatedBlockNumber() const
{
    return m_Created_block_number;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setCreatedBlockNumber(const utility::string_t& value)
{
    m_Created_block_number = value;
    m_Created_block_numberIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::createdBlockNumberIsSet() const
{
    return m_Created_block_numberIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetCreated_block_number()
{
    m_Created_block_numberIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getTotalValueLockedUsd() const
{
    return m_Total_value_locked_usd;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setTotalValueLockedUsd(const utility::string_t& value)
{
    m_Total_value_locked_usd = value;
    m_Total_value_locked_usdIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::totalValueLockedUsdIsSet() const
{
    return m_Total_value_locked_usdIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetTotal_value_locked_usd()
{
    m_Total_value_locked_usdIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getCumulativeSupplySideRevenueUsd() const
{
    return m_Cumulative_supply_side_revenue_usd;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setCumulativeSupplySideRevenueUsd(const utility::string_t& value)
{
    m_Cumulative_supply_side_revenue_usd = value;
    m_Cumulative_supply_side_revenue_usdIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::cumulativeSupplySideRevenueUsdIsSet() const
{
    return m_Cumulative_supply_side_revenue_usdIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetCumulative_supply_side_revenue_usd()
{
    m_Cumulative_supply_side_revenue_usdIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getCumulativeProtocolSideRevenueUsd() const
{
    return m_Cumulative_protocol_side_revenue_usd;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setCumulativeProtocolSideRevenueUsd(const utility::string_t& value)
{
    m_Cumulative_protocol_side_revenue_usd = value;
    m_Cumulative_protocol_side_revenue_usdIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::cumulativeProtocolSideRevenueUsdIsSet() const
{
    return m_Cumulative_protocol_side_revenue_usdIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetCumulative_protocol_side_revenue_usd()
{
    m_Cumulative_protocol_side_revenue_usdIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getCumulativeTotalRevenueUsd() const
{
    return m_Cumulative_total_revenue_usd;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setCumulativeTotalRevenueUsd(const utility::string_t& value)
{
    m_Cumulative_total_revenue_usd = value;
    m_Cumulative_total_revenue_usdIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::cumulativeTotalRevenueUsdIsSet() const
{
    return m_Cumulative_total_revenue_usdIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetCumulative_total_revenue_usd()
{
    m_Cumulative_total_revenue_usdIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getCumulativeVolumeUsd() const
{
    return m_Cumulative_volume_usd;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setCumulativeVolumeUsd(const utility::string_t& value)
{
    m_Cumulative_volume_usd = value;
    m_Cumulative_volume_usdIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::cumulativeVolumeUsdIsSet() const
{
    return m_Cumulative_volume_usdIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetCumulative_volume_usd()
{
    m_Cumulative_volume_usdIsSet = false;
}
std::vector<utility::string_t>& UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getInputTokenBalances()
{
    return m_Input_token_balances;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setInputTokenBalances(const std::vector<utility::string_t>& value)
{
    m_Input_token_balances = value;
    m_Input_token_balancesIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::inputTokenBalancesIsSet() const
{
    return m_Input_token_balancesIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetInput_token_balances()
{
    m_Input_token_balancesIsSet = false;
}
std::vector<utility::string_t>& UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getInputTokenWeights()
{
    return m_Input_token_weights;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setInputTokenWeights(const std::vector<utility::string_t>& value)
{
    m_Input_token_weights = value;
    m_Input_token_weightsIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::inputTokenWeightsIsSet() const
{
    return m_Input_token_weightsIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetInput_token_weights()
{
    m_Input_token_weightsIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getOutputTokenSupply() const
{
    return m_Output_token_supply;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setOutputTokenSupply(const utility::string_t& value)
{
    m_Output_token_supply = value;
    m_Output_token_supplyIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::outputTokenSupplyIsSet() const
{
    return m_Output_token_supplyIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetOutput_token_supply()
{
    m_Output_token_supplyIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getOutputTokenPriceUsd() const
{
    return m_Output_token_price_usd;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setOutputTokenPriceUsd(const utility::string_t& value)
{
    m_Output_token_price_usd = value;
    m_Output_token_price_usdIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::outputTokenPriceUsdIsSet() const
{
    return m_Output_token_price_usdIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetOutput_token_price_usd()
{
    m_Output_token_price_usdIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getStakedOutputTokenAmount() const
{
    return m_Staked_output_token_amount;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setStakedOutputTokenAmount(const utility::string_t& value)
{
    m_Staked_output_token_amount = value;
    m_Staked_output_token_amountIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::stakedOutputTokenAmountIsSet() const
{
    return m_Staked_output_token_amountIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetStaked_output_token_amount()
{
    m_Staked_output_token_amountIsSet = false;
}
std::vector<utility::string_t>& UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getRewardTokenEmissionsAmount()
{
    return m_Reward_token_emissions_amount;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setRewardTokenEmissionsAmount(const std::vector<utility::string_t>& value)
{
    m_Reward_token_emissions_amount = value;
    m_Reward_token_emissions_amountIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::rewardTokenEmissionsAmountIsSet() const
{
    return m_Reward_token_emissions_amountIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetReward_token_emissions_amount()
{
    m_Reward_token_emissions_amountIsSet = false;
}
std::vector<utility::string_t>& UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getRewardTokenEmissionsUsd()
{
    return m_Reward_token_emissions_usd;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setRewardTokenEmissionsUsd(const std::vector<utility::string_t>& value)
{
    m_Reward_token_emissions_usd = value;
    m_Reward_token_emissions_usdIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::rewardTokenEmissionsUsdIsSet() const
{
    return m_Reward_token_emissions_usdIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetReward_token_emissions_usd()
{
    m_Reward_token_emissions_usdIsSet = false;
}
double UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::getEvaluatedAsk() const
{
    return m_Evaluated_ask;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::setEvaluatedAsk(double value)
{
    m_Evaluated_ask = value;
    m_Evaluated_askIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::evaluatedAskIsSet() const
{
    return m_Evaluated_askIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolDTO::unsetEvaluated_ask()
{
    m_Evaluated_askIsSet = false;
}
}
}
}
}


