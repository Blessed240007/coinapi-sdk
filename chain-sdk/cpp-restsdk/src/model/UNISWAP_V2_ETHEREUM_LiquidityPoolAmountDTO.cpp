/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Vid = 0L;
    m_VidIsSet = false;
    m_Block_range = utility::conversions::to_string_t("");
    m_Block_rangeIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Input_tokensIsSet = false;
    m_Input_token_balancesIsSet = false;
}

UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::~UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO()
{
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::validate()
{
    // TODO: implement validation
}

web::json::value UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_VidIsSet)
    {
        val[utility::conversions::to_string_t(U("vid"))] = ModelBase::toJson(m_Vid);
    }
    if(m_Block_rangeIsSet)
    {
        val[utility::conversions::to_string_t(U("block_range"))] = ModelBase::toJson(m_Block_range);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_Input_tokensIsSet)
    {
        val[utility::conversions::to_string_t(U("input_tokens"))] = ModelBase::toJson(m_Input_tokens);
    }
    if(m_Input_token_balancesIsSet)
    {
        val[utility::conversions::to_string_t(U("input_token_balances"))] = ModelBase::toJson(m_Input_token_balances);
    }

    return val;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vid")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setVid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVid);
            setVid(refVal_setVid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_range"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_range")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBlockRange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockRange);
            setBlockRange(refVal_setBlockRange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("input_tokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("input_tokens")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setInputTokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInputTokens);
            setInputTokens(refVal_setInputTokens);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("input_token_balances"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("input_token_balances")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setInputTokenBalances;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInputTokenBalances);
            setInputTokenBalances(refVal_setInputTokenBalances);
        }
    }
    return ok;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_VidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vid")), m_Vid));
    }
    if(m_Block_rangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_range")), m_Block_range));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_Input_tokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("input_tokens")), m_Input_tokens));
    }
    if(m_Input_token_balancesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("input_token_balances")), m_Input_token_balances));
    }
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vid"))))
    {
        int64_t refVal_setVid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vid"))), refVal_setVid );
        setVid(refVal_setVid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_range"))))
    {
        utility::string_t refVal_setBlockRange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_range"))), refVal_setBlockRange );
        setBlockRange(refVal_setBlockRange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("input_tokens"))))
    {
        std::vector<utility::string_t> refVal_setInputTokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("input_tokens"))), refVal_setInputTokens );
        setInputTokens(refVal_setInputTokens);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("input_token_balances"))))
    {
        std::vector<utility::string_t> refVal_setInputTokenBalances;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("input_token_balances"))), refVal_setInputTokenBalances );
        setInputTokenBalances(refVal_setInputTokenBalances);
    }
    return ok;
}

utility::datetime UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::getEntryTime() const
{
    return m_Entry_time;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::getRecvTime() const
{
    return m_Recv_time;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::getBlockNumber() const
{
    return m_Block_number;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
int64_t UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::getVid() const
{
    return m_Vid;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::setVid(int64_t value)
{
    m_Vid = value;
    m_VidIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::vidIsSet() const
{
    return m_VidIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::unsetVid()
{
    m_VidIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::getBlockRange() const
{
    return m_Block_range;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::setBlockRange(const utility::string_t& value)
{
    m_Block_range = value;
    m_Block_rangeIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::blockRangeIsSet() const
{
    return m_Block_rangeIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::unsetBlock_range()
{
    m_Block_rangeIsSet = false;
}
utility::string_t UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::getId() const
{
    return m_Id;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::idIsSet() const
{
    return m_IdIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::unsetId()
{
    m_IdIsSet = false;
}
std::vector<utility::string_t>& UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::getInputTokens()
{
    return m_Input_tokens;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::setInputTokens(const std::vector<utility::string_t>& value)
{
    m_Input_tokens = value;
    m_Input_tokensIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::inputTokensIsSet() const
{
    return m_Input_tokensIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::unsetInput_tokens()
{
    m_Input_tokensIsSet = false;
}
std::vector<utility::string_t>& UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::getInputTokenBalances()
{
    return m_Input_token_balances;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::setInputTokenBalances(const std::vector<utility::string_t>& value)
{
    m_Input_token_balances = value;
    m_Input_token_balancesIsSet = true;
}

bool UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::inputTokenBalancesIsSet() const
{
    return m_Input_token_balancesIsSet;
}

void UNISWAP_V2_ETHEREUM_LiquidityPoolAmountDTO::unsetInput_token_balances()
{
    m_Input_token_balancesIsSet = false;
}
}
}
}
}


