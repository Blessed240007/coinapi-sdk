/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CURVE_FINANCE_ETHEREUM_DepositDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CURVE_FINANCE_ETHEREUM_DepositDTO::CURVE_FINANCE_ETHEREUM_DepositDTO()
{
    m_Entry_time = utility::datetime();
    m_Entry_timeIsSet = false;
    m_Recv_time = utility::datetime();
    m_Recv_timeIsSet = false;
    m_Block_number = 0L;
    m_Block_numberIsSet = false;
    m_Block_range = utility::conversions::to_string_t("");
    m_Block_rangeIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Hash = utility::conversions::to_string_t("");
    m_HashIsSet = false;
    m_Log_index = 0;
    m_Log_indexIsSet = false;
    m_Protocol = utility::conversions::to_string_t("");
    m_ProtocolIsSet = false;
    m_To = utility::conversions::to_string_t("");
    m_ToIsSet = false;
    m_From = utility::conversions::to_string_t("");
    m_FromIsSet = false;
    m_Timestamp = utility::conversions::to_string_t("");
    m_TimestampIsSet = false;
    m_Input_tokensIsSet = false;
    m_Output_token = utility::conversions::to_string_t("");
    m_Output_tokenIsSet = false;
    m_Input_token_amountsIsSet = false;
    m_Output_token_amount = utility::conversions::to_string_t("");
    m_Output_token_amountIsSet = false;
    m_Amount_usd = utility::conversions::to_string_t("");
    m_Amount_usdIsSet = false;
    m_Pool = utility::conversions::to_string_t("");
    m_PoolIsSet = false;
}

CURVE_FINANCE_ETHEREUM_DepositDTO::~CURVE_FINANCE_ETHEREUM_DepositDTO()
{
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::validate()
{
    // TODO: implement validation
}

web::json::value CURVE_FINANCE_ETHEREUM_DepositDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Entry_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("entry_time"))] = ModelBase::toJson(m_Entry_time);
    }
    if(m_Recv_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("recv_time"))] = ModelBase::toJson(m_Recv_time);
    }
    if(m_Block_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("block_number"))] = ModelBase::toJson(m_Block_number);
    }
    if(m_Block_rangeIsSet)
    {
        val[utility::conversions::to_string_t(U("block_range"))] = ModelBase::toJson(m_Block_range);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_HashIsSet)
    {
        val[utility::conversions::to_string_t(U("hash"))] = ModelBase::toJson(m_Hash);
    }
    if(m_Log_indexIsSet)
    {
        val[utility::conversions::to_string_t(U("log_index"))] = ModelBase::toJson(m_Log_index);
    }
    if(m_ProtocolIsSet)
    {
        val[utility::conversions::to_string_t(U("protocol"))] = ModelBase::toJson(m_Protocol);
    }
    if(m_ToIsSet)
    {
        val[utility::conversions::to_string_t(U("to"))] = ModelBase::toJson(m_To);
    }
    if(m_FromIsSet)
    {
        val[utility::conversions::to_string_t(U("from"))] = ModelBase::toJson(m_From);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_Input_tokensIsSet)
    {
        val[utility::conversions::to_string_t(U("input_tokens"))] = ModelBase::toJson(m_Input_tokens);
    }
    if(m_Output_tokenIsSet)
    {
        val[utility::conversions::to_string_t(U("output_token"))] = ModelBase::toJson(m_Output_token);
    }
    if(m_Input_token_amountsIsSet)
    {
        val[utility::conversions::to_string_t(U("input_token_amounts"))] = ModelBase::toJson(m_Input_token_amounts);
    }
    if(m_Output_token_amountIsSet)
    {
        val[utility::conversions::to_string_t(U("output_token_amount"))] = ModelBase::toJson(m_Output_token_amount);
    }
    if(m_Amount_usdIsSet)
    {
        val[utility::conversions::to_string_t(U("amount_usd"))] = ModelBase::toJson(m_Amount_usd);
    }
    if(m_PoolIsSet)
    {
        val[utility::conversions::to_string_t(U("pool"))] = ModelBase::toJson(m_Pool);
    }

    return val;
}

bool CURVE_FINANCE_ETHEREUM_DepositDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("entry_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entry_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setEntryTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryTime);
            setEntryTime(refVal_setEntryTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recv_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recv_time")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setRecvTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecvTime);
            setRecvTime(refVal_setRecvTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_number")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBlockNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockNumber);
            setBlockNumber(refVal_setBlockNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block_range"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block_range")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBlockRange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlockRange);
            setBlockRange(refVal_setBlockRange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hash"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hash")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHash;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHash);
            setHash(refVal_setHash);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("log_index"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("log_index")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLogIndex;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLogIndex);
            setLogIndex(refVal_setLogIndex);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("protocol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("protocol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProtocol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProtocol);
            setProtocol(refVal_setProtocol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("to"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("to")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTo);
            setTo(refVal_setTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("from"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("from")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFrom);
            setFrom(refVal_setFrom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("input_tokens"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("input_tokens")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setInputTokens;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInputTokens);
            setInputTokens(refVal_setInputTokens);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("output_token"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("output_token")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOutputToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOutputToken);
            setOutputToken(refVal_setOutputToken);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("input_token_amounts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("input_token_amounts")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setInputTokenAmounts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInputTokenAmounts);
            setInputTokenAmounts(refVal_setInputTokenAmounts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("output_token_amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("output_token_amount")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOutputTokenAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOutputTokenAmount);
            setOutputTokenAmount(refVal_setOutputTokenAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("amount_usd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("amount_usd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAmountUsd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAmountUsd);
            setAmountUsd(refVal_setAmountUsd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pool"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pool")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPool;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPool);
            setPool(refVal_setPool);
        }
    }
    return ok;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Entry_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entry_time")), m_Entry_time));
    }
    if(m_Recv_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recv_time")), m_Recv_time));
    }
    if(m_Block_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_number")), m_Block_number));
    }
    if(m_Block_rangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block_range")), m_Block_range));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_HashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hash")), m_Hash));
    }
    if(m_Log_indexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("log_index")), m_Log_index));
    }
    if(m_ProtocolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("protocol")), m_Protocol));
    }
    if(m_ToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("to")), m_To));
    }
    if(m_FromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("from")), m_From));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_Input_tokensIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("input_tokens")), m_Input_tokens));
    }
    if(m_Output_tokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("output_token")), m_Output_token));
    }
    if(m_Input_token_amountsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("input_token_amounts")), m_Input_token_amounts));
    }
    if(m_Output_token_amountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("output_token_amount")), m_Output_token_amount));
    }
    if(m_Amount_usdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("amount_usd")), m_Amount_usd));
    }
    if(m_PoolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pool")), m_Pool));
    }
}

bool CURVE_FINANCE_ETHEREUM_DepositDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("entry_time"))))
    {
        utility::datetime refVal_setEntryTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entry_time"))), refVal_setEntryTime );
        setEntryTime(refVal_setEntryTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recv_time"))))
    {
        utility::datetime refVal_setRecvTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recv_time"))), refVal_setRecvTime );
        setRecvTime(refVal_setRecvTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_number"))))
    {
        int64_t refVal_setBlockNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_number"))), refVal_setBlockNumber );
        setBlockNumber(refVal_setBlockNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block_range"))))
    {
        utility::string_t refVal_setBlockRange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block_range"))), refVal_setBlockRange );
        setBlockRange(refVal_setBlockRange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hash"))))
    {
        utility::string_t refVal_setHash;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hash"))), refVal_setHash );
        setHash(refVal_setHash);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("log_index"))))
    {
        int32_t refVal_setLogIndex;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("log_index"))), refVal_setLogIndex );
        setLogIndex(refVal_setLogIndex);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("protocol"))))
    {
        utility::string_t refVal_setProtocol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("protocol"))), refVal_setProtocol );
        setProtocol(refVal_setProtocol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("to"))))
    {
        utility::string_t refVal_setTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("to"))), refVal_setTo );
        setTo(refVal_setTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("from"))))
    {
        utility::string_t refVal_setFrom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("from"))), refVal_setFrom );
        setFrom(refVal_setFrom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::string_t refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("input_tokens"))))
    {
        std::vector<utility::string_t> refVal_setInputTokens;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("input_tokens"))), refVal_setInputTokens );
        setInputTokens(refVal_setInputTokens);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("output_token"))))
    {
        utility::string_t refVal_setOutputToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("output_token"))), refVal_setOutputToken );
        setOutputToken(refVal_setOutputToken);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("input_token_amounts"))))
    {
        std::vector<utility::string_t> refVal_setInputTokenAmounts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("input_token_amounts"))), refVal_setInputTokenAmounts );
        setInputTokenAmounts(refVal_setInputTokenAmounts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("output_token_amount"))))
    {
        utility::string_t refVal_setOutputTokenAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("output_token_amount"))), refVal_setOutputTokenAmount );
        setOutputTokenAmount(refVal_setOutputTokenAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("amount_usd"))))
    {
        utility::string_t refVal_setAmountUsd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("amount_usd"))), refVal_setAmountUsd );
        setAmountUsd(refVal_setAmountUsd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pool"))))
    {
        utility::string_t refVal_setPool;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pool"))), refVal_setPool );
        setPool(refVal_setPool);
    }
    return ok;
}

utility::datetime CURVE_FINANCE_ETHEREUM_DepositDTO::getEntryTime() const
{
    return m_Entry_time;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::setEntryTime(const utility::datetime& value)
{
    m_Entry_time = value;
    m_Entry_timeIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_DepositDTO::entryTimeIsSet() const
{
    return m_Entry_timeIsSet;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::unsetEntry_time()
{
    m_Entry_timeIsSet = false;
}
utility::datetime CURVE_FINANCE_ETHEREUM_DepositDTO::getRecvTime() const
{
    return m_Recv_time;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::setRecvTime(const utility::datetime& value)
{
    m_Recv_time = value;
    m_Recv_timeIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_DepositDTO::recvTimeIsSet() const
{
    return m_Recv_timeIsSet;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::unsetRecv_time()
{
    m_Recv_timeIsSet = false;
}
int64_t CURVE_FINANCE_ETHEREUM_DepositDTO::getBlockNumber() const
{
    return m_Block_number;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::setBlockNumber(int64_t value)
{
    m_Block_number = value;
    m_Block_numberIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_DepositDTO::blockNumberIsSet() const
{
    return m_Block_numberIsSet;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::unsetBlock_number()
{
    m_Block_numberIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_DepositDTO::getBlockRange() const
{
    return m_Block_range;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::setBlockRange(const utility::string_t& value)
{
    m_Block_range = value;
    m_Block_rangeIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_DepositDTO::blockRangeIsSet() const
{
    return m_Block_rangeIsSet;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::unsetBlock_range()
{
    m_Block_rangeIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_DepositDTO::getId() const
{
    return m_Id;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_DepositDTO::idIsSet() const
{
    return m_IdIsSet;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_DepositDTO::getHash() const
{
    return m_Hash;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::setHash(const utility::string_t& value)
{
    m_Hash = value;
    m_HashIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_DepositDTO::hashIsSet() const
{
    return m_HashIsSet;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::unsetHash()
{
    m_HashIsSet = false;
}
int32_t CURVE_FINANCE_ETHEREUM_DepositDTO::getLogIndex() const
{
    return m_Log_index;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::setLogIndex(int32_t value)
{
    m_Log_index = value;
    m_Log_indexIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_DepositDTO::logIndexIsSet() const
{
    return m_Log_indexIsSet;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::unsetLog_index()
{
    m_Log_indexIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_DepositDTO::getProtocol() const
{
    return m_Protocol;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::setProtocol(const utility::string_t& value)
{
    m_Protocol = value;
    m_ProtocolIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_DepositDTO::protocolIsSet() const
{
    return m_ProtocolIsSet;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::unsetProtocol()
{
    m_ProtocolIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_DepositDTO::getTo() const
{
    return m_To;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::setTo(const utility::string_t& value)
{
    m_To = value;
    m_ToIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_DepositDTO::toIsSet() const
{
    return m_ToIsSet;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::unsetTo()
{
    m_ToIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_DepositDTO::getFrom() const
{
    return m_From;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::setFrom(const utility::string_t& value)
{
    m_From = value;
    m_FromIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_DepositDTO::fromIsSet() const
{
    return m_FromIsSet;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::unsetFrom()
{
    m_FromIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_DepositDTO::getTimestamp() const
{
    return m_Timestamp;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::setTimestamp(const utility::string_t& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_DepositDTO::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
std::vector<utility::string_t>& CURVE_FINANCE_ETHEREUM_DepositDTO::getInputTokens()
{
    return m_Input_tokens;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::setInputTokens(const std::vector<utility::string_t>& value)
{
    m_Input_tokens = value;
    m_Input_tokensIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_DepositDTO::inputTokensIsSet() const
{
    return m_Input_tokensIsSet;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::unsetInput_tokens()
{
    m_Input_tokensIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_DepositDTO::getOutputToken() const
{
    return m_Output_token;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::setOutputToken(const utility::string_t& value)
{
    m_Output_token = value;
    m_Output_tokenIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_DepositDTO::outputTokenIsSet() const
{
    return m_Output_tokenIsSet;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::unsetOutput_token()
{
    m_Output_tokenIsSet = false;
}
std::vector<utility::string_t>& CURVE_FINANCE_ETHEREUM_DepositDTO::getInputTokenAmounts()
{
    return m_Input_token_amounts;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::setInputTokenAmounts(const std::vector<utility::string_t>& value)
{
    m_Input_token_amounts = value;
    m_Input_token_amountsIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_DepositDTO::inputTokenAmountsIsSet() const
{
    return m_Input_token_amountsIsSet;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::unsetInput_token_amounts()
{
    m_Input_token_amountsIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_DepositDTO::getOutputTokenAmount() const
{
    return m_Output_token_amount;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::setOutputTokenAmount(const utility::string_t& value)
{
    m_Output_token_amount = value;
    m_Output_token_amountIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_DepositDTO::outputTokenAmountIsSet() const
{
    return m_Output_token_amountIsSet;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::unsetOutput_token_amount()
{
    m_Output_token_amountIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_DepositDTO::getAmountUsd() const
{
    return m_Amount_usd;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::setAmountUsd(const utility::string_t& value)
{
    m_Amount_usd = value;
    m_Amount_usdIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_DepositDTO::amountUsdIsSet() const
{
    return m_Amount_usdIsSet;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::unsetAmount_usd()
{
    m_Amount_usdIsSet = false;
}
utility::string_t CURVE_FINANCE_ETHEREUM_DepositDTO::getPool() const
{
    return m_Pool;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::setPool(const utility::string_t& value)
{
    m_Pool = value;
    m_PoolIsSet = true;
}

bool CURVE_FINANCE_ETHEREUM_DepositDTO::poolIsSet() const
{
    return m_PoolIsSet;
}

void CURVE_FINANCE_ETHEREUM_DepositDTO::unsetPool()
{
    m_PoolIsSet = false;
}
}
}
}
}


