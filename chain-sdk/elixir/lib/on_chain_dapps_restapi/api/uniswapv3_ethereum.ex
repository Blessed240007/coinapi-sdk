# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule OnChainDapps-RESTAPI.Api.UNISWAPV3ETHEREUM do
  @moduledoc """
  API calls for all endpoints tagged `UNISWAPV3ETHEREUM`.
  """

  alias OnChainDapps-RESTAPI.Connection
  import OnChainDapps-RESTAPI.RequestBuilder

  @doc """
  Accounts (current)
  Gets accounts.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV3EthereumAccountDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec u_niswapv3_ethereum_accounts__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV3EthereumAccountDto.t)} | {:error, Tesla.Env.t}
  def u_niswapv3_ethereum_accounts__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswap_v3_ethereum/accounts/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV3EthereumAccountDto{}]}
    ])
  end

  @doc """
  Swaps (current)
  Gets swaps.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV3EthereumSwapDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec u_niswapv3_ethereum_swaps__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV3EthereumSwapDto.t)} | {:error, Tesla.Env.t}
  def u_niswapv3_ethereum_swaps__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswap_v3_ethereum/swaps/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV3EthereumSwapDto{}]}
    ])
  end

  @doc """
  Tokens (current)
  Gets tokens.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV3EthereumTokenDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec u_niswapv3_ethereum_tokens__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV3EthereumTokenDto.t)} | {:error, Tesla.Env.t}
  def u_niswapv3_ethereum_tokens__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/uniswap_v3_ethereum/tokens/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV3EthereumTokenDto{}]}
    ])
  end
end
