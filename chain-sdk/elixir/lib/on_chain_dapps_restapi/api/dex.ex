# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule OnChainDapps-RESTAPI.Api.Dex do
  @moduledoc """
  API calls for all endpoints tagged `Dex`.
  """

  alias OnChainDapps-RESTAPI.Connection
  import OnChainDapps-RESTAPI.RequestBuilder

  @doc """
  Batches (current)
  Gets batches.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DexBatchDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_batches__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexBatchDto.t)} | {:error, Tesla.Env.t}
  def dex_batches__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/batches/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexBatchDto{}]}
    ])
  end

  @doc """
  Deposits (current)
  Gets deposits.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DexDepositDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_deposits__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexDepositDto.t)} | {:error, Tesla.Env.t}
  def dex_deposits__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/deposits/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexDepositDto{}]}
    ])
  end

  @doc """
  Orders (current)
  Gets orders.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DexOrderDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_orders__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexOrderDto.t)} | {:error, Tesla.Env.t}
  def dex_orders__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/orders/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexOrderDto{}]}
    ])
  end

  @doc """
  Prices (current)
  Gets prices.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DexPriceDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_prices__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexPriceDto.t)} | {:error, Tesla.Env.t}
  def dex_prices__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/prices/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexPriceDto{}]}
    ])
  end

  @doc """
  Solutions (current)
  Gets solutions.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DexSolutionDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_solutions__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexSolutionDto.t)} | {:error, Tesla.Env.t}
  def dex_solutions__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/solutions/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexSolutionDto{}]}
    ])
  end

  @doc """
  Stats (current)
  Gets stats.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DexStatsDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_stats__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexStatsDto.t)} | {:error, Tesla.Env.t}
  def dex_stats__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/stats/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexStatsDto{}]}
    ])
  end

  @doc """
  Tokens (current)
  Gets tokens.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DexTokenDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_tokens__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexTokenDto.t)} | {:error, Tesla.Env.t}
  def dex_tokens__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/tokens/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexTokenDto{}]}
    ])
  end

  @doc """
  Trades (current)
  Gets trades.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DexTradeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_trades__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexTradeDto.t)} | {:error, Tesla.Env.t}
  def dex_trades__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/trades/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexTradeDto{}]}
    ])
  end

  @doc """
  Users (current)
  Gets users.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DexUserDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_users__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexUserDto.t)} | {:error, Tesla.Env.t}
  def dex_users__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/users/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexUserDto{}]}
    ])
  end

  @doc """
  WithdrawRequests (current)
  Gets withdrawRequests.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DexWithdrawRequestDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_withdraw_requests__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexWithdrawRequestDto.t)} | {:error, Tesla.Env.t}
  def dex_withdraw_requests__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/withdrawRequests/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexWithdrawRequestDto{}]}
    ])
  end

  @doc """
  Withdraws (current)
  Gets withdraws.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%DexWithdrawDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec dex_withdraws__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.DexWithdrawDto.t)} | {:error, Tesla.Env.t}
  def dex_withdraws__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/dex/withdraws/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.DexWithdrawDto{}]}
    ])
  end
end
