# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule OnChainDapps-RESTAPI.Api.UNISWAPV2ETHEREUM do
  @moduledoc """
  API calls for all endpoints tagged `UNISWAPV2ETHEREUM`.
  """

  alias OnChainDapps-RESTAPI.Connection
  import OnChainDapps-RESTAPI.RequestBuilder

  @doc """
  LiquidityPools (current)
  Gets liquidityPools.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV2EthereumLiquidityPoolDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec u_niswapv2_ethereum_liquidity_pools__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2EthereumLiquidityPoolDto.t)} | {:error, Tesla.Env.t}
  def u_niswapv2_ethereum_liquidity_pools__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v1/dapps/uniswap-v2-ethereum/liquidityPools/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2EthereumLiquidityPoolDto{}]}
    ])
  end

  @doc """
  Swaps (current)
  Gets swaps.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV2EthereumSwapDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec u_niswapv2_ethereum_swaps__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2EthereumSwapDto.t)} | {:error, Tesla.Env.t}
  def u_niswapv2_ethereum_swaps__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v1/dapps/uniswap-v2-ethereum/swaps/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2EthereumSwapDto{}]}
    ])
  end

  @doc """
  Tokens (current)
  Gets tokens.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%UniswapV2EthereumTokenDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec u_niswapv2_ethereum_tokens__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.UniswapV2EthereumTokenDto.t)} | {:error, Tesla.Env.t}
  def u_niswapv2_ethereum_tokens__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/v1/dapps/uniswap-v2-ethereum/tokens/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.UniswapV2EthereumTokenDto{}]}
    ])
  end
end
