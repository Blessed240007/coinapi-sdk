# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule OnChainDapps-RESTAPI.Api.Cow do
  @moduledoc """
  API calls for all endpoints tagged `Cow`.
  """

  alias OnChainDapps-RESTAPI.Connection
  import OnChainDapps-RESTAPI.RequestBuilder

  @doc """
  Orders (current)
  Gets orders.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CowOrderDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cow_orders__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CowOrderDto.t)} | {:error, Tesla.Env.t}
  def cow_orders__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/cow/orders/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CowOrderDto{}]}
    ])
  end

  @doc """
  Settlements (current)
  Gets settlements.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CowSettlementDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cow_settlements__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CowSettlementDto.t)} | {:error, Tesla.Env.t}
  def cow_settlements__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/cow/settlements/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CowSettlementDto{}]}
    ])
  end

  @doc """
  Tokens (current)
  Gets tokens.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CowTokenDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cow_tokens__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CowTokenDto.t)} | {:error, Tesla.Env.t}
  def cow_tokens__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/cow/tokens/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CowTokenDto{}]}
    ])
  end

  @doc """
  Trades (current)
  Gets trades.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CowTradeDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cow_trades__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CowTradeDto.t)} | {:error, Tesla.Env.t}
  def cow_trades__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/cow/trades/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CowTradeDto{}]}
    ])
  end

  @doc """
  Users (current)
  Gets users.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%CowUserDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec cow_users__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.CowUserDto.t)} | {:error, Tesla.Env.t}
  def cow_users__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/cow/users/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.CowUserDto{}]}
    ])
  end
end
