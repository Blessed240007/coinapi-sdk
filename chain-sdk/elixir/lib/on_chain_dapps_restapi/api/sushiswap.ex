# NOTE: This file is auto generated by OpenAPI Generator 6.6.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule OnChainDapps-RESTAPI.Api.Sushiswap do
  @moduledoc """
  API calls for all endpoints tagged `Sushiswap`.
  """

  alias OnChainDapps-RESTAPI.Connection
  import OnChainDapps-RESTAPI.RequestBuilder

  @doc """
  Bundles (current)
  Gets bundles.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%SushiswapBundleDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_bundles__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.SushiswapBundleDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_bundles__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/bundles/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.SushiswapBundleDto{}]}
    ])
  end

  @doc """
  Burns (current)
  Gets burns.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%SushiswapBurnDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_burns__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.SushiswapBurnDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_burns__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/burns/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.SushiswapBurnDto{}]}
    ])
  end

  @doc """
  DayData (current)
  Gets dayData.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%SushiswapDayDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_day_data__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.SushiswapDayDataDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_day_data__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/dayData/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.SushiswapDayDataDto{}]}
    ])
  end

  @doc """
  Factories (current)
  Gets factories.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%SushiswapFactoryDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_factories__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.SushiswapFactoryDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_factories__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/factories/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.SushiswapFactoryDto{}]}
    ])
  end

  @doc """
  HourData (current)
  Gets hourData.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%SushiswapHourDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_hour_data__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.SushiswapHourDataDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_hour_data__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/hourData/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.SushiswapHourDataDto{}]}
    ])
  end

  @doc """
  LiquidityPositionSnapshots (current)
  Gets liquidityPositionSnapshots.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%SushiswapLiquidityPositionSnapshotDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_liquidity_position_snapshots__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.SushiswapLiquidityPositionSnapshotDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_liquidity_position_snapshots__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/liquidityPositionSnapshots/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.SushiswapLiquidityPositionSnapshotDto{}]}
    ])
  end

  @doc """
  LiquidityPositions (current)
  Gets liquidityPositions.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%SushiswapLiquidityPositionDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_liquidity_positions__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.SushiswapLiquidityPositionDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_liquidity_positions__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/liquidityPositions/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.SushiswapLiquidityPositionDto{}]}
    ])
  end

  @doc """
  Mints (current)
  Gets mints.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%SushiswapMintDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_mints__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.SushiswapMintDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_mints__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/mints/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.SushiswapMintDto{}]}
    ])
  end

  @doc """
  PairDayData (current)
  Gets pairDayData.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%SushiswapPairDayDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_pair_day_data__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.SushiswapPairDayDataDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_pair_day_data__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/pairDayData/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.SushiswapPairDayDataDto{}]}
    ])
  end

  @doc """
  PairHourData (current)
  Gets pairHourData.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%SushiswapPairHourDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_pair_hour_data__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.SushiswapPairHourDataDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_pair_hour_data__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/pairHourData/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.SushiswapPairHourDataDto{}]}
    ])
  end

  @doc """
  Pairs (current)
  Gets pairs.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:id` (String.t): Pair contract address.

  ### Returns

  - `{:ok, [%SushiswapPairDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_pairs__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.SushiswapPairDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_pairs__current(connection, opts \\ []) do
    optional_params = %{
      :id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/pairs/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.SushiswapPairDto{}]}
    ])
  end

  @doc """
  Swaps (current)
  Gets swaps.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:pair` (String.t): Reference to pair.

  ### Returns

  - `{:ok, [%SushiswapSwapDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_swaps__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.SushiswapSwapDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_swaps__current(connection, opts \\ []) do
    optional_params = %{
      :pair => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/swaps/current")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.SushiswapSwapDto{}]}
    ])
  end

  @doc """
  TokenDayData (current)
  Gets tokenDayData.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%SushiswapTokenDayDataDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_token_day_data__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.SushiswapTokenDayDataDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_token_day_data__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/tokenDayData/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.SushiswapTokenDayDataDto{}]}
    ])
  end

  @doc """
  Tokens (current)
  Gets tokens.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%SushiswapTokenDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_tokens__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.SushiswapTokenDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_tokens__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/tokens/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.SushiswapTokenDto{}]}
    ])
  end

  @doc """
  Transactions (current)
  Gets transactions.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%SushiswapTransactionDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_transactions__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.SushiswapTransactionDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_transactions__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/transactions/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.SushiswapTransactionDto{}]}
    ])
  end

  @doc """
  Users (current)
  Gets users.

  ### Parameters

  - `connection` (OnChainDapps-RESTAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%SushiswapUserDto{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sushiswap_users__current(Tesla.Env.client, keyword()) :: {:ok, list(OnChainDapps-RESTAPI.Model.SushiswapUserDto.t)} | {:error, Tesla.Env.t}
  def sushiswap_users__current(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/dapps/sushiswap/users/current")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, [%OnChainDapps-RESTAPI.Model.SushiswapUserDto{}]}
    ])
  end
end
