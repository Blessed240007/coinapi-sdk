/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as models from './models';

/**
 * Represents a liquidity pool daily snapshot for Uniswap V2.
 */
export interface UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO {
    entry_time?: string;

    recv_time?: string;

    /**
     * Number of block in which entity was recorded.
     */
    block_number?: number;

    /**
     * .
     */
    block_range?: string;

    /**
     * (smart contract address of the pool)-(# of days since Unix epoch time)
     */
    id?: string;

    /**
     * The protocol this snapshot belongs to
     */
    protocol?: string;

    /**
     * The pool this snapshot belongs to
     */
    pool?: string;

    /**
     * Timestamp of this snapshot
     */
    timestamp?: string;

    /**
     * Current TVL (Total Value Locked) of this pool
     */
    total_value_locked_usd?: string;

    /**
     * All revenue generated by the liquidity pool, accrued to the supply side.
     */
    cumulative_supply_side_revenue_usd?: string;

    /**
     * Daily revenue generated by the liquidity pool, accrued to the supply side.
     */
    daily_supply_side_revenue_usd?: string;

    /**
     * All revenue generated by the liquidity pool, accrued to the protocol.
     */
    cumulative_protocol_side_revenue_usd?: string;

    /**
     * Daily revenue generated by the liquidity pool, accrued to the protocol.
     */
    daily_protocol_side_revenue_usd?: string;

    /**
     * All revenue generated by the liquidity pool.
     */
    cumulative_total_revenue_usd?: string;

    /**
     * Daily revenue generated by the liquidity pool.
     */
    daily_total_revenue_usd?: string;

    /**
     * All trade volume occurred in a given day, in USD.
     */
    daily_volume_usd?: string;

    /**
     * All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool\'s `inputTokens` field.
     */
    daily_volume_by_token_amount?: Array<string>;

    /**
     * All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool\'s `inputTokens` field..
     */
    daily_volume_by_token_usd?: Array<string>;

    /**
     * All historical trade volume occurred in this pool, in USD.
     */
    cumulative_volume_usd?: string;

    /**
     * Amount of input tokens in the pool. The ordering should be the same as the pool\'s `inputTokens` field.
     */
    input_token_balances?: Array<string>;

    /**
     * Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
     */
    input_token_weights?: Array<string>;

    /**
     * Total supply of output token. Note that certain DEXes don\'t have an output token (e.g. Bancor).
     */
    output_token_supply?: string;

    /**
     * Price per share of output token in USD.
     */
    output_token_price_usd?: string;

    /**
     * Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY..
     */
    staked_output_token_amount?: string;

    /**
     * Per-block reward token emission as of the current block normalized to a day, in token\'s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
     */
    reward_token_emissions_amount?: Array<string>;

    /**
     * Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
     */
    reward_token_emissions_usd?: Array<string>;

}
