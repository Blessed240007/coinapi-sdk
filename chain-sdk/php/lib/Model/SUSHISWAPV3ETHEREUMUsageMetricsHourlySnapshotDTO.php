<?php
/**
 * SUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * On Chain Dapps - REST API
 *
 * This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SUSHISWAP_V3_ETHEREUM.UsageMetricsHourlySnapshotDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'entry_time' => '\DateTime',
        'recv_time' => '\DateTime',
        'block_number' => 'int',
        'id' => 'string',
        'hour' => 'int',
        'protocol' => 'string',
        'hourly_active_users' => 'int',
        'cumulative_unique_users' => 'int',
        'hourly_transaction_count' => 'int',
        'hourly_deposit_count' => 'int',
        'hourly_withdraw_count' => 'int',
        'hourly_swap_count' => 'int',
        'timestamp' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'entry_time' => 'date-time',
        'recv_time' => 'date-time',
        'block_number' => 'int64',
        'id' => null,
        'hour' => 'int32',
        'protocol' => null,
        'hourly_active_users' => 'int32',
        'cumulative_unique_users' => 'int32',
        'hourly_transaction_count' => 'int32',
        'hourly_deposit_count' => 'int32',
        'hourly_withdraw_count' => 'int32',
        'hourly_swap_count' => 'int32',
        'timestamp' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'entry_time' => false,
		'recv_time' => false,
		'block_number' => false,
		'id' => true,
		'hour' => false,
		'protocol' => true,
		'hourly_active_users' => false,
		'cumulative_unique_users' => false,
		'hourly_transaction_count' => false,
		'hourly_deposit_count' => false,
		'hourly_withdraw_count' => false,
		'hourly_swap_count' => false,
		'timestamp' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entry_time' => 'entry_time',
        'recv_time' => 'recv_time',
        'block_number' => 'block_number',
        'id' => 'id',
        'hour' => 'hour',
        'protocol' => 'protocol',
        'hourly_active_users' => 'hourly_active_users',
        'cumulative_unique_users' => 'cumulative_unique_users',
        'hourly_transaction_count' => 'hourly_transaction_count',
        'hourly_deposit_count' => 'hourly_deposit_count',
        'hourly_withdraw_count' => 'hourly_withdraw_count',
        'hourly_swap_count' => 'hourly_swap_count',
        'timestamp' => 'timestamp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entry_time' => 'setEntryTime',
        'recv_time' => 'setRecvTime',
        'block_number' => 'setBlockNumber',
        'id' => 'setId',
        'hour' => 'setHour',
        'protocol' => 'setProtocol',
        'hourly_active_users' => 'setHourlyActiveUsers',
        'cumulative_unique_users' => 'setCumulativeUniqueUsers',
        'hourly_transaction_count' => 'setHourlyTransactionCount',
        'hourly_deposit_count' => 'setHourlyDepositCount',
        'hourly_withdraw_count' => 'setHourlyWithdrawCount',
        'hourly_swap_count' => 'setHourlySwapCount',
        'timestamp' => 'setTimestamp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entry_time' => 'getEntryTime',
        'recv_time' => 'getRecvTime',
        'block_number' => 'getBlockNumber',
        'id' => 'getId',
        'hour' => 'getHour',
        'protocol' => 'getProtocol',
        'hourly_active_users' => 'getHourlyActiveUsers',
        'cumulative_unique_users' => 'getCumulativeUniqueUsers',
        'hourly_transaction_count' => 'getHourlyTransactionCount',
        'hourly_deposit_count' => 'getHourlyDepositCount',
        'hourly_withdraw_count' => 'getHourlyWithdrawCount',
        'hourly_swap_count' => 'getHourlySwapCount',
        'timestamp' => 'getTimestamp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('entry_time', $data ?? [], null);
        $this->setIfExists('recv_time', $data ?? [], null);
        $this->setIfExists('block_number', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('hour', $data ?? [], null);
        $this->setIfExists('protocol', $data ?? [], null);
        $this->setIfExists('hourly_active_users', $data ?? [], null);
        $this->setIfExists('cumulative_unique_users', $data ?? [], null);
        $this->setIfExists('hourly_transaction_count', $data ?? [], null);
        $this->setIfExists('hourly_deposit_count', $data ?? [], null);
        $this->setIfExists('hourly_withdraw_count', $data ?? [], null);
        $this->setIfExists('hourly_swap_count', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entry_time
     *
     * @return \DateTime|null
     */
    public function getEntryTime()
    {
        return $this->container['entry_time'];
    }

    /**
     * Sets entry_time
     *
     * @param \DateTime|null $entry_time entry_time
     *
     * @return self
     */
    public function setEntryTime($entry_time)
    {
        if (is_null($entry_time)) {
            throw new \InvalidArgumentException('non-nullable entry_time cannot be null');
        }
        $this->container['entry_time'] = $entry_time;

        return $this;
    }

    /**
     * Gets recv_time
     *
     * @return \DateTime|null
     */
    public function getRecvTime()
    {
        return $this->container['recv_time'];
    }

    /**
     * Sets recv_time
     *
     * @param \DateTime|null $recv_time recv_time
     *
     * @return self
     */
    public function setRecvTime($recv_time)
    {
        if (is_null($recv_time)) {
            throw new \InvalidArgumentException('non-nullable recv_time cannot be null');
        }
        $this->container['recv_time'] = $recv_time;

        return $this;
    }

    /**
     * Gets block_number
     *
     * @return int|null
     */
    public function getBlockNumber()
    {
        return $this->container['block_number'];
    }

    /**
     * Sets block_number
     *
     * @param int|null $block_number Number of block in which entity was recorded.
     *
     * @return self
     */
    public function setBlockNumber($block_number)
    {
        if (is_null($block_number)) {
            throw new \InvalidArgumentException('non-nullable block_number cannot be null');
        }
        $this->container['block_number'] = $block_number;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id (# of hours since Unix epoch time)
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets hour
     *
     * @return int|null
     */
    public function getHour()
    {
        return $this->container['hour'];
    }

    /**
     * Sets hour
     *
     * @param int|null $hour Number of hours since Unix epoch time
     *
     * @return self
     */
    public function setHour($hour)
    {
        if (is_null($hour)) {
            throw new \InvalidArgumentException('non-nullable hour cannot be null');
        }
        $this->container['hour'] = $hour;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string|null
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string|null $protocol Protocol this snapshot is associated with
     *
     * @return self
     */
    public function setProtocol($protocol)
    {
        if (is_null($protocol)) {
            array_push($this->openAPINullablesSetToNull, 'protocol');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('protocol', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets hourly_active_users
     *
     * @return int|null
     */
    public function getHourlyActiveUsers()
    {
        return $this->container['hourly_active_users'];
    }

    /**
     * Sets hourly_active_users
     *
     * @param int|null $hourly_active_users Number of unique hourly active users
     *
     * @return self
     */
    public function setHourlyActiveUsers($hourly_active_users)
    {
        if (is_null($hourly_active_users)) {
            throw new \InvalidArgumentException('non-nullable hourly_active_users cannot be null');
        }
        $this->container['hourly_active_users'] = $hourly_active_users;

        return $this;
    }

    /**
     * Gets cumulative_unique_users
     *
     * @return int|null
     */
    public function getCumulativeUniqueUsers()
    {
        return $this->container['cumulative_unique_users'];
    }

    /**
     * Sets cumulative_unique_users
     *
     * @param int|null $cumulative_unique_users Number of cumulative unique users
     *
     * @return self
     */
    public function setCumulativeUniqueUsers($cumulative_unique_users)
    {
        if (is_null($cumulative_unique_users)) {
            throw new \InvalidArgumentException('non-nullable cumulative_unique_users cannot be null');
        }
        $this->container['cumulative_unique_users'] = $cumulative_unique_users;

        return $this;
    }

    /**
     * Gets hourly_transaction_count
     *
     * @return int|null
     */
    public function getHourlyTransactionCount()
    {
        return $this->container['hourly_transaction_count'];
    }

    /**
     * Sets hourly_transaction_count
     *
     * @param int|null $hourly_transaction_count Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface.
     *
     * @return self
     */
    public function setHourlyTransactionCount($hourly_transaction_count)
    {
        if (is_null($hourly_transaction_count)) {
            throw new \InvalidArgumentException('non-nullable hourly_transaction_count cannot be null');
        }
        $this->container['hourly_transaction_count'] = $hourly_transaction_count;

        return $this;
    }

    /**
     * Gets hourly_deposit_count
     *
     * @return int|null
     */
    public function getHourlyDepositCount()
    {
        return $this->container['hourly_deposit_count'];
    }

    /**
     * Sets hourly_deposit_count
     *
     * @param int|null $hourly_deposit_count Total number of deposits (add liquidity) in an hour
     *
     * @return self
     */
    public function setHourlyDepositCount($hourly_deposit_count)
    {
        if (is_null($hourly_deposit_count)) {
            throw new \InvalidArgumentException('non-nullable hourly_deposit_count cannot be null');
        }
        $this->container['hourly_deposit_count'] = $hourly_deposit_count;

        return $this;
    }

    /**
     * Gets hourly_withdraw_count
     *
     * @return int|null
     */
    public function getHourlyWithdrawCount()
    {
        return $this->container['hourly_withdraw_count'];
    }

    /**
     * Sets hourly_withdraw_count
     *
     * @param int|null $hourly_withdraw_count Total number of withdrawals (remove liquidity) in an hour
     *
     * @return self
     */
    public function setHourlyWithdrawCount($hourly_withdraw_count)
    {
        if (is_null($hourly_withdraw_count)) {
            throw new \InvalidArgumentException('non-nullable hourly_withdraw_count cannot be null');
        }
        $this->container['hourly_withdraw_count'] = $hourly_withdraw_count;

        return $this;
    }

    /**
     * Gets hourly_swap_count
     *
     * @return int|null
     */
    public function getHourlySwapCount()
    {
        return $this->container['hourly_swap_count'];
    }

    /**
     * Sets hourly_swap_count
     *
     * @param int|null $hourly_swap_count Total number of trades (swaps) in an hour
     *
     * @return self
     */
    public function setHourlySwapCount($hourly_swap_count)
    {
        if (is_null($hourly_swap_count)) {
            throw new \InvalidArgumentException('non-nullable hourly_swap_count cannot be null');
        }
        $this->container['hourly_swap_count'] = $hourly_swap_count;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string|null $timestamp Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


