<?php
/**
 * CURVEFINANCEETHEREUMSwapDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * On Chain Dapps - REST API
 *
 * This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CURVEFINANCEETHEREUMSwapDTO Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CURVEFINANCEETHEREUMSwapDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CURVE_FINANCE_ETHEREUM.SwapDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'entry_time' => '\DateTime',
        'recv_time' => '\DateTime',
        'block_number' => 'string',
        'id' => 'string',
        'hash' => 'string',
        'log_index' => 'int',
        'protocol' => 'string',
        'to' => 'string',
        'from' => 'string',
        'timestamp' => 'string',
        'token_in' => 'string',
        'amount_in' => 'string',
        'amount_in_usd' => 'string',
        'token_out' => 'string',
        'amount_out' => 'string',
        'amount_out_usd' => 'string',
        'pool' => 'string',
        'pool_id' => 'string',
        'transaction_id' => 'string',
        'evaluated_price' => 'float',
        'evaluated_amount' => 'float',
        'evaluated_aggressor' => '\OpenAPI\Client\Model\TransactionsETradeAggressiveSide'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'entry_time' => 'date-time',
        'recv_time' => 'date-time',
        'block_number' => null,
        'id' => null,
        'hash' => null,
        'log_index' => 'int32',
        'protocol' => null,
        'to' => null,
        'from' => null,
        'timestamp' => null,
        'token_in' => null,
        'amount_in' => null,
        'amount_in_usd' => null,
        'token_out' => null,
        'amount_out' => null,
        'amount_out_usd' => null,
        'pool' => null,
        'pool_id' => null,
        'transaction_id' => null,
        'evaluated_price' => 'double',
        'evaluated_amount' => 'double',
        'evaluated_aggressor' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'entry_time' => false,
		'recv_time' => false,
		'block_number' => true,
		'id' => true,
		'hash' => true,
		'log_index' => false,
		'protocol' => true,
		'to' => true,
		'from' => true,
		'timestamp' => true,
		'token_in' => true,
		'amount_in' => true,
		'amount_in_usd' => true,
		'token_out' => true,
		'amount_out' => true,
		'amount_out_usd' => true,
		'pool' => true,
		'pool_id' => true,
		'transaction_id' => true,
		'evaluated_price' => false,
		'evaluated_amount' => false,
		'evaluated_aggressor' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entry_time' => 'entry_time',
        'recv_time' => 'recv_time',
        'block_number' => 'block_number',
        'id' => 'id',
        'hash' => 'hash',
        'log_index' => 'log_index',
        'protocol' => 'protocol',
        'to' => 'to',
        'from' => 'from',
        'timestamp' => 'timestamp',
        'token_in' => 'token_in',
        'amount_in' => 'amount_in',
        'amount_in_usd' => 'amount_in_usd',
        'token_out' => 'token_out',
        'amount_out' => 'amount_out',
        'amount_out_usd' => 'amount_out_usd',
        'pool' => 'pool',
        'pool_id' => 'pool_id',
        'transaction_id' => 'transaction_id',
        'evaluated_price' => 'evaluated_price',
        'evaluated_amount' => 'evaluated_amount',
        'evaluated_aggressor' => 'evaluated_aggressor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entry_time' => 'setEntryTime',
        'recv_time' => 'setRecvTime',
        'block_number' => 'setBlockNumber',
        'id' => 'setId',
        'hash' => 'setHash',
        'log_index' => 'setLogIndex',
        'protocol' => 'setProtocol',
        'to' => 'setTo',
        'from' => 'setFrom',
        'timestamp' => 'setTimestamp',
        'token_in' => 'setTokenIn',
        'amount_in' => 'setAmountIn',
        'amount_in_usd' => 'setAmountInUsd',
        'token_out' => 'setTokenOut',
        'amount_out' => 'setAmountOut',
        'amount_out_usd' => 'setAmountOutUsd',
        'pool' => 'setPool',
        'pool_id' => 'setPoolId',
        'transaction_id' => 'setTransactionId',
        'evaluated_price' => 'setEvaluatedPrice',
        'evaluated_amount' => 'setEvaluatedAmount',
        'evaluated_aggressor' => 'setEvaluatedAggressor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entry_time' => 'getEntryTime',
        'recv_time' => 'getRecvTime',
        'block_number' => 'getBlockNumber',
        'id' => 'getId',
        'hash' => 'getHash',
        'log_index' => 'getLogIndex',
        'protocol' => 'getProtocol',
        'to' => 'getTo',
        'from' => 'getFrom',
        'timestamp' => 'getTimestamp',
        'token_in' => 'getTokenIn',
        'amount_in' => 'getAmountIn',
        'amount_in_usd' => 'getAmountInUsd',
        'token_out' => 'getTokenOut',
        'amount_out' => 'getAmountOut',
        'amount_out_usd' => 'getAmountOutUsd',
        'pool' => 'getPool',
        'pool_id' => 'getPoolId',
        'transaction_id' => 'getTransactionId',
        'evaluated_price' => 'getEvaluatedPrice',
        'evaluated_amount' => 'getEvaluatedAmount',
        'evaluated_aggressor' => 'getEvaluatedAggressor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('entry_time', $data ?? [], null);
        $this->setIfExists('recv_time', $data ?? [], null);
        $this->setIfExists('block_number', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('hash', $data ?? [], null);
        $this->setIfExists('log_index', $data ?? [], null);
        $this->setIfExists('protocol', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('token_in', $data ?? [], null);
        $this->setIfExists('amount_in', $data ?? [], null);
        $this->setIfExists('amount_in_usd', $data ?? [], null);
        $this->setIfExists('token_out', $data ?? [], null);
        $this->setIfExists('amount_out', $data ?? [], null);
        $this->setIfExists('amount_out_usd', $data ?? [], null);
        $this->setIfExists('pool', $data ?? [], null);
        $this->setIfExists('pool_id', $data ?? [], null);
        $this->setIfExists('transaction_id', $data ?? [], null);
        $this->setIfExists('evaluated_price', $data ?? [], null);
        $this->setIfExists('evaluated_amount', $data ?? [], null);
        $this->setIfExists('evaluated_aggressor', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entry_time
     *
     * @return \DateTime|null
     */
    public function getEntryTime()
    {
        return $this->container['entry_time'];
    }

    /**
     * Sets entry_time
     *
     * @param \DateTime|null $entry_time entry_time
     *
     * @return self
     */
    public function setEntryTime($entry_time)
    {
        if (is_null($entry_time)) {
            throw new \InvalidArgumentException('non-nullable entry_time cannot be null');
        }
        $this->container['entry_time'] = $entry_time;

        return $this;
    }

    /**
     * Gets recv_time
     *
     * @return \DateTime|null
     */
    public function getRecvTime()
    {
        return $this->container['recv_time'];
    }

    /**
     * Sets recv_time
     *
     * @param \DateTime|null $recv_time recv_time
     *
     * @return self
     */
    public function setRecvTime($recv_time)
    {
        if (is_null($recv_time)) {
            throw new \InvalidArgumentException('non-nullable recv_time cannot be null');
        }
        $this->container['recv_time'] = $recv_time;

        return $this;
    }

    /**
     * Gets block_number
     *
     * @return string|null
     */
    public function getBlockNumber()
    {
        return $this->container['block_number'];
    }

    /**
     * Sets block_number
     *
     * @param string|null $block_number Block number of this event
     *
     * @return self
     */
    public function setBlockNumber($block_number)
    {
        if (is_null($block_number)) {
            array_push($this->openAPINullablesSetToNull, 'block_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('block_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['block_number'] = $block_number;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Swap-(transaction hash)-(log index)
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return string|null
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string|null $hash Transaction hash of the transaction that emitted this event
     *
     * @return self
     */
    public function setHash($hash)
    {
        if (is_null($hash)) {
            array_push($this->openAPINullablesSetToNull, 'hash');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hash', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets log_index
     *
     * @return int|null
     */
    public function getLogIndex()
    {
        return $this->container['log_index'];
    }

    /**
     * Sets log_index
     *
     * @param int|null $log_index Event log index. For transactions that don't emit event, create arbitrary index starting from 0
     *
     * @return self
     */
    public function setLogIndex($log_index)
    {
        if (is_null($log_index)) {
            throw new \InvalidArgumentException('non-nullable log_index cannot be null');
        }
        $this->container['log_index'] = $log_index;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string|null
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string|null $protocol The protocol this transaction belongs to
     *
     * @return self
     */
    public function setProtocol($protocol)
    {
        if (is_null($protocol)) {
            array_push($this->openAPINullablesSetToNull, 'protocol');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('protocol', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string|null
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string|null $to Address that received the tokens
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            array_push($this->openAPINullablesSetToNull, 'to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string|null $from Address that sent the tokens
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            array_push($this->openAPINullablesSetToNull, 'from');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('from', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string|null $timestamp Timestamp of this event
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets token_in
     *
     * @return string|null
     */
    public function getTokenIn()
    {
        return $this->container['token_in'];
    }

    /**
     * Sets token_in
     *
     * @param string|null $token_in Token deposited into pool
     *
     * @return self
     */
    public function setTokenIn($token_in)
    {
        if (is_null($token_in)) {
            array_push($this->openAPINullablesSetToNull, 'token_in');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('token_in', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['token_in'] = $token_in;

        return $this;
    }

    /**
     * Gets amount_in
     *
     * @return string|null
     */
    public function getAmountIn()
    {
        return $this->container['amount_in'];
    }

    /**
     * Sets amount_in
     *
     * @param string|null $amount_in Amount of token deposited into pool in native units
     *
     * @return self
     */
    public function setAmountIn($amount_in)
    {
        if (is_null($amount_in)) {
            array_push($this->openAPINullablesSetToNull, 'amount_in');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amount_in', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['amount_in'] = $amount_in;

        return $this;
    }

    /**
     * Gets amount_in_usd
     *
     * @return string|null
     */
    public function getAmountInUsd()
    {
        return $this->container['amount_in_usd'];
    }

    /**
     * Sets amount_in_usd
     *
     * @param string|null $amount_in_usd Amount of token deposited into pool in USD
     *
     * @return self
     */
    public function setAmountInUsd($amount_in_usd)
    {
        if (is_null($amount_in_usd)) {
            array_push($this->openAPINullablesSetToNull, 'amount_in_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amount_in_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['amount_in_usd'] = $amount_in_usd;

        return $this;
    }

    /**
     * Gets token_out
     *
     * @return string|null
     */
    public function getTokenOut()
    {
        return $this->container['token_out'];
    }

    /**
     * Sets token_out
     *
     * @param string|null $token_out Token withdrawn from pool
     *
     * @return self
     */
    public function setTokenOut($token_out)
    {
        if (is_null($token_out)) {
            array_push($this->openAPINullablesSetToNull, 'token_out');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('token_out', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['token_out'] = $token_out;

        return $this;
    }

    /**
     * Gets amount_out
     *
     * @return string|null
     */
    public function getAmountOut()
    {
        return $this->container['amount_out'];
    }

    /**
     * Sets amount_out
     *
     * @param string|null $amount_out Amount of token withdrawn from pool in native units
     *
     * @return self
     */
    public function setAmountOut($amount_out)
    {
        if (is_null($amount_out)) {
            array_push($this->openAPINullablesSetToNull, 'amount_out');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amount_out', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['amount_out'] = $amount_out;

        return $this;
    }

    /**
     * Gets amount_out_usd
     *
     * @return string|null
     */
    public function getAmountOutUsd()
    {
        return $this->container['amount_out_usd'];
    }

    /**
     * Sets amount_out_usd
     *
     * @param string|null $amount_out_usd Amount of token withdrawn from pool in USD
     *
     * @return self
     */
    public function setAmountOutUsd($amount_out_usd)
    {
        if (is_null($amount_out_usd)) {
            array_push($this->openAPINullablesSetToNull, 'amount_out_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amount_out_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['amount_out_usd'] = $amount_out_usd;

        return $this;
    }

    /**
     * Gets pool
     *
     * @return string|null
     */
    public function getPool()
    {
        return $this->container['pool'];
    }

    /**
     * Sets pool
     *
     * @param string|null $pool The pool involving this transaction
     *
     * @return self
     */
    public function setPool($pool)
    {
        if (is_null($pool)) {
            array_push($this->openAPINullablesSetToNull, 'pool');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pool', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pool'] = $pool;

        return $this;
    }

    /**
     * Gets pool_id
     *
     * @return string|null
     */
    public function getPoolId()
    {
        return $this->container['pool_id'];
    }

    /**
     * Sets pool_id
     *
     * @param string|null $pool_id pool_id
     *
     * @return self
     */
    public function setPoolId($pool_id)
    {
        if (is_null($pool_id)) {
            array_push($this->openAPINullablesSetToNull, 'pool_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pool_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pool_id'] = $pool_id;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string|null $transaction_id transaction_id
     *
     * @return self
     */
    public function setTransactionId($transaction_id)
    {
        if (is_null($transaction_id)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets evaluated_price
     *
     * @return float|null
     */
    public function getEvaluatedPrice()
    {
        return $this->container['evaluated_price'];
    }

    /**
     * Sets evaluated_price
     *
     * @param float|null $evaluated_price evaluated_price
     *
     * @return self
     */
    public function setEvaluatedPrice($evaluated_price)
    {
        if (is_null($evaluated_price)) {
            throw new \InvalidArgumentException('non-nullable evaluated_price cannot be null');
        }
        $this->container['evaluated_price'] = $evaluated_price;

        return $this;
    }

    /**
     * Gets evaluated_amount
     *
     * @return float|null
     */
    public function getEvaluatedAmount()
    {
        return $this->container['evaluated_amount'];
    }

    /**
     * Sets evaluated_amount
     *
     * @param float|null $evaluated_amount evaluated_amount
     *
     * @return self
     */
    public function setEvaluatedAmount($evaluated_amount)
    {
        if (is_null($evaluated_amount)) {
            throw new \InvalidArgumentException('non-nullable evaluated_amount cannot be null');
        }
        $this->container['evaluated_amount'] = $evaluated_amount;

        return $this;
    }

    /**
     * Gets evaluated_aggressor
     *
     * @return \OpenAPI\Client\Model\TransactionsETradeAggressiveSide|null
     */
    public function getEvaluatedAggressor()
    {
        return $this->container['evaluated_aggressor'];
    }

    /**
     * Sets evaluated_aggressor
     *
     * @param \OpenAPI\Client\Model\TransactionsETradeAggressiveSide|null $evaluated_aggressor evaluated_aggressor
     *
     * @return self
     */
    public function setEvaluatedAggressor($evaluated_aggressor)
    {
        if (is_null($evaluated_aggressor)) {
            throw new \InvalidArgumentException('non-nullable evaluated_aggressor cannot be null');
        }
        $this->container['evaluated_aggressor'] = $evaluated_aggressor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


