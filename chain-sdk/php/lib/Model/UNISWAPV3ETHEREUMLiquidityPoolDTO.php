<?php
/**
 * UNISWAPV3ETHEREUMLiquidityPoolDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * On Chain Dapps - REST API
 *
 * This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UNISWAPV3ETHEREUMLiquidityPoolDTO Class Doc Comment
 *
 * @category Class
 * @description Pool-level metadata.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UNISWAPV3ETHEREUMLiquidityPoolDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UNISWAP_V3_ETHEREUM.LiquidityPoolDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'entry_time' => '\DateTime',
        'recv_time' => '\DateTime',
        'block_number' => 'int',
        'vid' => 'int',
        'block_range' => 'string',
        'id' => 'string',
        'protocol' => 'string',
        'name' => 'string',
        'symbol' => 'string',
        'liquidity_token' => 'string',
        'input_tokens' => 'string[]',
        'reward_tokens' => 'string[]',
        'fees' => 'string[]',
        'is_single_sided' => 'bool',
        'created_timestamp' => 'string',
        'created_block_number' => 'string',
        'tick' => 'string',
        'total_value_locked_usd' => 'string',
        'total_liquidity' => 'string',
        'total_liquidity_usd' => 'string',
        'active_liquidity' => 'string',
        'active_liquidity_usd' => 'string',
        'uncollected_protocol_side_token_amounts' => 'string[]',
        'uncollected_protocol_side_values_usd' => 'string[]',
        'uncollected_supply_side_token_amounts' => 'string[]',
        'uncollected_supply_side_values_usd' => 'string[]',
        'cumulative_supply_side_revenue_usd' => 'string',
        'cumulative_protocol_side_revenue_usd' => 'string',
        'cumulative_total_revenue_usd' => 'string',
        'cumulative_volume_by_token_amount' => 'string[]',
        'cumulative_volume_by_token_usd' => 'string[]',
        'cumulative_volume_usd' => 'string',
        'input_token_balances' => 'string[]',
        'input_token_balances_usd' => 'string[]',
        'input_token_weights' => 'string[]',
        'staked_output_token_amount' => 'string',
        'reward_token_emissions_amount' => 'string[]',
        'reward_token_emissions_usd' => 'string[]',
        'cumulative_deposit_count' => 'int',
        'cumulative_withdraw_count' => 'int',
        'cumulative_swap_count' => 'int',
        'position_count' => 'int',
        'open_position_count' => 'int',
        'closed_position_count' => 'int',
        'last_snapshot_day_id' => 'int',
        'last_snapshot_hour_id' => 'int',
        'last_update_timestamp' => 'string',
        'last_update_block_number' => 'string',
        'evaluated_ask' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'entry_time' => 'date-time',
        'recv_time' => 'date-time',
        'block_number' => 'int64',
        'vid' => 'int64',
        'block_range' => null,
        'id' => null,
        'protocol' => null,
        'name' => null,
        'symbol' => null,
        'liquidity_token' => null,
        'input_tokens' => null,
        'reward_tokens' => null,
        'fees' => null,
        'is_single_sided' => null,
        'created_timestamp' => null,
        'created_block_number' => null,
        'tick' => null,
        'total_value_locked_usd' => null,
        'total_liquidity' => null,
        'total_liquidity_usd' => null,
        'active_liquidity' => null,
        'active_liquidity_usd' => null,
        'uncollected_protocol_side_token_amounts' => null,
        'uncollected_protocol_side_values_usd' => null,
        'uncollected_supply_side_token_amounts' => null,
        'uncollected_supply_side_values_usd' => null,
        'cumulative_supply_side_revenue_usd' => null,
        'cumulative_protocol_side_revenue_usd' => null,
        'cumulative_total_revenue_usd' => null,
        'cumulative_volume_by_token_amount' => null,
        'cumulative_volume_by_token_usd' => null,
        'cumulative_volume_usd' => null,
        'input_token_balances' => null,
        'input_token_balances_usd' => null,
        'input_token_weights' => null,
        'staked_output_token_amount' => null,
        'reward_token_emissions_amount' => null,
        'reward_token_emissions_usd' => null,
        'cumulative_deposit_count' => 'int32',
        'cumulative_withdraw_count' => 'int32',
        'cumulative_swap_count' => 'int32',
        'position_count' => 'int32',
        'open_position_count' => 'int32',
        'closed_position_count' => 'int32',
        'last_snapshot_day_id' => 'int32',
        'last_snapshot_hour_id' => 'int32',
        'last_update_timestamp' => null,
        'last_update_block_number' => null,
        'evaluated_ask' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'entry_time' => false,
		'recv_time' => false,
		'block_number' => false,
		'vid' => false,
		'block_range' => true,
		'id' => true,
		'protocol' => true,
		'name' => true,
		'symbol' => true,
		'liquidity_token' => true,
		'input_tokens' => true,
		'reward_tokens' => true,
		'fees' => true,
		'is_single_sided' => false,
		'created_timestamp' => true,
		'created_block_number' => true,
		'tick' => true,
		'total_value_locked_usd' => true,
		'total_liquidity' => true,
		'total_liquidity_usd' => true,
		'active_liquidity' => true,
		'active_liquidity_usd' => true,
		'uncollected_protocol_side_token_amounts' => true,
		'uncollected_protocol_side_values_usd' => true,
		'uncollected_supply_side_token_amounts' => true,
		'uncollected_supply_side_values_usd' => true,
		'cumulative_supply_side_revenue_usd' => true,
		'cumulative_protocol_side_revenue_usd' => true,
		'cumulative_total_revenue_usd' => true,
		'cumulative_volume_by_token_amount' => true,
		'cumulative_volume_by_token_usd' => true,
		'cumulative_volume_usd' => true,
		'input_token_balances' => true,
		'input_token_balances_usd' => true,
		'input_token_weights' => true,
		'staked_output_token_amount' => true,
		'reward_token_emissions_amount' => true,
		'reward_token_emissions_usd' => true,
		'cumulative_deposit_count' => false,
		'cumulative_withdraw_count' => false,
		'cumulative_swap_count' => false,
		'position_count' => false,
		'open_position_count' => false,
		'closed_position_count' => false,
		'last_snapshot_day_id' => false,
		'last_snapshot_hour_id' => false,
		'last_update_timestamp' => true,
		'last_update_block_number' => true,
		'evaluated_ask' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entry_time' => 'entry_time',
        'recv_time' => 'recv_time',
        'block_number' => 'block_number',
        'vid' => 'vid',
        'block_range' => 'block_range',
        'id' => 'id',
        'protocol' => 'protocol',
        'name' => 'name',
        'symbol' => 'symbol',
        'liquidity_token' => 'liquidity_token',
        'input_tokens' => 'input_tokens',
        'reward_tokens' => 'reward_tokens',
        'fees' => 'fees',
        'is_single_sided' => 'is_single_sided',
        'created_timestamp' => 'created_timestamp',
        'created_block_number' => 'created_block_number',
        'tick' => 'tick',
        'total_value_locked_usd' => 'total_value_locked_usd',
        'total_liquidity' => 'total_liquidity',
        'total_liquidity_usd' => 'total_liquidity_usd',
        'active_liquidity' => 'active_liquidity',
        'active_liquidity_usd' => 'active_liquidity_usd',
        'uncollected_protocol_side_token_amounts' => 'uncollected_protocol_side_token_amounts',
        'uncollected_protocol_side_values_usd' => 'uncollected_protocol_side_values_usd',
        'uncollected_supply_side_token_amounts' => 'uncollected_supply_side_token_amounts',
        'uncollected_supply_side_values_usd' => 'uncollected_supply_side_values_usd',
        'cumulative_supply_side_revenue_usd' => 'cumulative_supply_side_revenue_usd',
        'cumulative_protocol_side_revenue_usd' => 'cumulative_protocol_side_revenue_usd',
        'cumulative_total_revenue_usd' => 'cumulative_total_revenue_usd',
        'cumulative_volume_by_token_amount' => 'cumulative_volume_by_token_amount',
        'cumulative_volume_by_token_usd' => 'cumulative_volume_by_token_usd',
        'cumulative_volume_usd' => 'cumulative_volume_usd',
        'input_token_balances' => 'input_token_balances',
        'input_token_balances_usd' => 'input_token_balances_usd',
        'input_token_weights' => 'input_token_weights',
        'staked_output_token_amount' => 'staked_output_token_amount',
        'reward_token_emissions_amount' => 'reward_token_emissions_amount',
        'reward_token_emissions_usd' => 'reward_token_emissions_usd',
        'cumulative_deposit_count' => 'cumulative_deposit_count',
        'cumulative_withdraw_count' => 'cumulative_withdraw_count',
        'cumulative_swap_count' => 'cumulative_swap_count',
        'position_count' => 'position_count',
        'open_position_count' => 'open_position_count',
        'closed_position_count' => 'closed_position_count',
        'last_snapshot_day_id' => 'last_snapshot_day_id',
        'last_snapshot_hour_id' => 'last_snapshot_hour_id',
        'last_update_timestamp' => 'last_update_timestamp',
        'last_update_block_number' => 'last_update_block_number',
        'evaluated_ask' => 'evaluated_ask'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entry_time' => 'setEntryTime',
        'recv_time' => 'setRecvTime',
        'block_number' => 'setBlockNumber',
        'vid' => 'setVid',
        'block_range' => 'setBlockRange',
        'id' => 'setId',
        'protocol' => 'setProtocol',
        'name' => 'setName',
        'symbol' => 'setSymbol',
        'liquidity_token' => 'setLiquidityToken',
        'input_tokens' => 'setInputTokens',
        'reward_tokens' => 'setRewardTokens',
        'fees' => 'setFees',
        'is_single_sided' => 'setIsSingleSided',
        'created_timestamp' => 'setCreatedTimestamp',
        'created_block_number' => 'setCreatedBlockNumber',
        'tick' => 'setTick',
        'total_value_locked_usd' => 'setTotalValueLockedUsd',
        'total_liquidity' => 'setTotalLiquidity',
        'total_liquidity_usd' => 'setTotalLiquidityUsd',
        'active_liquidity' => 'setActiveLiquidity',
        'active_liquidity_usd' => 'setActiveLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'setUncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'setUncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'setUncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'setUncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'setCumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'setCumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'setCumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'setCumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'setCumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'setCumulativeVolumeUsd',
        'input_token_balances' => 'setInputTokenBalances',
        'input_token_balances_usd' => 'setInputTokenBalancesUsd',
        'input_token_weights' => 'setInputTokenWeights',
        'staked_output_token_amount' => 'setStakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'setRewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'setRewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'setCumulativeDepositCount',
        'cumulative_withdraw_count' => 'setCumulativeWithdrawCount',
        'cumulative_swap_count' => 'setCumulativeSwapCount',
        'position_count' => 'setPositionCount',
        'open_position_count' => 'setOpenPositionCount',
        'closed_position_count' => 'setClosedPositionCount',
        'last_snapshot_day_id' => 'setLastSnapshotDayId',
        'last_snapshot_hour_id' => 'setLastSnapshotHourId',
        'last_update_timestamp' => 'setLastUpdateTimestamp',
        'last_update_block_number' => 'setLastUpdateBlockNumber',
        'evaluated_ask' => 'setEvaluatedAsk'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entry_time' => 'getEntryTime',
        'recv_time' => 'getRecvTime',
        'block_number' => 'getBlockNumber',
        'vid' => 'getVid',
        'block_range' => 'getBlockRange',
        'id' => 'getId',
        'protocol' => 'getProtocol',
        'name' => 'getName',
        'symbol' => 'getSymbol',
        'liquidity_token' => 'getLiquidityToken',
        'input_tokens' => 'getInputTokens',
        'reward_tokens' => 'getRewardTokens',
        'fees' => 'getFees',
        'is_single_sided' => 'getIsSingleSided',
        'created_timestamp' => 'getCreatedTimestamp',
        'created_block_number' => 'getCreatedBlockNumber',
        'tick' => 'getTick',
        'total_value_locked_usd' => 'getTotalValueLockedUsd',
        'total_liquidity' => 'getTotalLiquidity',
        'total_liquidity_usd' => 'getTotalLiquidityUsd',
        'active_liquidity' => 'getActiveLiquidity',
        'active_liquidity_usd' => 'getActiveLiquidityUsd',
        'uncollected_protocol_side_token_amounts' => 'getUncollectedProtocolSideTokenAmounts',
        'uncollected_protocol_side_values_usd' => 'getUncollectedProtocolSideValuesUsd',
        'uncollected_supply_side_token_amounts' => 'getUncollectedSupplySideTokenAmounts',
        'uncollected_supply_side_values_usd' => 'getUncollectedSupplySideValuesUsd',
        'cumulative_supply_side_revenue_usd' => 'getCumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'getCumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'getCumulativeTotalRevenueUsd',
        'cumulative_volume_by_token_amount' => 'getCumulativeVolumeByTokenAmount',
        'cumulative_volume_by_token_usd' => 'getCumulativeVolumeByTokenUsd',
        'cumulative_volume_usd' => 'getCumulativeVolumeUsd',
        'input_token_balances' => 'getInputTokenBalances',
        'input_token_balances_usd' => 'getInputTokenBalancesUsd',
        'input_token_weights' => 'getInputTokenWeights',
        'staked_output_token_amount' => 'getStakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'getRewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'getRewardTokenEmissionsUsd',
        'cumulative_deposit_count' => 'getCumulativeDepositCount',
        'cumulative_withdraw_count' => 'getCumulativeWithdrawCount',
        'cumulative_swap_count' => 'getCumulativeSwapCount',
        'position_count' => 'getPositionCount',
        'open_position_count' => 'getOpenPositionCount',
        'closed_position_count' => 'getClosedPositionCount',
        'last_snapshot_day_id' => 'getLastSnapshotDayId',
        'last_snapshot_hour_id' => 'getLastSnapshotHourId',
        'last_update_timestamp' => 'getLastUpdateTimestamp',
        'last_update_block_number' => 'getLastUpdateBlockNumber',
        'evaluated_ask' => 'getEvaluatedAsk'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('entry_time', $data ?? [], null);
        $this->setIfExists('recv_time', $data ?? [], null);
        $this->setIfExists('block_number', $data ?? [], null);
        $this->setIfExists('vid', $data ?? [], null);
        $this->setIfExists('block_range', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('protocol', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('liquidity_token', $data ?? [], null);
        $this->setIfExists('input_tokens', $data ?? [], null);
        $this->setIfExists('reward_tokens', $data ?? [], null);
        $this->setIfExists('fees', $data ?? [], null);
        $this->setIfExists('is_single_sided', $data ?? [], null);
        $this->setIfExists('created_timestamp', $data ?? [], null);
        $this->setIfExists('created_block_number', $data ?? [], null);
        $this->setIfExists('tick', $data ?? [], null);
        $this->setIfExists('total_value_locked_usd', $data ?? [], null);
        $this->setIfExists('total_liquidity', $data ?? [], null);
        $this->setIfExists('total_liquidity_usd', $data ?? [], null);
        $this->setIfExists('active_liquidity', $data ?? [], null);
        $this->setIfExists('active_liquidity_usd', $data ?? [], null);
        $this->setIfExists('uncollected_protocol_side_token_amounts', $data ?? [], null);
        $this->setIfExists('uncollected_protocol_side_values_usd', $data ?? [], null);
        $this->setIfExists('uncollected_supply_side_token_amounts', $data ?? [], null);
        $this->setIfExists('uncollected_supply_side_values_usd', $data ?? [], null);
        $this->setIfExists('cumulative_supply_side_revenue_usd', $data ?? [], null);
        $this->setIfExists('cumulative_protocol_side_revenue_usd', $data ?? [], null);
        $this->setIfExists('cumulative_total_revenue_usd', $data ?? [], null);
        $this->setIfExists('cumulative_volume_by_token_amount', $data ?? [], null);
        $this->setIfExists('cumulative_volume_by_token_usd', $data ?? [], null);
        $this->setIfExists('cumulative_volume_usd', $data ?? [], null);
        $this->setIfExists('input_token_balances', $data ?? [], null);
        $this->setIfExists('input_token_balances_usd', $data ?? [], null);
        $this->setIfExists('input_token_weights', $data ?? [], null);
        $this->setIfExists('staked_output_token_amount', $data ?? [], null);
        $this->setIfExists('reward_token_emissions_amount', $data ?? [], null);
        $this->setIfExists('reward_token_emissions_usd', $data ?? [], null);
        $this->setIfExists('cumulative_deposit_count', $data ?? [], null);
        $this->setIfExists('cumulative_withdraw_count', $data ?? [], null);
        $this->setIfExists('cumulative_swap_count', $data ?? [], null);
        $this->setIfExists('position_count', $data ?? [], null);
        $this->setIfExists('open_position_count', $data ?? [], null);
        $this->setIfExists('closed_position_count', $data ?? [], null);
        $this->setIfExists('last_snapshot_day_id', $data ?? [], null);
        $this->setIfExists('last_snapshot_hour_id', $data ?? [], null);
        $this->setIfExists('last_update_timestamp', $data ?? [], null);
        $this->setIfExists('last_update_block_number', $data ?? [], null);
        $this->setIfExists('evaluated_ask', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entry_time
     *
     * @return \DateTime|null
     */
    public function getEntryTime()
    {
        return $this->container['entry_time'];
    }

    /**
     * Sets entry_time
     *
     * @param \DateTime|null $entry_time entry_time
     *
     * @return self
     */
    public function setEntryTime($entry_time)
    {
        if (is_null($entry_time)) {
            throw new \InvalidArgumentException('non-nullable entry_time cannot be null');
        }
        $this->container['entry_time'] = $entry_time;

        return $this;
    }

    /**
     * Gets recv_time
     *
     * @return \DateTime|null
     */
    public function getRecvTime()
    {
        return $this->container['recv_time'];
    }

    /**
     * Sets recv_time
     *
     * @param \DateTime|null $recv_time recv_time
     *
     * @return self
     */
    public function setRecvTime($recv_time)
    {
        if (is_null($recv_time)) {
            throw new \InvalidArgumentException('non-nullable recv_time cannot be null');
        }
        $this->container['recv_time'] = $recv_time;

        return $this;
    }

    /**
     * Gets block_number
     *
     * @return int|null
     */
    public function getBlockNumber()
    {
        return $this->container['block_number'];
    }

    /**
     * Sets block_number
     *
     * @param int|null $block_number Number of block in which entity was recorded.
     *
     * @return self
     */
    public function setBlockNumber($block_number)
    {
        if (is_null($block_number)) {
            throw new \InvalidArgumentException('non-nullable block_number cannot be null');
        }
        $this->container['block_number'] = $block_number;

        return $this;
    }

    /**
     * Gets vid
     *
     * @return int|null
     */
    public function getVid()
    {
        return $this->container['vid'];
    }

    /**
     * Sets vid
     *
     * @param int|null $vid .
     *
     * @return self
     */
    public function setVid($vid)
    {
        if (is_null($vid)) {
            throw new \InvalidArgumentException('non-nullable vid cannot be null');
        }
        $this->container['vid'] = $vid;

        return $this;
    }

    /**
     * Gets block_range
     *
     * @return string|null
     */
    public function getBlockRange()
    {
        return $this->container['block_range'];
    }

    /**
     * Sets block_range
     *
     * @param string|null $block_range Block range of the liquidity pool.
     *
     * @return self
     */
    public function setBlockRange($block_range)
    {
        if (is_null($block_range)) {
            array_push($this->openAPINullablesSetToNull, 'block_range');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('block_range', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['block_range'] = $block_range;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Smart contract address of the pool.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string|null
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string|null $protocol Protocol this pool belongs to.
     *
     * @return self
     */
    public function setProtocol($protocol)
    {
        if (is_null($protocol)) {
            array_push($this->openAPINullablesSetToNull, 'protocol');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('protocol', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT).
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string|null
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string|null $symbol Symbol of liquidity pool (e.g. 3CRV).
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            array_push($this->openAPINullablesSetToNull, 'symbol');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('symbol', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets liquidity_token
     *
     * @return string|null
     */
    public function getLiquidityToken()
    {
        return $this->container['liquidity_token'];
    }

    /**
     * Sets liquidity_token
     *
     * @param string|null $liquidity_token Token that is to represent ownership of liquidity.
     *
     * @return self
     */
    public function setLiquidityToken($liquidity_token)
    {
        if (is_null($liquidity_token)) {
            array_push($this->openAPINullablesSetToNull, 'liquidity_token');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('liquidity_token', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['liquidity_token'] = $liquidity_token;

        return $this;
    }

    /**
     * Gets input_tokens
     *
     * @return string[]|null
     */
    public function getInputTokens()
    {
        return $this->container['input_tokens'];
    }

    /**
     * Sets input_tokens
     *
     * @param string[]|null $input_tokens Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer.
     *
     * @return self
     */
    public function setInputTokens($input_tokens)
    {
        if (is_null($input_tokens)) {
            array_push($this->openAPINullablesSetToNull, 'input_tokens');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('input_tokens', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['input_tokens'] = $input_tokens;

        return $this;
    }

    /**
     * Gets reward_tokens
     *
     * @return string[]|null
     */
    public function getRewardTokens()
    {
        return $this->container['reward_tokens'];
    }

    /**
     * Sets reward_tokens
     *
     * @param string[]|null $reward_tokens Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon.
     *
     * @return self
     */
    public function setRewardTokens($reward_tokens)
    {
        if (is_null($reward_tokens)) {
            array_push($this->openAPINullablesSetToNull, 'reward_tokens');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reward_tokens', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reward_tokens'] = $reward_tokens;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return string[]|null
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param string[]|null $fees Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee.).
     *
     * @return self
     */
    public function setFees($fees)
    {
        if (is_null($fees)) {
            array_push($this->openAPINullablesSetToNull, 'fees');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fees', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets is_single_sided
     *
     * @return bool|null
     */
    public function getIsSingleSided()
    {
        return $this->container['is_single_sided'];
    }

    /**
     * Sets is_single_sided
     *
     * @param bool|null $is_single_sided Specifies whether this pool is single-sided (e.g. Bancor, Platypus's Alternative Pool). The specifics of the implementation depends on the protocol.
     *
     * @return self
     */
    public function setIsSingleSided($is_single_sided)
    {
        if (is_null($is_single_sided)) {
            throw new \InvalidArgumentException('non-nullable is_single_sided cannot be null');
        }
        $this->container['is_single_sided'] = $is_single_sided;

        return $this;
    }

    /**
     * Gets created_timestamp
     *
     * @return string|null
     */
    public function getCreatedTimestamp()
    {
        return $this->container['created_timestamp'];
    }

    /**
     * Sets created_timestamp
     *
     * @param string|null $created_timestamp Timestamp when the liquidity pool was created.
     *
     * @return self
     */
    public function setCreatedTimestamp($created_timestamp)
    {
        if (is_null($created_timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'created_timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_timestamp'] = $created_timestamp;

        return $this;
    }

    /**
     * Gets created_block_number
     *
     * @return string|null
     */
    public function getCreatedBlockNumber()
    {
        return $this->container['created_block_number'];
    }

    /**
     * Sets created_block_number
     *
     * @param string|null $created_block_number Block number when the liquidity pool was created.
     *
     * @return self
     */
    public function setCreatedBlockNumber($created_block_number)
    {
        if (is_null($created_block_number)) {
            array_push($this->openAPINullablesSetToNull, 'created_block_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_block_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_block_number'] = $created_block_number;

        return $this;
    }

    /**
     * Gets tick
     *
     * @return string|null
     */
    public function getTick()
    {
        return $this->container['tick'];
    }

    /**
     * Sets tick
     *
     * @param string|null $tick Current tick representing the price of token0/token1.
     *
     * @return self
     */
    public function setTick($tick)
    {
        if (is_null($tick)) {
            array_push($this->openAPINullablesSetToNull, 'tick');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tick', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tick'] = $tick;

        return $this;
    }

    /**
     * Gets total_value_locked_usd
     *
     * @return string|null
     */
    public function getTotalValueLockedUsd()
    {
        return $this->container['total_value_locked_usd'];
    }

    /**
     * Sets total_value_locked_usd
     *
     * @param string|null $total_value_locked_usd Current TVL (Total Value Locked) of this pool in USD.
     *
     * @return self
     */
    public function setTotalValueLockedUsd($total_value_locked_usd)
    {
        if (is_null($total_value_locked_usd)) {
            array_push($this->openAPINullablesSetToNull, 'total_value_locked_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_value_locked_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_value_locked_usd'] = $total_value_locked_usd;

        return $this;
    }

    /**
     * Gets total_liquidity
     *
     * @return string|null
     */
    public function getTotalLiquidity()
    {
        return $this->container['total_liquidity'];
    }

    /**
     * Sets total_liquidity
     *
     * @param string|null $total_liquidity Sum of all active and non-active liquidity for this pool.
     *
     * @return self
     */
    public function setTotalLiquidity($total_liquidity)
    {
        if (is_null($total_liquidity)) {
            array_push($this->openAPINullablesSetToNull, 'total_liquidity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_liquidity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_liquidity'] = $total_liquidity;

        return $this;
    }

    /**
     * Gets total_liquidity_usd
     *
     * @return string|null
     */
    public function getTotalLiquidityUsd()
    {
        return $this->container['total_liquidity_usd'];
    }

    /**
     * Sets total_liquidity_usd
     *
     * @param string|null $total_liquidity_usd Sum of all active and non-active liquidity in USD for this pool.
     *
     * @return self
     */
    public function setTotalLiquidityUsd($total_liquidity_usd)
    {
        if (is_null($total_liquidity_usd)) {
            array_push($this->openAPINullablesSetToNull, 'total_liquidity_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_liquidity_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_liquidity_usd'] = $total_liquidity_usd;

        return $this;
    }

    /**
     * Gets active_liquidity
     *
     * @return string|null
     */
    public function getActiveLiquidity()
    {
        return $this->container['active_liquidity'];
    }

    /**
     * Sets active_liquidity
     *
     * @param string|null $active_liquidity All liquidity `k` that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
     *
     * @return self
     */
    public function setActiveLiquidity($active_liquidity)
    {
        if (is_null($active_liquidity)) {
            array_push($this->openAPINullablesSetToNull, 'active_liquidity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('active_liquidity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['active_liquidity'] = $active_liquidity;

        return $this;
    }

    /**
     * Gets active_liquidity_usd
     *
     * @return string|null
     */
    public function getActiveLiquidityUsd()
    {
        return $this->container['active_liquidity_usd'];
    }

    /**
     * Sets active_liquidity_usd
     *
     * @param string|null $active_liquidity_usd All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
     *
     * @return self
     */
    public function setActiveLiquidityUsd($active_liquidity_usd)
    {
        if (is_null($active_liquidity_usd)) {
            array_push($this->openAPINullablesSetToNull, 'active_liquidity_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('active_liquidity_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['active_liquidity_usd'] = $active_liquidity_usd;

        return $this;
    }

    /**
     * Gets uncollected_protocol_side_token_amounts
     *
     * @return string[]|null
     */
    public function getUncollectedProtocolSideTokenAmounts()
    {
        return $this->container['uncollected_protocol_side_token_amounts'];
    }

    /**
     * Sets uncollected_protocol_side_token_amounts
     *
     * @param string[]|null $uncollected_protocol_side_token_amounts All protocol-side value locked in token amounts that remains uncollected and unused in the pool.
     *
     * @return self
     */
    public function setUncollectedProtocolSideTokenAmounts($uncollected_protocol_side_token_amounts)
    {
        if (is_null($uncollected_protocol_side_token_amounts)) {
            array_push($this->openAPINullablesSetToNull, 'uncollected_protocol_side_token_amounts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uncollected_protocol_side_token_amounts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uncollected_protocol_side_token_amounts'] = $uncollected_protocol_side_token_amounts;

        return $this;
    }

    /**
     * Gets uncollected_protocol_side_values_usd
     *
     * @return string[]|null
     */
    public function getUncollectedProtocolSideValuesUsd()
    {
        return $this->container['uncollected_protocol_side_values_usd'];
    }

    /**
     * Sets uncollected_protocol_side_values_usd
     *
     * @param string[]|null $uncollected_protocol_side_values_usd All protocol-side value locking in USD that remains uncollected and unused in the pool.
     *
     * @return self
     */
    public function setUncollectedProtocolSideValuesUsd($uncollected_protocol_side_values_usd)
    {
        if (is_null($uncollected_protocol_side_values_usd)) {
            array_push($this->openAPINullablesSetToNull, 'uncollected_protocol_side_values_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uncollected_protocol_side_values_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uncollected_protocol_side_values_usd'] = $uncollected_protocol_side_values_usd;

        return $this;
    }

    /**
     * Gets uncollected_supply_side_token_amounts
     *
     * @return string[]|null
     */
    public function getUncollectedSupplySideTokenAmounts()
    {
        return $this->container['uncollected_supply_side_token_amounts'];
    }

    /**
     * Sets uncollected_supply_side_token_amounts
     *
     * @param string[]|null $uncollected_supply_side_token_amounts All supply-side value locked in token amounts that remains uncollected and unused in the pool.
     *
     * @return self
     */
    public function setUncollectedSupplySideTokenAmounts($uncollected_supply_side_token_amounts)
    {
        if (is_null($uncollected_supply_side_token_amounts)) {
            array_push($this->openAPINullablesSetToNull, 'uncollected_supply_side_token_amounts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uncollected_supply_side_token_amounts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uncollected_supply_side_token_amounts'] = $uncollected_supply_side_token_amounts;

        return $this;
    }

    /**
     * Gets uncollected_supply_side_values_usd
     *
     * @return string[]|null
     */
    public function getUncollectedSupplySideValuesUsd()
    {
        return $this->container['uncollected_supply_side_values_usd'];
    }

    /**
     * Sets uncollected_supply_side_values_usd
     *
     * @param string[]|null $uncollected_supply_side_values_usd All supply-side value locked in USD that remains uncollected and unused in the pool.
     *
     * @return self
     */
    public function setUncollectedSupplySideValuesUsd($uncollected_supply_side_values_usd)
    {
        if (is_null($uncollected_supply_side_values_usd)) {
            array_push($this->openAPINullablesSetToNull, 'uncollected_supply_side_values_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uncollected_supply_side_values_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uncollected_supply_side_values_usd'] = $uncollected_supply_side_values_usd;

        return $this;
    }

    /**
     * Gets cumulative_supply_side_revenue_usd
     *
     * @return string|null
     */
    public function getCumulativeSupplySideRevenueUsd()
    {
        return $this->container['cumulative_supply_side_revenue_usd'];
    }

    /**
     * Sets cumulative_supply_side_revenue_usd
     *
     * @param string|null $cumulative_supply_side_revenue_usd All revenue generated by the liquidity pool, accrued to the supply side.
     *
     * @return self
     */
    public function setCumulativeSupplySideRevenueUsd($cumulative_supply_side_revenue_usd)
    {
        if (is_null($cumulative_supply_side_revenue_usd)) {
            array_push($this->openAPINullablesSetToNull, 'cumulative_supply_side_revenue_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cumulative_supply_side_revenue_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cumulative_supply_side_revenue_usd'] = $cumulative_supply_side_revenue_usd;

        return $this;
    }

    /**
     * Gets cumulative_protocol_side_revenue_usd
     *
     * @return string|null
     */
    public function getCumulativeProtocolSideRevenueUsd()
    {
        return $this->container['cumulative_protocol_side_revenue_usd'];
    }

    /**
     * Sets cumulative_protocol_side_revenue_usd
     *
     * @param string|null $cumulative_protocol_side_revenue_usd All revenue generated by the liquidity pool, accrued to the protocol.
     *
     * @return self
     */
    public function setCumulativeProtocolSideRevenueUsd($cumulative_protocol_side_revenue_usd)
    {
        if (is_null($cumulative_protocol_side_revenue_usd)) {
            array_push($this->openAPINullablesSetToNull, 'cumulative_protocol_side_revenue_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cumulative_protocol_side_revenue_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cumulative_protocol_side_revenue_usd'] = $cumulative_protocol_side_revenue_usd;

        return $this;
    }

    /**
     * Gets cumulative_total_revenue_usd
     *
     * @return string|null
     */
    public function getCumulativeTotalRevenueUsd()
    {
        return $this->container['cumulative_total_revenue_usd'];
    }

    /**
     * Sets cumulative_total_revenue_usd
     *
     * @param string|null $cumulative_total_revenue_usd All revenue generated by the liquidity pool.
     *
     * @return self
     */
    public function setCumulativeTotalRevenueUsd($cumulative_total_revenue_usd)
    {
        if (is_null($cumulative_total_revenue_usd)) {
            array_push($this->openAPINullablesSetToNull, 'cumulative_total_revenue_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cumulative_total_revenue_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cumulative_total_revenue_usd'] = $cumulative_total_revenue_usd;

        return $this;
    }

    /**
     * Gets cumulative_volume_by_token_amount
     *
     * @return string[]|null
     */
    public function getCumulativeVolumeByTokenAmount()
    {
        return $this->container['cumulative_volume_by_token_amount'];
    }

    /**
     * Sets cumulative_volume_by_token_amount
     *
     * @param string[]|null $cumulative_volume_by_token_amount All trade volume occurred for a specific input token, in native amount. The ordering should be the same as the pool's `inputTokens` field.
     *
     * @return self
     */
    public function setCumulativeVolumeByTokenAmount($cumulative_volume_by_token_amount)
    {
        if (is_null($cumulative_volume_by_token_amount)) {
            array_push($this->openAPINullablesSetToNull, 'cumulative_volume_by_token_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cumulative_volume_by_token_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cumulative_volume_by_token_amount'] = $cumulative_volume_by_token_amount;

        return $this;
    }

    /**
     * Gets cumulative_volume_by_token_usd
     *
     * @return string[]|null
     */
    public function getCumulativeVolumeByTokenUsd()
    {
        return $this->container['cumulative_volume_by_token_usd'];
    }

    /**
     * Sets cumulative_volume_by_token_usd
     *
     * @param string[]|null $cumulative_volume_by_token_usd All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.
     *
     * @return self
     */
    public function setCumulativeVolumeByTokenUsd($cumulative_volume_by_token_usd)
    {
        if (is_null($cumulative_volume_by_token_usd)) {
            array_push($this->openAPINullablesSetToNull, 'cumulative_volume_by_token_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cumulative_volume_by_token_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cumulative_volume_by_token_usd'] = $cumulative_volume_by_token_usd;

        return $this;
    }

    /**
     * Gets cumulative_volume_usd
     *
     * @return string|null
     */
    public function getCumulativeVolumeUsd()
    {
        return $this->container['cumulative_volume_usd'];
    }

    /**
     * Sets cumulative_volume_usd
     *
     * @param string|null $cumulative_volume_usd All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool's `inputTokens` field.
     *
     * @return self
     */
    public function setCumulativeVolumeUsd($cumulative_volume_usd)
    {
        if (is_null($cumulative_volume_usd)) {
            array_push($this->openAPINullablesSetToNull, 'cumulative_volume_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cumulative_volume_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cumulative_volume_usd'] = $cumulative_volume_usd;

        return $this;
    }

    /**
     * Gets input_token_balances
     *
     * @return string[]|null
     */
    public function getInputTokenBalances()
    {
        return $this->container['input_token_balances'];
    }

    /**
     * Sets input_token_balances
     *
     * @param string[]|null $input_token_balances Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.
     *
     * @return self
     */
    public function setInputTokenBalances($input_token_balances)
    {
        if (is_null($input_token_balances)) {
            array_push($this->openAPINullablesSetToNull, 'input_token_balances');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('input_token_balances', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['input_token_balances'] = $input_token_balances;

        return $this;
    }

    /**
     * Gets input_token_balances_usd
     *
     * @return string[]|null
     */
    public function getInputTokenBalancesUsd()
    {
        return $this->container['input_token_balances_usd'];
    }

    /**
     * Sets input_token_balances_usd
     *
     * @param string[]|null $input_token_balances_usd Amount of input tokens in USD in the pool. The ordering should be the same as the pool's `inputTokens` field.
     *
     * @return self
     */
    public function setInputTokenBalancesUsd($input_token_balances_usd)
    {
        if (is_null($input_token_balances_usd)) {
            array_push($this->openAPINullablesSetToNull, 'input_token_balances_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('input_token_balances_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['input_token_balances_usd'] = $input_token_balances_usd;

        return $this;
    }

    /**
     * Gets input_token_weights
     *
     * @return string[]|null
     */
    public function getInputTokenWeights()
    {
        return $this->container['input_token_weights'];
    }

    /**
     * Sets input_token_weights
     *
     * @param string[]|null $input_token_weights Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
     *
     * @return self
     */
    public function setInputTokenWeights($input_token_weights)
    {
        if (is_null($input_token_weights)) {
            array_push($this->openAPINullablesSetToNull, 'input_token_weights');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('input_token_weights', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['input_token_weights'] = $input_token_weights;

        return $this;
    }

    /**
     * Gets staked_output_token_amount
     *
     * @return string|null
     */
    public function getStakedOutputTokenAmount()
    {
        return $this->container['staked_output_token_amount'];
    }

    /**
     * Sets staked_output_token_amount
     *
     * @param string|null $staked_output_token_amount Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
     *
     * @return self
     */
    public function setStakedOutputTokenAmount($staked_output_token_amount)
    {
        if (is_null($staked_output_token_amount)) {
            array_push($this->openAPINullablesSetToNull, 'staked_output_token_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staked_output_token_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['staked_output_token_amount'] = $staked_output_token_amount;

        return $this;
    }

    /**
     * Gets reward_token_emissions_amount
     *
     * @return string[]|null
     */
    public function getRewardTokenEmissionsAmount()
    {
        return $this->container['reward_token_emissions_amount'];
    }

    /**
     * Sets reward_token_emissions_amount
     *
     * @param string[]|null $reward_token_emissions_amount Per-block reward token emission as of the current block normalized to a day, in token's native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
     *
     * @return self
     */
    public function setRewardTokenEmissionsAmount($reward_token_emissions_amount)
    {
        if (is_null($reward_token_emissions_amount)) {
            array_push($this->openAPINullablesSetToNull, 'reward_token_emissions_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reward_token_emissions_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reward_token_emissions_amount'] = $reward_token_emissions_amount;

        return $this;
    }

    /**
     * Gets reward_token_emissions_usd
     *
     * @return string[]|null
     */
    public function getRewardTokenEmissionsUsd()
    {
        return $this->container['reward_token_emissions_usd'];
    }

    /**
     * Sets reward_token_emissions_usd
     *
     * @param string[]|null $reward_token_emissions_usd Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
     *
     * @return self
     */
    public function setRewardTokenEmissionsUsd($reward_token_emissions_usd)
    {
        if (is_null($reward_token_emissions_usd)) {
            array_push($this->openAPINullablesSetToNull, 'reward_token_emissions_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reward_token_emissions_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reward_token_emissions_usd'] = $reward_token_emissions_usd;

        return $this;
    }

    /**
     * Gets cumulative_deposit_count
     *
     * @return int|null
     */
    public function getCumulativeDepositCount()
    {
        return $this->container['cumulative_deposit_count'];
    }

    /**
     * Sets cumulative_deposit_count
     *
     * @param int|null $cumulative_deposit_count Total number of deposits (add liquidity).
     *
     * @return self
     */
    public function setCumulativeDepositCount($cumulative_deposit_count)
    {
        if (is_null($cumulative_deposit_count)) {
            throw new \InvalidArgumentException('non-nullable cumulative_deposit_count cannot be null');
        }
        $this->container['cumulative_deposit_count'] = $cumulative_deposit_count;

        return $this;
    }

    /**
     * Gets cumulative_withdraw_count
     *
     * @return int|null
     */
    public function getCumulativeWithdrawCount()
    {
        return $this->container['cumulative_withdraw_count'];
    }

    /**
     * Sets cumulative_withdraw_count
     *
     * @param int|null $cumulative_withdraw_count Total number of withdrawals (remove liquidity).
     *
     * @return self
     */
    public function setCumulativeWithdrawCount($cumulative_withdraw_count)
    {
        if (is_null($cumulative_withdraw_count)) {
            throw new \InvalidArgumentException('non-nullable cumulative_withdraw_count cannot be null');
        }
        $this->container['cumulative_withdraw_count'] = $cumulative_withdraw_count;

        return $this;
    }

    /**
     * Gets cumulative_swap_count
     *
     * @return int|null
     */
    public function getCumulativeSwapCount()
    {
        return $this->container['cumulative_swap_count'];
    }

    /**
     * Sets cumulative_swap_count
     *
     * @param int|null $cumulative_swap_count Total number of trades (swaps).
     *
     * @return self
     */
    public function setCumulativeSwapCount($cumulative_swap_count)
    {
        if (is_null($cumulative_swap_count)) {
            throw new \InvalidArgumentException('non-nullable cumulative_swap_count cannot be null');
        }
        $this->container['cumulative_swap_count'] = $cumulative_swap_count;

        return $this;
    }

    /**
     * Gets position_count
     *
     * @return int|null
     */
    public function getPositionCount()
    {
        return $this->container['position_count'];
    }

    /**
     * Sets position_count
     *
     * @param int|null $position_count Number of positions in this market.
     *
     * @return self
     */
    public function setPositionCount($position_count)
    {
        if (is_null($position_count)) {
            throw new \InvalidArgumentException('non-nullable position_count cannot be null');
        }
        $this->container['position_count'] = $position_count;

        return $this;
    }

    /**
     * Gets open_position_count
     *
     * @return int|null
     */
    public function getOpenPositionCount()
    {
        return $this->container['open_position_count'];
    }

    /**
     * Sets open_position_count
     *
     * @param int|null $open_position_count Number of open positions in this market.
     *
     * @return self
     */
    public function setOpenPositionCount($open_position_count)
    {
        if (is_null($open_position_count)) {
            throw new \InvalidArgumentException('non-nullable open_position_count cannot be null');
        }
        $this->container['open_position_count'] = $open_position_count;

        return $this;
    }

    /**
     * Gets closed_position_count
     *
     * @return int|null
     */
    public function getClosedPositionCount()
    {
        return $this->container['closed_position_count'];
    }

    /**
     * Sets closed_position_count
     *
     * @param int|null $closed_position_count Number of closed positions in this market.
     *
     * @return self
     */
    public function setClosedPositionCount($closed_position_count)
    {
        if (is_null($closed_position_count)) {
            throw new \InvalidArgumentException('non-nullable closed_position_count cannot be null');
        }
        $this->container['closed_position_count'] = $closed_position_count;

        return $this;
    }

    /**
     * Gets last_snapshot_day_id
     *
     * @return int|null
     */
    public function getLastSnapshotDayId()
    {
        return $this->container['last_snapshot_day_id'];
    }

    /**
     * Sets last_snapshot_day_id
     *
     * @param int|null $last_snapshot_day_id Day ID of the most recent daily snapshot.
     *
     * @return self
     */
    public function setLastSnapshotDayId($last_snapshot_day_id)
    {
        if (is_null($last_snapshot_day_id)) {
            throw new \InvalidArgumentException('non-nullable last_snapshot_day_id cannot be null');
        }
        $this->container['last_snapshot_day_id'] = $last_snapshot_day_id;

        return $this;
    }

    /**
     * Gets last_snapshot_hour_id
     *
     * @return int|null
     */
    public function getLastSnapshotHourId()
    {
        return $this->container['last_snapshot_hour_id'];
    }

    /**
     * Sets last_snapshot_hour_id
     *
     * @param int|null $last_snapshot_hour_id Hour ID of the most recent hourly snapshot.
     *
     * @return self
     */
    public function setLastSnapshotHourId($last_snapshot_hour_id)
    {
        if (is_null($last_snapshot_hour_id)) {
            throw new \InvalidArgumentException('non-nullable last_snapshot_hour_id cannot be null');
        }
        $this->container['last_snapshot_hour_id'] = $last_snapshot_hour_id;

        return $this;
    }

    /**
     * Gets last_update_timestamp
     *
     * @return string|null
     */
    public function getLastUpdateTimestamp()
    {
        return $this->container['last_update_timestamp'];
    }

    /**
     * Sets last_update_timestamp
     *
     * @param string|null $last_update_timestamp Timestamp of the last time this entity was updated.
     *
     * @return self
     */
    public function setLastUpdateTimestamp($last_update_timestamp)
    {
        if (is_null($last_update_timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'last_update_timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_update_timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_update_timestamp'] = $last_update_timestamp;

        return $this;
    }

    /**
     * Gets last_update_block_number
     *
     * @return string|null
     */
    public function getLastUpdateBlockNumber()
    {
        return $this->container['last_update_block_number'];
    }

    /**
     * Sets last_update_block_number
     *
     * @param string|null $last_update_block_number Block number of the last time this entity was updated.
     *
     * @return self
     */
    public function setLastUpdateBlockNumber($last_update_block_number)
    {
        if (is_null($last_update_block_number)) {
            array_push($this->openAPINullablesSetToNull, 'last_update_block_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_update_block_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_update_block_number'] = $last_update_block_number;

        return $this;
    }

    /**
     * Gets evaluated_ask
     *
     * @return float|null
     */
    public function getEvaluatedAsk()
    {
        return $this->container['evaluated_ask'];
    }

    /**
     * Sets evaluated_ask
     *
     * @param float|null $evaluated_ask Evaluated ask value of the liquidity pool.
     *
     * @return self
     */
    public function setEvaluatedAsk($evaluated_ask)
    {
        if (is_null($evaluated_ask)) {
            throw new \InvalidArgumentException('non-nullable evaluated_ask cannot be null');
        }
        $this->container['evaluated_ask'] = $evaluated_ask;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


