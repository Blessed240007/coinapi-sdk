<?php
/**
 * CURVEFINANCEETHEREUMLiquidityPoolDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * On Chain Dapps - REST API
 *
 * This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CURVEFINANCEETHEREUMLiquidityPoolDTO Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CURVEFINANCEETHEREUMLiquidityPoolDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CURVE_FINANCE_ETHEREUM.LiquidityPoolDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'entry_time' => '\DateTime',
        'recv_time' => '\DateTime',
        'block_number' => 'int',
        'vid' => 'int',
        'id' => 'string',
        'protocol' => 'string',
        'name' => 'string',
        'symbol' => 'string',
        'input_tokens' => 'string[]',
        'input_tokens_ordered' => 'string[]',
        'output_token' => 'string',
        'reward_tokens' => 'string[]',
        'fees' => 'string[]',
        'is_single_sided' => 'bool',
        'created_timestamp' => 'string',
        'created_block_number' => 'string',
        'total_value_locked_usd' => 'string',
        'cumulative_supply_side_revenue_usd' => 'string',
        'cumulative_protocol_side_revenue_usd' => 'string',
        'cumulative_total_revenue_usd' => 'string',
        'cumulative_volume_usd' => 'string',
        'input_token_balances' => 'string[]',
        'input_token_weights' => 'string[]',
        'output_token_supply' => 'string',
        'output_token_price_usd' => 'string',
        'staked_output_token_amount' => 'string',
        'reward_token_emissions_amount' => 'string[]',
        'reward_token_emissions_usd' => 'string[]',
        'registry_address' => 'string',
        'gauge_address' => 'string',
        'evaluated_ask' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'entry_time' => 'date-time',
        'recv_time' => 'date-time',
        'block_number' => 'int64',
        'vid' => 'int64',
        'id' => null,
        'protocol' => null,
        'name' => null,
        'symbol' => null,
        'input_tokens' => null,
        'input_tokens_ordered' => null,
        'output_token' => null,
        'reward_tokens' => null,
        'fees' => null,
        'is_single_sided' => null,
        'created_timestamp' => null,
        'created_block_number' => null,
        'total_value_locked_usd' => null,
        'cumulative_supply_side_revenue_usd' => null,
        'cumulative_protocol_side_revenue_usd' => null,
        'cumulative_total_revenue_usd' => null,
        'cumulative_volume_usd' => null,
        'input_token_balances' => null,
        'input_token_weights' => null,
        'output_token_supply' => null,
        'output_token_price_usd' => null,
        'staked_output_token_amount' => null,
        'reward_token_emissions_amount' => null,
        'reward_token_emissions_usd' => null,
        'registry_address' => null,
        'gauge_address' => null,
        'evaluated_ask' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'entry_time' => false,
		'recv_time' => false,
		'block_number' => false,
		'vid' => false,
		'id' => true,
		'protocol' => true,
		'name' => true,
		'symbol' => true,
		'input_tokens' => true,
		'input_tokens_ordered' => true,
		'output_token' => true,
		'reward_tokens' => true,
		'fees' => true,
		'is_single_sided' => false,
		'created_timestamp' => true,
		'created_block_number' => true,
		'total_value_locked_usd' => true,
		'cumulative_supply_side_revenue_usd' => true,
		'cumulative_protocol_side_revenue_usd' => true,
		'cumulative_total_revenue_usd' => true,
		'cumulative_volume_usd' => true,
		'input_token_balances' => true,
		'input_token_weights' => true,
		'output_token_supply' => true,
		'output_token_price_usd' => true,
		'staked_output_token_amount' => true,
		'reward_token_emissions_amount' => true,
		'reward_token_emissions_usd' => true,
		'registry_address' => true,
		'gauge_address' => true,
		'evaluated_ask' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entry_time' => 'entry_time',
        'recv_time' => 'recv_time',
        'block_number' => 'block_number',
        'vid' => 'vid',
        'id' => 'id',
        'protocol' => 'protocol',
        'name' => 'name',
        'symbol' => 'symbol',
        'input_tokens' => 'input_tokens',
        'input_tokens_ordered' => 'input_tokens_ordered',
        'output_token' => 'output_token',
        'reward_tokens' => 'reward_tokens',
        'fees' => 'fees',
        'is_single_sided' => 'is_single_sided',
        'created_timestamp' => 'created_timestamp',
        'created_block_number' => 'created_block_number',
        'total_value_locked_usd' => 'total_value_locked_usd',
        'cumulative_supply_side_revenue_usd' => 'cumulative_supply_side_revenue_usd',
        'cumulative_protocol_side_revenue_usd' => 'cumulative_protocol_side_revenue_usd',
        'cumulative_total_revenue_usd' => 'cumulative_total_revenue_usd',
        'cumulative_volume_usd' => 'cumulative_volume_usd',
        'input_token_balances' => 'input_token_balances',
        'input_token_weights' => 'input_token_weights',
        'output_token_supply' => 'output_token_supply',
        'output_token_price_usd' => 'output_token_price_usd',
        'staked_output_token_amount' => 'staked_output_token_amount',
        'reward_token_emissions_amount' => 'reward_token_emissions_amount',
        'reward_token_emissions_usd' => 'reward_token_emissions_usd',
        'registry_address' => 'registry_address',
        'gauge_address' => 'gauge_address',
        'evaluated_ask' => 'evaluated_ask'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entry_time' => 'setEntryTime',
        'recv_time' => 'setRecvTime',
        'block_number' => 'setBlockNumber',
        'vid' => 'setVid',
        'id' => 'setId',
        'protocol' => 'setProtocol',
        'name' => 'setName',
        'symbol' => 'setSymbol',
        'input_tokens' => 'setInputTokens',
        'input_tokens_ordered' => 'setInputTokensOrdered',
        'output_token' => 'setOutputToken',
        'reward_tokens' => 'setRewardTokens',
        'fees' => 'setFees',
        'is_single_sided' => 'setIsSingleSided',
        'created_timestamp' => 'setCreatedTimestamp',
        'created_block_number' => 'setCreatedBlockNumber',
        'total_value_locked_usd' => 'setTotalValueLockedUsd',
        'cumulative_supply_side_revenue_usd' => 'setCumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'setCumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'setCumulativeTotalRevenueUsd',
        'cumulative_volume_usd' => 'setCumulativeVolumeUsd',
        'input_token_balances' => 'setInputTokenBalances',
        'input_token_weights' => 'setInputTokenWeights',
        'output_token_supply' => 'setOutputTokenSupply',
        'output_token_price_usd' => 'setOutputTokenPriceUsd',
        'staked_output_token_amount' => 'setStakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'setRewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'setRewardTokenEmissionsUsd',
        'registry_address' => 'setRegistryAddress',
        'gauge_address' => 'setGaugeAddress',
        'evaluated_ask' => 'setEvaluatedAsk'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entry_time' => 'getEntryTime',
        'recv_time' => 'getRecvTime',
        'block_number' => 'getBlockNumber',
        'vid' => 'getVid',
        'id' => 'getId',
        'protocol' => 'getProtocol',
        'name' => 'getName',
        'symbol' => 'getSymbol',
        'input_tokens' => 'getInputTokens',
        'input_tokens_ordered' => 'getInputTokensOrdered',
        'output_token' => 'getOutputToken',
        'reward_tokens' => 'getRewardTokens',
        'fees' => 'getFees',
        'is_single_sided' => 'getIsSingleSided',
        'created_timestamp' => 'getCreatedTimestamp',
        'created_block_number' => 'getCreatedBlockNumber',
        'total_value_locked_usd' => 'getTotalValueLockedUsd',
        'cumulative_supply_side_revenue_usd' => 'getCumulativeSupplySideRevenueUsd',
        'cumulative_protocol_side_revenue_usd' => 'getCumulativeProtocolSideRevenueUsd',
        'cumulative_total_revenue_usd' => 'getCumulativeTotalRevenueUsd',
        'cumulative_volume_usd' => 'getCumulativeVolumeUsd',
        'input_token_balances' => 'getInputTokenBalances',
        'input_token_weights' => 'getInputTokenWeights',
        'output_token_supply' => 'getOutputTokenSupply',
        'output_token_price_usd' => 'getOutputTokenPriceUsd',
        'staked_output_token_amount' => 'getStakedOutputTokenAmount',
        'reward_token_emissions_amount' => 'getRewardTokenEmissionsAmount',
        'reward_token_emissions_usd' => 'getRewardTokenEmissionsUsd',
        'registry_address' => 'getRegistryAddress',
        'gauge_address' => 'getGaugeAddress',
        'evaluated_ask' => 'getEvaluatedAsk'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('entry_time', $data ?? [], null);
        $this->setIfExists('recv_time', $data ?? [], null);
        $this->setIfExists('block_number', $data ?? [], null);
        $this->setIfExists('vid', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('protocol', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('input_tokens', $data ?? [], null);
        $this->setIfExists('input_tokens_ordered', $data ?? [], null);
        $this->setIfExists('output_token', $data ?? [], null);
        $this->setIfExists('reward_tokens', $data ?? [], null);
        $this->setIfExists('fees', $data ?? [], null);
        $this->setIfExists('is_single_sided', $data ?? [], null);
        $this->setIfExists('created_timestamp', $data ?? [], null);
        $this->setIfExists('created_block_number', $data ?? [], null);
        $this->setIfExists('total_value_locked_usd', $data ?? [], null);
        $this->setIfExists('cumulative_supply_side_revenue_usd', $data ?? [], null);
        $this->setIfExists('cumulative_protocol_side_revenue_usd', $data ?? [], null);
        $this->setIfExists('cumulative_total_revenue_usd', $data ?? [], null);
        $this->setIfExists('cumulative_volume_usd', $data ?? [], null);
        $this->setIfExists('input_token_balances', $data ?? [], null);
        $this->setIfExists('input_token_weights', $data ?? [], null);
        $this->setIfExists('output_token_supply', $data ?? [], null);
        $this->setIfExists('output_token_price_usd', $data ?? [], null);
        $this->setIfExists('staked_output_token_amount', $data ?? [], null);
        $this->setIfExists('reward_token_emissions_amount', $data ?? [], null);
        $this->setIfExists('reward_token_emissions_usd', $data ?? [], null);
        $this->setIfExists('registry_address', $data ?? [], null);
        $this->setIfExists('gauge_address', $data ?? [], null);
        $this->setIfExists('evaluated_ask', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entry_time
     *
     * @return \DateTime|null
     */
    public function getEntryTime()
    {
        return $this->container['entry_time'];
    }

    /**
     * Sets entry_time
     *
     * @param \DateTime|null $entry_time entry_time
     *
     * @return self
     */
    public function setEntryTime($entry_time)
    {
        if (is_null($entry_time)) {
            throw new \InvalidArgumentException('non-nullable entry_time cannot be null');
        }
        $this->container['entry_time'] = $entry_time;

        return $this;
    }

    /**
     * Gets recv_time
     *
     * @return \DateTime|null
     */
    public function getRecvTime()
    {
        return $this->container['recv_time'];
    }

    /**
     * Sets recv_time
     *
     * @param \DateTime|null $recv_time recv_time
     *
     * @return self
     */
    public function setRecvTime($recv_time)
    {
        if (is_null($recv_time)) {
            throw new \InvalidArgumentException('non-nullable recv_time cannot be null');
        }
        $this->container['recv_time'] = $recv_time;

        return $this;
    }

    /**
     * Gets block_number
     *
     * @return int|null
     */
    public function getBlockNumber()
    {
        return $this->container['block_number'];
    }

    /**
     * Sets block_number
     *
     * @param int|null $block_number Number of block in which entity was recorded.
     *
     * @return self
     */
    public function setBlockNumber($block_number)
    {
        if (is_null($block_number)) {
            throw new \InvalidArgumentException('non-nullable block_number cannot be null');
        }
        $this->container['block_number'] = $block_number;

        return $this;
    }

    /**
     * Gets vid
     *
     * @return int|null
     */
    public function getVid()
    {
        return $this->container['vid'];
    }

    /**
     * Sets vid
     *
     * @param int|null $vid 
     *
     * @return self
     */
    public function setVid($vid)
    {
        if (is_null($vid)) {
            throw new \InvalidArgumentException('non-nullable vid cannot be null');
        }
        $this->container['vid'] = $vid;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Smart contract address of the pool
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string|null
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string|null $protocol The protocol this pool belongs to
     *
     * @return self
     */
    public function setProtocol($protocol)
    {
        if (is_null($protocol)) {
            array_push($this->openAPINullablesSetToNull, 'protocol');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('protocol', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT)
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string|null
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string|null $symbol Symbol of liquidity pool (e.g. 3CRV)
     *
     * @return self
     */
    public function setSymbol($symbol)
    {
        if (is_null($symbol)) {
            array_push($this->openAPINullablesSetToNull, 'symbol');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('symbol', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets input_tokens
     *
     * @return string[]|null
     */
    public function getInputTokens()
    {
        return $this->container['input_tokens'];
    }

    /**
     * Sets input_tokens
     *
     * @param string[]|null $input_tokens Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer
     *
     * @return self
     */
    public function setInputTokens($input_tokens)
    {
        if (is_null($input_tokens)) {
            array_push($this->openAPINullablesSetToNull, 'input_tokens');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('input_tokens', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['input_tokens'] = $input_tokens;

        return $this;
    }

    /**
     * Gets input_tokens_ordered
     *
     * @return string[]|null
     */
    public function getInputTokensOrdered()
    {
        return $this->container['input_tokens_ordered'];
    }

    /**
     * Sets input_tokens_ordered
     *
     * @param string[]|null $input_tokens_ordered inputTokens in native (contract) order
     *
     * @return self
     */
    public function setInputTokensOrdered($input_tokens_ordered)
    {
        if (is_null($input_tokens_ordered)) {
            array_push($this->openAPINullablesSetToNull, 'input_tokens_ordered');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('input_tokens_ordered', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['input_tokens_ordered'] = $input_tokens_ordered;

        return $this;
    }

    /**
     * Gets output_token
     *
     * @return string|null
     */
    public function getOutputToken()
    {
        return $this->container['output_token'];
    }

    /**
     * Sets output_token
     *
     * @param string|null $output_token Token that is minted to track ownership of position in protocol
     *
     * @return self
     */
    public function setOutputToken($output_token)
    {
        if (is_null($output_token)) {
            array_push($this->openAPINullablesSetToNull, 'output_token');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('output_token', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['output_token'] = $output_token;

        return $this;
    }

    /**
     * Gets reward_tokens
     *
     * @return string[]|null
     */
    public function getRewardTokens()
    {
        return $this->container['reward_tokens'];
    }

    /**
     * Sets reward_tokens
     *
     * @param string[]|null $reward_tokens Aditional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon
     *
     * @return self
     */
    public function setRewardTokens($reward_tokens)
    {
        if (is_null($reward_tokens)) {
            array_push($this->openAPINullablesSetToNull, 'reward_tokens');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reward_tokens', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reward_tokens'] = $reward_tokens;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return string[]|null
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param string[]|null $fees Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee.)
     *
     * @return self
     */
    public function setFees($fees)
    {
        if (is_null($fees)) {
            array_push($this->openAPINullablesSetToNull, 'fees');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fees', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets is_single_sided
     *
     * @return bool|null
     */
    public function getIsSingleSided()
    {
        return $this->container['is_single_sided'];
    }

    /**
     * Sets is_single_sided
     *
     * @param bool|null $is_single_sided Whether this pool is single-sided (e.g. Bancor, Platypus's Alternative Pool). The specifics of the implementation depends on the protocol.
     *
     * @return self
     */
    public function setIsSingleSided($is_single_sided)
    {
        if (is_null($is_single_sided)) {
            throw new \InvalidArgumentException('non-nullable is_single_sided cannot be null');
        }
        $this->container['is_single_sided'] = $is_single_sided;

        return $this;
    }

    /**
     * Gets created_timestamp
     *
     * @return string|null
     */
    public function getCreatedTimestamp()
    {
        return $this->container['created_timestamp'];
    }

    /**
     * Sets created_timestamp
     *
     * @param string|null $created_timestamp Creation timestamp
     *
     * @return self
     */
    public function setCreatedTimestamp($created_timestamp)
    {
        if (is_null($created_timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'created_timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_timestamp'] = $created_timestamp;

        return $this;
    }

    /**
     * Gets created_block_number
     *
     * @return string|null
     */
    public function getCreatedBlockNumber()
    {
        return $this->container['created_block_number'];
    }

    /**
     * Sets created_block_number
     *
     * @param string|null $created_block_number Creation block number
     *
     * @return self
     */
    public function setCreatedBlockNumber($created_block_number)
    {
        if (is_null($created_block_number)) {
            array_push($this->openAPINullablesSetToNull, 'created_block_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_block_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_block_number'] = $created_block_number;

        return $this;
    }

    /**
     * Gets total_value_locked_usd
     *
     * @return string|null
     */
    public function getTotalValueLockedUsd()
    {
        return $this->container['total_value_locked_usd'];
    }

    /**
     * Sets total_value_locked_usd
     *
     * @param string|null $total_value_locked_usd Current TVL (Total Value Locked) of this pool in USD
     *
     * @return self
     */
    public function setTotalValueLockedUsd($total_value_locked_usd)
    {
        if (is_null($total_value_locked_usd)) {
            array_push($this->openAPINullablesSetToNull, 'total_value_locked_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_value_locked_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_value_locked_usd'] = $total_value_locked_usd;

        return $this;
    }

    /**
     * Gets cumulative_supply_side_revenue_usd
     *
     * @return string|null
     */
    public function getCumulativeSupplySideRevenueUsd()
    {
        return $this->container['cumulative_supply_side_revenue_usd'];
    }

    /**
     * Sets cumulative_supply_side_revenue_usd
     *
     * @param string|null $cumulative_supply_side_revenue_usd All revenue generated by the liquidity pool, accrued to the supply side.
     *
     * @return self
     */
    public function setCumulativeSupplySideRevenueUsd($cumulative_supply_side_revenue_usd)
    {
        if (is_null($cumulative_supply_side_revenue_usd)) {
            array_push($this->openAPINullablesSetToNull, 'cumulative_supply_side_revenue_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cumulative_supply_side_revenue_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cumulative_supply_side_revenue_usd'] = $cumulative_supply_side_revenue_usd;

        return $this;
    }

    /**
     * Gets cumulative_protocol_side_revenue_usd
     *
     * @return string|null
     */
    public function getCumulativeProtocolSideRevenueUsd()
    {
        return $this->container['cumulative_protocol_side_revenue_usd'];
    }

    /**
     * Sets cumulative_protocol_side_revenue_usd
     *
     * @param string|null $cumulative_protocol_side_revenue_usd All revenue generated by the liquidity pool, accrued to the protocol.
     *
     * @return self
     */
    public function setCumulativeProtocolSideRevenueUsd($cumulative_protocol_side_revenue_usd)
    {
        if (is_null($cumulative_protocol_side_revenue_usd)) {
            array_push($this->openAPINullablesSetToNull, 'cumulative_protocol_side_revenue_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cumulative_protocol_side_revenue_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cumulative_protocol_side_revenue_usd'] = $cumulative_protocol_side_revenue_usd;

        return $this;
    }

    /**
     * Gets cumulative_total_revenue_usd
     *
     * @return string|null
     */
    public function getCumulativeTotalRevenueUsd()
    {
        return $this->container['cumulative_total_revenue_usd'];
    }

    /**
     * Sets cumulative_total_revenue_usd
     *
     * @param string|null $cumulative_total_revenue_usd All revenue generated by the liquidity pool.
     *
     * @return self
     */
    public function setCumulativeTotalRevenueUsd($cumulative_total_revenue_usd)
    {
        if (is_null($cumulative_total_revenue_usd)) {
            array_push($this->openAPINullablesSetToNull, 'cumulative_total_revenue_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cumulative_total_revenue_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cumulative_total_revenue_usd'] = $cumulative_total_revenue_usd;

        return $this;
    }

    /**
     * Gets cumulative_volume_usd
     *
     * @return string|null
     */
    public function getCumulativeVolumeUsd()
    {
        return $this->container['cumulative_volume_usd'];
    }

    /**
     * Sets cumulative_volume_usd
     *
     * @param string|null $cumulative_volume_usd All historical trade volume occurred in this pool, in USD
     *
     * @return self
     */
    public function setCumulativeVolumeUsd($cumulative_volume_usd)
    {
        if (is_null($cumulative_volume_usd)) {
            array_push($this->openAPINullablesSetToNull, 'cumulative_volume_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cumulative_volume_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cumulative_volume_usd'] = $cumulative_volume_usd;

        return $this;
    }

    /**
     * Gets input_token_balances
     *
     * @return string[]|null
     */
    public function getInputTokenBalances()
    {
        return $this->container['input_token_balances'];
    }

    /**
     * Sets input_token_balances
     *
     * @param string[]|null $input_token_balances Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.
     *
     * @return self
     */
    public function setInputTokenBalances($input_token_balances)
    {
        if (is_null($input_token_balances)) {
            array_push($this->openAPINullablesSetToNull, 'input_token_balances');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('input_token_balances', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['input_token_balances'] = $input_token_balances;

        return $this;
    }

    /**
     * Gets input_token_weights
     *
     * @return string[]|null
     */
    public function getInputTokenWeights()
    {
        return $this->container['input_token_weights'];
    }

    /**
     * Sets input_token_weights
     *
     * @param string[]|null $input_token_weights Weights of input tokens in the liquidity pool in percentage values.
     *
     * @return self
     */
    public function setInputTokenWeights($input_token_weights)
    {
        if (is_null($input_token_weights)) {
            array_push($this->openAPINullablesSetToNull, 'input_token_weights');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('input_token_weights', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['input_token_weights'] = $input_token_weights;

        return $this;
    }

    /**
     * Gets output_token_supply
     *
     * @return string|null
     */
    public function getOutputTokenSupply()
    {
        return $this->container['output_token_supply'];
    }

    /**
     * Sets output_token_supply
     *
     * @param string|null $output_token_supply Total supply of output token.
     *
     * @return self
     */
    public function setOutputTokenSupply($output_token_supply)
    {
        if (is_null($output_token_supply)) {
            array_push($this->openAPINullablesSetToNull, 'output_token_supply');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('output_token_supply', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['output_token_supply'] = $output_token_supply;

        return $this;
    }

    /**
     * Gets output_token_price_usd
     *
     * @return string|null
     */
    public function getOutputTokenPriceUsd()
    {
        return $this->container['output_token_price_usd'];
    }

    /**
     * Sets output_token_price_usd
     *
     * @param string|null $output_token_price_usd Price per share of output token in USD
     *
     * @return self
     */
    public function setOutputTokenPriceUsd($output_token_price_usd)
    {
        if (is_null($output_token_price_usd)) {
            array_push($this->openAPINullablesSetToNull, 'output_token_price_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('output_token_price_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['output_token_price_usd'] = $output_token_price_usd;

        return $this;
    }

    /**
     * Gets staked_output_token_amount
     *
     * @return string|null
     */
    public function getStakedOutputTokenAmount()
    {
        return $this->container['staked_output_token_amount'];
    }

    /**
     * Sets staked_output_token_amount
     *
     * @param string|null $staked_output_token_amount Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
     *
     * @return self
     */
    public function setStakedOutputTokenAmount($staked_output_token_amount)
    {
        if (is_null($staked_output_token_amount)) {
            array_push($this->openAPINullablesSetToNull, 'staked_output_token_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('staked_output_token_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['staked_output_token_amount'] = $staked_output_token_amount;

        return $this;
    }

    /**
     * Gets reward_token_emissions_amount
     *
     * @return string[]|null
     */
    public function getRewardTokenEmissionsAmount()
    {
        return $this->container['reward_token_emissions_amount'];
    }

    /**
     * Sets reward_token_emissions_amount
     *
     * @param string[]|null $reward_token_emissions_amount Per-block reward token emission as of the current block normalized to a day, in token's native amount.
     *
     * @return self
     */
    public function setRewardTokenEmissionsAmount($reward_token_emissions_amount)
    {
        if (is_null($reward_token_emissions_amount)) {
            array_push($this->openAPINullablesSetToNull, 'reward_token_emissions_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reward_token_emissions_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reward_token_emissions_amount'] = $reward_token_emissions_amount;

        return $this;
    }

    /**
     * Gets reward_token_emissions_usd
     *
     * @return string[]|null
     */
    public function getRewardTokenEmissionsUsd()
    {
        return $this->container['reward_token_emissions_usd'];
    }

    /**
     * Sets reward_token_emissions_usd
     *
     * @param string[]|null $reward_token_emissions_usd Per-block reward token emission as of the current block normalized to a day, in USD value.
     *
     * @return self
     */
    public function setRewardTokenEmissionsUsd($reward_token_emissions_usd)
    {
        if (is_null($reward_token_emissions_usd)) {
            array_push($this->openAPINullablesSetToNull, 'reward_token_emissions_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reward_token_emissions_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reward_token_emissions_usd'] = $reward_token_emissions_usd;

        return $this;
    }

    /**
     * Gets registry_address
     *
     * @return string|null
     */
    public function getRegistryAddress()
    {
        return $this->container['registry_address'];
    }

    /**
     * Sets registry_address
     *
     * @param string|null $registry_address Registry that deployed this pool
     *
     * @return self
     */
    public function setRegistryAddress($registry_address)
    {
        if (is_null($registry_address)) {
            array_push($this->openAPINullablesSetToNull, 'registry_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('registry_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registry_address'] = $registry_address;

        return $this;
    }

    /**
     * Gets gauge_address
     *
     * @return string|null
     */
    public function getGaugeAddress()
    {
        return $this->container['gauge_address'];
    }

    /**
     * Sets gauge_address
     *
     * @param string|null $gauge_address Liquidity Gauge assocaited with this pool
     *
     * @return self
     */
    public function setGaugeAddress($gauge_address)
    {
        if (is_null($gauge_address)) {
            array_push($this->openAPINullablesSetToNull, 'gauge_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gauge_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gauge_address'] = $gauge_address;

        return $this;
    }

    /**
     * Gets evaluated_ask
     *
     * @return float|null
     */
    public function getEvaluatedAsk()
    {
        return $this->container['evaluated_ask'];
    }

    /**
     * Sets evaluated_ask
     *
     * @param float|null $evaluated_ask evaluated_ask
     *
     * @return self
     */
    public function setEvaluatedAsk($evaluated_ask)
    {
        if (is_null($evaluated_ask)) {
            throw new \InvalidArgumentException('non-nullable evaluated_ask cannot be null');
        }
        $this->container['evaluated_ask'] = $evaluated_ask;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


