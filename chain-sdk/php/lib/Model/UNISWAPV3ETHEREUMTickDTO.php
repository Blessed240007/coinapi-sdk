<?php
/**
 * UNISWAPV3ETHEREUMTickDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * On Chain Dapps - REST API
 *
 * This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UNISWAPV3ETHEREUMTickDTO Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UNISWAPV3ETHEREUMTickDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UNISWAP_V3_ETHEREUM.TickDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'entry_time' => '\DateTime',
        'recv_time' => '\DateTime',
        'block_number' => 'int',
        'vid' => 'int',
        'id' => 'string',
        'index' => 'string',
        'pool' => 'string',
        'created_timestamp' => 'string',
        'created_block_number' => 'string',
        'prices' => 'string[]',
        'liquidity_gross' => 'string',
        'liquidity_gross_usd' => 'string',
        'liquidity_net' => 'string',
        'liquidity_net_usd' => 'string',
        'last_snapshot_day_id' => 'int',
        'last_snapshot_hour_id' => 'int',
        'last_update_timestamp' => 'string',
        'last_update_block_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'entry_time' => 'date-time',
        'recv_time' => 'date-time',
        'block_number' => 'int64',
        'vid' => 'int64',
        'id' => null,
        'index' => null,
        'pool' => null,
        'created_timestamp' => null,
        'created_block_number' => null,
        'prices' => null,
        'liquidity_gross' => null,
        'liquidity_gross_usd' => null,
        'liquidity_net' => null,
        'liquidity_net_usd' => null,
        'last_snapshot_day_id' => 'int32',
        'last_snapshot_hour_id' => 'int32',
        'last_update_timestamp' => null,
        'last_update_block_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'entry_time' => false,
		'recv_time' => false,
		'block_number' => false,
		'vid' => false,
		'id' => true,
		'index' => true,
		'pool' => true,
		'created_timestamp' => true,
		'created_block_number' => true,
		'prices' => true,
		'liquidity_gross' => true,
		'liquidity_gross_usd' => true,
		'liquidity_net' => true,
		'liquidity_net_usd' => true,
		'last_snapshot_day_id' => false,
		'last_snapshot_hour_id' => false,
		'last_update_timestamp' => true,
		'last_update_block_number' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entry_time' => 'entry_time',
        'recv_time' => 'recv_time',
        'block_number' => 'block_number',
        'vid' => 'vid',
        'id' => 'id',
        'index' => 'index',
        'pool' => 'pool',
        'created_timestamp' => 'created_timestamp',
        'created_block_number' => 'created_block_number',
        'prices' => 'prices',
        'liquidity_gross' => 'liquidity_gross',
        'liquidity_gross_usd' => 'liquidity_gross_usd',
        'liquidity_net' => 'liquidity_net',
        'liquidity_net_usd' => 'liquidity_net_usd',
        'last_snapshot_day_id' => 'last_snapshot_day_id',
        'last_snapshot_hour_id' => 'last_snapshot_hour_id',
        'last_update_timestamp' => 'last_update_timestamp',
        'last_update_block_number' => 'last_update_block_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entry_time' => 'setEntryTime',
        'recv_time' => 'setRecvTime',
        'block_number' => 'setBlockNumber',
        'vid' => 'setVid',
        'id' => 'setId',
        'index' => 'setIndex',
        'pool' => 'setPool',
        'created_timestamp' => 'setCreatedTimestamp',
        'created_block_number' => 'setCreatedBlockNumber',
        'prices' => 'setPrices',
        'liquidity_gross' => 'setLiquidityGross',
        'liquidity_gross_usd' => 'setLiquidityGrossUsd',
        'liquidity_net' => 'setLiquidityNet',
        'liquidity_net_usd' => 'setLiquidityNetUsd',
        'last_snapshot_day_id' => 'setLastSnapshotDayId',
        'last_snapshot_hour_id' => 'setLastSnapshotHourId',
        'last_update_timestamp' => 'setLastUpdateTimestamp',
        'last_update_block_number' => 'setLastUpdateBlockNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entry_time' => 'getEntryTime',
        'recv_time' => 'getRecvTime',
        'block_number' => 'getBlockNumber',
        'vid' => 'getVid',
        'id' => 'getId',
        'index' => 'getIndex',
        'pool' => 'getPool',
        'created_timestamp' => 'getCreatedTimestamp',
        'created_block_number' => 'getCreatedBlockNumber',
        'prices' => 'getPrices',
        'liquidity_gross' => 'getLiquidityGross',
        'liquidity_gross_usd' => 'getLiquidityGrossUsd',
        'liquidity_net' => 'getLiquidityNet',
        'liquidity_net_usd' => 'getLiquidityNetUsd',
        'last_snapshot_day_id' => 'getLastSnapshotDayId',
        'last_snapshot_hour_id' => 'getLastSnapshotHourId',
        'last_update_timestamp' => 'getLastUpdateTimestamp',
        'last_update_block_number' => 'getLastUpdateBlockNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('entry_time', $data ?? [], null);
        $this->setIfExists('recv_time', $data ?? [], null);
        $this->setIfExists('block_number', $data ?? [], null);
        $this->setIfExists('vid', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('index', $data ?? [], null);
        $this->setIfExists('pool', $data ?? [], null);
        $this->setIfExists('created_timestamp', $data ?? [], null);
        $this->setIfExists('created_block_number', $data ?? [], null);
        $this->setIfExists('prices', $data ?? [], null);
        $this->setIfExists('liquidity_gross', $data ?? [], null);
        $this->setIfExists('liquidity_gross_usd', $data ?? [], null);
        $this->setIfExists('liquidity_net', $data ?? [], null);
        $this->setIfExists('liquidity_net_usd', $data ?? [], null);
        $this->setIfExists('last_snapshot_day_id', $data ?? [], null);
        $this->setIfExists('last_snapshot_hour_id', $data ?? [], null);
        $this->setIfExists('last_update_timestamp', $data ?? [], null);
        $this->setIfExists('last_update_block_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entry_time
     *
     * @return \DateTime|null
     */
    public function getEntryTime()
    {
        return $this->container['entry_time'];
    }

    /**
     * Sets entry_time
     *
     * @param \DateTime|null $entry_time entry_time
     *
     * @return self
     */
    public function setEntryTime($entry_time)
    {
        if (is_null($entry_time)) {
            throw new \InvalidArgumentException('non-nullable entry_time cannot be null');
        }
        $this->container['entry_time'] = $entry_time;

        return $this;
    }

    /**
     * Gets recv_time
     *
     * @return \DateTime|null
     */
    public function getRecvTime()
    {
        return $this->container['recv_time'];
    }

    /**
     * Sets recv_time
     *
     * @param \DateTime|null $recv_time recv_time
     *
     * @return self
     */
    public function setRecvTime($recv_time)
    {
        if (is_null($recv_time)) {
            throw new \InvalidArgumentException('non-nullable recv_time cannot be null');
        }
        $this->container['recv_time'] = $recv_time;

        return $this;
    }

    /**
     * Gets block_number
     *
     * @return int|null
     */
    public function getBlockNumber()
    {
        return $this->container['block_number'];
    }

    /**
     * Sets block_number
     *
     * @param int|null $block_number Number of block in which entity was recorded.
     *
     * @return self
     */
    public function setBlockNumber($block_number)
    {
        if (is_null($block_number)) {
            throw new \InvalidArgumentException('non-nullable block_number cannot be null');
        }
        $this->container['block_number'] = $block_number;

        return $this;
    }

    /**
     * Gets vid
     *
     * @return int|null
     */
    public function getVid()
    {
        return $this->container['vid'];
    }

    /**
     * Sets vid
     *
     * @param int|null $vid 
     *
     * @return self
     */
    public function setVid($vid)
    {
        if (is_null($vid)) {
            throw new \InvalidArgumentException('non-nullable vid cannot be null');
        }
        $this->container['vid'] = $vid;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id (pool address)-(tick index)
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets index
     *
     * @return string|null
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param string|null $index tick index
     *
     * @return self
     */
    public function setIndex($index)
    {
        if (is_null($index)) {
            array_push($this->openAPINullablesSetToNull, 'index');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('index', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets pool
     *
     * @return string|null
     */
    public function getPool()
    {
        return $this->container['pool'];
    }

    /**
     * Sets pool
     *
     * @param string|null $pool Liquidity pool this tick belongs to
     *
     * @return self
     */
    public function setPool($pool)
    {
        if (is_null($pool)) {
            array_push($this->openAPINullablesSetToNull, 'pool');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pool', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pool'] = $pool;

        return $this;
    }

    /**
     * Gets created_timestamp
     *
     * @return string|null
     */
    public function getCreatedTimestamp()
    {
        return $this->container['created_timestamp'];
    }

    /**
     * Sets created_timestamp
     *
     * @param string|null $created_timestamp Creation timestamp
     *
     * @return self
     */
    public function setCreatedTimestamp($created_timestamp)
    {
        if (is_null($created_timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'created_timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_timestamp'] = $created_timestamp;

        return $this;
    }

    /**
     * Gets created_block_number
     *
     * @return string|null
     */
    public function getCreatedBlockNumber()
    {
        return $this->container['created_block_number'];
    }

    /**
     * Sets created_block_number
     *
     * @param string|null $created_block_number Creation block number
     *
     * @return self
     */
    public function setCreatedBlockNumber($created_block_number)
    {
        if (is_null($created_block_number)) {
            array_push($this->openAPINullablesSetToNull, 'created_block_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_block_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_block_number'] = $created_block_number;

        return $this;
    }

    /**
     * Gets prices
     *
     * @return string[]|null
     */
    public function getPrices()
    {
        return $this->container['prices'];
    }

    /**
     * Sets prices
     *
     * @param string[]|null $prices calculated price of token0 of tick within this pool - constant
     *
     * @return self
     */
    public function setPrices($prices)
    {
        if (is_null($prices)) {
            array_push($this->openAPINullablesSetToNull, 'prices');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prices', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prices'] = $prices;

        return $this;
    }

    /**
     * Gets liquidity_gross
     *
     * @return string|null
     */
    public function getLiquidityGross()
    {
        return $this->container['liquidity_gross'];
    }

    /**
     * Sets liquidity_gross
     *
     * @param string|null $liquidity_gross total liquidity pool has as tick lower or upper
     *
     * @return self
     */
    public function setLiquidityGross($liquidity_gross)
    {
        if (is_null($liquidity_gross)) {
            array_push($this->openAPINullablesSetToNull, 'liquidity_gross');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('liquidity_gross', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['liquidity_gross'] = $liquidity_gross;

        return $this;
    }

    /**
     * Gets liquidity_gross_usd
     *
     * @return string|null
     */
    public function getLiquidityGrossUsd()
    {
        return $this->container['liquidity_gross_usd'];
    }

    /**
     * Sets liquidity_gross_usd
     *
     * @param string|null $liquidity_gross_usd total liquidity in USD pool has as tick lower or upper
     *
     * @return self
     */
    public function setLiquidityGrossUsd($liquidity_gross_usd)
    {
        if (is_null($liquidity_gross_usd)) {
            array_push($this->openAPINullablesSetToNull, 'liquidity_gross_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('liquidity_gross_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['liquidity_gross_usd'] = $liquidity_gross_usd;

        return $this;
    }

    /**
     * Gets liquidity_net
     *
     * @return string|null
     */
    public function getLiquidityNet()
    {
        return $this->container['liquidity_net'];
    }

    /**
     * Sets liquidity_net
     *
     * @param string|null $liquidity_net how much liquidity changes when tick crossed
     *
     * @return self
     */
    public function setLiquidityNet($liquidity_net)
    {
        if (is_null($liquidity_net)) {
            array_push($this->openAPINullablesSetToNull, 'liquidity_net');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('liquidity_net', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['liquidity_net'] = $liquidity_net;

        return $this;
    }

    /**
     * Gets liquidity_net_usd
     *
     * @return string|null
     */
    public function getLiquidityNetUsd()
    {
        return $this->container['liquidity_net_usd'];
    }

    /**
     * Sets liquidity_net_usd
     *
     * @param string|null $liquidity_net_usd how much liquidity in USD changes when tick crossed
     *
     * @return self
     */
    public function setLiquidityNetUsd($liquidity_net_usd)
    {
        if (is_null($liquidity_net_usd)) {
            array_push($this->openAPINullablesSetToNull, 'liquidity_net_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('liquidity_net_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['liquidity_net_usd'] = $liquidity_net_usd;

        return $this;
    }

    /**
     * Gets last_snapshot_day_id
     *
     * @return int|null
     */
    public function getLastSnapshotDayId()
    {
        return $this->container['last_snapshot_day_id'];
    }

    /**
     * Sets last_snapshot_day_id
     *
     * @param int|null $last_snapshot_day_id Day ID of the most recent daily snapshot
     *
     * @return self
     */
    public function setLastSnapshotDayId($last_snapshot_day_id)
    {
        if (is_null($last_snapshot_day_id)) {
            throw new \InvalidArgumentException('non-nullable last_snapshot_day_id cannot be null');
        }
        $this->container['last_snapshot_day_id'] = $last_snapshot_day_id;

        return $this;
    }

    /**
     * Gets last_snapshot_hour_id
     *
     * @return int|null
     */
    public function getLastSnapshotHourId()
    {
        return $this->container['last_snapshot_hour_id'];
    }

    /**
     * Sets last_snapshot_hour_id
     *
     * @param int|null $last_snapshot_hour_id Hour ID of the most recent hourly snapshot
     *
     * @return self
     */
    public function setLastSnapshotHourId($last_snapshot_hour_id)
    {
        if (is_null($last_snapshot_hour_id)) {
            throw new \InvalidArgumentException('non-nullable last_snapshot_hour_id cannot be null');
        }
        $this->container['last_snapshot_hour_id'] = $last_snapshot_hour_id;

        return $this;
    }

    /**
     * Gets last_update_timestamp
     *
     * @return string|null
     */
    public function getLastUpdateTimestamp()
    {
        return $this->container['last_update_timestamp'];
    }

    /**
     * Sets last_update_timestamp
     *
     * @param string|null $last_update_timestamp Timestamp of the last time this entity was updated
     *
     * @return self
     */
    public function setLastUpdateTimestamp($last_update_timestamp)
    {
        if (is_null($last_update_timestamp)) {
            array_push($this->openAPINullablesSetToNull, 'last_update_timestamp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_update_timestamp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_update_timestamp'] = $last_update_timestamp;

        return $this;
    }

    /**
     * Gets last_update_block_number
     *
     * @return string|null
     */
    public function getLastUpdateBlockNumber()
    {
        return $this->container['last_update_block_number'];
    }

    /**
     * Sets last_update_block_number
     *
     * @param string|null $last_update_block_number Block number of the last time this entity was updated
     *
     * @return self
     */
    public function setLastUpdateBlockNumber($last_update_block_number)
    {
        if (is_null($last_update_block_number)) {
            array_push($this->openAPINullablesSetToNull, 'last_update_block_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_update_block_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_update_block_number'] = $last_update_block_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


