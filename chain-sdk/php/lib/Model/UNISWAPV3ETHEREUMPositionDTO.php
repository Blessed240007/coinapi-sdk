<?php
/**
 * UNISWAPV3ETHEREUMPositionDTO
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * On Chain Dapps - REST API
 *
 * This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UNISWAPV3ETHEREUMPositionDTO Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UNISWAPV3ETHEREUMPositionDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UNISWAP_V3_ETHEREUM.PositionDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'entry_time' => '\DateTime',
        'recv_time' => '\DateTime',
        'block_number' => 'int',
        'vid' => 'int',
        'id' => 'string',
        'account' => 'string',
        'pool' => 'string',
        'hash_opened' => 'string',
        'hash_closed' => 'string',
        'block_number_opened' => 'string',
        'timestamp_opened' => 'string',
        'block_number_closed' => 'string',
        'timestamp_closed' => 'string',
        'tick_lower' => 'string',
        'tick_upper' => 'string',
        'liquidity_token' => 'string',
        'liquidity_token_type' => 'string',
        'liquidity' => 'string',
        'liquidity_usd' => 'string',
        'cumulative_deposit_token_amounts' => 'string[]',
        'cumulative_deposit_usd' => 'string',
        'cumulative_withdraw_token_amounts' => 'string[]',
        'cumulative_withdraw_usd' => 'string',
        'cumulative_reward_usd' => 'string[]',
        'deposit_count' => 'int',
        'withdraw_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'entry_time' => 'date-time',
        'recv_time' => 'date-time',
        'block_number' => 'int64',
        'vid' => 'int64',
        'id' => null,
        'account' => null,
        'pool' => null,
        'hash_opened' => null,
        'hash_closed' => null,
        'block_number_opened' => null,
        'timestamp_opened' => null,
        'block_number_closed' => null,
        'timestamp_closed' => null,
        'tick_lower' => null,
        'tick_upper' => null,
        'liquidity_token' => null,
        'liquidity_token_type' => null,
        'liquidity' => null,
        'liquidity_usd' => null,
        'cumulative_deposit_token_amounts' => null,
        'cumulative_deposit_usd' => null,
        'cumulative_withdraw_token_amounts' => null,
        'cumulative_withdraw_usd' => null,
        'cumulative_reward_usd' => null,
        'deposit_count' => 'int32',
        'withdraw_count' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'entry_time' => false,
		'recv_time' => false,
		'block_number' => false,
		'vid' => false,
		'id' => true,
		'account' => true,
		'pool' => true,
		'hash_opened' => true,
		'hash_closed' => true,
		'block_number_opened' => true,
		'timestamp_opened' => true,
		'block_number_closed' => true,
		'timestamp_closed' => true,
		'tick_lower' => true,
		'tick_upper' => true,
		'liquidity_token' => true,
		'liquidity_token_type' => true,
		'liquidity' => true,
		'liquidity_usd' => true,
		'cumulative_deposit_token_amounts' => true,
		'cumulative_deposit_usd' => true,
		'cumulative_withdraw_token_amounts' => true,
		'cumulative_withdraw_usd' => true,
		'cumulative_reward_usd' => true,
		'deposit_count' => false,
		'withdraw_count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entry_time' => 'entry_time',
        'recv_time' => 'recv_time',
        'block_number' => 'block_number',
        'vid' => 'vid',
        'id' => 'id',
        'account' => 'account',
        'pool' => 'pool',
        'hash_opened' => 'hash_opened',
        'hash_closed' => 'hash_closed',
        'block_number_opened' => 'block_number_opened',
        'timestamp_opened' => 'timestamp_opened',
        'block_number_closed' => 'block_number_closed',
        'timestamp_closed' => 'timestamp_closed',
        'tick_lower' => 'tick_lower',
        'tick_upper' => 'tick_upper',
        'liquidity_token' => 'liquidity_token',
        'liquidity_token_type' => 'liquidity_token_type',
        'liquidity' => 'liquidity',
        'liquidity_usd' => 'liquidity_usd',
        'cumulative_deposit_token_amounts' => 'cumulative_deposit_token_amounts',
        'cumulative_deposit_usd' => 'cumulative_deposit_usd',
        'cumulative_withdraw_token_amounts' => 'cumulative_withdraw_token_amounts',
        'cumulative_withdraw_usd' => 'cumulative_withdraw_usd',
        'cumulative_reward_usd' => 'cumulative_reward_usd',
        'deposit_count' => 'deposit_count',
        'withdraw_count' => 'withdraw_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entry_time' => 'setEntryTime',
        'recv_time' => 'setRecvTime',
        'block_number' => 'setBlockNumber',
        'vid' => 'setVid',
        'id' => 'setId',
        'account' => 'setAccount',
        'pool' => 'setPool',
        'hash_opened' => 'setHashOpened',
        'hash_closed' => 'setHashClosed',
        'block_number_opened' => 'setBlockNumberOpened',
        'timestamp_opened' => 'setTimestampOpened',
        'block_number_closed' => 'setBlockNumberClosed',
        'timestamp_closed' => 'setTimestampClosed',
        'tick_lower' => 'setTickLower',
        'tick_upper' => 'setTickUpper',
        'liquidity_token' => 'setLiquidityToken',
        'liquidity_token_type' => 'setLiquidityTokenType',
        'liquidity' => 'setLiquidity',
        'liquidity_usd' => 'setLiquidityUsd',
        'cumulative_deposit_token_amounts' => 'setCumulativeDepositTokenAmounts',
        'cumulative_deposit_usd' => 'setCumulativeDepositUsd',
        'cumulative_withdraw_token_amounts' => 'setCumulativeWithdrawTokenAmounts',
        'cumulative_withdraw_usd' => 'setCumulativeWithdrawUsd',
        'cumulative_reward_usd' => 'setCumulativeRewardUsd',
        'deposit_count' => 'setDepositCount',
        'withdraw_count' => 'setWithdrawCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entry_time' => 'getEntryTime',
        'recv_time' => 'getRecvTime',
        'block_number' => 'getBlockNumber',
        'vid' => 'getVid',
        'id' => 'getId',
        'account' => 'getAccount',
        'pool' => 'getPool',
        'hash_opened' => 'getHashOpened',
        'hash_closed' => 'getHashClosed',
        'block_number_opened' => 'getBlockNumberOpened',
        'timestamp_opened' => 'getTimestampOpened',
        'block_number_closed' => 'getBlockNumberClosed',
        'timestamp_closed' => 'getTimestampClosed',
        'tick_lower' => 'getTickLower',
        'tick_upper' => 'getTickUpper',
        'liquidity_token' => 'getLiquidityToken',
        'liquidity_token_type' => 'getLiquidityTokenType',
        'liquidity' => 'getLiquidity',
        'liquidity_usd' => 'getLiquidityUsd',
        'cumulative_deposit_token_amounts' => 'getCumulativeDepositTokenAmounts',
        'cumulative_deposit_usd' => 'getCumulativeDepositUsd',
        'cumulative_withdraw_token_amounts' => 'getCumulativeWithdrawTokenAmounts',
        'cumulative_withdraw_usd' => 'getCumulativeWithdrawUsd',
        'cumulative_reward_usd' => 'getCumulativeRewardUsd',
        'deposit_count' => 'getDepositCount',
        'withdraw_count' => 'getWithdrawCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('entry_time', $data ?? [], null);
        $this->setIfExists('recv_time', $data ?? [], null);
        $this->setIfExists('block_number', $data ?? [], null);
        $this->setIfExists('vid', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('account', $data ?? [], null);
        $this->setIfExists('pool', $data ?? [], null);
        $this->setIfExists('hash_opened', $data ?? [], null);
        $this->setIfExists('hash_closed', $data ?? [], null);
        $this->setIfExists('block_number_opened', $data ?? [], null);
        $this->setIfExists('timestamp_opened', $data ?? [], null);
        $this->setIfExists('block_number_closed', $data ?? [], null);
        $this->setIfExists('timestamp_closed', $data ?? [], null);
        $this->setIfExists('tick_lower', $data ?? [], null);
        $this->setIfExists('tick_upper', $data ?? [], null);
        $this->setIfExists('liquidity_token', $data ?? [], null);
        $this->setIfExists('liquidity_token_type', $data ?? [], null);
        $this->setIfExists('liquidity', $data ?? [], null);
        $this->setIfExists('liquidity_usd', $data ?? [], null);
        $this->setIfExists('cumulative_deposit_token_amounts', $data ?? [], null);
        $this->setIfExists('cumulative_deposit_usd', $data ?? [], null);
        $this->setIfExists('cumulative_withdraw_token_amounts', $data ?? [], null);
        $this->setIfExists('cumulative_withdraw_usd', $data ?? [], null);
        $this->setIfExists('cumulative_reward_usd', $data ?? [], null);
        $this->setIfExists('deposit_count', $data ?? [], null);
        $this->setIfExists('withdraw_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entry_time
     *
     * @return \DateTime|null
     */
    public function getEntryTime()
    {
        return $this->container['entry_time'];
    }

    /**
     * Sets entry_time
     *
     * @param \DateTime|null $entry_time entry_time
     *
     * @return self
     */
    public function setEntryTime($entry_time)
    {
        if (is_null($entry_time)) {
            throw new \InvalidArgumentException('non-nullable entry_time cannot be null');
        }
        $this->container['entry_time'] = $entry_time;

        return $this;
    }

    /**
     * Gets recv_time
     *
     * @return \DateTime|null
     */
    public function getRecvTime()
    {
        return $this->container['recv_time'];
    }

    /**
     * Sets recv_time
     *
     * @param \DateTime|null $recv_time recv_time
     *
     * @return self
     */
    public function setRecvTime($recv_time)
    {
        if (is_null($recv_time)) {
            throw new \InvalidArgumentException('non-nullable recv_time cannot be null');
        }
        $this->container['recv_time'] = $recv_time;

        return $this;
    }

    /**
     * Gets block_number
     *
     * @return int|null
     */
    public function getBlockNumber()
    {
        return $this->container['block_number'];
    }

    /**
     * Sets block_number
     *
     * @param int|null $block_number Number of block in which entity was recorded.
     *
     * @return self
     */
    public function setBlockNumber($block_number)
    {
        if (is_null($block_number)) {
            throw new \InvalidArgumentException('non-nullable block_number cannot be null');
        }
        $this->container['block_number'] = $block_number;

        return $this;
    }

    /**
     * Gets vid
     *
     * @return int|null
     */
    public function getVid()
    {
        return $this->container['vid'];
    }

    /**
     * Sets vid
     *
     * @param int|null $vid 
     *
     * @return self
     */
    public function setVid($vid)
    {
        if (is_null($vid)) {
            throw new \InvalidArgumentException('non-nullable vid cannot be null');
        }
        $this->container['vid'] = $vid;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id (account address)-(market address)-(count)
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets account
     *
     * @return string|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param string|null $account Account that owns this position
     *
     * @return self
     */
    public function setAccount($account)
    {
        if (is_null($account)) {
            array_push($this->openAPINullablesSetToNull, 'account');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets pool
     *
     * @return string|null
     */
    public function getPool()
    {
        return $this->container['pool'];
    }

    /**
     * Sets pool
     *
     * @param string|null $pool The liquidity pool in which this position was opened
     *
     * @return self
     */
    public function setPool($pool)
    {
        if (is_null($pool)) {
            array_push($this->openAPINullablesSetToNull, 'pool');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pool', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pool'] = $pool;

        return $this;
    }

    /**
     * Gets hash_opened
     *
     * @return string|null
     */
    public function getHashOpened()
    {
        return $this->container['hash_opened'];
    }

    /**
     * Sets hash_opened
     *
     * @param string|null $hash_opened The hash of the transaction that opened this position
     *
     * @return self
     */
    public function setHashOpened($hash_opened)
    {
        if (is_null($hash_opened)) {
            array_push($this->openAPINullablesSetToNull, 'hash_opened');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hash_opened', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hash_opened'] = $hash_opened;

        return $this;
    }

    /**
     * Gets hash_closed
     *
     * @return string|null
     */
    public function getHashClosed()
    {
        return $this->container['hash_closed'];
    }

    /**
     * Sets hash_closed
     *
     * @param string|null $hash_closed The hash of the transaction that closed this position
     *
     * @return self
     */
    public function setHashClosed($hash_closed)
    {
        if (is_null($hash_closed)) {
            array_push($this->openAPINullablesSetToNull, 'hash_closed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hash_closed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hash_closed'] = $hash_closed;

        return $this;
    }

    /**
     * Gets block_number_opened
     *
     * @return string|null
     */
    public function getBlockNumberOpened()
    {
        return $this->container['block_number_opened'];
    }

    /**
     * Sets block_number_opened
     *
     * @param string|null $block_number_opened Block number of when the position was opened
     *
     * @return self
     */
    public function setBlockNumberOpened($block_number_opened)
    {
        if (is_null($block_number_opened)) {
            array_push($this->openAPINullablesSetToNull, 'block_number_opened');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('block_number_opened', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['block_number_opened'] = $block_number_opened;

        return $this;
    }

    /**
     * Gets timestamp_opened
     *
     * @return string|null
     */
    public function getTimestampOpened()
    {
        return $this->container['timestamp_opened'];
    }

    /**
     * Sets timestamp_opened
     *
     * @param string|null $timestamp_opened Timestamp when the position was opened
     *
     * @return self
     */
    public function setTimestampOpened($timestamp_opened)
    {
        if (is_null($timestamp_opened)) {
            array_push($this->openAPINullablesSetToNull, 'timestamp_opened');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timestamp_opened', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timestamp_opened'] = $timestamp_opened;

        return $this;
    }

    /**
     * Gets block_number_closed
     *
     * @return string|null
     */
    public function getBlockNumberClosed()
    {
        return $this->container['block_number_closed'];
    }

    /**
     * Sets block_number_closed
     *
     * @param string|null $block_number_closed Block number of when the position was closed (0 if still open)
     *
     * @return self
     */
    public function setBlockNumberClosed($block_number_closed)
    {
        if (is_null($block_number_closed)) {
            array_push($this->openAPINullablesSetToNull, 'block_number_closed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('block_number_closed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['block_number_closed'] = $block_number_closed;

        return $this;
    }

    /**
     * Gets timestamp_closed
     *
     * @return string|null
     */
    public function getTimestampClosed()
    {
        return $this->container['timestamp_closed'];
    }

    /**
     * Sets timestamp_closed
     *
     * @param string|null $timestamp_closed Timestamp when the position was closed (0 if still open)
     *
     * @return self
     */
    public function setTimestampClosed($timestamp_closed)
    {
        if (is_null($timestamp_closed)) {
            array_push($this->openAPINullablesSetToNull, 'timestamp_closed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timestamp_closed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timestamp_closed'] = $timestamp_closed;

        return $this;
    }

    /**
     * Gets tick_lower
     *
     * @return string|null
     */
    public function getTickLower()
    {
        return $this->container['tick_lower'];
    }

    /**
     * Sets tick_lower
     *
     * @param string|null $tick_lower lower tick of the position
     *
     * @return self
     */
    public function setTickLower($tick_lower)
    {
        if (is_null($tick_lower)) {
            array_push($this->openAPINullablesSetToNull, 'tick_lower');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tick_lower', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tick_lower'] = $tick_lower;

        return $this;
    }

    /**
     * Gets tick_upper
     *
     * @return string|null
     */
    public function getTickUpper()
    {
        return $this->container['tick_upper'];
    }

    /**
     * Sets tick_upper
     *
     * @param string|null $tick_upper upper tick of the position
     *
     * @return self
     */
    public function setTickUpper($tick_upper)
    {
        if (is_null($tick_upper)) {
            array_push($this->openAPINullablesSetToNull, 'tick_upper');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tick_upper', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tick_upper'] = $tick_upper;

        return $this;
    }

    /**
     * Gets liquidity_token
     *
     * @return string|null
     */
    public function getLiquidityToken()
    {
        return $this->container['liquidity_token'];
    }

    /**
     * Sets liquidity_token
     *
     * @param string|null $liquidity_token Token that is to represent ownership of liquidity
     *
     * @return self
     */
    public function setLiquidityToken($liquidity_token)
    {
        if (is_null($liquidity_token)) {
            array_push($this->openAPINullablesSetToNull, 'liquidity_token');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('liquidity_token', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['liquidity_token'] = $liquidity_token;

        return $this;
    }

    /**
     * Gets liquidity_token_type
     *
     * @return string|null
     */
    public function getLiquidityTokenType()
    {
        return $this->container['liquidity_token_type'];
    }

    /**
     * Sets liquidity_token_type
     *
     * @param string|null $liquidity_token_type Type of token used to track liquidity
     *
     * @return self
     */
    public function setLiquidityTokenType($liquidity_token_type)
    {
        if (is_null($liquidity_token_type)) {
            array_push($this->openAPINullablesSetToNull, 'liquidity_token_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('liquidity_token_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['liquidity_token_type'] = $liquidity_token_type;

        return $this;
    }

    /**
     * Gets liquidity
     *
     * @return string|null
     */
    public function getLiquidity()
    {
        return $this->container['liquidity'];
    }

    /**
     * Sets liquidity
     *
     * @param string|null $liquidity total position liquidity
     *
     * @return self
     */
    public function setLiquidity($liquidity)
    {
        if (is_null($liquidity)) {
            array_push($this->openAPINullablesSetToNull, 'liquidity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('liquidity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['liquidity'] = $liquidity;

        return $this;
    }

    /**
     * Gets liquidity_usd
     *
     * @return string|null
     */
    public function getLiquidityUsd()
    {
        return $this->container['liquidity_usd'];
    }

    /**
     * Sets liquidity_usd
     *
     * @param string|null $liquidity_usd total position liquidity in USD
     *
     * @return self
     */
    public function setLiquidityUsd($liquidity_usd)
    {
        if (is_null($liquidity_usd)) {
            array_push($this->openAPINullablesSetToNull, 'liquidity_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('liquidity_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['liquidity_usd'] = $liquidity_usd;

        return $this;
    }

    /**
     * Gets cumulative_deposit_token_amounts
     *
     * @return string[]|null
     */
    public function getCumulativeDepositTokenAmounts()
    {
        return $this->container['cumulative_deposit_token_amounts'];
    }

    /**
     * Sets cumulative_deposit_token_amounts
     *
     * @param string[]|null $cumulative_deposit_token_amounts amount of tokens ever deposited to position
     *
     * @return self
     */
    public function setCumulativeDepositTokenAmounts($cumulative_deposit_token_amounts)
    {
        if (is_null($cumulative_deposit_token_amounts)) {
            array_push($this->openAPINullablesSetToNull, 'cumulative_deposit_token_amounts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cumulative_deposit_token_amounts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cumulative_deposit_token_amounts'] = $cumulative_deposit_token_amounts;

        return $this;
    }

    /**
     * Gets cumulative_deposit_usd
     *
     * @return string|null
     */
    public function getCumulativeDepositUsd()
    {
        return $this->container['cumulative_deposit_usd'];
    }

    /**
     * Sets cumulative_deposit_usd
     *
     * @param string|null $cumulative_deposit_usd amount of tokens in USD deposited to position
     *
     * @return self
     */
    public function setCumulativeDepositUsd($cumulative_deposit_usd)
    {
        if (is_null($cumulative_deposit_usd)) {
            array_push($this->openAPINullablesSetToNull, 'cumulative_deposit_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cumulative_deposit_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cumulative_deposit_usd'] = $cumulative_deposit_usd;

        return $this;
    }

    /**
     * Gets cumulative_withdraw_token_amounts
     *
     * @return string[]|null
     */
    public function getCumulativeWithdrawTokenAmounts()
    {
        return $this->container['cumulative_withdraw_token_amounts'];
    }

    /**
     * Sets cumulative_withdraw_token_amounts
     *
     * @param string[]|null $cumulative_withdraw_token_amounts amount of tokens ever withdrawn from position (without fees)
     *
     * @return self
     */
    public function setCumulativeWithdrawTokenAmounts($cumulative_withdraw_token_amounts)
    {
        if (is_null($cumulative_withdraw_token_amounts)) {
            array_push($this->openAPINullablesSetToNull, 'cumulative_withdraw_token_amounts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cumulative_withdraw_token_amounts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cumulative_withdraw_token_amounts'] = $cumulative_withdraw_token_amounts;

        return $this;
    }

    /**
     * Gets cumulative_withdraw_usd
     *
     * @return string|null
     */
    public function getCumulativeWithdrawUsd()
    {
        return $this->container['cumulative_withdraw_usd'];
    }

    /**
     * Sets cumulative_withdraw_usd
     *
     * @param string|null $cumulative_withdraw_usd amount of tokens in USD withdrawn from position (without fees)
     *
     * @return self
     */
    public function setCumulativeWithdrawUsd($cumulative_withdraw_usd)
    {
        if (is_null($cumulative_withdraw_usd)) {
            array_push($this->openAPINullablesSetToNull, 'cumulative_withdraw_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cumulative_withdraw_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cumulative_withdraw_usd'] = $cumulative_withdraw_usd;

        return $this;
    }

    /**
     * Gets cumulative_reward_usd
     *
     * @return string[]|null
     */
    public function getCumulativeRewardUsd()
    {
        return $this->container['cumulative_reward_usd'];
    }

    /**
     * Sets cumulative_reward_usd
     *
     * @param string[]|null $cumulative_reward_usd Total reward token accumulated under this position, in USD
     *
     * @return self
     */
    public function setCumulativeRewardUsd($cumulative_reward_usd)
    {
        if (is_null($cumulative_reward_usd)) {
            array_push($this->openAPINullablesSetToNull, 'cumulative_reward_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cumulative_reward_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cumulative_reward_usd'] = $cumulative_reward_usd;

        return $this;
    }

    /**
     * Gets deposit_count
     *
     * @return int|null
     */
    public function getDepositCount()
    {
        return $this->container['deposit_count'];
    }

    /**
     * Sets deposit_count
     *
     * @param int|null $deposit_count Number of deposits related to this position
     *
     * @return self
     */
    public function setDepositCount($deposit_count)
    {
        if (is_null($deposit_count)) {
            throw new \InvalidArgumentException('non-nullable deposit_count cannot be null');
        }
        $this->container['deposit_count'] = $deposit_count;

        return $this;
    }

    /**
     * Gets withdraw_count
     *
     * @return int|null
     */
    public function getWithdrawCount()
    {
        return $this->container['withdraw_count'];
    }

    /**
     * Sets withdraw_count
     *
     * @param int|null $withdraw_count Number of withdrawals related to this position
     *
     * @return self
     */
    public function setWithdrawCount($withdraw_count)
    {
        if (is_null($withdraw_count)) {
            throw new \InvalidArgumentException('non-nullable withdraw_count cannot be null');
        }
        $this->container['withdraw_count'] = $withdraw_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


