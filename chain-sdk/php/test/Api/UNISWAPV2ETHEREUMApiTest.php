<?php
/**
 * UNISWAPV2ETHEREUMApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * On Chain Dapps - REST API
 *
 * This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * UNISWAPV2ETHEREUMApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UNISWAPV2ETHEREUMApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for uNISWAPV2ETHEREUMAccountsCurrent
     *
     * Accounts (current).
     *
     */
    public function testUNISWAPV2ETHEREUMAccountsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV2ETHEREUMActiveAccountsCurrent
     *
     * ActiveAccounts (current).
     *
     */
    public function testUNISWAPV2ETHEREUMActiveAccountsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV2ETHEREUMDepositsCurrent
     *
     * Deposits (current).
     *
     */
    public function testUNISWAPV2ETHEREUMDepositsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV2ETHEREUMDexAmmProtocolsCurrent
     *
     * DexAmmProtocols (current).
     *
     */
    public function testUNISWAPV2ETHEREUMDexAmmProtocolsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV2ETHEREUMFinancialsDailySnapshotsCurrent
     *
     * FinancialsDailySnapshots (current).
     *
     */
    public function testUNISWAPV2ETHEREUMFinancialsDailySnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV2ETHEREUMLiquidityPoolAmountsCurrent
     *
     * LiquidityPoolAmounts (current).
     *
     */
    public function testUNISWAPV2ETHEREUMLiquidityPoolAmountsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotsCurrent
     *
     * LiquidityPoolDailySnapshots (current).
     *
     */
    public function testUNISWAPV2ETHEREUMLiquidityPoolDailySnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV2ETHEREUMLiquidityPoolFeesCurrent
     *
     * LiquidityPoolFees (current).
     *
     */
    public function testUNISWAPV2ETHEREUMLiquidityPoolFeesCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotsCurrent
     *
     * LiquidityPoolHourlySnapshots (current).
     *
     */
    public function testUNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV2ETHEREUMLiquidityPoolsCurrent
     *
     * LiquidityPools (current).
     *
     */
    public function testUNISWAPV2ETHEREUMLiquidityPoolsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV2ETHEREUMMasterChefAddressToPidsCurrent
     *
     * MasterChefAddressToPids (current).
     *
     */
    public function testUNISWAPV2ETHEREUMMasterChefAddressToPidsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV2ETHEREUMMasterChefRewardersCurrent
     *
     * MasterChefRewarders (current).
     *
     */
    public function testUNISWAPV2ETHEREUMMasterChefRewardersCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV2ETHEREUMMasterChefStakingPoolsCurrent
     *
     * MasterChefStakingPools (current).
     *
     */
    public function testUNISWAPV2ETHEREUMMasterChefStakingPoolsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV2ETHEREUMMasterChefsCurrent
     *
     * MasterChefs (current).
     *
     */
    public function testUNISWAPV2ETHEREUMMasterChefsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV2ETHEREUMRewardTokensCurrent
     *
     * RewardTokens (current).
     *
     */
    public function testUNISWAPV2ETHEREUMRewardTokensCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV2ETHEREUMRewarderProbesCurrent
     *
     * RewarderProbes (current).
     *
     */
    public function testUNISWAPV2ETHEREUMRewarderProbesCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV2ETHEREUMSwapsCurrent
     *
     * Swaps (current).
     *
     */
    public function testUNISWAPV2ETHEREUMSwapsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV2ETHEREUMTokenWhiteListsCurrent
     *
     * TokenWhiteLists (current).
     *
     */
    public function testUNISWAPV2ETHEREUMTokenWhiteListsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV2ETHEREUMTokensCurrent
     *
     * Tokens (current).
     *
     */
    public function testUNISWAPV2ETHEREUMTokensCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV2ETHEREUMTransfersCurrent
     *
     * Transfers (current).
     *
     */
    public function testUNISWAPV2ETHEREUMTransfersCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV2ETHEREUMUsageMetricsDailySnapshotsCurrent
     *
     * UsageMetricsDailySnapshots (current).
     *
     */
    public function testUNISWAPV2ETHEREUMUsageMetricsDailySnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotsCurrent
     *
     * UsageMetricsHourlySnapshots (current).
     *
     */
    public function testUNISWAPV2ETHEREUMUsageMetricsHourlySnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV2ETHEREUMWithdrawsCurrent
     *
     * Withdraws (current).
     *
     */
    public function testUNISWAPV2ETHEREUMWithdrawsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
