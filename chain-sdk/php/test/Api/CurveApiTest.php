<?php
/**
 * CurveApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * On Chain Dapps - REST API
 *
 * This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * CurveApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CurveApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for curveAccountsCurrent
     *
     * Accounts (current).
     *
     */
    public function testCurveAccountsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveAddLiquidityEventsCurrent
     *
     * AddLiquidityEvents (current).
     *
     */
    public function testCurveAddLiquidityEventsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveAdminFeeChangeLogsCurrent
     *
     * AdminFeeChangeLogs (current).
     *
     */
    public function testCurveAdminFeeChangeLogsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveAmplificationCoeffChangeLogsCurrent
     *
     * AmplificationCoeffChangeLogs (current).
     *
     */
    public function testCurveAmplificationCoeffChangeLogsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveCoinsCurrent
     *
     * Coins (current).
     *
     */
    public function testCurveCoinsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveContractVersionsCurrent
     *
     * ContractVersions (current).
     *
     */
    public function testCurveContractVersionsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveContractsCurrent
     *
     * Contracts (current).
     *
     */
    public function testCurveContractsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveDailyVolumesCurrent
     *
     * DailyVolumes (current).
     *
     */
    public function testCurveDailyVolumesCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveExchangesCurrent
     *
     * Exchanges (current).
     *
     */
    public function testCurveExchangesCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveFeeChangeLogsCurrent
     *
     * FeeChangeLogs (current).
     *
     */
    public function testCurveFeeChangeLogsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveGaugeDepositsCurrent
     *
     * GaugeDeposits (current).
     *
     */
    public function testCurveGaugeDepositsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveGaugeLiquiditiesCurrent
     *
     * GaugeLiquidities (current).
     *
     */
    public function testCurveGaugeLiquiditiesCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveGaugeTotalWeightsCurrent
     *
     * GaugeTotalWeights (current).
     *
     */
    public function testCurveGaugeTotalWeightsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveGaugeTypeWeightsCurrent
     *
     * GaugeTypeWeights (current).
     *
     */
    public function testCurveGaugeTypeWeightsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveGaugeTypesCurrent
     *
     * GaugeTypes (current).
     *
     */
    public function testCurveGaugeTypesCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveGaugeWeightVotesCurrent
     *
     * GaugeWeightVotes (current).
     *
     */
    public function testCurveGaugeWeightVotesCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveGaugeWeightsCurrent
     *
     * GaugeWeights (current).
     *
     */
    public function testCurveGaugeWeightsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveGaugeWithdrawsCurrent
     *
     * GaugeWithdraws (current).
     *
     */
    public function testCurveGaugeWithdrawsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveGaugesCurrent
     *
     * Gauges (current).
     *
     */
    public function testCurveGaugesCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveHourlyVolumesCurrent
     *
     * HourlyVolumes (current).
     *
     */
    public function testCurveHourlyVolumesCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveLpTokensCurrent
     *
     * LpTokens (current).
     *
     */
    public function testCurveLpTokensCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curvePoolsCurrent
     *
     * Pools (current).
     *
     */
    public function testCurvePoolsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveProposalVotesCurrent
     *
     * ProposalVotes (current).
     *
     */
    public function testCurveProposalVotesCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveProposalsCurrent
     *
     * Proposals (current).
     *
     */
    public function testCurveProposalsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveRemoveLiquidityEventsCurrent
     *
     * RemoveLiquidityEvents (current).
     *
     */
    public function testCurveRemoveLiquidityEventsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveRemoveLiquidityOneEventsCurrent
     *
     * RemoveLiquidityOneEvents (current).
     *
     */
    public function testCurveRemoveLiquidityOneEventsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveSystemStatesCurrent
     *
     * SystemStates (current).
     *
     */
    public function testCurveSystemStatesCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveTokensCurrent
     *
     * Tokens (current).
     *
     */
    public function testCurveTokensCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveTransferOwnershipEventsCurrent
     *
     * TransferOwnershipEvents (current).
     *
     */
    public function testCurveTransferOwnershipEventsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveUnderlyingCoinsCurrent
     *
     * UnderlyingCoins (current).
     *
     */
    public function testCurveUnderlyingCoinsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveVotingAppsCurrent
     *
     * VotingApps (current).
     *
     */
    public function testCurveVotingAppsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for curveWeeklyVolumesCurrent
     *
     * WeeklyVolumes (current).
     *
     */
    public function testCurveWeeklyVolumesCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
