<?php
/**
 * UNISWAPV3ETHEREUMApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * On Chain Dapps - REST API
 *
 * This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * UNISWAPV3ETHEREUMApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UNISWAPV3ETHEREUMApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for uNISWAPV3ETHEREUMAccountsCurrent
     *
     * Accounts (current).
     *
     */
    public function testUNISWAPV3ETHEREUMAccountsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV3ETHEREUMActiveAccountsCurrent
     *
     * ActiveAccounts (current).
     *
     */
    public function testUNISWAPV3ETHEREUMActiveAccountsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV3ETHEREUMDepositsCurrent
     *
     * Deposits (current).
     *
     */
    public function testUNISWAPV3ETHEREUMDepositsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV3ETHEREUMDexAmmProtocolsCurrent
     *
     * DexAmmProtocols (current).
     *
     */
    public function testUNISWAPV3ETHEREUMDexAmmProtocolsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV3ETHEREUMFinancialsDailySnapshotsCurrent
     *
     * FinancialsDailySnapshots (current).
     *
     */
    public function testUNISWAPV3ETHEREUMFinancialsDailySnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV3ETHEREUMLiquidityPoolAmountsCurrent
     *
     * LiquidityPoolAmounts (current).
     *
     */
    public function testUNISWAPV3ETHEREUMLiquidityPoolAmountsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrent
     *
     * LiquidityPoolDailySnapshots (current).
     *
     */
    public function testUNISWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV3ETHEREUMLiquidityPoolFeesCurrent
     *
     * LiquidityPoolFees (current).
     *
     */
    public function testUNISWAPV3ETHEREUMLiquidityPoolFeesCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrent
     *
     * LiquidityPoolHourlySnapshots (current).
     *
     */
    public function testUNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV3ETHEREUMLiquidityPoolsCurrent
     *
     * LiquidityPools (current).
     *
     */
    public function testUNISWAPV3ETHEREUMLiquidityPoolsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV3ETHEREUMPositionSnapshotsCurrent
     *
     * PositionSnapshots (current).
     *
     */
    public function testUNISWAPV3ETHEREUMPositionSnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV3ETHEREUMPositionsCurrent
     *
     * Positions (current).
     *
     */
    public function testUNISWAPV3ETHEREUMPositionsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV3ETHEREUMRewardTokensCurrent
     *
     * RewardTokens (current).
     *
     */
    public function testUNISWAPV3ETHEREUMRewardTokensCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV3ETHEREUMSwapsCurrent
     *
     * Swaps (current).
     *
     */
    public function testUNISWAPV3ETHEREUMSwapsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV3ETHEREUMTickDailySnapshotsCurrent
     *
     * TickDailySnapshots (current).
     *
     */
    public function testUNISWAPV3ETHEREUMTickDailySnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV3ETHEREUMTickHourlySnapshotsCurrent
     *
     * TickHourlySnapshots (current).
     *
     */
    public function testUNISWAPV3ETHEREUMTickHourlySnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV3ETHEREUMTicksCurrent
     *
     * Ticks (current).
     *
     */
    public function testUNISWAPV3ETHEREUMTicksCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV3ETHEREUMTokenWhiteListSymbolsCurrent
     *
     * TokenWhiteListSymbols (current).
     *
     */
    public function testUNISWAPV3ETHEREUMTokenWhiteListSymbolsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV3ETHEREUMTokenWhiteListsCurrent
     *
     * TokenWhiteLists (current).
     *
     */
    public function testUNISWAPV3ETHEREUMTokenWhiteListsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV3ETHEREUMTokensCurrent
     *
     * Tokens (current).
     *
     */
    public function testUNISWAPV3ETHEREUMTokensCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrent
     *
     * UsageMetricsDailySnapshots (current).
     *
     */
    public function testUNISWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrent
     *
     * UsageMetricsHourlySnapshots (current).
     *
     */
    public function testUNISWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for uNISWAPV3ETHEREUMWithdrawsCurrent
     *
     * Withdraws (current).
     *
     */
    public function testUNISWAPV3ETHEREUMWithdrawsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
