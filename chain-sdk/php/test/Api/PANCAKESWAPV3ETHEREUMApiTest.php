<?php
/**
 * PANCAKESWAPV3ETHEREUMApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * On Chain Dapps - REST API
 *
 * This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * PANCAKESWAPV3ETHEREUMApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PANCAKESWAPV3ETHEREUMApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for pANCAKESWAPV3ETHEREUMAccountsCurrent
     *
     * Accounts (current).
     *
     */
    public function testPANCAKESWAPV3ETHEREUMAccountsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pANCAKESWAPV3ETHEREUMActiveAccountsCurrent
     *
     * ActiveAccounts (current).
     *
     */
    public function testPANCAKESWAPV3ETHEREUMActiveAccountsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pANCAKESWAPV3ETHEREUMDepositsCurrent
     *
     * Deposits (current).
     *
     */
    public function testPANCAKESWAPV3ETHEREUMDepositsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pANCAKESWAPV3ETHEREUMDexAmmProtocolsCurrent
     *
     * DexAmmProtocols (current).
     *
     */
    public function testPANCAKESWAPV3ETHEREUMDexAmmProtocolsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotsCurrent
     *
     * FinancialsDailySnapshots (current).
     *
     */
    public function testPANCAKESWAPV3ETHEREUMFinancialsDailySnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pANCAKESWAPV3ETHEREUMLiquidityPoolAmountsCurrent
     *
     * LiquidityPoolAmounts (current).
     *
     */
    public function testPANCAKESWAPV3ETHEREUMLiquidityPoolAmountsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrent
     *
     * LiquidityPoolDailySnapshots (current).
     *
     */
    public function testPANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pANCAKESWAPV3ETHEREUMLiquidityPoolFeesCurrent
     *
     * LiquidityPoolFees (current).
     *
     */
    public function testPANCAKESWAPV3ETHEREUMLiquidityPoolFeesCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrent
     *
     * LiquidityPoolHourlySnapshots (current).
     *
     */
    public function testPANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pANCAKESWAPV3ETHEREUMLiquidityPoolsCurrent
     *
     * LiquidityPools (current).
     *
     */
    public function testPANCAKESWAPV3ETHEREUMLiquidityPoolsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pANCAKESWAPV3ETHEREUMPositionSnapshotsCurrent
     *
     * PositionSnapshots (current).
     *
     */
    public function testPANCAKESWAPV3ETHEREUMPositionSnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pANCAKESWAPV3ETHEREUMPositionsCurrent
     *
     * Positions (current).
     *
     */
    public function testPANCAKESWAPV3ETHEREUMPositionsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pANCAKESWAPV3ETHEREUMRewardTokensCurrent
     *
     * RewardTokens (current).
     *
     */
    public function testPANCAKESWAPV3ETHEREUMRewardTokensCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pANCAKESWAPV3ETHEREUMSwapsCurrent
     *
     * Swaps (current).
     *
     */
    public function testPANCAKESWAPV3ETHEREUMSwapsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pANCAKESWAPV3ETHEREUMTickDailySnapshotsCurrent
     *
     * TickDailySnapshots (current).
     *
     */
    public function testPANCAKESWAPV3ETHEREUMTickDailySnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pANCAKESWAPV3ETHEREUMTickHourlySnapshotsCurrent
     *
     * TickHourlySnapshots (current).
     *
     */
    public function testPANCAKESWAPV3ETHEREUMTickHourlySnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pANCAKESWAPV3ETHEREUMTicksCurrent
     *
     * Ticks (current).
     *
     */
    public function testPANCAKESWAPV3ETHEREUMTicksCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pANCAKESWAPV3ETHEREUMTokenWhiteListSymbolsCurrent
     *
     * TokenWhiteListSymbols (current).
     *
     */
    public function testPANCAKESWAPV3ETHEREUMTokenWhiteListSymbolsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pANCAKESWAPV3ETHEREUMTokenWhiteListsCurrent
     *
     * TokenWhiteLists (current).
     *
     */
    public function testPANCAKESWAPV3ETHEREUMTokenWhiteListsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pANCAKESWAPV3ETHEREUMTokensCurrent
     *
     * Tokens (current).
     *
     */
    public function testPANCAKESWAPV3ETHEREUMTokensCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrent
     *
     * UsageMetricsDailySnapshots (current).
     *
     */
    public function testPANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrent
     *
     * UsageMetricsHourlySnapshots (current).
     *
     */
    public function testPANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for pANCAKESWAPV3ETHEREUMWithdrawsCurrent
     *
     * Withdraws (current).
     *
     */
    public function testPANCAKESWAPV3ETHEREUMWithdrawsCurrent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
