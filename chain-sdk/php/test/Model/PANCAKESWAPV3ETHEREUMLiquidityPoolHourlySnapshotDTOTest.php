<?php
/**
 * PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * On Chain Dapps - REST API
 *
 * This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTest Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO"
     */
    public function testPANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "entry_time"
     */
    public function testPropertyEntryTime()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "recv_time"
     */
    public function testPropertyRecvTime()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "block_number"
     */
    public function testPropertyBlockNumber()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "id"
     */
    public function testPropertyId()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "hour"
     */
    public function testPropertyHour()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "protocol"
     */
    public function testPropertyProtocol()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "pool"
     */
    public function testPropertyPool()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "tick"
     */
    public function testPropertyTick()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "total_value_locked_usd"
     */
    public function testPropertyTotalValueLockedUsd()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "total_liquidity"
     */
    public function testPropertyTotalLiquidity()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "total_liquidity_usd"
     */
    public function testPropertyTotalLiquidityUsd()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "active_liquidity"
     */
    public function testPropertyActiveLiquidity()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "active_liquidity_usd"
     */
    public function testPropertyActiveLiquidityUsd()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "uncollected_protocol_side_token_amounts"
     */
    public function testPropertyUncollectedProtocolSideTokenAmounts()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "uncollected_protocol_side_values_usd"
     */
    public function testPropertyUncollectedProtocolSideValuesUsd()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "uncollected_supply_side_token_amounts"
     */
    public function testPropertyUncollectedSupplySideTokenAmounts()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "uncollected_supply_side_values_usd"
     */
    public function testPropertyUncollectedSupplySideValuesUsd()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "cumulative_supply_side_revenue_usd"
     */
    public function testPropertyCumulativeSupplySideRevenueUsd()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "hourly_supply_side_revenue_usd"
     */
    public function testPropertyHourlySupplySideRevenueUsd()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "cumulative_protocol_side_revenue_usd"
     */
    public function testPropertyCumulativeProtocolSideRevenueUsd()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "hourly_protocol_side_revenue_usd"
     */
    public function testPropertyHourlyProtocolSideRevenueUsd()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "cumulative_total_revenue_usd"
     */
    public function testPropertyCumulativeTotalRevenueUsd()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "hourly_total_revenue_usd"
     */
    public function testPropertyHourlyTotalRevenueUsd()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "cumulative_volume_usd"
     */
    public function testPropertyCumulativeVolumeUsd()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "hourly_volume_usd"
     */
    public function testPropertyHourlyVolumeUsd()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "cumulative_volume_by_token_amount"
     */
    public function testPropertyCumulativeVolumeByTokenAmount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "hourly_volume_by_token_amount"
     */
    public function testPropertyHourlyVolumeByTokenAmount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "cumulative_volume_by_token_usd"
     */
    public function testPropertyCumulativeVolumeByTokenUsd()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "hourly_volume_by_token_usd"
     */
    public function testPropertyHourlyVolumeByTokenUsd()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "input_token_balances"
     */
    public function testPropertyInputTokenBalances()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "input_token_balances_usd"
     */
    public function testPropertyInputTokenBalancesUsd()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "input_token_weights"
     */
    public function testPropertyInputTokenWeights()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "staked_output_token_amount"
     */
    public function testPropertyStakedOutputTokenAmount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "reward_token_emissions_amount"
     */
    public function testPropertyRewardTokenEmissionsAmount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "reward_token_emissions_usd"
     */
    public function testPropertyRewardTokenEmissionsUsd()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "cumulative_deposit_count"
     */
    public function testPropertyCumulativeDepositCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "hourly_deposit_count"
     */
    public function testPropertyHourlyDepositCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "cumulative_withdraw_count"
     */
    public function testPropertyCumulativeWithdrawCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "hourly_withdraw_count"
     */
    public function testPropertyHourlyWithdrawCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "cumulative_swap_count"
     */
    public function testPropertyCumulativeSwapCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "hourly_swap_count"
     */
    public function testPropertyHourlySwapCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "position_count"
     */
    public function testPropertyPositionCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "open_position_count"
     */
    public function testPropertyOpenPositionCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "closed_position_count"
     */
    public function testPropertyClosedPositionCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "timestamp"
     */
    public function testPropertyTimestamp()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
