{-
   On Chain Dapps - REST API

    This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

   OpenAPI Version: 3.0.1
   On Chain Dapps - REST API API version: v1
   Contact: support@coinapi.io
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : OnChainDapps-REST.API.UNISWAPV3ETHEREUM
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module OnChainDapps-REST.API.UNISWAPV3ETHEREUM where

import OnChainDapps-REST.Core
import OnChainDapps-REST.MimeTypes
import OnChainDapps-REST.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** UNISWAPV3ETHEREUM

-- *** uNISWAPV3ETHEREUMAccountsCurrent

-- | @GET \/dapps\/uniswap_v3_ethereum\/accounts\/current@
-- 
-- Accounts (current)
-- 
-- Gets accounts.
-- 
uNISWAPV3ETHEREUMAccountsCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest UNISWAPV3ETHEREUMAccountsCurrent MimeNoContent [UNISWAPV3ETHEREUMAccountDTO] accept
uNISWAPV3ETHEREUMAccountsCurrent  _ =
  _mkRequest "GET" ["/dapps/uniswap_v3_ethereum/accounts/current"]

data UNISWAPV3ETHEREUMAccountsCurrent  
-- | @application/json@
instance Produces UNISWAPV3ETHEREUMAccountsCurrent MimeJSON
-- | @text/json@
instance Produces UNISWAPV3ETHEREUMAccountsCurrent MimeTextJson
-- | @text/plain@
instance Produces UNISWAPV3ETHEREUMAccountsCurrent MimePlainText


-- *** uNISWAPV3ETHEREUMSwapsCurrent

-- | @GET \/dapps\/uniswap_v3_ethereum\/swaps\/current@
-- 
-- Swaps (current)
-- 
-- Gets swaps.
-- 
uNISWAPV3ETHEREUMSwapsCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest UNISWAPV3ETHEREUMSwapsCurrent MimeNoContent [UNISWAPV3ETHEREUMSwapDTO] accept
uNISWAPV3ETHEREUMSwapsCurrent  _ =
  _mkRequest "GET" ["/dapps/uniswap_v3_ethereum/swaps/current"]

data UNISWAPV3ETHEREUMSwapsCurrent  
-- | @application/json@
instance Produces UNISWAPV3ETHEREUMSwapsCurrent MimeJSON
-- | @text/json@
instance Produces UNISWAPV3ETHEREUMSwapsCurrent MimeTextJson
-- | @text/plain@
instance Produces UNISWAPV3ETHEREUMSwapsCurrent MimePlainText


-- *** uNISWAPV3ETHEREUMTokensCurrent

-- | @GET \/dapps\/uniswap_v3_ethereum\/tokens\/current@
-- 
-- Tokens (current)
-- 
-- Gets tokens.
-- 
uNISWAPV3ETHEREUMTokensCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest UNISWAPV3ETHEREUMTokensCurrent MimeNoContent [UNISWAPV3ETHEREUMTokenDTO] accept
uNISWAPV3ETHEREUMTokensCurrent  _ =
  _mkRequest "GET" ["/dapps/uniswap_v3_ethereum/tokens/current"]

data UNISWAPV3ETHEREUMTokensCurrent  
-- | @application/json@
instance Produces UNISWAPV3ETHEREUMTokensCurrent MimeJSON
-- | @text/json@
instance Produces UNISWAPV3ETHEREUMTokensCurrent MimeTextJson
-- | @text/plain@
instance Produces UNISWAPV3ETHEREUMTokensCurrent MimePlainText

