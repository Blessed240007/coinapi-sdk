{-
   On Chain Dapps - REST API

    This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

   OpenAPI Version: 3.0.1
   On Chain Dapps - REST API API version: v1
   Contact: support@coinapi.io
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : OnChainDapps-REST.API.Dex
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module OnChainDapps-REST.API.Dex where

import OnChainDapps-REST.Core
import OnChainDapps-REST.MimeTypes
import OnChainDapps-REST.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Dex

-- *** dexBatchesCurrent

-- | @GET \/dapps\/dex\/batches\/current@
-- 
-- Batches (current)
-- 
-- Gets batches.
-- 
dexBatchesCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest DexBatchesCurrent MimeNoContent [DexBatchDTO] accept
dexBatchesCurrent  _ =
  _mkRequest "GET" ["/dapps/dex/batches/current"]

data DexBatchesCurrent  
-- | @application/json@
instance Produces DexBatchesCurrent MimeJSON
-- | @text/json@
instance Produces DexBatchesCurrent MimeTextJson
-- | @text/plain@
instance Produces DexBatchesCurrent MimePlainText


-- *** dexDepositsCurrent

-- | @GET \/dapps\/dex\/deposits\/current@
-- 
-- Deposits (current)
-- 
-- Gets deposits.
-- 
dexDepositsCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest DexDepositsCurrent MimeNoContent [DexDepositDTO] accept
dexDepositsCurrent  _ =
  _mkRequest "GET" ["/dapps/dex/deposits/current"]

data DexDepositsCurrent  
-- | @application/json@
instance Produces DexDepositsCurrent MimeJSON
-- | @text/json@
instance Produces DexDepositsCurrent MimeTextJson
-- | @text/plain@
instance Produces DexDepositsCurrent MimePlainText


-- *** dexOrdersCurrent

-- | @GET \/dapps\/dex\/orders\/current@
-- 
-- Orders (current)
-- 
-- Gets orders.
-- 
dexOrdersCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest DexOrdersCurrent MimeNoContent [DexOrderDTO] accept
dexOrdersCurrent  _ =
  _mkRequest "GET" ["/dapps/dex/orders/current"]

data DexOrdersCurrent  
-- | @application/json@
instance Produces DexOrdersCurrent MimeJSON
-- | @text/json@
instance Produces DexOrdersCurrent MimeTextJson
-- | @text/plain@
instance Produces DexOrdersCurrent MimePlainText


-- *** dexPricesCurrent

-- | @GET \/dapps\/dex\/prices\/current@
-- 
-- Prices (current)
-- 
-- Gets prices.
-- 
dexPricesCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest DexPricesCurrent MimeNoContent [DexPriceDTO] accept
dexPricesCurrent  _ =
  _mkRequest "GET" ["/dapps/dex/prices/current"]

data DexPricesCurrent  
-- | @application/json@
instance Produces DexPricesCurrent MimeJSON
-- | @text/json@
instance Produces DexPricesCurrent MimeTextJson
-- | @text/plain@
instance Produces DexPricesCurrent MimePlainText


-- *** dexSolutionsCurrent

-- | @GET \/dapps\/dex\/solutions\/current@
-- 
-- Solutions (current)
-- 
-- Gets solutions.
-- 
dexSolutionsCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest DexSolutionsCurrent MimeNoContent [DexSolutionDTO] accept
dexSolutionsCurrent  _ =
  _mkRequest "GET" ["/dapps/dex/solutions/current"]

data DexSolutionsCurrent  
-- | @application/json@
instance Produces DexSolutionsCurrent MimeJSON
-- | @text/json@
instance Produces DexSolutionsCurrent MimeTextJson
-- | @text/plain@
instance Produces DexSolutionsCurrent MimePlainText


-- *** dexStatsCurrent

-- | @GET \/dapps\/dex\/stats\/current@
-- 
-- Stats (current)
-- 
-- Gets stats.
-- 
dexStatsCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest DexStatsCurrent MimeNoContent [DexStatsDTO] accept
dexStatsCurrent  _ =
  _mkRequest "GET" ["/dapps/dex/stats/current"]

data DexStatsCurrent  
-- | @application/json@
instance Produces DexStatsCurrent MimeJSON
-- | @text/json@
instance Produces DexStatsCurrent MimeTextJson
-- | @text/plain@
instance Produces DexStatsCurrent MimePlainText


-- *** dexTokensCurrent

-- | @GET \/dapps\/dex\/tokens\/current@
-- 
-- Tokens (current)
-- 
-- Gets tokens.
-- 
dexTokensCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest DexTokensCurrent MimeNoContent [DexTokenDTO] accept
dexTokensCurrent  _ =
  _mkRequest "GET" ["/dapps/dex/tokens/current"]

data DexTokensCurrent  
-- | @application/json@
instance Produces DexTokensCurrent MimeJSON
-- | @text/json@
instance Produces DexTokensCurrent MimeTextJson
-- | @text/plain@
instance Produces DexTokensCurrent MimePlainText


-- *** dexTradesCurrent

-- | @GET \/dapps\/dex\/trades\/current@
-- 
-- Trades (current)
-- 
-- Gets trades.
-- 
dexTradesCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest DexTradesCurrent MimeNoContent [DexTradeDTO] accept
dexTradesCurrent  _ =
  _mkRequest "GET" ["/dapps/dex/trades/current"]

data DexTradesCurrent  
-- | @application/json@
instance Produces DexTradesCurrent MimeJSON
-- | @text/json@
instance Produces DexTradesCurrent MimeTextJson
-- | @text/plain@
instance Produces DexTradesCurrent MimePlainText


-- *** dexUsersCurrent

-- | @GET \/dapps\/dex\/users\/current@
-- 
-- Users (current)
-- 
-- Gets users.
-- 
dexUsersCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest DexUsersCurrent MimeNoContent [DexUserDTO] accept
dexUsersCurrent  _ =
  _mkRequest "GET" ["/dapps/dex/users/current"]

data DexUsersCurrent  
-- | @application/json@
instance Produces DexUsersCurrent MimeJSON
-- | @text/json@
instance Produces DexUsersCurrent MimeTextJson
-- | @text/plain@
instance Produces DexUsersCurrent MimePlainText


-- *** dexWithdrawRequestsCurrent

-- | @GET \/dapps\/dex\/withdrawRequests\/current@
-- 
-- WithdrawRequests (current)
-- 
-- Gets withdrawRequests.
-- 
dexWithdrawRequestsCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest DexWithdrawRequestsCurrent MimeNoContent [DexWithdrawRequestDTO] accept
dexWithdrawRequestsCurrent  _ =
  _mkRequest "GET" ["/dapps/dex/withdrawRequests/current"]

data DexWithdrawRequestsCurrent  
-- | @application/json@
instance Produces DexWithdrawRequestsCurrent MimeJSON
-- | @text/json@
instance Produces DexWithdrawRequestsCurrent MimeTextJson
-- | @text/plain@
instance Produces DexWithdrawRequestsCurrent MimePlainText


-- *** dexWithdrawsCurrent

-- | @GET \/dapps\/dex\/withdraws\/current@
-- 
-- Withdraws (current)
-- 
-- Gets withdraws.
-- 
dexWithdrawsCurrent
  :: Accept accept -- ^ request accept ('MimeType')
  -> OnChainDapps-RESTRequest DexWithdrawsCurrent MimeNoContent [DexWithdrawDTO] accept
dexWithdrawsCurrent  _ =
  _mkRequest "GET" ["/dapps/dex/withdraws/current"]

data DexWithdrawsCurrent  
-- | @application/json@
instance Produces DexWithdrawsCurrent MimeJSON
-- | @text/json@
instance Produces DexWithdrawsCurrent MimeTextJson
-- | @text/plain@
instance Produces DexWithdrawsCurrent MimePlainText

