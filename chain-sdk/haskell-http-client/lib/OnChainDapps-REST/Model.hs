{-
   On Chain Dapps - REST API

    This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             

   OpenAPI Version: 3.0.1
   On Chain Dapps - REST API API version: v1
   Contact: support@coinapi.io
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : OnChainDapps-REST.Model
-}

{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveFoldable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TupleSections #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -fno-warn-unused-matches -fno-warn-unused-binds -fno-warn-unused-imports #-}

module OnChainDapps-REST.Model where

import OnChainDapps-REST.Core
import OnChainDapps-REST.MimeTypes

import Data.Aeson ((.:),(.:!),(.:?),(.=))

import qualified Control.Arrow as P (left)
import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Base64 as B64
import qualified Data.ByteString.Char8 as BC
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.HashMap.Lazy as HM
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Set as Set
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Time as TI
import qualified Lens.Micro as L
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Control.Applicative ((<|>))
import Control.Applicative (Alternative)
import Data.Function ((&))
import Data.Monoid ((<>))
import Data.Text (Text)
import Prelude (($),(/=),(.),(<$>),(<*>),(>>=),(=<<),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)

import qualified Prelude as P



-- * Parameter newtypes


-- ** DappName
newtype DappName = DappName { unDappName :: Text } deriving (P.Eq, P.Show)

-- ** Id
newtype Id = Id { unId :: Text } deriving (P.Eq, P.Show)

-- ** Pool
newtype Pool = Pool { unPool :: Text } deriving (P.Eq, P.Show)

-- * Models


-- ** CRYPTOPUNKSBidDTO
-- | CRYPTOPUNKSBidDTO
data CRYPTOPUNKSBidDTO = CRYPTOPUNKSBidDTO
  { cRYPTOPUNKSBidDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cRYPTOPUNKSBidDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cRYPTOPUNKSBidDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cRYPTOPUNKSBidDTOVid :: !(Maybe Integer) -- ^ "vid" - 
  , cRYPTOPUNKSBidDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , cRYPTOPUNKSBidDTOId :: !(Maybe Text) -- ^ "id" - 
  , cRYPTOPUNKSBidDTOTokensBid :: !(Maybe Text) -- ^ "tokens_bid" - 
  , cRYPTOPUNKSBidDTOTokenId :: !(Maybe Text) -- ^ "token_id" - 
  , cRYPTOPUNKSBidDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - 
  , cRYPTOPUNKSBidDTOBidder :: !(Maybe Text) -- ^ "bidder" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CRYPTOPUNKSBidDTO
instance A.FromJSON CRYPTOPUNKSBidDTO where
  parseJSON = A.withObject "CRYPTOPUNKSBidDTO" $ \o ->
    CRYPTOPUNKSBidDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "tokens_bid")
      <*> (o .:? "token_id")
      <*> (o .:? "timestamp")
      <*> (o .:? "bidder")

-- | ToJSON CRYPTOPUNKSBidDTO
instance A.ToJSON CRYPTOPUNKSBidDTO where
  toJSON CRYPTOPUNKSBidDTO {..} =
   _omitNulls
      [ "entry_time" .= cRYPTOPUNKSBidDTOEntryTime
      , "recv_time" .= cRYPTOPUNKSBidDTORecvTime
      , "block_number" .= cRYPTOPUNKSBidDTOBlockNumber
      , "vid" .= cRYPTOPUNKSBidDTOVid
      , "block_range" .= cRYPTOPUNKSBidDTOBlockRange
      , "id" .= cRYPTOPUNKSBidDTOId
      , "tokens_bid" .= cRYPTOPUNKSBidDTOTokensBid
      , "token_id" .= cRYPTOPUNKSBidDTOTokenId
      , "timestamp" .= cRYPTOPUNKSBidDTOTimestamp
      , "bidder" .= cRYPTOPUNKSBidDTOBidder
      ]


-- | Construct a value of type 'CRYPTOPUNKSBidDTO' (by applying it's required fields, if any)
mkCRYPTOPUNKSBidDTO
  :: CRYPTOPUNKSBidDTO
mkCRYPTOPUNKSBidDTO =
  CRYPTOPUNKSBidDTO
  { cRYPTOPUNKSBidDTOEntryTime = Nothing
  , cRYPTOPUNKSBidDTORecvTime = Nothing
  , cRYPTOPUNKSBidDTOBlockNumber = Nothing
  , cRYPTOPUNKSBidDTOVid = Nothing
  , cRYPTOPUNKSBidDTOBlockRange = Nothing
  , cRYPTOPUNKSBidDTOId = Nothing
  , cRYPTOPUNKSBidDTOTokensBid = Nothing
  , cRYPTOPUNKSBidDTOTokenId = Nothing
  , cRYPTOPUNKSBidDTOTimestamp = Nothing
  , cRYPTOPUNKSBidDTOBidder = Nothing
  }

-- ** CRYPTOPUNKSCollectionDTO
-- | CRYPTOPUNKSCollectionDTO
data CRYPTOPUNKSCollectionDTO = CRYPTOPUNKSCollectionDTO
  { cRYPTOPUNKSCollectionDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cRYPTOPUNKSCollectionDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cRYPTOPUNKSCollectionDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cRYPTOPUNKSCollectionDTOVid :: !(Maybe Integer) -- ^ "vid" - 
  , cRYPTOPUNKSCollectionDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , cRYPTOPUNKSCollectionDTOId :: !(Maybe Text) -- ^ "id" - 
  , cRYPTOPUNKSCollectionDTOName :: !(Maybe Text) -- ^ "name" - 
  , cRYPTOPUNKSCollectionDTOSymbol :: !(Maybe Text) -- ^ "symbol" - 
  , cRYPTOPUNKSCollectionDTOTotalSupply :: !(Maybe Text) -- ^ "total_supply" - 
  , cRYPTOPUNKSCollectionDTORoyaltyFee :: !(Maybe Text) -- ^ "royalty_fee" - 
  , cRYPTOPUNKSCollectionDTOCumulativeTradeVolumeEth :: !(Maybe Text) -- ^ "cumulative_trade_volume_eth" - 
  , cRYPTOPUNKSCollectionDTOMarketplaceRevenueEth :: !(Maybe Text) -- ^ "marketplace_revenue_eth" - 
  , cRYPTOPUNKSCollectionDTOCreatorRevenueEth :: !(Maybe Text) -- ^ "creator_revenue_eth" - 
  , cRYPTOPUNKSCollectionDTOTotalRevenueEth :: !(Maybe Text) -- ^ "total_revenue_eth" - 
  , cRYPTOPUNKSCollectionDTOTradeCount :: !(Maybe Int) -- ^ "trade_count" - 
  , cRYPTOPUNKSCollectionDTOBuyerCount :: !(Maybe Int) -- ^ "buyer_count" - 
  , cRYPTOPUNKSCollectionDTOSellerCount :: !(Maybe Int) -- ^ "seller_count" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CRYPTOPUNKSCollectionDTO
instance A.FromJSON CRYPTOPUNKSCollectionDTO where
  parseJSON = A.withObject "CRYPTOPUNKSCollectionDTO" $ \o ->
    CRYPTOPUNKSCollectionDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "name")
      <*> (o .:? "symbol")
      <*> (o .:? "total_supply")
      <*> (o .:? "royalty_fee")
      <*> (o .:? "cumulative_trade_volume_eth")
      <*> (o .:? "marketplace_revenue_eth")
      <*> (o .:? "creator_revenue_eth")
      <*> (o .:? "total_revenue_eth")
      <*> (o .:? "trade_count")
      <*> (o .:? "buyer_count")
      <*> (o .:? "seller_count")

-- | ToJSON CRYPTOPUNKSCollectionDTO
instance A.ToJSON CRYPTOPUNKSCollectionDTO where
  toJSON CRYPTOPUNKSCollectionDTO {..} =
   _omitNulls
      [ "entry_time" .= cRYPTOPUNKSCollectionDTOEntryTime
      , "recv_time" .= cRYPTOPUNKSCollectionDTORecvTime
      , "block_number" .= cRYPTOPUNKSCollectionDTOBlockNumber
      , "vid" .= cRYPTOPUNKSCollectionDTOVid
      , "block_range" .= cRYPTOPUNKSCollectionDTOBlockRange
      , "id" .= cRYPTOPUNKSCollectionDTOId
      , "name" .= cRYPTOPUNKSCollectionDTOName
      , "symbol" .= cRYPTOPUNKSCollectionDTOSymbol
      , "total_supply" .= cRYPTOPUNKSCollectionDTOTotalSupply
      , "royalty_fee" .= cRYPTOPUNKSCollectionDTORoyaltyFee
      , "cumulative_trade_volume_eth" .= cRYPTOPUNKSCollectionDTOCumulativeTradeVolumeEth
      , "marketplace_revenue_eth" .= cRYPTOPUNKSCollectionDTOMarketplaceRevenueEth
      , "creator_revenue_eth" .= cRYPTOPUNKSCollectionDTOCreatorRevenueEth
      , "total_revenue_eth" .= cRYPTOPUNKSCollectionDTOTotalRevenueEth
      , "trade_count" .= cRYPTOPUNKSCollectionDTOTradeCount
      , "buyer_count" .= cRYPTOPUNKSCollectionDTOBuyerCount
      , "seller_count" .= cRYPTOPUNKSCollectionDTOSellerCount
      ]


-- | Construct a value of type 'CRYPTOPUNKSCollectionDTO' (by applying it's required fields, if any)
mkCRYPTOPUNKSCollectionDTO
  :: CRYPTOPUNKSCollectionDTO
mkCRYPTOPUNKSCollectionDTO =
  CRYPTOPUNKSCollectionDTO
  { cRYPTOPUNKSCollectionDTOEntryTime = Nothing
  , cRYPTOPUNKSCollectionDTORecvTime = Nothing
  , cRYPTOPUNKSCollectionDTOBlockNumber = Nothing
  , cRYPTOPUNKSCollectionDTOVid = Nothing
  , cRYPTOPUNKSCollectionDTOBlockRange = Nothing
  , cRYPTOPUNKSCollectionDTOId = Nothing
  , cRYPTOPUNKSCollectionDTOName = Nothing
  , cRYPTOPUNKSCollectionDTOSymbol = Nothing
  , cRYPTOPUNKSCollectionDTOTotalSupply = Nothing
  , cRYPTOPUNKSCollectionDTORoyaltyFee = Nothing
  , cRYPTOPUNKSCollectionDTOCumulativeTradeVolumeEth = Nothing
  , cRYPTOPUNKSCollectionDTOMarketplaceRevenueEth = Nothing
  , cRYPTOPUNKSCollectionDTOCreatorRevenueEth = Nothing
  , cRYPTOPUNKSCollectionDTOTotalRevenueEth = Nothing
  , cRYPTOPUNKSCollectionDTOTradeCount = Nothing
  , cRYPTOPUNKSCollectionDTOBuyerCount = Nothing
  , cRYPTOPUNKSCollectionDTOSellerCount = Nothing
  }

-- ** CRYPTOPUNKSCollectionDailySnapshotDTO
-- | CRYPTOPUNKSCollectionDailySnapshotDTO
data CRYPTOPUNKSCollectionDailySnapshotDTO = CRYPTOPUNKSCollectionDailySnapshotDTO
  { cRYPTOPUNKSCollectionDailySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cRYPTOPUNKSCollectionDailySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cRYPTOPUNKSCollectionDailySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cRYPTOPUNKSCollectionDailySnapshotDTOVid :: !(Maybe Integer) -- ^ "vid" - 
  , cRYPTOPUNKSCollectionDailySnapshotDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , cRYPTOPUNKSCollectionDailySnapshotDTOId :: !(Maybe Text) -- ^ "id" - 
  , cRYPTOPUNKSCollectionDailySnapshotDTOCollection :: !(Maybe Text) -- ^ "collection" - 
  , cRYPTOPUNKSCollectionDailySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - 
  , cRYPTOPUNKSCollectionDailySnapshotDTORoyaltyFee :: !(Maybe Text) -- ^ "royalty_fee" - 
  , cRYPTOPUNKSCollectionDailySnapshotDTODailyMinSalePrice :: !(Maybe Text) -- ^ "daily_min_sale_price" - 
  , cRYPTOPUNKSCollectionDailySnapshotDTODailyMaxSalePrice :: !(Maybe Text) -- ^ "daily_max_sale_price" - 
  , cRYPTOPUNKSCollectionDailySnapshotDTOCumulativeTradeVolumeEth :: !(Maybe Text) -- ^ "cumulative_trade_volume_eth" - 
  , cRYPTOPUNKSCollectionDailySnapshotDTODailyTradeVolumeEth :: !(Maybe Text) -- ^ "daily_trade_volume_eth" - 
  , cRYPTOPUNKSCollectionDailySnapshotDTOMarketplaceRevenueEth :: !(Maybe Text) -- ^ "marketplace_revenue_eth" - 
  , cRYPTOPUNKSCollectionDailySnapshotDTOCreatorRevenueEth :: !(Maybe Text) -- ^ "creator_revenue_eth" - 
  , cRYPTOPUNKSCollectionDailySnapshotDTOTotalRevenueEth :: !(Maybe Text) -- ^ "total_revenue_eth" - 
  , cRYPTOPUNKSCollectionDailySnapshotDTOTradeCount :: !(Maybe Int) -- ^ "trade_count" - 
  , cRYPTOPUNKSCollectionDailySnapshotDTODailyTradedItemCount :: !(Maybe Int) -- ^ "daily_traded_item_count" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CRYPTOPUNKSCollectionDailySnapshotDTO
instance A.FromJSON CRYPTOPUNKSCollectionDailySnapshotDTO where
  parseJSON = A.withObject "CRYPTOPUNKSCollectionDailySnapshotDTO" $ \o ->
    CRYPTOPUNKSCollectionDailySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "collection")
      <*> (o .:? "timestamp")
      <*> (o .:? "royalty_fee")
      <*> (o .:? "daily_min_sale_price")
      <*> (o .:? "daily_max_sale_price")
      <*> (o .:? "cumulative_trade_volume_eth")
      <*> (o .:? "daily_trade_volume_eth")
      <*> (o .:? "marketplace_revenue_eth")
      <*> (o .:? "creator_revenue_eth")
      <*> (o .:? "total_revenue_eth")
      <*> (o .:? "trade_count")
      <*> (o .:? "daily_traded_item_count")

-- | ToJSON CRYPTOPUNKSCollectionDailySnapshotDTO
instance A.ToJSON CRYPTOPUNKSCollectionDailySnapshotDTO where
  toJSON CRYPTOPUNKSCollectionDailySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= cRYPTOPUNKSCollectionDailySnapshotDTOEntryTime
      , "recv_time" .= cRYPTOPUNKSCollectionDailySnapshotDTORecvTime
      , "block_number" .= cRYPTOPUNKSCollectionDailySnapshotDTOBlockNumber
      , "vid" .= cRYPTOPUNKSCollectionDailySnapshotDTOVid
      , "block_range" .= cRYPTOPUNKSCollectionDailySnapshotDTOBlockRange
      , "id" .= cRYPTOPUNKSCollectionDailySnapshotDTOId
      , "collection" .= cRYPTOPUNKSCollectionDailySnapshotDTOCollection
      , "timestamp" .= cRYPTOPUNKSCollectionDailySnapshotDTOTimestamp
      , "royalty_fee" .= cRYPTOPUNKSCollectionDailySnapshotDTORoyaltyFee
      , "daily_min_sale_price" .= cRYPTOPUNKSCollectionDailySnapshotDTODailyMinSalePrice
      , "daily_max_sale_price" .= cRYPTOPUNKSCollectionDailySnapshotDTODailyMaxSalePrice
      , "cumulative_trade_volume_eth" .= cRYPTOPUNKSCollectionDailySnapshotDTOCumulativeTradeVolumeEth
      , "daily_trade_volume_eth" .= cRYPTOPUNKSCollectionDailySnapshotDTODailyTradeVolumeEth
      , "marketplace_revenue_eth" .= cRYPTOPUNKSCollectionDailySnapshotDTOMarketplaceRevenueEth
      , "creator_revenue_eth" .= cRYPTOPUNKSCollectionDailySnapshotDTOCreatorRevenueEth
      , "total_revenue_eth" .= cRYPTOPUNKSCollectionDailySnapshotDTOTotalRevenueEth
      , "trade_count" .= cRYPTOPUNKSCollectionDailySnapshotDTOTradeCount
      , "daily_traded_item_count" .= cRYPTOPUNKSCollectionDailySnapshotDTODailyTradedItemCount
      ]


-- | Construct a value of type 'CRYPTOPUNKSCollectionDailySnapshotDTO' (by applying it's required fields, if any)
mkCRYPTOPUNKSCollectionDailySnapshotDTO
  :: CRYPTOPUNKSCollectionDailySnapshotDTO
mkCRYPTOPUNKSCollectionDailySnapshotDTO =
  CRYPTOPUNKSCollectionDailySnapshotDTO
  { cRYPTOPUNKSCollectionDailySnapshotDTOEntryTime = Nothing
  , cRYPTOPUNKSCollectionDailySnapshotDTORecvTime = Nothing
  , cRYPTOPUNKSCollectionDailySnapshotDTOBlockNumber = Nothing
  , cRYPTOPUNKSCollectionDailySnapshotDTOVid = Nothing
  , cRYPTOPUNKSCollectionDailySnapshotDTOBlockRange = Nothing
  , cRYPTOPUNKSCollectionDailySnapshotDTOId = Nothing
  , cRYPTOPUNKSCollectionDailySnapshotDTOCollection = Nothing
  , cRYPTOPUNKSCollectionDailySnapshotDTOTimestamp = Nothing
  , cRYPTOPUNKSCollectionDailySnapshotDTORoyaltyFee = Nothing
  , cRYPTOPUNKSCollectionDailySnapshotDTODailyMinSalePrice = Nothing
  , cRYPTOPUNKSCollectionDailySnapshotDTODailyMaxSalePrice = Nothing
  , cRYPTOPUNKSCollectionDailySnapshotDTOCumulativeTradeVolumeEth = Nothing
  , cRYPTOPUNKSCollectionDailySnapshotDTODailyTradeVolumeEth = Nothing
  , cRYPTOPUNKSCollectionDailySnapshotDTOMarketplaceRevenueEth = Nothing
  , cRYPTOPUNKSCollectionDailySnapshotDTOCreatorRevenueEth = Nothing
  , cRYPTOPUNKSCollectionDailySnapshotDTOTotalRevenueEth = Nothing
  , cRYPTOPUNKSCollectionDailySnapshotDTOTradeCount = Nothing
  , cRYPTOPUNKSCollectionDailySnapshotDTODailyTradedItemCount = Nothing
  }

-- ** CRYPTOPUNKSDataSourcesDTO
-- | CRYPTOPUNKSDataSourcesDTO
data CRYPTOPUNKSDataSourcesDTO = CRYPTOPUNKSDataSourcesDTO
  { cRYPTOPUNKSDataSourcesDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cRYPTOPUNKSDataSourcesDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cRYPTOPUNKSDataSourcesDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cRYPTOPUNKSDataSourcesDTOVid :: !(Maybe Int) -- ^ "vid" - 
  , cRYPTOPUNKSDataSourcesDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , cRYPTOPUNKSDataSourcesDTOCausalityRegion :: !(Maybe Int) -- ^ "causality_region" - 
  , cRYPTOPUNKSDataSourcesDTOManifestIdx :: !(Maybe Int) -- ^ "manifest_idx" - 
  , cRYPTOPUNKSDataSourcesDTOParent :: !(Maybe Int) -- ^ "parent" - 
  , cRYPTOPUNKSDataSourcesDTOId :: !(Maybe Text) -- ^ "id" - 
  , cRYPTOPUNKSDataSourcesDTOParam :: !(Maybe Text) -- ^ "param" - 
  , cRYPTOPUNKSDataSourcesDTOContext :: !(Maybe Text) -- ^ "context" - 
  , cRYPTOPUNKSDataSourcesDTODoneAt :: !(Maybe Int) -- ^ "done_at" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CRYPTOPUNKSDataSourcesDTO
instance A.FromJSON CRYPTOPUNKSDataSourcesDTO where
  parseJSON = A.withObject "CRYPTOPUNKSDataSourcesDTO" $ \o ->
    CRYPTOPUNKSDataSourcesDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "block_range")
      <*> (o .:? "causality_region")
      <*> (o .:? "manifest_idx")
      <*> (o .:? "parent")
      <*> (o .:? "id")
      <*> (o .:? "param")
      <*> (o .:? "context")
      <*> (o .:? "done_at")

-- | ToJSON CRYPTOPUNKSDataSourcesDTO
instance A.ToJSON CRYPTOPUNKSDataSourcesDTO where
  toJSON CRYPTOPUNKSDataSourcesDTO {..} =
   _omitNulls
      [ "entry_time" .= cRYPTOPUNKSDataSourcesDTOEntryTime
      , "recv_time" .= cRYPTOPUNKSDataSourcesDTORecvTime
      , "block_number" .= cRYPTOPUNKSDataSourcesDTOBlockNumber
      , "vid" .= cRYPTOPUNKSDataSourcesDTOVid
      , "block_range" .= cRYPTOPUNKSDataSourcesDTOBlockRange
      , "causality_region" .= cRYPTOPUNKSDataSourcesDTOCausalityRegion
      , "manifest_idx" .= cRYPTOPUNKSDataSourcesDTOManifestIdx
      , "parent" .= cRYPTOPUNKSDataSourcesDTOParent
      , "id" .= cRYPTOPUNKSDataSourcesDTOId
      , "param" .= cRYPTOPUNKSDataSourcesDTOParam
      , "context" .= cRYPTOPUNKSDataSourcesDTOContext
      , "done_at" .= cRYPTOPUNKSDataSourcesDTODoneAt
      ]


-- | Construct a value of type 'CRYPTOPUNKSDataSourcesDTO' (by applying it's required fields, if any)
mkCRYPTOPUNKSDataSourcesDTO
  :: CRYPTOPUNKSDataSourcesDTO
mkCRYPTOPUNKSDataSourcesDTO =
  CRYPTOPUNKSDataSourcesDTO
  { cRYPTOPUNKSDataSourcesDTOEntryTime = Nothing
  , cRYPTOPUNKSDataSourcesDTORecvTime = Nothing
  , cRYPTOPUNKSDataSourcesDTOBlockNumber = Nothing
  , cRYPTOPUNKSDataSourcesDTOVid = Nothing
  , cRYPTOPUNKSDataSourcesDTOBlockRange = Nothing
  , cRYPTOPUNKSDataSourcesDTOCausalityRegion = Nothing
  , cRYPTOPUNKSDataSourcesDTOManifestIdx = Nothing
  , cRYPTOPUNKSDataSourcesDTOParent = Nothing
  , cRYPTOPUNKSDataSourcesDTOId = Nothing
  , cRYPTOPUNKSDataSourcesDTOParam = Nothing
  , cRYPTOPUNKSDataSourcesDTOContext = Nothing
  , cRYPTOPUNKSDataSourcesDTODoneAt = Nothing
  }

-- ** CRYPTOPUNKSItemDTO
-- | CRYPTOPUNKSItemDTO
data CRYPTOPUNKSItemDTO = CRYPTOPUNKSItemDTO
  { cRYPTOPUNKSItemDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cRYPTOPUNKSItemDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cRYPTOPUNKSItemDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cRYPTOPUNKSItemDTOVid :: !(Maybe Integer) -- ^ "vid" - 
  , cRYPTOPUNKSItemDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , cRYPTOPUNKSItemDTOId :: !(Maybe Text) -- ^ "id" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CRYPTOPUNKSItemDTO
instance A.FromJSON CRYPTOPUNKSItemDTO where
  parseJSON = A.withObject "CRYPTOPUNKSItemDTO" $ \o ->
    CRYPTOPUNKSItemDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "block_range")
      <*> (o .:? "id")

-- | ToJSON CRYPTOPUNKSItemDTO
instance A.ToJSON CRYPTOPUNKSItemDTO where
  toJSON CRYPTOPUNKSItemDTO {..} =
   _omitNulls
      [ "entry_time" .= cRYPTOPUNKSItemDTOEntryTime
      , "recv_time" .= cRYPTOPUNKSItemDTORecvTime
      , "block_number" .= cRYPTOPUNKSItemDTOBlockNumber
      , "vid" .= cRYPTOPUNKSItemDTOVid
      , "block_range" .= cRYPTOPUNKSItemDTOBlockRange
      , "id" .= cRYPTOPUNKSItemDTOId
      ]


-- | Construct a value of type 'CRYPTOPUNKSItemDTO' (by applying it's required fields, if any)
mkCRYPTOPUNKSItemDTO
  :: CRYPTOPUNKSItemDTO
mkCRYPTOPUNKSItemDTO =
  CRYPTOPUNKSItemDTO
  { cRYPTOPUNKSItemDTOEntryTime = Nothing
  , cRYPTOPUNKSItemDTORecvTime = Nothing
  , cRYPTOPUNKSItemDTOBlockNumber = Nothing
  , cRYPTOPUNKSItemDTOVid = Nothing
  , cRYPTOPUNKSItemDTOBlockRange = Nothing
  , cRYPTOPUNKSItemDTOId = Nothing
  }

-- ** CRYPTOPUNKSMarketPlaceDTO
-- | CRYPTOPUNKSMarketPlaceDTO
data CRYPTOPUNKSMarketPlaceDTO = CRYPTOPUNKSMarketPlaceDTO
  { cRYPTOPUNKSMarketPlaceDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cRYPTOPUNKSMarketPlaceDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cRYPTOPUNKSMarketPlaceDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cRYPTOPUNKSMarketPlaceDTOVid :: !(Maybe Integer) -- ^ "vid" - 
  , cRYPTOPUNKSMarketPlaceDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , cRYPTOPUNKSMarketPlaceDTOId :: !(Maybe Text) -- ^ "id" - 
  , cRYPTOPUNKSMarketPlaceDTOName :: !(Maybe Text) -- ^ "name" - 
  , cRYPTOPUNKSMarketPlaceDTOSlug :: !(Maybe Text) -- ^ "slug" - 
  , cRYPTOPUNKSMarketPlaceDTOSchemaVersion :: !(Maybe Text) -- ^ "schema_version" - 
  , cRYPTOPUNKSMarketPlaceDTOSubgraphVersion :: !(Maybe Text) -- ^ "subgraph_version" - 
  , cRYPTOPUNKSMarketPlaceDTOMethodologyVersion :: !(Maybe Text) -- ^ "methodology_version" - 
  , cRYPTOPUNKSMarketPlaceDTOCollectionCount :: !(Maybe Int) -- ^ "collection_count" - 
  , cRYPTOPUNKSMarketPlaceDTOTradeCount :: !(Maybe Int) -- ^ "trade_count" - 
  , cRYPTOPUNKSMarketPlaceDTOCumulativeTradeVolumeEth :: !(Maybe Text) -- ^ "cumulative_trade_volume_eth" - 
  , cRYPTOPUNKSMarketPlaceDTOMarketplaceRevenueEth :: !(Maybe Text) -- ^ "marketplace_revenue_eth" - 
  , cRYPTOPUNKSMarketPlaceDTOCreatorRevenueEth :: !(Maybe Text) -- ^ "creator_revenue_eth" - 
  , cRYPTOPUNKSMarketPlaceDTOTotalRevenueEth :: !(Maybe Text) -- ^ "total_revenue_eth" - 
  , cRYPTOPUNKSMarketPlaceDTOCumulativeUniqueTraders :: !(Maybe Int) -- ^ "cumulative_unique_traders" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CRYPTOPUNKSMarketPlaceDTO
instance A.FromJSON CRYPTOPUNKSMarketPlaceDTO where
  parseJSON = A.withObject "CRYPTOPUNKSMarketPlaceDTO" $ \o ->
    CRYPTOPUNKSMarketPlaceDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "name")
      <*> (o .:? "slug")
      <*> (o .:? "schema_version")
      <*> (o .:? "subgraph_version")
      <*> (o .:? "methodology_version")
      <*> (o .:? "collection_count")
      <*> (o .:? "trade_count")
      <*> (o .:? "cumulative_trade_volume_eth")
      <*> (o .:? "marketplace_revenue_eth")
      <*> (o .:? "creator_revenue_eth")
      <*> (o .:? "total_revenue_eth")
      <*> (o .:? "cumulative_unique_traders")

-- | ToJSON CRYPTOPUNKSMarketPlaceDTO
instance A.ToJSON CRYPTOPUNKSMarketPlaceDTO where
  toJSON CRYPTOPUNKSMarketPlaceDTO {..} =
   _omitNulls
      [ "entry_time" .= cRYPTOPUNKSMarketPlaceDTOEntryTime
      , "recv_time" .= cRYPTOPUNKSMarketPlaceDTORecvTime
      , "block_number" .= cRYPTOPUNKSMarketPlaceDTOBlockNumber
      , "vid" .= cRYPTOPUNKSMarketPlaceDTOVid
      , "block_range" .= cRYPTOPUNKSMarketPlaceDTOBlockRange
      , "id" .= cRYPTOPUNKSMarketPlaceDTOId
      , "name" .= cRYPTOPUNKSMarketPlaceDTOName
      , "slug" .= cRYPTOPUNKSMarketPlaceDTOSlug
      , "schema_version" .= cRYPTOPUNKSMarketPlaceDTOSchemaVersion
      , "subgraph_version" .= cRYPTOPUNKSMarketPlaceDTOSubgraphVersion
      , "methodology_version" .= cRYPTOPUNKSMarketPlaceDTOMethodologyVersion
      , "collection_count" .= cRYPTOPUNKSMarketPlaceDTOCollectionCount
      , "trade_count" .= cRYPTOPUNKSMarketPlaceDTOTradeCount
      , "cumulative_trade_volume_eth" .= cRYPTOPUNKSMarketPlaceDTOCumulativeTradeVolumeEth
      , "marketplace_revenue_eth" .= cRYPTOPUNKSMarketPlaceDTOMarketplaceRevenueEth
      , "creator_revenue_eth" .= cRYPTOPUNKSMarketPlaceDTOCreatorRevenueEth
      , "total_revenue_eth" .= cRYPTOPUNKSMarketPlaceDTOTotalRevenueEth
      , "cumulative_unique_traders" .= cRYPTOPUNKSMarketPlaceDTOCumulativeUniqueTraders
      ]


-- | Construct a value of type 'CRYPTOPUNKSMarketPlaceDTO' (by applying it's required fields, if any)
mkCRYPTOPUNKSMarketPlaceDTO
  :: CRYPTOPUNKSMarketPlaceDTO
mkCRYPTOPUNKSMarketPlaceDTO =
  CRYPTOPUNKSMarketPlaceDTO
  { cRYPTOPUNKSMarketPlaceDTOEntryTime = Nothing
  , cRYPTOPUNKSMarketPlaceDTORecvTime = Nothing
  , cRYPTOPUNKSMarketPlaceDTOBlockNumber = Nothing
  , cRYPTOPUNKSMarketPlaceDTOVid = Nothing
  , cRYPTOPUNKSMarketPlaceDTOBlockRange = Nothing
  , cRYPTOPUNKSMarketPlaceDTOId = Nothing
  , cRYPTOPUNKSMarketPlaceDTOName = Nothing
  , cRYPTOPUNKSMarketPlaceDTOSlug = Nothing
  , cRYPTOPUNKSMarketPlaceDTOSchemaVersion = Nothing
  , cRYPTOPUNKSMarketPlaceDTOSubgraphVersion = Nothing
  , cRYPTOPUNKSMarketPlaceDTOMethodologyVersion = Nothing
  , cRYPTOPUNKSMarketPlaceDTOCollectionCount = Nothing
  , cRYPTOPUNKSMarketPlaceDTOTradeCount = Nothing
  , cRYPTOPUNKSMarketPlaceDTOCumulativeTradeVolumeEth = Nothing
  , cRYPTOPUNKSMarketPlaceDTOMarketplaceRevenueEth = Nothing
  , cRYPTOPUNKSMarketPlaceDTOCreatorRevenueEth = Nothing
  , cRYPTOPUNKSMarketPlaceDTOTotalRevenueEth = Nothing
  , cRYPTOPUNKSMarketPlaceDTOCumulativeUniqueTraders = Nothing
  }

-- ** CRYPTOPUNKSMarketplaceDailySnapshotDTO
-- | CRYPTOPUNKSMarketplaceDailySnapshotDTO
data CRYPTOPUNKSMarketplaceDailySnapshotDTO = CRYPTOPUNKSMarketplaceDailySnapshotDTO
  { cRYPTOPUNKSMarketplaceDailySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cRYPTOPUNKSMarketplaceDailySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOVid :: !(Maybe Integer) -- ^ "vid" - 
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOId :: !(Maybe Text) -- ^ "id" - 
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOMarketplace :: !(Maybe Text) -- ^ "marketplace" - 
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - 
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOCollectionCount :: !(Maybe Int) -- ^ "collection_count" - 
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOCumulativeTradeVolumeEth :: !(Maybe Text) -- ^ "cumulative_trade_volume_eth" - 
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOMarketplaceRevenueEth :: !(Maybe Text) -- ^ "marketplace_revenue_eth" - 
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOCreatorRevenueEth :: !(Maybe Text) -- ^ "creator_revenue_eth" - 
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOTotalRevenueEth :: !(Maybe Text) -- ^ "total_revenue_eth" - 
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOTradeCount :: !(Maybe Int) -- ^ "trade_count" - 
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOCumulativeUniqueTraders :: !(Maybe Int) -- ^ "cumulative_unique_traders" - 
  , cRYPTOPUNKSMarketplaceDailySnapshotDTODailyActiveTraders :: !(Maybe Int) -- ^ "daily_active_traders" - 
  , cRYPTOPUNKSMarketplaceDailySnapshotDTODailyTradedCollectionCount :: !(Maybe Int) -- ^ "daily_traded_collection_count" - 
  , cRYPTOPUNKSMarketplaceDailySnapshotDTODailyTradedItemCount :: !(Maybe Int) -- ^ "daily_traded_item_count" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CRYPTOPUNKSMarketplaceDailySnapshotDTO
instance A.FromJSON CRYPTOPUNKSMarketplaceDailySnapshotDTO where
  parseJSON = A.withObject "CRYPTOPUNKSMarketplaceDailySnapshotDTO" $ \o ->
    CRYPTOPUNKSMarketplaceDailySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "marketplace")
      <*> (o .:? "timestamp")
      <*> (o .:? "collection_count")
      <*> (o .:? "cumulative_trade_volume_eth")
      <*> (o .:? "marketplace_revenue_eth")
      <*> (o .:? "creator_revenue_eth")
      <*> (o .:? "total_revenue_eth")
      <*> (o .:? "trade_count")
      <*> (o .:? "cumulative_unique_traders")
      <*> (o .:? "daily_active_traders")
      <*> (o .:? "daily_traded_collection_count")
      <*> (o .:? "daily_traded_item_count")

-- | ToJSON CRYPTOPUNKSMarketplaceDailySnapshotDTO
instance A.ToJSON CRYPTOPUNKSMarketplaceDailySnapshotDTO where
  toJSON CRYPTOPUNKSMarketplaceDailySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= cRYPTOPUNKSMarketplaceDailySnapshotDTOEntryTime
      , "recv_time" .= cRYPTOPUNKSMarketplaceDailySnapshotDTORecvTime
      , "block_number" .= cRYPTOPUNKSMarketplaceDailySnapshotDTOBlockNumber
      , "vid" .= cRYPTOPUNKSMarketplaceDailySnapshotDTOVid
      , "block_range" .= cRYPTOPUNKSMarketplaceDailySnapshotDTOBlockRange
      , "id" .= cRYPTOPUNKSMarketplaceDailySnapshotDTOId
      , "marketplace" .= cRYPTOPUNKSMarketplaceDailySnapshotDTOMarketplace
      , "timestamp" .= cRYPTOPUNKSMarketplaceDailySnapshotDTOTimestamp
      , "collection_count" .= cRYPTOPUNKSMarketplaceDailySnapshotDTOCollectionCount
      , "cumulative_trade_volume_eth" .= cRYPTOPUNKSMarketplaceDailySnapshotDTOCumulativeTradeVolumeEth
      , "marketplace_revenue_eth" .= cRYPTOPUNKSMarketplaceDailySnapshotDTOMarketplaceRevenueEth
      , "creator_revenue_eth" .= cRYPTOPUNKSMarketplaceDailySnapshotDTOCreatorRevenueEth
      , "total_revenue_eth" .= cRYPTOPUNKSMarketplaceDailySnapshotDTOTotalRevenueEth
      , "trade_count" .= cRYPTOPUNKSMarketplaceDailySnapshotDTOTradeCount
      , "cumulative_unique_traders" .= cRYPTOPUNKSMarketplaceDailySnapshotDTOCumulativeUniqueTraders
      , "daily_active_traders" .= cRYPTOPUNKSMarketplaceDailySnapshotDTODailyActiveTraders
      , "daily_traded_collection_count" .= cRYPTOPUNKSMarketplaceDailySnapshotDTODailyTradedCollectionCount
      , "daily_traded_item_count" .= cRYPTOPUNKSMarketplaceDailySnapshotDTODailyTradedItemCount
      ]


-- | Construct a value of type 'CRYPTOPUNKSMarketplaceDailySnapshotDTO' (by applying it's required fields, if any)
mkCRYPTOPUNKSMarketplaceDailySnapshotDTO
  :: CRYPTOPUNKSMarketplaceDailySnapshotDTO
mkCRYPTOPUNKSMarketplaceDailySnapshotDTO =
  CRYPTOPUNKSMarketplaceDailySnapshotDTO
  { cRYPTOPUNKSMarketplaceDailySnapshotDTOEntryTime = Nothing
  , cRYPTOPUNKSMarketplaceDailySnapshotDTORecvTime = Nothing
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOBlockNumber = Nothing
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOVid = Nothing
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOBlockRange = Nothing
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOId = Nothing
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOMarketplace = Nothing
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOTimestamp = Nothing
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOCollectionCount = Nothing
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOCumulativeTradeVolumeEth = Nothing
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOMarketplaceRevenueEth = Nothing
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOCreatorRevenueEth = Nothing
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOTotalRevenueEth = Nothing
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOTradeCount = Nothing
  , cRYPTOPUNKSMarketplaceDailySnapshotDTOCumulativeUniqueTraders = Nothing
  , cRYPTOPUNKSMarketplaceDailySnapshotDTODailyActiveTraders = Nothing
  , cRYPTOPUNKSMarketplaceDailySnapshotDTODailyTradedCollectionCount = Nothing
  , cRYPTOPUNKSMarketplaceDailySnapshotDTODailyTradedItemCount = Nothing
  }

-- ** CRYPTOPUNKSTradeDTO
-- | CRYPTOPUNKSTradeDTO
data CRYPTOPUNKSTradeDTO = CRYPTOPUNKSTradeDTO
  { cRYPTOPUNKSTradeDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cRYPTOPUNKSTradeDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cRYPTOPUNKSTradeDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cRYPTOPUNKSTradeDTOVid :: !(Maybe Integer) -- ^ "vid" - 
  , cRYPTOPUNKSTradeDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , cRYPTOPUNKSTradeDTOId :: !(Maybe Text) -- ^ "id" - 
  , cRYPTOPUNKSTradeDTOTransactionHash :: !(Maybe Text) -- ^ "transaction_hash" - 
  , cRYPTOPUNKSTradeDTOLogIndex :: !(Maybe Int) -- ^ "log_index" - 
  , cRYPTOPUNKSTradeDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - 
  , cRYPTOPUNKSTradeDTOIsBundle :: !(Maybe Bool) -- ^ "is_bundle" - 
  , cRYPTOPUNKSTradeDTOCollection :: !(Maybe Text) -- ^ "collection" - 
  , cRYPTOPUNKSTradeDTOTokenId :: !(Maybe Text) -- ^ "token_id" - 
  , cRYPTOPUNKSTradeDTOAmount :: !(Maybe Text) -- ^ "amount" - 
  , cRYPTOPUNKSTradeDTOPriceEth :: !(Maybe Text) -- ^ "price_eth" - 
  , cRYPTOPUNKSTradeDTOBuyer :: !(Maybe Text) -- ^ "buyer" - 
  , cRYPTOPUNKSTradeDTOSeller :: !(Maybe Text) -- ^ "seller" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CRYPTOPUNKSTradeDTO
instance A.FromJSON CRYPTOPUNKSTradeDTO where
  parseJSON = A.withObject "CRYPTOPUNKSTradeDTO" $ \o ->
    CRYPTOPUNKSTradeDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "transaction_hash")
      <*> (o .:? "log_index")
      <*> (o .:? "timestamp")
      <*> (o .:? "is_bundle")
      <*> (o .:? "collection")
      <*> (o .:? "token_id")
      <*> (o .:? "amount")
      <*> (o .:? "price_eth")
      <*> (o .:? "buyer")
      <*> (o .:? "seller")

-- | ToJSON CRYPTOPUNKSTradeDTO
instance A.ToJSON CRYPTOPUNKSTradeDTO where
  toJSON CRYPTOPUNKSTradeDTO {..} =
   _omitNulls
      [ "entry_time" .= cRYPTOPUNKSTradeDTOEntryTime
      , "recv_time" .= cRYPTOPUNKSTradeDTORecvTime
      , "block_number" .= cRYPTOPUNKSTradeDTOBlockNumber
      , "vid" .= cRYPTOPUNKSTradeDTOVid
      , "block_range" .= cRYPTOPUNKSTradeDTOBlockRange
      , "id" .= cRYPTOPUNKSTradeDTOId
      , "transaction_hash" .= cRYPTOPUNKSTradeDTOTransactionHash
      , "log_index" .= cRYPTOPUNKSTradeDTOLogIndex
      , "timestamp" .= cRYPTOPUNKSTradeDTOTimestamp
      , "is_bundle" .= cRYPTOPUNKSTradeDTOIsBundle
      , "collection" .= cRYPTOPUNKSTradeDTOCollection
      , "token_id" .= cRYPTOPUNKSTradeDTOTokenId
      , "amount" .= cRYPTOPUNKSTradeDTOAmount
      , "price_eth" .= cRYPTOPUNKSTradeDTOPriceEth
      , "buyer" .= cRYPTOPUNKSTradeDTOBuyer
      , "seller" .= cRYPTOPUNKSTradeDTOSeller
      ]


-- | Construct a value of type 'CRYPTOPUNKSTradeDTO' (by applying it's required fields, if any)
mkCRYPTOPUNKSTradeDTO
  :: CRYPTOPUNKSTradeDTO
mkCRYPTOPUNKSTradeDTO =
  CRYPTOPUNKSTradeDTO
  { cRYPTOPUNKSTradeDTOEntryTime = Nothing
  , cRYPTOPUNKSTradeDTORecvTime = Nothing
  , cRYPTOPUNKSTradeDTOBlockNumber = Nothing
  , cRYPTOPUNKSTradeDTOVid = Nothing
  , cRYPTOPUNKSTradeDTOBlockRange = Nothing
  , cRYPTOPUNKSTradeDTOId = Nothing
  , cRYPTOPUNKSTradeDTOTransactionHash = Nothing
  , cRYPTOPUNKSTradeDTOLogIndex = Nothing
  , cRYPTOPUNKSTradeDTOTimestamp = Nothing
  , cRYPTOPUNKSTradeDTOIsBundle = Nothing
  , cRYPTOPUNKSTradeDTOCollection = Nothing
  , cRYPTOPUNKSTradeDTOTokenId = Nothing
  , cRYPTOPUNKSTradeDTOAmount = Nothing
  , cRYPTOPUNKSTradeDTOPriceEth = Nothing
  , cRYPTOPUNKSTradeDTOBuyer = Nothing
  , cRYPTOPUNKSTradeDTOSeller = Nothing
  }

-- ** CRYPTOPUNKSUserDTO
-- | CRYPTOPUNKSUserDTO
data CRYPTOPUNKSUserDTO = CRYPTOPUNKSUserDTO
  { cRYPTOPUNKSUserDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cRYPTOPUNKSUserDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cRYPTOPUNKSUserDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cRYPTOPUNKSUserDTOVid :: !(Maybe Integer) -- ^ "vid" - 
  , cRYPTOPUNKSUserDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , cRYPTOPUNKSUserDTOId :: !(Maybe Text) -- ^ "id" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CRYPTOPUNKSUserDTO
instance A.FromJSON CRYPTOPUNKSUserDTO where
  parseJSON = A.withObject "CRYPTOPUNKSUserDTO" $ \o ->
    CRYPTOPUNKSUserDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "block_range")
      <*> (o .:? "id")

-- | ToJSON CRYPTOPUNKSUserDTO
instance A.ToJSON CRYPTOPUNKSUserDTO where
  toJSON CRYPTOPUNKSUserDTO {..} =
   _omitNulls
      [ "entry_time" .= cRYPTOPUNKSUserDTOEntryTime
      , "recv_time" .= cRYPTOPUNKSUserDTORecvTime
      , "block_number" .= cRYPTOPUNKSUserDTOBlockNumber
      , "vid" .= cRYPTOPUNKSUserDTOVid
      , "block_range" .= cRYPTOPUNKSUserDTOBlockRange
      , "id" .= cRYPTOPUNKSUserDTOId
      ]


-- | Construct a value of type 'CRYPTOPUNKSUserDTO' (by applying it's required fields, if any)
mkCRYPTOPUNKSUserDTO
  :: CRYPTOPUNKSUserDTO
mkCRYPTOPUNKSUserDTO =
  CRYPTOPUNKSUserDTO
  { cRYPTOPUNKSUserDTOEntryTime = Nothing
  , cRYPTOPUNKSUserDTORecvTime = Nothing
  , cRYPTOPUNKSUserDTOBlockNumber = Nothing
  , cRYPTOPUNKSUserDTOVid = Nothing
  , cRYPTOPUNKSUserDTOBlockRange = Nothing
  , cRYPTOPUNKSUserDTOId = Nothing
  }

-- ** CURVEFINANCEETHEREUMAccountDTO
-- | CURVEFINANCEETHEREUMAccountDTO
-- Entity to accumulate total unique users.
data CURVEFINANCEETHEREUMAccountDTO = CURVEFINANCEETHEREUMAccountDTO
  { cURVEFINANCEETHEREUMAccountDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cURVEFINANCEETHEREUMAccountDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cURVEFINANCEETHEREUMAccountDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cURVEFINANCEETHEREUMAccountDTOId :: !(Maybe Text) -- ^ "id" - Address of the account
  , cURVEFINANCEETHEREUMAccountDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CURVEFINANCEETHEREUMAccountDTO
instance A.FromJSON CURVEFINANCEETHEREUMAccountDTO where
  parseJSON = A.withObject "CURVEFINANCEETHEREUMAccountDTO" $ \o ->
    CURVEFINANCEETHEREUMAccountDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "block_range")

-- | ToJSON CURVEFINANCEETHEREUMAccountDTO
instance A.ToJSON CURVEFINANCEETHEREUMAccountDTO where
  toJSON CURVEFINANCEETHEREUMAccountDTO {..} =
   _omitNulls
      [ "entry_time" .= cURVEFINANCEETHEREUMAccountDTOEntryTime
      , "recv_time" .= cURVEFINANCEETHEREUMAccountDTORecvTime
      , "block_number" .= cURVEFINANCEETHEREUMAccountDTOBlockNumber
      , "id" .= cURVEFINANCEETHEREUMAccountDTOId
      , "block_range" .= cURVEFINANCEETHEREUMAccountDTOBlockRange
      ]


-- | Construct a value of type 'CURVEFINANCEETHEREUMAccountDTO' (by applying it's required fields, if any)
mkCURVEFINANCEETHEREUMAccountDTO
  :: CURVEFINANCEETHEREUMAccountDTO
mkCURVEFINANCEETHEREUMAccountDTO =
  CURVEFINANCEETHEREUMAccountDTO
  { cURVEFINANCEETHEREUMAccountDTOEntryTime = Nothing
  , cURVEFINANCEETHEREUMAccountDTORecvTime = Nothing
  , cURVEFINANCEETHEREUMAccountDTOBlockNumber = Nothing
  , cURVEFINANCEETHEREUMAccountDTOId = Nothing
  , cURVEFINANCEETHEREUMAccountDTOBlockRange = Nothing
  }

-- ** CURVEFINANCEETHEREUMActiveAccountDTO
-- | CURVEFINANCEETHEREUMActiveAccountDTO
-- Entity for calculating daily/hourly active users.
data CURVEFINANCEETHEREUMActiveAccountDTO = CURVEFINANCEETHEREUMActiveAccountDTO
  { cURVEFINANCEETHEREUMActiveAccountDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cURVEFINANCEETHEREUMActiveAccountDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cURVEFINANCEETHEREUMActiveAccountDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cURVEFINANCEETHEREUMActiveAccountDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , cURVEFINANCEETHEREUMActiveAccountDTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: (daily/hourly)-(address of the account)-(days/hours since Unix epoch)
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CURVEFINANCEETHEREUMActiveAccountDTO
instance A.FromJSON CURVEFINANCEETHEREUMActiveAccountDTO where
  parseJSON = A.withObject "CURVEFINANCEETHEREUMActiveAccountDTO" $ \o ->
    CURVEFINANCEETHEREUMActiveAccountDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")

-- | ToJSON CURVEFINANCEETHEREUMActiveAccountDTO
instance A.ToJSON CURVEFINANCEETHEREUMActiveAccountDTO where
  toJSON CURVEFINANCEETHEREUMActiveAccountDTO {..} =
   _omitNulls
      [ "entry_time" .= cURVEFINANCEETHEREUMActiveAccountDTOEntryTime
      , "recv_time" .= cURVEFINANCEETHEREUMActiveAccountDTORecvTime
      , "block_number" .= cURVEFINANCEETHEREUMActiveAccountDTOBlockNumber
      , "block_range" .= cURVEFINANCEETHEREUMActiveAccountDTOBlockRange
      , "id" .= cURVEFINANCEETHEREUMActiveAccountDTOId
      ]


-- | Construct a value of type 'CURVEFINANCEETHEREUMActiveAccountDTO' (by applying it's required fields, if any)
mkCURVEFINANCEETHEREUMActiveAccountDTO
  :: CURVEFINANCEETHEREUMActiveAccountDTO
mkCURVEFINANCEETHEREUMActiveAccountDTO =
  CURVEFINANCEETHEREUMActiveAccountDTO
  { cURVEFINANCEETHEREUMActiveAccountDTOEntryTime = Nothing
  , cURVEFINANCEETHEREUMActiveAccountDTORecvTime = Nothing
  , cURVEFINANCEETHEREUMActiveAccountDTOBlockNumber = Nothing
  , cURVEFINANCEETHEREUMActiveAccountDTOBlockRange = Nothing
  , cURVEFINANCEETHEREUMActiveAccountDTOId = Nothing
  }

-- ** CURVEFINANCEETHEREUMDepositDTO
-- | CURVEFINANCEETHEREUMDepositDTO
-- Entity represents a user action in the protocol involving the addition of funds to a liquidity pool.
data CURVEFINANCEETHEREUMDepositDTO = CURVEFINANCEETHEREUMDepositDTO
  { cURVEFINANCEETHEREUMDepositDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cURVEFINANCEETHEREUMDepositDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cURVEFINANCEETHEREUMDepositDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cURVEFINANCEETHEREUMDepositDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , cURVEFINANCEETHEREUMDepositDTOId :: !(Maybe Text) -- ^ "id" - deposit-(Transaction hash)-(log index)
  , cURVEFINANCEETHEREUMDepositDTOHash :: !(Maybe Text) -- ^ "hash" - Transaction hash of the transaction that emitted this event
  , cURVEFINANCEETHEREUMDepositDTOLogIndex :: !(Maybe Int) -- ^ "log_index" - Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0
  , cURVEFINANCEETHEREUMDepositDTOProtocol :: !(Maybe Text) -- ^ "protocol" - The protocol this transaction belongs to
  , cURVEFINANCEETHEREUMDepositDTOTo :: !(Maybe Text) -- ^ "to" - Address that received the tokens
  , cURVEFINANCEETHEREUMDepositDTOFrom :: !(Maybe Text) -- ^ "from" - Address that sent the tokens
  , cURVEFINANCEETHEREUMDepositDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this event
  , cURVEFINANCEETHEREUMDepositDTOInputTokens :: !(Maybe [Text]) -- ^ "input_tokens" - Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool
  , cURVEFINANCEETHEREUMDepositDTOOutputToken :: !(Maybe Text) -- ^ "output_token" - Output token of the pool. E.g. the UNI-LP token
  , cURVEFINANCEETHEREUMDepositDTOInputTokenAmounts :: !(Maybe [Text]) -- ^ "input_token_amounts" - Amount of input tokens in the token&#39;s native unit
  , cURVEFINANCEETHEREUMDepositDTOOutputTokenAmount :: !(Maybe Text) -- ^ "output_token_amount" - Amount of output tokens in the token&#39;s native unit
  , cURVEFINANCEETHEREUMDepositDTOAmountUsd :: !(Maybe Text) -- ^ "amount_usd" - USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool)
  , cURVEFINANCEETHEREUMDepositDTOPool :: !(Maybe Text) -- ^ "pool" - The pool involving this transaction
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CURVEFINANCEETHEREUMDepositDTO
instance A.FromJSON CURVEFINANCEETHEREUMDepositDTO where
  parseJSON = A.withObject "CURVEFINANCEETHEREUMDepositDTO" $ \o ->
    CURVEFINANCEETHEREUMDepositDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "hash")
      <*> (o .:? "log_index")
      <*> (o .:? "protocol")
      <*> (o .:? "to")
      <*> (o .:? "from")
      <*> (o .:? "timestamp")
      <*> (o .:? "input_tokens")
      <*> (o .:? "output_token")
      <*> (o .:? "input_token_amounts")
      <*> (o .:? "output_token_amount")
      <*> (o .:? "amount_usd")
      <*> (o .:? "pool")

-- | ToJSON CURVEFINANCEETHEREUMDepositDTO
instance A.ToJSON CURVEFINANCEETHEREUMDepositDTO where
  toJSON CURVEFINANCEETHEREUMDepositDTO {..} =
   _omitNulls
      [ "entry_time" .= cURVEFINANCEETHEREUMDepositDTOEntryTime
      , "recv_time" .= cURVEFINANCEETHEREUMDepositDTORecvTime
      , "block_number" .= cURVEFINANCEETHEREUMDepositDTOBlockNumber
      , "block_range" .= cURVEFINANCEETHEREUMDepositDTOBlockRange
      , "id" .= cURVEFINANCEETHEREUMDepositDTOId
      , "hash" .= cURVEFINANCEETHEREUMDepositDTOHash
      , "log_index" .= cURVEFINANCEETHEREUMDepositDTOLogIndex
      , "protocol" .= cURVEFINANCEETHEREUMDepositDTOProtocol
      , "to" .= cURVEFINANCEETHEREUMDepositDTOTo
      , "from" .= cURVEFINANCEETHEREUMDepositDTOFrom
      , "timestamp" .= cURVEFINANCEETHEREUMDepositDTOTimestamp
      , "input_tokens" .= cURVEFINANCEETHEREUMDepositDTOInputTokens
      , "output_token" .= cURVEFINANCEETHEREUMDepositDTOOutputToken
      , "input_token_amounts" .= cURVEFINANCEETHEREUMDepositDTOInputTokenAmounts
      , "output_token_amount" .= cURVEFINANCEETHEREUMDepositDTOOutputTokenAmount
      , "amount_usd" .= cURVEFINANCEETHEREUMDepositDTOAmountUsd
      , "pool" .= cURVEFINANCEETHEREUMDepositDTOPool
      ]


-- | Construct a value of type 'CURVEFINANCEETHEREUMDepositDTO' (by applying it's required fields, if any)
mkCURVEFINANCEETHEREUMDepositDTO
  :: CURVEFINANCEETHEREUMDepositDTO
mkCURVEFINANCEETHEREUMDepositDTO =
  CURVEFINANCEETHEREUMDepositDTO
  { cURVEFINANCEETHEREUMDepositDTOEntryTime = Nothing
  , cURVEFINANCEETHEREUMDepositDTORecvTime = Nothing
  , cURVEFINANCEETHEREUMDepositDTOBlockNumber = Nothing
  , cURVEFINANCEETHEREUMDepositDTOBlockRange = Nothing
  , cURVEFINANCEETHEREUMDepositDTOId = Nothing
  , cURVEFINANCEETHEREUMDepositDTOHash = Nothing
  , cURVEFINANCEETHEREUMDepositDTOLogIndex = Nothing
  , cURVEFINANCEETHEREUMDepositDTOProtocol = Nothing
  , cURVEFINANCEETHEREUMDepositDTOTo = Nothing
  , cURVEFINANCEETHEREUMDepositDTOFrom = Nothing
  , cURVEFINANCEETHEREUMDepositDTOTimestamp = Nothing
  , cURVEFINANCEETHEREUMDepositDTOInputTokens = Nothing
  , cURVEFINANCEETHEREUMDepositDTOOutputToken = Nothing
  , cURVEFINANCEETHEREUMDepositDTOInputTokenAmounts = Nothing
  , cURVEFINANCEETHEREUMDepositDTOOutputTokenAmount = Nothing
  , cURVEFINANCEETHEREUMDepositDTOAmountUsd = Nothing
  , cURVEFINANCEETHEREUMDepositDTOPool = Nothing
  }

-- ** CURVEFINANCEETHEREUMDexAmmProtocolDTO
-- | CURVEFINANCEETHEREUMDexAmmProtocolDTO
-- Entity for calculating daily/hourly active users.
data CURVEFINANCEETHEREUMDexAmmProtocolDTO = CURVEFINANCEETHEREUMDexAmmProtocolDTO
  { cURVEFINANCEETHEREUMDexAmmProtocolDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cURVEFINANCEETHEREUMDexAmmProtocolDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOId :: !(Maybe Text) -- ^ "id" - Smart contract address of the protocol&#39;s main contract (Factory, Registry, etc)
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOName :: !(Maybe Text) -- ^ "name" - Name of the protocol, including version.
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOSlug :: !(Maybe Text) -- ^ "slug" - Slug of protocol, including version.
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOSchemaVersion :: !(Maybe Text) -- ^ "schema_version" - Version of the subgraph schema, in SemVer format (e.g. 1.0.0)
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOSubgraphVersion :: !(Maybe Text) -- ^ "subgraph_version" - Version of the subgraph implementation, in SemVer format (e.g. 1.0.0)
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOMethodologyVersion :: !(Maybe Text) -- ^ "methodology_version" - Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0)
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of the entire protocol
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOProtocolControlledValueUsd :: !(Maybe Text) -- ^ "protocol_controlled_value_usd" - Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All historical volume in USD
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" - All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOCumulativeUniqueUsers :: !(Maybe Int) -- ^ "cumulative_unique_users" - Number of cumulative unique users
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOTotalPoolCount :: !(Maybe Int) -- ^ "total_pool_count" - Total number of pools
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOPoolIds :: !(Maybe [Text]) -- ^ "pool_ids" - All pools that belong to this protocol
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CURVEFINANCEETHEREUMDexAmmProtocolDTO
instance A.FromJSON CURVEFINANCEETHEREUMDexAmmProtocolDTO where
  parseJSON = A.withObject "CURVEFINANCEETHEREUMDexAmmProtocolDTO" $ \o ->
    CURVEFINANCEETHEREUMDexAmmProtocolDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "name")
      <*> (o .:? "slug")
      <*> (o .:? "schema_version")
      <*> (o .:? "subgraph_version")
      <*> (o .:? "methodology_version")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "protocol_controlled_value_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "cumulative_unique_users")
      <*> (o .:? "total_pool_count")
      <*> (o .:? "pool_ids")

-- | ToJSON CURVEFINANCEETHEREUMDexAmmProtocolDTO
instance A.ToJSON CURVEFINANCEETHEREUMDexAmmProtocolDTO where
  toJSON CURVEFINANCEETHEREUMDexAmmProtocolDTO {..} =
   _omitNulls
      [ "entry_time" .= cURVEFINANCEETHEREUMDexAmmProtocolDTOEntryTime
      , "recv_time" .= cURVEFINANCEETHEREUMDexAmmProtocolDTORecvTime
      , "block_number" .= cURVEFINANCEETHEREUMDexAmmProtocolDTOBlockNumber
      , "block_range" .= cURVEFINANCEETHEREUMDexAmmProtocolDTOBlockRange
      , "id" .= cURVEFINANCEETHEREUMDexAmmProtocolDTOId
      , "name" .= cURVEFINANCEETHEREUMDexAmmProtocolDTOName
      , "slug" .= cURVEFINANCEETHEREUMDexAmmProtocolDTOSlug
      , "schema_version" .= cURVEFINANCEETHEREUMDexAmmProtocolDTOSchemaVersion
      , "subgraph_version" .= cURVEFINANCEETHEREUMDexAmmProtocolDTOSubgraphVersion
      , "methodology_version" .= cURVEFINANCEETHEREUMDexAmmProtocolDTOMethodologyVersion
      , "total_value_locked_usd" .= cURVEFINANCEETHEREUMDexAmmProtocolDTOTotalValueLockedUsd
      , "protocol_controlled_value_usd" .= cURVEFINANCEETHEREUMDexAmmProtocolDTOProtocolControlledValueUsd
      , "cumulative_volume_usd" .= cURVEFINANCEETHEREUMDexAmmProtocolDTOCumulativeVolumeUsd
      , "cumulative_supply_side_revenue_usd" .= cURVEFINANCEETHEREUMDexAmmProtocolDTOCumulativeSupplySideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= cURVEFINANCEETHEREUMDexAmmProtocolDTOCumulativeProtocolSideRevenueUsd
      , "cumulative_total_revenue_usd" .= cURVEFINANCEETHEREUMDexAmmProtocolDTOCumulativeTotalRevenueUsd
      , "cumulative_unique_users" .= cURVEFINANCEETHEREUMDexAmmProtocolDTOCumulativeUniqueUsers
      , "total_pool_count" .= cURVEFINANCEETHEREUMDexAmmProtocolDTOTotalPoolCount
      , "pool_ids" .= cURVEFINANCEETHEREUMDexAmmProtocolDTOPoolIds
      ]


-- | Construct a value of type 'CURVEFINANCEETHEREUMDexAmmProtocolDTO' (by applying it's required fields, if any)
mkCURVEFINANCEETHEREUMDexAmmProtocolDTO
  :: CURVEFINANCEETHEREUMDexAmmProtocolDTO
mkCURVEFINANCEETHEREUMDexAmmProtocolDTO =
  CURVEFINANCEETHEREUMDexAmmProtocolDTO
  { cURVEFINANCEETHEREUMDexAmmProtocolDTOEntryTime = Nothing
  , cURVEFINANCEETHEREUMDexAmmProtocolDTORecvTime = Nothing
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOBlockNumber = Nothing
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOBlockRange = Nothing
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOId = Nothing
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOName = Nothing
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOSlug = Nothing
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOSchemaVersion = Nothing
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOSubgraphVersion = Nothing
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOMethodologyVersion = Nothing
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOTotalValueLockedUsd = Nothing
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOProtocolControlledValueUsd = Nothing
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOCumulativeVolumeUsd = Nothing
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOCumulativeSupplySideRevenueUsd = Nothing
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOCumulativeProtocolSideRevenueUsd = Nothing
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOCumulativeTotalRevenueUsd = Nothing
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOCumulativeUniqueUsers = Nothing
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOTotalPoolCount = Nothing
  , cURVEFINANCEETHEREUMDexAmmProtocolDTOPoolIds = Nothing
  }

-- ** CURVEFINANCEETHEREUMFinancialsDailySnapshotDTO
-- | CURVEFINANCEETHEREUMFinancialsDailySnapshotDTO
-- Daily financial metrics for Curve finance.
data CURVEFINANCEETHEREUMFinancialsDailySnapshotDTO = CURVEFINANCEETHEREUMFinancialsDailySnapshotDTO
  { cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOId :: !(Maybe Text) -- ^ "id" - ID is # of days since Unix epoch time
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - Protocol this snapshot is associated with
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of the entire protocol
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOProtocolControlledValueUsd :: !(Maybe Text) -- ^ "protocol_controlled_value_usd" - Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTODailyVolumeUsd :: !(Maybe Text) -- ^ "daily_volume_usd" - All trade volume occurred in a given day, in USD
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All historical trade volume in USD
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTODailySupplySideRevenueUsd :: !(Maybe Text) -- ^ "daily_supply_side_revenue_usd" - Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTODailyProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "daily_protocol_side_revenue_usd" - Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTODailyTotalRevenueUsd :: !(Maybe Text) -- ^ "daily_total_revenue_usd" - All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" - All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this snapshot
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CURVEFINANCEETHEREUMFinancialsDailySnapshotDTO
instance A.FromJSON CURVEFINANCEETHEREUMFinancialsDailySnapshotDTO where
  parseJSON = A.withObject "CURVEFINANCEETHEREUMFinancialsDailySnapshotDTO" $ \o ->
    CURVEFINANCEETHEREUMFinancialsDailySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "protocol")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "protocol_controlled_value_usd")
      <*> (o .:? "daily_volume_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "daily_supply_side_revenue_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "daily_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "daily_total_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "timestamp")

-- | ToJSON CURVEFINANCEETHEREUMFinancialsDailySnapshotDTO
instance A.ToJSON CURVEFINANCEETHEREUMFinancialsDailySnapshotDTO where
  toJSON CURVEFINANCEETHEREUMFinancialsDailySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOEntryTime
      , "recv_time" .= cURVEFINANCEETHEREUMFinancialsDailySnapshotDTORecvTime
      , "block_number" .= cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOBlockNumber
      , "block_range" .= cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOBlockRange
      , "id" .= cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOId
      , "protocol" .= cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOProtocol
      , "total_value_locked_usd" .= cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOTotalValueLockedUsd
      , "protocol_controlled_value_usd" .= cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOProtocolControlledValueUsd
      , "daily_volume_usd" .= cURVEFINANCEETHEREUMFinancialsDailySnapshotDTODailyVolumeUsd
      , "cumulative_volume_usd" .= cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOCumulativeVolumeUsd
      , "daily_supply_side_revenue_usd" .= cURVEFINANCEETHEREUMFinancialsDailySnapshotDTODailySupplySideRevenueUsd
      , "cumulative_supply_side_revenue_usd" .= cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOCumulativeSupplySideRevenueUsd
      , "daily_protocol_side_revenue_usd" .= cURVEFINANCEETHEREUMFinancialsDailySnapshotDTODailyProtocolSideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOCumulativeProtocolSideRevenueUsd
      , "daily_total_revenue_usd" .= cURVEFINANCEETHEREUMFinancialsDailySnapshotDTODailyTotalRevenueUsd
      , "cumulative_total_revenue_usd" .= cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOCumulativeTotalRevenueUsd
      , "timestamp" .= cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'CURVEFINANCEETHEREUMFinancialsDailySnapshotDTO' (by applying it's required fields, if any)
mkCURVEFINANCEETHEREUMFinancialsDailySnapshotDTO
  :: CURVEFINANCEETHEREUMFinancialsDailySnapshotDTO
mkCURVEFINANCEETHEREUMFinancialsDailySnapshotDTO =
  CURVEFINANCEETHEREUMFinancialsDailySnapshotDTO
  { cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOEntryTime = Nothing
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTORecvTime = Nothing
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOBlockNumber = Nothing
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOBlockRange = Nothing
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOId = Nothing
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOProtocol = Nothing
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOTotalValueLockedUsd = Nothing
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOProtocolControlledValueUsd = Nothing
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTODailyVolumeUsd = Nothing
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOCumulativeVolumeUsd = Nothing
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTODailySupplySideRevenueUsd = Nothing
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOCumulativeSupplySideRevenueUsd = Nothing
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTODailyProtocolSideRevenueUsd = Nothing
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOCumulativeProtocolSideRevenueUsd = Nothing
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTODailyTotalRevenueUsd = Nothing
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOCumulativeTotalRevenueUsd = Nothing
  , cURVEFINANCEETHEREUMFinancialsDailySnapshotDTOTimestamp = Nothing
  }

-- ** CURVEFINANCEETHEREUMLiquidityGaugeDTO
-- | CURVEFINANCEETHEREUMLiquidityGaugeDTO
-- 
data CURVEFINANCEETHEREUMLiquidityGaugeDTO = CURVEFINANCEETHEREUMLiquidityGaugeDTO
  { cURVEFINANCEETHEREUMLiquidityGaugeDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cURVEFINANCEETHEREUMLiquidityGaugeDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cURVEFINANCEETHEREUMLiquidityGaugeDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cURVEFINANCEETHEREUMLiquidityGaugeDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , cURVEFINANCEETHEREUMLiquidityGaugeDTOId :: !(Maybe Text) -- ^ "id" - Address of the Liquidity Gauge
  , cURVEFINANCEETHEREUMLiquidityGaugeDTOPoolAddress :: !(Maybe Text) -- ^ "pool_address" - Address of the pool associated with this liquidity gauge
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CURVEFINANCEETHEREUMLiquidityGaugeDTO
instance A.FromJSON CURVEFINANCEETHEREUMLiquidityGaugeDTO where
  parseJSON = A.withObject "CURVEFINANCEETHEREUMLiquidityGaugeDTO" $ \o ->
    CURVEFINANCEETHEREUMLiquidityGaugeDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "pool_address")

-- | ToJSON CURVEFINANCEETHEREUMLiquidityGaugeDTO
instance A.ToJSON CURVEFINANCEETHEREUMLiquidityGaugeDTO where
  toJSON CURVEFINANCEETHEREUMLiquidityGaugeDTO {..} =
   _omitNulls
      [ "entry_time" .= cURVEFINANCEETHEREUMLiquidityGaugeDTOEntryTime
      , "recv_time" .= cURVEFINANCEETHEREUMLiquidityGaugeDTORecvTime
      , "block_number" .= cURVEFINANCEETHEREUMLiquidityGaugeDTOBlockNumber
      , "block_range" .= cURVEFINANCEETHEREUMLiquidityGaugeDTOBlockRange
      , "id" .= cURVEFINANCEETHEREUMLiquidityGaugeDTOId
      , "pool_address" .= cURVEFINANCEETHEREUMLiquidityGaugeDTOPoolAddress
      ]


-- | Construct a value of type 'CURVEFINANCEETHEREUMLiquidityGaugeDTO' (by applying it's required fields, if any)
mkCURVEFINANCEETHEREUMLiquidityGaugeDTO
  :: CURVEFINANCEETHEREUMLiquidityGaugeDTO
mkCURVEFINANCEETHEREUMLiquidityGaugeDTO =
  CURVEFINANCEETHEREUMLiquidityGaugeDTO
  { cURVEFINANCEETHEREUMLiquidityGaugeDTOEntryTime = Nothing
  , cURVEFINANCEETHEREUMLiquidityGaugeDTORecvTime = Nothing
  , cURVEFINANCEETHEREUMLiquidityGaugeDTOBlockNumber = Nothing
  , cURVEFINANCEETHEREUMLiquidityGaugeDTOBlockRange = Nothing
  , cURVEFINANCEETHEREUMLiquidityGaugeDTOId = Nothing
  , cURVEFINANCEETHEREUMLiquidityGaugeDTOPoolAddress = Nothing
  }

-- ** CURVEFINANCEETHEREUMLiquidityPoolDTO
-- | CURVEFINANCEETHEREUMLiquidityPoolDTO
-- 
data CURVEFINANCEETHEREUMLiquidityPoolDTO = CURVEFINANCEETHEREUMLiquidityPoolDTO
  { cURVEFINANCEETHEREUMLiquidityPoolDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cURVEFINANCEETHEREUMLiquidityPoolDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cURVEFINANCEETHEREUMLiquidityPoolDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cURVEFINANCEETHEREUMLiquidityPoolDTOVid :: !(Maybe Integer) -- ^ "vid" - 
  , cURVEFINANCEETHEREUMLiquidityPoolDTOId :: !(Maybe Text) -- ^ "id" - Smart contract address of the pool
  , cURVEFINANCEETHEREUMLiquidityPoolDTOProtocol :: !(Maybe Text) -- ^ "protocol" - The protocol this pool belongs to
  , cURVEFINANCEETHEREUMLiquidityPoolDTOName :: !(Maybe Text) -- ^ "name" - Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT)
  , cURVEFINANCEETHEREUMLiquidityPoolDTOSymbol :: !(Maybe Text) -- ^ "symbol" - Symbol of liquidity pool (e.g. 3CRV)
  , cURVEFINANCEETHEREUMLiquidityPoolDTOInputTokens :: !(Maybe [Text]) -- ^ "input_tokens" - Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer
  , cURVEFINANCEETHEREUMLiquidityPoolDTOInputTokensOrdered :: !(Maybe [Text]) -- ^ "input_tokens_ordered" - inputTokens in native (contract) order
  , cURVEFINANCEETHEREUMLiquidityPoolDTOOutputToken :: !(Maybe Text) -- ^ "output_token" - Token that is minted to track ownership of position in protocol
  , cURVEFINANCEETHEREUMLiquidityPoolDTORewardTokens :: !(Maybe [Text]) -- ^ "reward_tokens" - Aditional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon
  , cURVEFINANCEETHEREUMLiquidityPoolDTOFees :: !(Maybe [Text]) -- ^ "fees" - Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee.)
  , cURVEFINANCEETHEREUMLiquidityPoolDTOIsSingleSided :: !(Maybe Bool) -- ^ "is_single_sided" - Whether this pool is single-sided (e.g. Bancor, Platypus&#39;s Alternative Pool). The specifics of the implementation depends on the protocol.
  , cURVEFINANCEETHEREUMLiquidityPoolDTOCreatedTimestamp :: !(Maybe Text) -- ^ "created_timestamp" - Creation timestamp
  , cURVEFINANCEETHEREUMLiquidityPoolDTOCreatedBlockNumber :: !(Maybe Text) -- ^ "created_block_number" - Creation block number
  , cURVEFINANCEETHEREUMLiquidityPoolDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of this pool in USD
  , cURVEFINANCEETHEREUMLiquidityPoolDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the supply side.
  , cURVEFINANCEETHEREUMLiquidityPoolDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the protocol.
  , cURVEFINANCEETHEREUMLiquidityPoolDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" - All revenue generated by the liquidity pool.
  , cURVEFINANCEETHEREUMLiquidityPoolDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All historical trade volume occurred in this pool, in USD
  , cURVEFINANCEETHEREUMLiquidityPoolDTOInputTokenBalances :: !(Maybe [Text]) -- ^ "input_token_balances" - Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , cURVEFINANCEETHEREUMLiquidityPoolDTOInputTokenWeights :: !(Maybe [Text]) -- ^ "input_token_weights" - Weights of input tokens in the liquidity pool in percentage values.
  , cURVEFINANCEETHEREUMLiquidityPoolDTOOutputTokenSupply :: !(Maybe Text) -- ^ "output_token_supply" - Total supply of output token.
  , cURVEFINANCEETHEREUMLiquidityPoolDTOOutputTokenPriceUsd :: !(Maybe Text) -- ^ "output_token_price_usd" - Price per share of output token in USD
  , cURVEFINANCEETHEREUMLiquidityPoolDTOStakedOutputTokenAmount :: !(Maybe Text) -- ^ "staked_output_token_amount" - Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
  , cURVEFINANCEETHEREUMLiquidityPoolDTORewardTokenEmissionsAmount :: !(Maybe [Text]) -- ^ "reward_token_emissions_amount" - Per-block reward token emission as of the current block normalized to a day, in token&#39;s native amount.
  , cURVEFINANCEETHEREUMLiquidityPoolDTORewardTokenEmissionsUsd :: !(Maybe [Text]) -- ^ "reward_token_emissions_usd" - Per-block reward token emission as of the current block normalized to a day, in USD value.
  , cURVEFINANCEETHEREUMLiquidityPoolDTORegistryAddress :: !(Maybe Text) -- ^ "registry_address" - Registry that deployed this pool
  , cURVEFINANCEETHEREUMLiquidityPoolDTOGaugeAddress :: !(Maybe Text) -- ^ "gauge_address" - Liquidity Gauge assocaited with this pool
  , cURVEFINANCEETHEREUMLiquidityPoolDTOEvaluatedAsk :: !(Maybe Double) -- ^ /ReadOnly/ "evaluated_ask"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CURVEFINANCEETHEREUMLiquidityPoolDTO
instance A.FromJSON CURVEFINANCEETHEREUMLiquidityPoolDTO where
  parseJSON = A.withObject "CURVEFINANCEETHEREUMLiquidityPoolDTO" $ \o ->
    CURVEFINANCEETHEREUMLiquidityPoolDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "id")
      <*> (o .:? "protocol")
      <*> (o .:? "name")
      <*> (o .:? "symbol")
      <*> (o .:? "input_tokens")
      <*> (o .:? "input_tokens_ordered")
      <*> (o .:? "output_token")
      <*> (o .:? "reward_tokens")
      <*> (o .:? "fees")
      <*> (o .:? "is_single_sided")
      <*> (o .:? "created_timestamp")
      <*> (o .:? "created_block_number")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "input_token_balances")
      <*> (o .:? "input_token_weights")
      <*> (o .:? "output_token_supply")
      <*> (o .:? "output_token_price_usd")
      <*> (o .:? "staked_output_token_amount")
      <*> (o .:? "reward_token_emissions_amount")
      <*> (o .:? "reward_token_emissions_usd")
      <*> (o .:? "registry_address")
      <*> (o .:? "gauge_address")
      <*> (o .:? "evaluated_ask")

-- | ToJSON CURVEFINANCEETHEREUMLiquidityPoolDTO
instance A.ToJSON CURVEFINANCEETHEREUMLiquidityPoolDTO where
  toJSON CURVEFINANCEETHEREUMLiquidityPoolDTO {..} =
   _omitNulls
      [ "entry_time" .= cURVEFINANCEETHEREUMLiquidityPoolDTOEntryTime
      , "recv_time" .= cURVEFINANCEETHEREUMLiquidityPoolDTORecvTime
      , "block_number" .= cURVEFINANCEETHEREUMLiquidityPoolDTOBlockNumber
      , "vid" .= cURVEFINANCEETHEREUMLiquidityPoolDTOVid
      , "id" .= cURVEFINANCEETHEREUMLiquidityPoolDTOId
      , "protocol" .= cURVEFINANCEETHEREUMLiquidityPoolDTOProtocol
      , "name" .= cURVEFINANCEETHEREUMLiquidityPoolDTOName
      , "symbol" .= cURVEFINANCEETHEREUMLiquidityPoolDTOSymbol
      , "input_tokens" .= cURVEFINANCEETHEREUMLiquidityPoolDTOInputTokens
      , "input_tokens_ordered" .= cURVEFINANCEETHEREUMLiquidityPoolDTOInputTokensOrdered
      , "output_token" .= cURVEFINANCEETHEREUMLiquidityPoolDTOOutputToken
      , "reward_tokens" .= cURVEFINANCEETHEREUMLiquidityPoolDTORewardTokens
      , "fees" .= cURVEFINANCEETHEREUMLiquidityPoolDTOFees
      , "is_single_sided" .= cURVEFINANCEETHEREUMLiquidityPoolDTOIsSingleSided
      , "created_timestamp" .= cURVEFINANCEETHEREUMLiquidityPoolDTOCreatedTimestamp
      , "created_block_number" .= cURVEFINANCEETHEREUMLiquidityPoolDTOCreatedBlockNumber
      , "total_value_locked_usd" .= cURVEFINANCEETHEREUMLiquidityPoolDTOTotalValueLockedUsd
      , "cumulative_supply_side_revenue_usd" .= cURVEFINANCEETHEREUMLiquidityPoolDTOCumulativeSupplySideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= cURVEFINANCEETHEREUMLiquidityPoolDTOCumulativeProtocolSideRevenueUsd
      , "cumulative_total_revenue_usd" .= cURVEFINANCEETHEREUMLiquidityPoolDTOCumulativeTotalRevenueUsd
      , "cumulative_volume_usd" .= cURVEFINANCEETHEREUMLiquidityPoolDTOCumulativeVolumeUsd
      , "input_token_balances" .= cURVEFINANCEETHEREUMLiquidityPoolDTOInputTokenBalances
      , "input_token_weights" .= cURVEFINANCEETHEREUMLiquidityPoolDTOInputTokenWeights
      , "output_token_supply" .= cURVEFINANCEETHEREUMLiquidityPoolDTOOutputTokenSupply
      , "output_token_price_usd" .= cURVEFINANCEETHEREUMLiquidityPoolDTOOutputTokenPriceUsd
      , "staked_output_token_amount" .= cURVEFINANCEETHEREUMLiquidityPoolDTOStakedOutputTokenAmount
      , "reward_token_emissions_amount" .= cURVEFINANCEETHEREUMLiquidityPoolDTORewardTokenEmissionsAmount
      , "reward_token_emissions_usd" .= cURVEFINANCEETHEREUMLiquidityPoolDTORewardTokenEmissionsUsd
      , "registry_address" .= cURVEFINANCEETHEREUMLiquidityPoolDTORegistryAddress
      , "gauge_address" .= cURVEFINANCEETHEREUMLiquidityPoolDTOGaugeAddress
      , "evaluated_ask" .= cURVEFINANCEETHEREUMLiquidityPoolDTOEvaluatedAsk
      ]


-- | Construct a value of type 'CURVEFINANCEETHEREUMLiquidityPoolDTO' (by applying it's required fields, if any)
mkCURVEFINANCEETHEREUMLiquidityPoolDTO
  :: CURVEFINANCEETHEREUMLiquidityPoolDTO
mkCURVEFINANCEETHEREUMLiquidityPoolDTO =
  CURVEFINANCEETHEREUMLiquidityPoolDTO
  { cURVEFINANCEETHEREUMLiquidityPoolDTOEntryTime = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTORecvTime = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOBlockNumber = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOVid = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOId = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOProtocol = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOName = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOSymbol = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOInputTokens = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOInputTokensOrdered = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOOutputToken = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTORewardTokens = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOFees = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOIsSingleSided = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOCreatedTimestamp = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOCreatedBlockNumber = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOTotalValueLockedUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOCumulativeSupplySideRevenueUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOCumulativeProtocolSideRevenueUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOCumulativeTotalRevenueUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOCumulativeVolumeUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOInputTokenBalances = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOInputTokenWeights = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOOutputTokenSupply = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOOutputTokenPriceUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOStakedOutputTokenAmount = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTORewardTokenEmissionsAmount = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTORewardTokenEmissionsUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTORegistryAddress = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOGaugeAddress = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDTOEvaluatedAsk = Nothing
  }

-- ** CURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTO
-- | CURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTO
-- 
data CURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTO = CURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTO
  { cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: (smart contract address of the pool)-(# of days since Unix epoch time)
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - The protocol this snapshot belongs to
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOPool :: !(Maybe Text) -- ^ "pool" - The pool this snapshot belongs to
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this snapshot
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of this pool
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the supply side.
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTODailySupplySideRevenueUsd :: !(Maybe Text) -- ^ "daily_supply_side_revenue_usd" - 
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - Daily revenue generated by the liquidity pool, accrued to the supply side.
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTODailyProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "daily_protocol_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the protocol.
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" - All revenue generated by the liquidity pool.
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTODailyTotalRevenueUsd :: !(Maybe Text) -- ^ "daily_total_revenue_usd" - Daily revenue generated by the liquidity pool.
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeUsd :: !(Maybe Text) -- ^ "daily_volume_usd" - All trade volume occurred in a given day, in USD
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenAmount :: !(Maybe [Text]) -- ^ "daily_volume_by_token_amount" - 
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenUsd :: !(Maybe [Text]) -- ^ "daily_volume_by_token_usd" - All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#39;inputTokens&#39; field.
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool&#39;s &#39;inputTokens&#39; field.
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOInputTokenBalances :: !(Maybe [Text]) -- ^ "input_token_balances" - Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#39;inputTokens&#39; field.
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOInputTokenWeights :: !(Maybe [Text]) -- ^ "input_token_weights" - Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOOutputTokenSupply :: !(Maybe Text) -- ^ "output_token_supply" - Total supply of output token. Note that certain DEXes don&#39;t have an output token (e.g. Bancor)
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOOutputTokenPriceUsd :: !(Maybe Text) -- ^ "output_token_price_usd" - Price per share of output token in USD
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOStakedOutputTokenAmount :: !(Maybe Text) -- ^ "staked_output_token_amount" - Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsAmount :: !(Maybe [Text]) -- ^ "reward_token_emissions_amount" - Per-block reward token emission as of the current block normalized to a day, in token&#39;s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsUsd :: !(Maybe [Text]) -- ^ "reward_token_emissions_usd" - Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTO
instance A.FromJSON CURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTO where
  parseJSON = A.withObject "CURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTO" $ \o ->
    CURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "protocol")
      <*> (o .:? "pool")
      <*> (o .:? "timestamp")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "daily_supply_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "daily_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "daily_total_revenue_usd")
      <*> (o .:? "daily_volume_usd")
      <*> (o .:? "daily_volume_by_token_amount")
      <*> (o .:? "daily_volume_by_token_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "input_token_balances")
      <*> (o .:? "input_token_weights")
      <*> (o .:? "output_token_supply")
      <*> (o .:? "output_token_price_usd")
      <*> (o .:? "staked_output_token_amount")
      <*> (o .:? "reward_token_emissions_amount")
      <*> (o .:? "reward_token_emissions_usd")

-- | ToJSON CURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTO
instance A.ToJSON CURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTO where
  toJSON CURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOEntryTime
      , "recv_time" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTORecvTime
      , "block_number" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOBlockNumber
      , "block_range" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOBlockRange
      , "id" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOId
      , "protocol" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOProtocol
      , "pool" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOPool
      , "timestamp" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOTimestamp
      , "total_value_locked_usd" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOTotalValueLockedUsd
      , "cumulative_supply_side_revenue_usd" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOCumulativeSupplySideRevenueUsd
      , "daily_supply_side_revenue_usd" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTODailySupplySideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOCumulativeProtocolSideRevenueUsd
      , "daily_protocol_side_revenue_usd" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTODailyProtocolSideRevenueUsd
      , "cumulative_total_revenue_usd" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOCumulativeTotalRevenueUsd
      , "daily_total_revenue_usd" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTODailyTotalRevenueUsd
      , "daily_volume_usd" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeUsd
      , "daily_volume_by_token_amount" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenAmount
      , "daily_volume_by_token_usd" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenUsd
      , "cumulative_volume_usd" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeUsd
      , "input_token_balances" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOInputTokenBalances
      , "input_token_weights" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOInputTokenWeights
      , "output_token_supply" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOOutputTokenSupply
      , "output_token_price_usd" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOOutputTokenPriceUsd
      , "staked_output_token_amount" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOStakedOutputTokenAmount
      , "reward_token_emissions_amount" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsAmount
      , "reward_token_emissions_usd" .= cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsUsd
      ]


-- | Construct a value of type 'CURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTO' (by applying it's required fields, if any)
mkCURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTO
  :: CURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTO
mkCURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTO =
  CURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTO
  { cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOEntryTime = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTORecvTime = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOBlockNumber = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOBlockRange = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOId = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOProtocol = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOPool = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOTimestamp = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOTotalValueLockedUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOCumulativeSupplySideRevenueUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTODailySupplySideRevenueUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOCumulativeProtocolSideRevenueUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTODailyProtocolSideRevenueUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOCumulativeTotalRevenueUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTODailyTotalRevenueUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenAmount = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOInputTokenBalances = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOInputTokenWeights = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOOutputTokenSupply = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOOutputTokenPriceUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTOStakedOutputTokenAmount = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsAmount = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsUsd = Nothing
  }

-- ** CURVEFINANCEETHEREUMLiquidityPoolFeeDTO
-- | CURVEFINANCEETHEREUMLiquidityPoolFeeDTO
-- 
data CURVEFINANCEETHEREUMLiquidityPoolFeeDTO = CURVEFINANCEETHEREUMLiquidityPoolFeeDTO
  { cURVEFINANCEETHEREUMLiquidityPoolFeeDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cURVEFINANCEETHEREUMLiquidityPoolFeeDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cURVEFINANCEETHEREUMLiquidityPoolFeeDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cURVEFINANCEETHEREUMLiquidityPoolFeeDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , cURVEFINANCEETHEREUMLiquidityPoolFeeDTOId :: !(Maybe Text) -- ^ "id" - (fee type)-(pool address)
  , cURVEFINANCEETHEREUMLiquidityPoolFeeDTOFeePercentage :: !(Maybe Text) -- ^ "fee_percentage" - Fee as a percentage of the trade (swap) amount. Does not always apply
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CURVEFINANCEETHEREUMLiquidityPoolFeeDTO
instance A.FromJSON CURVEFINANCEETHEREUMLiquidityPoolFeeDTO where
  parseJSON = A.withObject "CURVEFINANCEETHEREUMLiquidityPoolFeeDTO" $ \o ->
    CURVEFINANCEETHEREUMLiquidityPoolFeeDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "fee_percentage")

-- | ToJSON CURVEFINANCEETHEREUMLiquidityPoolFeeDTO
instance A.ToJSON CURVEFINANCEETHEREUMLiquidityPoolFeeDTO where
  toJSON CURVEFINANCEETHEREUMLiquidityPoolFeeDTO {..} =
   _omitNulls
      [ "entry_time" .= cURVEFINANCEETHEREUMLiquidityPoolFeeDTOEntryTime
      , "recv_time" .= cURVEFINANCEETHEREUMLiquidityPoolFeeDTORecvTime
      , "block_number" .= cURVEFINANCEETHEREUMLiquidityPoolFeeDTOBlockNumber
      , "block_range" .= cURVEFINANCEETHEREUMLiquidityPoolFeeDTOBlockRange
      , "id" .= cURVEFINANCEETHEREUMLiquidityPoolFeeDTOId
      , "fee_percentage" .= cURVEFINANCEETHEREUMLiquidityPoolFeeDTOFeePercentage
      ]


-- | Construct a value of type 'CURVEFINANCEETHEREUMLiquidityPoolFeeDTO' (by applying it's required fields, if any)
mkCURVEFINANCEETHEREUMLiquidityPoolFeeDTO
  :: CURVEFINANCEETHEREUMLiquidityPoolFeeDTO
mkCURVEFINANCEETHEREUMLiquidityPoolFeeDTO =
  CURVEFINANCEETHEREUMLiquidityPoolFeeDTO
  { cURVEFINANCEETHEREUMLiquidityPoolFeeDTOEntryTime = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolFeeDTORecvTime = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolFeeDTOBlockNumber = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolFeeDTOBlockRange = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolFeeDTOId = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolFeeDTOFeePercentage = Nothing
  }

-- ** CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO
-- | CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO
-- 
data CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO = CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO
  { cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOId :: !(Maybe Text) -- ^ "id" - (smart contract address of the pool)-(# of hours since unix epoch time)
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - The protocol this snapshot belongs to
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOPool :: !(Maybe Text) -- ^ "pool" - The pool this snapshot belongs to
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this snapshot
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of this pool
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the supply side.
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOHourlySupplySideRevenueUsd :: !(Maybe Text) -- ^ "hourly_supply_side_revenue_usd" - Hourly revenue generated by the liquidity pool, accrued to the supply side.
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the protocol.
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOHourlyProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "hourly_protocol_side_revenue_usd" - Hourly revenue generated by the liquidity pool, accrued to the protocol.
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" - All revenue generated by the liquidity pool.
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOHourlyTotalRevenueUsd :: !(Maybe Text) -- ^ "hourly_total_revenue_usd" - Hourly revenue generated by the liquidity pool.
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeUsd :: !(Maybe Text) -- ^ "hourly_volume_usd" - All trade volume occurred in a given hour, in USD
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenAmount :: !(Maybe [Text]) -- ^ "hourly_volume_by_token_amount" - All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#39;inputTokens&#39; field.
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenUsd :: !(Maybe [Text]) -- ^ "hourly_volume_by_token_usd" - All trade volume occurred in a given hour for a specific input token, in USD. The ordering should be the same as the pool&#39;s &#39;inputTokens&#39; field.
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All historical trade volume occurred in this pool, in USD
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenBalances :: !(Maybe [Text]) -- ^ "input_token_balances" - Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#39;inputTokens&#39; field.
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenWeights :: !(Maybe [Text]) -- ^ "input_token_weights" - Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOOutputTokenSupply :: !(Maybe Text) -- ^ "output_token_supply" - Total supply of output token. Note that certain DEXes don&#39;t have an output token (e.g. Bancor)
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOOutputTokenPriceUsd :: !(Maybe Text) -- ^ "output_token_price_usd" - Price per share of output token in USD
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOStakedOutputTokenAmount :: !(Maybe Text) -- ^ "staked_output_token_amount" - Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsAmount :: !(Maybe [Text]) -- ^ "reward_token_emissions_amount" - Per-block reward token emission as of the current block normalized to a day (not hour), in token&#39;s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsUsd :: !(Maybe [Text]) -- ^ "reward_token_emissions_usd" - Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO
instance A.FromJSON CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO where
  parseJSON = A.withObject "CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO" $ \o ->
    CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "protocol")
      <*> (o .:? "pool")
      <*> (o .:? "timestamp")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "hourly_supply_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "hourly_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "hourly_total_revenue_usd")
      <*> (o .:? "hourly_volume_usd")
      <*> (o .:? "hourly_volume_by_token_amount")
      <*> (o .:? "hourly_volume_by_token_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "input_token_balances")
      <*> (o .:? "input_token_weights")
      <*> (o .:? "output_token_supply")
      <*> (o .:? "output_token_price_usd")
      <*> (o .:? "staked_output_token_amount")
      <*> (o .:? "reward_token_emissions_amount")
      <*> (o .:? "reward_token_emissions_usd")

-- | ToJSON CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO
instance A.ToJSON CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO where
  toJSON CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOEntryTime
      , "recv_time" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTORecvTime
      , "block_number" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOBlockNumber
      , "block_range" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOBlockRange
      , "id" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOId
      , "protocol" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOProtocol
      , "pool" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOPool
      , "timestamp" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOTimestamp
      , "total_value_locked_usd" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOTotalValueLockedUsd
      , "cumulative_supply_side_revenue_usd" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeSupplySideRevenueUsd
      , "hourly_supply_side_revenue_usd" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOHourlySupplySideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeProtocolSideRevenueUsd
      , "hourly_protocol_side_revenue_usd" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOHourlyProtocolSideRevenueUsd
      , "cumulative_total_revenue_usd" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeTotalRevenueUsd
      , "hourly_total_revenue_usd" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOHourlyTotalRevenueUsd
      , "hourly_volume_usd" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeUsd
      , "hourly_volume_by_token_amount" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenAmount
      , "hourly_volume_by_token_usd" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenUsd
      , "cumulative_volume_usd" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeUsd
      , "input_token_balances" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenBalances
      , "input_token_weights" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenWeights
      , "output_token_supply" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOOutputTokenSupply
      , "output_token_price_usd" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOOutputTokenPriceUsd
      , "staked_output_token_amount" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOStakedOutputTokenAmount
      , "reward_token_emissions_amount" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsAmount
      , "reward_token_emissions_usd" .= cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsUsd
      ]


-- | Construct a value of type 'CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO' (by applying it's required fields, if any)
mkCURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO
  :: CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO
mkCURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO =
  CURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTO
  { cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOEntryTime = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTORecvTime = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOBlockNumber = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOBlockRange = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOId = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOProtocol = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOPool = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOTimestamp = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOTotalValueLockedUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeSupplySideRevenueUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOHourlySupplySideRevenueUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeProtocolSideRevenueUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOHourlyProtocolSideRevenueUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeTotalRevenueUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOHourlyTotalRevenueUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenAmount = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenBalances = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenWeights = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOOutputTokenSupply = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOOutputTokenPriceUsd = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTOStakedOutputTokenAmount = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsAmount = Nothing
  , cURVEFINANCEETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsUsd = Nothing
  }

-- ** CURVEFINANCEETHEREUMLpTokenDTO
-- | CURVEFINANCEETHEREUMLpTokenDTO
-- Entity for fetching the pool address from lpToken.
data CURVEFINANCEETHEREUMLpTokenDTO = CURVEFINANCEETHEREUMLpTokenDTO
  { cURVEFINANCEETHEREUMLpTokenDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cURVEFINANCEETHEREUMLpTokenDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cURVEFINANCEETHEREUMLpTokenDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cURVEFINANCEETHEREUMLpTokenDTOId :: !(Maybe Text) -- ^ "id" - Address of the LP Token.
  , cURVEFINANCEETHEREUMLpTokenDTOPoolAddress :: !(Maybe Text) -- ^ "pool_address" - Address of the pool associated with this token.
  , cURVEFINANCEETHEREUMLpTokenDTORegistryAddress :: !(Maybe Text) -- ^ "registry_address" - Address of the registry associated with this token.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CURVEFINANCEETHEREUMLpTokenDTO
instance A.FromJSON CURVEFINANCEETHEREUMLpTokenDTO where
  parseJSON = A.withObject "CURVEFINANCEETHEREUMLpTokenDTO" $ \o ->
    CURVEFINANCEETHEREUMLpTokenDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "pool_address")
      <*> (o .:? "registry_address")

-- | ToJSON CURVEFINANCEETHEREUMLpTokenDTO
instance A.ToJSON CURVEFINANCEETHEREUMLpTokenDTO where
  toJSON CURVEFINANCEETHEREUMLpTokenDTO {..} =
   _omitNulls
      [ "entry_time" .= cURVEFINANCEETHEREUMLpTokenDTOEntryTime
      , "recv_time" .= cURVEFINANCEETHEREUMLpTokenDTORecvTime
      , "block_number" .= cURVEFINANCEETHEREUMLpTokenDTOBlockNumber
      , "id" .= cURVEFINANCEETHEREUMLpTokenDTOId
      , "pool_address" .= cURVEFINANCEETHEREUMLpTokenDTOPoolAddress
      , "registry_address" .= cURVEFINANCEETHEREUMLpTokenDTORegistryAddress
      ]


-- | Construct a value of type 'CURVEFINANCEETHEREUMLpTokenDTO' (by applying it's required fields, if any)
mkCURVEFINANCEETHEREUMLpTokenDTO
  :: CURVEFINANCEETHEREUMLpTokenDTO
mkCURVEFINANCEETHEREUMLpTokenDTO =
  CURVEFINANCEETHEREUMLpTokenDTO
  { cURVEFINANCEETHEREUMLpTokenDTOEntryTime = Nothing
  , cURVEFINANCEETHEREUMLpTokenDTORecvTime = Nothing
  , cURVEFINANCEETHEREUMLpTokenDTOBlockNumber = Nothing
  , cURVEFINANCEETHEREUMLpTokenDTOId = Nothing
  , cURVEFINANCEETHEREUMLpTokenDTOPoolAddress = Nothing
  , cURVEFINANCEETHEREUMLpTokenDTORegistryAddress = Nothing
  }

-- ** CURVEFINANCEETHEREUMRewardTokenDTO
-- | CURVEFINANCEETHEREUMRewardTokenDTO
-- 
data CURVEFINANCEETHEREUMRewardTokenDTO = CURVEFINANCEETHEREUMRewardTokenDTO
  { cURVEFINANCEETHEREUMRewardTokenDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cURVEFINANCEETHEREUMRewardTokenDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cURVEFINANCEETHEREUMRewardTokenDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cURVEFINANCEETHEREUMRewardTokenDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , cURVEFINANCEETHEREUMRewardTokenDTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: (reward token type)-(smart contract address of the reward token)
  , cURVEFINANCEETHEREUMRewardTokenDTOToken :: !(Maybe Text) -- ^ "token" - Reference to the actual token.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CURVEFINANCEETHEREUMRewardTokenDTO
instance A.FromJSON CURVEFINANCEETHEREUMRewardTokenDTO where
  parseJSON = A.withObject "CURVEFINANCEETHEREUMRewardTokenDTO" $ \o ->
    CURVEFINANCEETHEREUMRewardTokenDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "token")

-- | ToJSON CURVEFINANCEETHEREUMRewardTokenDTO
instance A.ToJSON CURVEFINANCEETHEREUMRewardTokenDTO where
  toJSON CURVEFINANCEETHEREUMRewardTokenDTO {..} =
   _omitNulls
      [ "entry_time" .= cURVEFINANCEETHEREUMRewardTokenDTOEntryTime
      , "recv_time" .= cURVEFINANCEETHEREUMRewardTokenDTORecvTime
      , "block_number" .= cURVEFINANCEETHEREUMRewardTokenDTOBlockNumber
      , "block_range" .= cURVEFINANCEETHEREUMRewardTokenDTOBlockRange
      , "id" .= cURVEFINANCEETHEREUMRewardTokenDTOId
      , "token" .= cURVEFINANCEETHEREUMRewardTokenDTOToken
      ]


-- | Construct a value of type 'CURVEFINANCEETHEREUMRewardTokenDTO' (by applying it's required fields, if any)
mkCURVEFINANCEETHEREUMRewardTokenDTO
  :: CURVEFINANCEETHEREUMRewardTokenDTO
mkCURVEFINANCEETHEREUMRewardTokenDTO =
  CURVEFINANCEETHEREUMRewardTokenDTO
  { cURVEFINANCEETHEREUMRewardTokenDTOEntryTime = Nothing
  , cURVEFINANCEETHEREUMRewardTokenDTORecvTime = Nothing
  , cURVEFINANCEETHEREUMRewardTokenDTOBlockNumber = Nothing
  , cURVEFINANCEETHEREUMRewardTokenDTOBlockRange = Nothing
  , cURVEFINANCEETHEREUMRewardTokenDTOId = Nothing
  , cURVEFINANCEETHEREUMRewardTokenDTOToken = Nothing
  }

-- ** CURVEFINANCEETHEREUMSwapDTO
-- | CURVEFINANCEETHEREUMSwapDTO
-- 
data CURVEFINANCEETHEREUMSwapDTO = CURVEFINANCEETHEREUMSwapDTO
  { cURVEFINANCEETHEREUMSwapDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cURVEFINANCEETHEREUMSwapDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cURVEFINANCEETHEREUMSwapDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cURVEFINANCEETHEREUMSwapDTOId :: !(Maybe Text) -- ^ "id" - Swap-(transaction hash)-(log index)
  , cURVEFINANCEETHEREUMSwapDTOHash :: !(Maybe Text) -- ^ "hash" - Transaction hash of the transaction that emitted this event
  , cURVEFINANCEETHEREUMSwapDTOLogIndex :: !(Maybe Int) -- ^ "log_index" - Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0
  , cURVEFINANCEETHEREUMSwapDTOProtocol :: !(Maybe Text) -- ^ "protocol" - The protocol this transaction belongs to
  , cURVEFINANCEETHEREUMSwapDTOTo :: !(Maybe Text) -- ^ "to" - Address that received the tokens
  , cURVEFINANCEETHEREUMSwapDTOFrom :: !(Maybe Text) -- ^ "from" - Address that sent the tokens
  , cURVEFINANCEETHEREUMSwapDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this event
  , cURVEFINANCEETHEREUMSwapDTOTokenIn :: !(Maybe Text) -- ^ "token_in" - Token deposited into pool
  , cURVEFINANCEETHEREUMSwapDTOAmountIn :: !(Maybe Text) -- ^ "amount_in" - Amount of token deposited into pool in native units
  , cURVEFINANCEETHEREUMSwapDTOAmountInUsd :: !(Maybe Text) -- ^ "amount_in_usd" - Amount of token deposited into pool in USD
  , cURVEFINANCEETHEREUMSwapDTOTokenOut :: !(Maybe Text) -- ^ "token_out" - Token withdrawn from pool
  , cURVEFINANCEETHEREUMSwapDTOAmountOut :: !(Maybe Text) -- ^ "amount_out" - Amount of token withdrawn from pool in native units
  , cURVEFINANCEETHEREUMSwapDTOAmountOutUsd :: !(Maybe Text) -- ^ "amount_out_usd" - Amount of token withdrawn from pool in USD
  , cURVEFINANCEETHEREUMSwapDTOPool :: !(Maybe Text) -- ^ "pool" - The pool involving this transaction
  , cURVEFINANCEETHEREUMSwapDTOPoolId :: !(Maybe Text) -- ^ /ReadOnly/ "pool_id"
  , cURVEFINANCEETHEREUMSwapDTOTransactionId :: !(Maybe Text) -- ^ /ReadOnly/ "transaction_id"
  , cURVEFINANCEETHEREUMSwapDTOEvaluatedPrice :: !(Maybe Double) -- ^ /ReadOnly/ "evaluated_price"
  , cURVEFINANCEETHEREUMSwapDTOEvaluatedAmount :: !(Maybe Double) -- ^ /ReadOnly/ "evaluated_amount"
  , cURVEFINANCEETHEREUMSwapDTOEvaluatedAggressor :: !(Maybe TransactionsETradeAggressiveSide) -- ^ "evaluated_aggressor"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CURVEFINANCEETHEREUMSwapDTO
instance A.FromJSON CURVEFINANCEETHEREUMSwapDTO where
  parseJSON = A.withObject "CURVEFINANCEETHEREUMSwapDTO" $ \o ->
    CURVEFINANCEETHEREUMSwapDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "hash")
      <*> (o .:? "log_index")
      <*> (o .:? "protocol")
      <*> (o .:? "to")
      <*> (o .:? "from")
      <*> (o .:? "timestamp")
      <*> (o .:? "token_in")
      <*> (o .:? "amount_in")
      <*> (o .:? "amount_in_usd")
      <*> (o .:? "token_out")
      <*> (o .:? "amount_out")
      <*> (o .:? "amount_out_usd")
      <*> (o .:? "pool")
      <*> (o .:? "pool_id")
      <*> (o .:? "transaction_id")
      <*> (o .:? "evaluated_price")
      <*> (o .:? "evaluated_amount")
      <*> (o .:? "evaluated_aggressor")

-- | ToJSON CURVEFINANCEETHEREUMSwapDTO
instance A.ToJSON CURVEFINANCEETHEREUMSwapDTO where
  toJSON CURVEFINANCEETHEREUMSwapDTO {..} =
   _omitNulls
      [ "entry_time" .= cURVEFINANCEETHEREUMSwapDTOEntryTime
      , "recv_time" .= cURVEFINANCEETHEREUMSwapDTORecvTime
      , "block_number" .= cURVEFINANCEETHEREUMSwapDTOBlockNumber
      , "id" .= cURVEFINANCEETHEREUMSwapDTOId
      , "hash" .= cURVEFINANCEETHEREUMSwapDTOHash
      , "log_index" .= cURVEFINANCEETHEREUMSwapDTOLogIndex
      , "protocol" .= cURVEFINANCEETHEREUMSwapDTOProtocol
      , "to" .= cURVEFINANCEETHEREUMSwapDTOTo
      , "from" .= cURVEFINANCEETHEREUMSwapDTOFrom
      , "timestamp" .= cURVEFINANCEETHEREUMSwapDTOTimestamp
      , "token_in" .= cURVEFINANCEETHEREUMSwapDTOTokenIn
      , "amount_in" .= cURVEFINANCEETHEREUMSwapDTOAmountIn
      , "amount_in_usd" .= cURVEFINANCEETHEREUMSwapDTOAmountInUsd
      , "token_out" .= cURVEFINANCEETHEREUMSwapDTOTokenOut
      , "amount_out" .= cURVEFINANCEETHEREUMSwapDTOAmountOut
      , "amount_out_usd" .= cURVEFINANCEETHEREUMSwapDTOAmountOutUsd
      , "pool" .= cURVEFINANCEETHEREUMSwapDTOPool
      , "pool_id" .= cURVEFINANCEETHEREUMSwapDTOPoolId
      , "transaction_id" .= cURVEFINANCEETHEREUMSwapDTOTransactionId
      , "evaluated_price" .= cURVEFINANCEETHEREUMSwapDTOEvaluatedPrice
      , "evaluated_amount" .= cURVEFINANCEETHEREUMSwapDTOEvaluatedAmount
      , "evaluated_aggressor" .= cURVEFINANCEETHEREUMSwapDTOEvaluatedAggressor
      ]


-- | Construct a value of type 'CURVEFINANCEETHEREUMSwapDTO' (by applying it's required fields, if any)
mkCURVEFINANCEETHEREUMSwapDTO
  :: CURVEFINANCEETHEREUMSwapDTO
mkCURVEFINANCEETHEREUMSwapDTO =
  CURVEFINANCEETHEREUMSwapDTO
  { cURVEFINANCEETHEREUMSwapDTOEntryTime = Nothing
  , cURVEFINANCEETHEREUMSwapDTORecvTime = Nothing
  , cURVEFINANCEETHEREUMSwapDTOBlockNumber = Nothing
  , cURVEFINANCEETHEREUMSwapDTOId = Nothing
  , cURVEFINANCEETHEREUMSwapDTOHash = Nothing
  , cURVEFINANCEETHEREUMSwapDTOLogIndex = Nothing
  , cURVEFINANCEETHEREUMSwapDTOProtocol = Nothing
  , cURVEFINANCEETHEREUMSwapDTOTo = Nothing
  , cURVEFINANCEETHEREUMSwapDTOFrom = Nothing
  , cURVEFINANCEETHEREUMSwapDTOTimestamp = Nothing
  , cURVEFINANCEETHEREUMSwapDTOTokenIn = Nothing
  , cURVEFINANCEETHEREUMSwapDTOAmountIn = Nothing
  , cURVEFINANCEETHEREUMSwapDTOAmountInUsd = Nothing
  , cURVEFINANCEETHEREUMSwapDTOTokenOut = Nothing
  , cURVEFINANCEETHEREUMSwapDTOAmountOut = Nothing
  , cURVEFINANCEETHEREUMSwapDTOAmountOutUsd = Nothing
  , cURVEFINANCEETHEREUMSwapDTOPool = Nothing
  , cURVEFINANCEETHEREUMSwapDTOPoolId = Nothing
  , cURVEFINANCEETHEREUMSwapDTOTransactionId = Nothing
  , cURVEFINANCEETHEREUMSwapDTOEvaluatedPrice = Nothing
  , cURVEFINANCEETHEREUMSwapDTOEvaluatedAmount = Nothing
  , cURVEFINANCEETHEREUMSwapDTOEvaluatedAggressor = Nothing
  }

-- ** CURVEFINANCEETHEREUMTokenDTO
-- | CURVEFINANCEETHEREUMTokenDTO
-- 
data CURVEFINANCEETHEREUMTokenDTO = CURVEFINANCEETHEREUMTokenDTO
  { cURVEFINANCEETHEREUMTokenDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cURVEFINANCEETHEREUMTokenDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cURVEFINANCEETHEREUMTokenDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cURVEFINANCEETHEREUMTokenDTOVid :: !(Maybe Integer) -- ^ "vid" - 
  , cURVEFINANCEETHEREUMTokenDTOId :: !(Maybe Text) -- ^ "id" - Smart contract address of the token
  , cURVEFINANCEETHEREUMTokenDTOName :: !(Maybe Text) -- ^ "name" - Name of the token, mirrored from the smart contract
  , cURVEFINANCEETHEREUMTokenDTOSymbol :: !(Maybe Text) -- ^ "symbol" - Symbol of the token, mirrored from the smart contract
  , cURVEFINANCEETHEREUMTokenDTODecimals :: !(Maybe Int) -- ^ "decimals" - The number of decimal places this token uses, default to 18
  , cURVEFINANCEETHEREUMTokenDTOLastPriceUsd :: !(Maybe Text) -- ^ "last_price_usd" - Optional field to track the price of a token
  , cURVEFINANCEETHEREUMTokenDTOLastPriceBlockNumber :: !(Maybe Text) -- ^ "last_price_block_number" - Optional field to track the block number of the last token price 
  , cURVEFINANCEETHEREUMTokenDTOTokenSymbol :: !(Maybe Text) -- ^ /ReadOnly/ "token_symbol"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CURVEFINANCEETHEREUMTokenDTO
instance A.FromJSON CURVEFINANCEETHEREUMTokenDTO where
  parseJSON = A.withObject "CURVEFINANCEETHEREUMTokenDTO" $ \o ->
    CURVEFINANCEETHEREUMTokenDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "id")
      <*> (o .:? "name")
      <*> (o .:? "symbol")
      <*> (o .:? "decimals")
      <*> (o .:? "last_price_usd")
      <*> (o .:? "last_price_block_number")
      <*> (o .:? "token_symbol")

-- | ToJSON CURVEFINANCEETHEREUMTokenDTO
instance A.ToJSON CURVEFINANCEETHEREUMTokenDTO where
  toJSON CURVEFINANCEETHEREUMTokenDTO {..} =
   _omitNulls
      [ "entry_time" .= cURVEFINANCEETHEREUMTokenDTOEntryTime
      , "recv_time" .= cURVEFINANCEETHEREUMTokenDTORecvTime
      , "block_number" .= cURVEFINANCEETHEREUMTokenDTOBlockNumber
      , "vid" .= cURVEFINANCEETHEREUMTokenDTOVid
      , "id" .= cURVEFINANCEETHEREUMTokenDTOId
      , "name" .= cURVEFINANCEETHEREUMTokenDTOName
      , "symbol" .= cURVEFINANCEETHEREUMTokenDTOSymbol
      , "decimals" .= cURVEFINANCEETHEREUMTokenDTODecimals
      , "last_price_usd" .= cURVEFINANCEETHEREUMTokenDTOLastPriceUsd
      , "last_price_block_number" .= cURVEFINANCEETHEREUMTokenDTOLastPriceBlockNumber
      , "token_symbol" .= cURVEFINANCEETHEREUMTokenDTOTokenSymbol
      ]


-- | Construct a value of type 'CURVEFINANCEETHEREUMTokenDTO' (by applying it's required fields, if any)
mkCURVEFINANCEETHEREUMTokenDTO
  :: CURVEFINANCEETHEREUMTokenDTO
mkCURVEFINANCEETHEREUMTokenDTO =
  CURVEFINANCEETHEREUMTokenDTO
  { cURVEFINANCEETHEREUMTokenDTOEntryTime = Nothing
  , cURVEFINANCEETHEREUMTokenDTORecvTime = Nothing
  , cURVEFINANCEETHEREUMTokenDTOBlockNumber = Nothing
  , cURVEFINANCEETHEREUMTokenDTOVid = Nothing
  , cURVEFINANCEETHEREUMTokenDTOId = Nothing
  , cURVEFINANCEETHEREUMTokenDTOName = Nothing
  , cURVEFINANCEETHEREUMTokenDTOSymbol = Nothing
  , cURVEFINANCEETHEREUMTokenDTODecimals = Nothing
  , cURVEFINANCEETHEREUMTokenDTOLastPriceUsd = Nothing
  , cURVEFINANCEETHEREUMTokenDTOLastPriceBlockNumber = Nothing
  , cURVEFINANCEETHEREUMTokenDTOTokenSymbol = Nothing
  }

-- ** CURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTO
-- | CURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTO
-- 
data CURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTO = CURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTO
  { cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTOId :: !(Maybe Text) -- ^ "id" - ID is # of days since Unix epoch time
  , cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - Protocol this snapshot is associated with
  , cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTODailyActiveUsers :: !(Maybe Int) -- ^ "daily_active_users" - Number of unique daily active users
  , cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTOCumulativeUniqueUsers :: !(Maybe Int) -- ^ "cumulative_unique_users" - Number of cumulative unique users
  , cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTODailyTransactionCount :: !(Maybe Int) -- ^ "daily_transaction_count" - Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface
  , cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTODailyDepositCount :: !(Maybe Int) -- ^ "daily_deposit_count" - Total number of deposits (add liquidity) in a day
  , cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTODailyWithdrawCount :: !(Maybe Int) -- ^ "daily_withdraw_count" - Total number of withdrawals (remove liquidity) in a day
  , cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTODailySwapCount :: !(Maybe Int) -- ^ "daily_swap_count" - Total number of trades (swaps) in a day
  , cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTOTotalPoolCount :: !(Maybe Int) -- ^ "total_pool_count" - Total number of pools
  , cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this snapshot
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTO
instance A.FromJSON CURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTO where
  parseJSON = A.withObject "CURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTO" $ \o ->
    CURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "protocol")
      <*> (o .:? "daily_active_users")
      <*> (o .:? "cumulative_unique_users")
      <*> (o .:? "daily_transaction_count")
      <*> (o .:? "daily_deposit_count")
      <*> (o .:? "daily_withdraw_count")
      <*> (o .:? "daily_swap_count")
      <*> (o .:? "total_pool_count")
      <*> (o .:? "timestamp")

-- | ToJSON CURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTO
instance A.ToJSON CURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTO where
  toJSON CURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTOEntryTime
      , "recv_time" .= cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTORecvTime
      , "block_number" .= cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTOBlockNumber
      , "id" .= cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTOId
      , "protocol" .= cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTOProtocol
      , "daily_active_users" .= cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTODailyActiveUsers
      , "cumulative_unique_users" .= cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTOCumulativeUniqueUsers
      , "daily_transaction_count" .= cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTODailyTransactionCount
      , "daily_deposit_count" .= cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTODailyDepositCount
      , "daily_withdraw_count" .= cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTODailyWithdrawCount
      , "daily_swap_count" .= cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTODailySwapCount
      , "total_pool_count" .= cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTOTotalPoolCount
      , "timestamp" .= cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'CURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTO' (by applying it's required fields, if any)
mkCURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTO
  :: CURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTO
mkCURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTO =
  CURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTO
  { cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTOEntryTime = Nothing
  , cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTORecvTime = Nothing
  , cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTOBlockNumber = Nothing
  , cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTOId = Nothing
  , cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTOProtocol = Nothing
  , cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTODailyActiveUsers = Nothing
  , cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTOCumulativeUniqueUsers = Nothing
  , cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTODailyTransactionCount = Nothing
  , cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTODailyDepositCount = Nothing
  , cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTODailyWithdrawCount = Nothing
  , cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTODailySwapCount = Nothing
  , cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTOTotalPoolCount = Nothing
  , cURVEFINANCEETHEREUMUsageMetricsDailySnapshotDTOTimestamp = Nothing
  }

-- ** CURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTO
-- | CURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTO
-- 
data CURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTO = CURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTO
  { cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOId :: !(Maybe Text) -- ^ "id" - ID is # of days since Unix epoch time
  , cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - Protocol this snapshot is associated with
  , cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOHourlyActiveUsers :: !(Maybe Int) -- ^ "hourly_active_users" - Number of unique daily active users
  , cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOCumulativeUniqueUsers :: !(Maybe Int) -- ^ "cumulative_unique_users" - Number of cumulative unique users
  , cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOHourlyTransactionCount :: !(Maybe Int) -- ^ "hourly_transaction_count" - Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface.
  , cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOHourlyDepositCount :: !(Maybe Int) -- ^ "hourly_deposit_count" - Total number of deposits (add liquidity) in an hour
  , cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOHourlyWithdrawCount :: !(Maybe Int) -- ^ "hourly_withdraw_count" - Total number of withdrawals (remove liquidity) in an hour
  , cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOHourlySwapCount :: !(Maybe Int) -- ^ "hourly_swap_count" - Total number of trades (swaps) in an hour
  , cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this snapshot
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTO
instance A.FromJSON CURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTO where
  parseJSON = A.withObject "CURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTO" $ \o ->
    CURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "protocol")
      <*> (o .:? "hourly_active_users")
      <*> (o .:? "cumulative_unique_users")
      <*> (o .:? "hourly_transaction_count")
      <*> (o .:? "hourly_deposit_count")
      <*> (o .:? "hourly_withdraw_count")
      <*> (o .:? "hourly_swap_count")
      <*> (o .:? "timestamp")

-- | ToJSON CURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTO
instance A.ToJSON CURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTO where
  toJSON CURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOEntryTime
      , "recv_time" .= cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTORecvTime
      , "block_number" .= cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOBlockNumber
      , "block_range" .= cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOBlockRange
      , "id" .= cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOId
      , "protocol" .= cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOProtocol
      , "hourly_active_users" .= cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOHourlyActiveUsers
      , "cumulative_unique_users" .= cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOCumulativeUniqueUsers
      , "hourly_transaction_count" .= cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOHourlyTransactionCount
      , "hourly_deposit_count" .= cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOHourlyDepositCount
      , "hourly_withdraw_count" .= cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOHourlyWithdrawCount
      , "hourly_swap_count" .= cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOHourlySwapCount
      , "timestamp" .= cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'CURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTO' (by applying it's required fields, if any)
mkCURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTO
  :: CURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTO
mkCURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTO =
  CURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTO
  { cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOEntryTime = Nothing
  , cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTORecvTime = Nothing
  , cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOBlockNumber = Nothing
  , cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOBlockRange = Nothing
  , cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOId = Nothing
  , cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOProtocol = Nothing
  , cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOHourlyActiveUsers = Nothing
  , cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOCumulativeUniqueUsers = Nothing
  , cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOHourlyTransactionCount = Nothing
  , cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOHourlyDepositCount = Nothing
  , cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOHourlyWithdrawCount = Nothing
  , cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOHourlySwapCount = Nothing
  , cURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTOTimestamp = Nothing
  }

-- ** CURVEFINANCEETHEREUMWithdrawDTO
-- | CURVEFINANCEETHEREUMWithdrawDTO
-- Remove liquidity events.
data CURVEFINANCEETHEREUMWithdrawDTO = CURVEFINANCEETHEREUMWithdrawDTO
  { cURVEFINANCEETHEREUMWithdrawDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , cURVEFINANCEETHEREUMWithdrawDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , cURVEFINANCEETHEREUMWithdrawDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , cURVEFINANCEETHEREUMWithdrawDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , cURVEFINANCEETHEREUMWithdrawDTOId :: !(Maybe Text) -- ^ "id" - withdraw-(transaction hash)-(log index)
  , cURVEFINANCEETHEREUMWithdrawDTOHash :: !(Maybe Text) -- ^ "hash" - Transaction hash of the transaction that emitted this event
  , cURVEFINANCEETHEREUMWithdrawDTOLogIndex :: !(Maybe Int) -- ^ "log_index" - Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0
  , cURVEFINANCEETHEREUMWithdrawDTOProtocol :: !(Maybe Text) -- ^ "protocol" - The protocol this transaction belongs to
  , cURVEFINANCEETHEREUMWithdrawDTOTo :: !(Maybe Text) -- ^ "to" - Address that received the tokens
  , cURVEFINANCEETHEREUMWithdrawDTOFrom :: !(Maybe Text) -- ^ "from" - Address that sent the tokens
  , cURVEFINANCEETHEREUMWithdrawDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this event
  , cURVEFINANCEETHEREUMWithdrawDTOInputTokens :: !(Maybe [Text]) -- ^ "input_tokens" - Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool
  , cURVEFINANCEETHEREUMWithdrawDTOOutputToken :: !(Maybe Text) -- ^ "output_token" - Output token of the pool (not output token of the event/transaction). E.g. the UNI-LP token
  , cURVEFINANCEETHEREUMWithdrawDTOInputTokenAmounts :: !(Maybe [Text]) -- ^ "input_token_amounts" - Amount of input tokens in the token&#39;s native unit
  , cURVEFINANCEETHEREUMWithdrawDTOOutputTokenAmount :: !(Maybe Text) -- ^ "output_token_amount" - Amount of output tokens in the token&#39;s native unit
  , cURVEFINANCEETHEREUMWithdrawDTOAmountUsd :: !(Maybe Text) -- ^ "amount_usd" - USD-normalized value of the transaction of the underlying (e.g. sum of tokens withdrawn from a pool)
  , cURVEFINANCEETHEREUMWithdrawDTOPool :: !(Maybe Text) -- ^ "pool" - The pool involving this transaction
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CURVEFINANCEETHEREUMWithdrawDTO
instance A.FromJSON CURVEFINANCEETHEREUMWithdrawDTO where
  parseJSON = A.withObject "CURVEFINANCEETHEREUMWithdrawDTO" $ \o ->
    CURVEFINANCEETHEREUMWithdrawDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "hash")
      <*> (o .:? "log_index")
      <*> (o .:? "protocol")
      <*> (o .:? "to")
      <*> (o .:? "from")
      <*> (o .:? "timestamp")
      <*> (o .:? "input_tokens")
      <*> (o .:? "output_token")
      <*> (o .:? "input_token_amounts")
      <*> (o .:? "output_token_amount")
      <*> (o .:? "amount_usd")
      <*> (o .:? "pool")

-- | ToJSON CURVEFINANCEETHEREUMWithdrawDTO
instance A.ToJSON CURVEFINANCEETHEREUMWithdrawDTO where
  toJSON CURVEFINANCEETHEREUMWithdrawDTO {..} =
   _omitNulls
      [ "entry_time" .= cURVEFINANCEETHEREUMWithdrawDTOEntryTime
      , "recv_time" .= cURVEFINANCEETHEREUMWithdrawDTORecvTime
      , "block_number" .= cURVEFINANCEETHEREUMWithdrawDTOBlockNumber
      , "block_range" .= cURVEFINANCEETHEREUMWithdrawDTOBlockRange
      , "id" .= cURVEFINANCEETHEREUMWithdrawDTOId
      , "hash" .= cURVEFINANCEETHEREUMWithdrawDTOHash
      , "log_index" .= cURVEFINANCEETHEREUMWithdrawDTOLogIndex
      , "protocol" .= cURVEFINANCEETHEREUMWithdrawDTOProtocol
      , "to" .= cURVEFINANCEETHEREUMWithdrawDTOTo
      , "from" .= cURVEFINANCEETHEREUMWithdrawDTOFrom
      , "timestamp" .= cURVEFINANCEETHEREUMWithdrawDTOTimestamp
      , "input_tokens" .= cURVEFINANCEETHEREUMWithdrawDTOInputTokens
      , "output_token" .= cURVEFINANCEETHEREUMWithdrawDTOOutputToken
      , "input_token_amounts" .= cURVEFINANCEETHEREUMWithdrawDTOInputTokenAmounts
      , "output_token_amount" .= cURVEFINANCEETHEREUMWithdrawDTOOutputTokenAmount
      , "amount_usd" .= cURVEFINANCEETHEREUMWithdrawDTOAmountUsd
      , "pool" .= cURVEFINANCEETHEREUMWithdrawDTOPool
      ]


-- | Construct a value of type 'CURVEFINANCEETHEREUMWithdrawDTO' (by applying it's required fields, if any)
mkCURVEFINANCEETHEREUMWithdrawDTO
  :: CURVEFINANCEETHEREUMWithdrawDTO
mkCURVEFINANCEETHEREUMWithdrawDTO =
  CURVEFINANCEETHEREUMWithdrawDTO
  { cURVEFINANCEETHEREUMWithdrawDTOEntryTime = Nothing
  , cURVEFINANCEETHEREUMWithdrawDTORecvTime = Nothing
  , cURVEFINANCEETHEREUMWithdrawDTOBlockNumber = Nothing
  , cURVEFINANCEETHEREUMWithdrawDTOBlockRange = Nothing
  , cURVEFINANCEETHEREUMWithdrawDTOId = Nothing
  , cURVEFINANCEETHEREUMWithdrawDTOHash = Nothing
  , cURVEFINANCEETHEREUMWithdrawDTOLogIndex = Nothing
  , cURVEFINANCEETHEREUMWithdrawDTOProtocol = Nothing
  , cURVEFINANCEETHEREUMWithdrawDTOTo = Nothing
  , cURVEFINANCEETHEREUMWithdrawDTOFrom = Nothing
  , cURVEFINANCEETHEREUMWithdrawDTOTimestamp = Nothing
  , cURVEFINANCEETHEREUMWithdrawDTOInputTokens = Nothing
  , cURVEFINANCEETHEREUMWithdrawDTOOutputToken = Nothing
  , cURVEFINANCEETHEREUMWithdrawDTOInputTokenAmounts = Nothing
  , cURVEFINANCEETHEREUMWithdrawDTOOutputTokenAmount = Nothing
  , cURVEFINANCEETHEREUMWithdrawDTOAmountUsd = Nothing
  , cURVEFINANCEETHEREUMWithdrawDTOPool = Nothing
  }

-- ** PANCAKESWAPV3ETHEREUMAccountDTO
-- | PANCAKESWAPV3ETHEREUMAccountDTO
data PANCAKESWAPV3ETHEREUMAccountDTO = PANCAKESWAPV3ETHEREUMAccountDTO
  { pANCAKESWAPV3ETHEREUMAccountDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , pANCAKESWAPV3ETHEREUMAccountDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , pANCAKESWAPV3ETHEREUMAccountDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , pANCAKESWAPV3ETHEREUMAccountDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , pANCAKESWAPV3ETHEREUMAccountDTOId :: !(Maybe Text) -- ^ "id" - Account address.
  , pANCAKESWAPV3ETHEREUMAccountDTOPositionCount :: !(Maybe Int) -- ^ "position_count" - Number of positions this account has.
  , pANCAKESWAPV3ETHEREUMAccountDTOOpenPositionCount :: !(Maybe Int) -- ^ "open_position_count" - Number of open positions this account has.
  , pANCAKESWAPV3ETHEREUMAccountDTOClosedPositionCount :: !(Maybe Int) -- ^ "closed_position_count" - Number of closed positions this account has.
  , pANCAKESWAPV3ETHEREUMAccountDTODepositCount :: !(Maybe Int) -- ^ "deposit_count" - Number of deposits this account made.
  , pANCAKESWAPV3ETHEREUMAccountDTOWithdrawCount :: !(Maybe Int) -- ^ "withdraw_count" - Number of withdrawals this account made.
  , pANCAKESWAPV3ETHEREUMAccountDTOSwapCount :: !(Maybe Int) -- ^ "swap_count" - Number of times this account has traded/swapped.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON PANCAKESWAPV3ETHEREUMAccountDTO
instance A.FromJSON PANCAKESWAPV3ETHEREUMAccountDTO where
  parseJSON = A.withObject "PANCAKESWAPV3ETHEREUMAccountDTO" $ \o ->
    PANCAKESWAPV3ETHEREUMAccountDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "position_count")
      <*> (o .:? "open_position_count")
      <*> (o .:? "closed_position_count")
      <*> (o .:? "deposit_count")
      <*> (o .:? "withdraw_count")
      <*> (o .:? "swap_count")

-- | ToJSON PANCAKESWAPV3ETHEREUMAccountDTO
instance A.ToJSON PANCAKESWAPV3ETHEREUMAccountDTO where
  toJSON PANCAKESWAPV3ETHEREUMAccountDTO {..} =
   _omitNulls
      [ "entry_time" .= pANCAKESWAPV3ETHEREUMAccountDTOEntryTime
      , "recv_time" .= pANCAKESWAPV3ETHEREUMAccountDTORecvTime
      , "block_number" .= pANCAKESWAPV3ETHEREUMAccountDTOBlockNumber
      , "block_range" .= pANCAKESWAPV3ETHEREUMAccountDTOBlockRange
      , "id" .= pANCAKESWAPV3ETHEREUMAccountDTOId
      , "position_count" .= pANCAKESWAPV3ETHEREUMAccountDTOPositionCount
      , "open_position_count" .= pANCAKESWAPV3ETHEREUMAccountDTOOpenPositionCount
      , "closed_position_count" .= pANCAKESWAPV3ETHEREUMAccountDTOClosedPositionCount
      , "deposit_count" .= pANCAKESWAPV3ETHEREUMAccountDTODepositCount
      , "withdraw_count" .= pANCAKESWAPV3ETHEREUMAccountDTOWithdrawCount
      , "swap_count" .= pANCAKESWAPV3ETHEREUMAccountDTOSwapCount
      ]


-- | Construct a value of type 'PANCAKESWAPV3ETHEREUMAccountDTO' (by applying it's required fields, if any)
mkPANCAKESWAPV3ETHEREUMAccountDTO
  :: PANCAKESWAPV3ETHEREUMAccountDTO
mkPANCAKESWAPV3ETHEREUMAccountDTO =
  PANCAKESWAPV3ETHEREUMAccountDTO
  { pANCAKESWAPV3ETHEREUMAccountDTOEntryTime = Nothing
  , pANCAKESWAPV3ETHEREUMAccountDTORecvTime = Nothing
  , pANCAKESWAPV3ETHEREUMAccountDTOBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMAccountDTOBlockRange = Nothing
  , pANCAKESWAPV3ETHEREUMAccountDTOId = Nothing
  , pANCAKESWAPV3ETHEREUMAccountDTOPositionCount = Nothing
  , pANCAKESWAPV3ETHEREUMAccountDTOOpenPositionCount = Nothing
  , pANCAKESWAPV3ETHEREUMAccountDTOClosedPositionCount = Nothing
  , pANCAKESWAPV3ETHEREUMAccountDTODepositCount = Nothing
  , pANCAKESWAPV3ETHEREUMAccountDTOWithdrawCount = Nothing
  , pANCAKESWAPV3ETHEREUMAccountDTOSwapCount = Nothing
  }

-- ** PANCAKESWAPV3ETHEREUMActiveAccountDTO
-- | PANCAKESWAPV3ETHEREUMActiveAccountDTO
-- Entity for calculating daily/hourly active users.
data PANCAKESWAPV3ETHEREUMActiveAccountDTO = PANCAKESWAPV3ETHEREUMActiveAccountDTO
  { pANCAKESWAPV3ETHEREUMActiveAccountDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , pANCAKESWAPV3ETHEREUMActiveAccountDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , pANCAKESWAPV3ETHEREUMActiveAccountDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , pANCAKESWAPV3ETHEREUMActiveAccountDTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: (daily/hourly)-(address of the account)-(days/hours since unix epoch)
  , pANCAKESWAPV3ETHEREUMActiveAccountDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON PANCAKESWAPV3ETHEREUMActiveAccountDTO
instance A.FromJSON PANCAKESWAPV3ETHEREUMActiveAccountDTO where
  parseJSON = A.withObject "PANCAKESWAPV3ETHEREUMActiveAccountDTO" $ \o ->
    PANCAKESWAPV3ETHEREUMActiveAccountDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "block_range")

-- | ToJSON PANCAKESWAPV3ETHEREUMActiveAccountDTO
instance A.ToJSON PANCAKESWAPV3ETHEREUMActiveAccountDTO where
  toJSON PANCAKESWAPV3ETHEREUMActiveAccountDTO {..} =
   _omitNulls
      [ "entry_time" .= pANCAKESWAPV3ETHEREUMActiveAccountDTOEntryTime
      , "recv_time" .= pANCAKESWAPV3ETHEREUMActiveAccountDTORecvTime
      , "block_number" .= pANCAKESWAPV3ETHEREUMActiveAccountDTOBlockNumber
      , "id" .= pANCAKESWAPV3ETHEREUMActiveAccountDTOId
      , "block_range" .= pANCAKESWAPV3ETHEREUMActiveAccountDTOBlockRange
      ]


-- | Construct a value of type 'PANCAKESWAPV3ETHEREUMActiveAccountDTO' (by applying it's required fields, if any)
mkPANCAKESWAPV3ETHEREUMActiveAccountDTO
  :: PANCAKESWAPV3ETHEREUMActiveAccountDTO
mkPANCAKESWAPV3ETHEREUMActiveAccountDTO =
  PANCAKESWAPV3ETHEREUMActiveAccountDTO
  { pANCAKESWAPV3ETHEREUMActiveAccountDTOEntryTime = Nothing
  , pANCAKESWAPV3ETHEREUMActiveAccountDTORecvTime = Nothing
  , pANCAKESWAPV3ETHEREUMActiveAccountDTOBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMActiveAccountDTOId = Nothing
  , pANCAKESWAPV3ETHEREUMActiveAccountDTOBlockRange = Nothing
  }

-- ** PANCAKESWAPV3ETHEREUMDepositDTO
-- | PANCAKESWAPV3ETHEREUMDepositDTO
-- Entity represents a user action in the protocol involving the addition of funds to a liquidity pool.
data PANCAKESWAPV3ETHEREUMDepositDTO = PANCAKESWAPV3ETHEREUMDepositDTO
  { pANCAKESWAPV3ETHEREUMDepositDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , pANCAKESWAPV3ETHEREUMDepositDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , pANCAKESWAPV3ETHEREUMDepositDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , pANCAKESWAPV3ETHEREUMDepositDTOBlock :: !(Maybe Int) -- ^ "block_" - 
  , pANCAKESWAPV3ETHEREUMDepositDTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: (transaction hash)-(log index)
  , pANCAKESWAPV3ETHEREUMDepositDTOHash :: !(Maybe Text) -- ^ "hash" - Transaction hash of the transaction that emitted this event.
  , pANCAKESWAPV3ETHEREUMDepositDTONonce :: !(Maybe Text) -- ^ "nonce" - Nonce of the transaction that emitted this event.
  , pANCAKESWAPV3ETHEREUMDepositDTOLogIndex :: !(Maybe Int) -- ^ "log_index" - Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0.
  , pANCAKESWAPV3ETHEREUMDepositDTOGasLimit :: !(Maybe Text) -- ^ "gas_limit" - Gas limit of the transaction that emitted this event.
  , pANCAKESWAPV3ETHEREUMDepositDTOGasUsed :: !(Maybe Text) -- ^ "gas_used" - Gas used in this transaction. (Optional because not every chain will support this).
  , pANCAKESWAPV3ETHEREUMDepositDTOGasPrice :: !(Maybe Text) -- ^ "gas_price" - Gas price of the transaction that emitted this event.
  , pANCAKESWAPV3ETHEREUMDepositDTOProtocol :: !(Maybe Text) -- ^ "protocol" - The protocol this transaction belongs to.
  , pANCAKESWAPV3ETHEREUMDepositDTOAccount :: !(Maybe Text) -- ^ "account" - Account that emitted this event.
  , pANCAKESWAPV3ETHEREUMDepositDTOPosition :: !(Maybe Text) -- ^ "position" - The user position changed by this event.
  , pANCAKESWAPV3ETHEREUMDepositDTOPool :: !(Maybe Text) -- ^ "pool" - The pool involving this event.
  , pANCAKESWAPV3ETHEREUMDepositDTOTickLower :: !(Maybe Text) -- ^ "tick_lower" - Lower tick of position.
  , pANCAKESWAPV3ETHEREUMDepositDTOTickUpper :: !(Maybe Text) -- ^ "tick_upper" - Upper tick of position.
  , pANCAKESWAPV3ETHEREUMDepositDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this event.
  , pANCAKESWAPV3ETHEREUMDepositDTOLiquidity :: !(Maybe Text) -- ^ "liquidity" - Amount of liquidity minted.
  , pANCAKESWAPV3ETHEREUMDepositDTOInputTokens :: !(Maybe [Text]) -- ^ "input_tokens" - Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool.
  , pANCAKESWAPV3ETHEREUMDepositDTOInputTokenAmounts :: !(Maybe [Text]) -- ^ "input_token_amounts" - Amount of input tokens in the token&#39;s native unit.
  , pANCAKESWAPV3ETHEREUMDepositDTOReserveAmounts :: !(Maybe [Text]) -- ^ "reserve_amounts" - Amount of input tokens in the liquidity pool.
  , pANCAKESWAPV3ETHEREUMDepositDTOAmountUsd :: !(Maybe Text) -- ^ "amount_usd" - USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool).
  , pANCAKESWAPV3ETHEREUMDepositDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON PANCAKESWAPV3ETHEREUMDepositDTO
instance A.FromJSON PANCAKESWAPV3ETHEREUMDepositDTO where
  parseJSON = A.withObject "PANCAKESWAPV3ETHEREUMDepositDTO" $ \o ->
    PANCAKESWAPV3ETHEREUMDepositDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_")
      <*> (o .:? "id")
      <*> (o .:? "hash")
      <*> (o .:? "nonce")
      <*> (o .:? "log_index")
      <*> (o .:? "gas_limit")
      <*> (o .:? "gas_used")
      <*> (o .:? "gas_price")
      <*> (o .:? "protocol")
      <*> (o .:? "account")
      <*> (o .:? "position")
      <*> (o .:? "pool")
      <*> (o .:? "tick_lower")
      <*> (o .:? "tick_upper")
      <*> (o .:? "timestamp")
      <*> (o .:? "liquidity")
      <*> (o .:? "input_tokens")
      <*> (o .:? "input_token_amounts")
      <*> (o .:? "reserve_amounts")
      <*> (o .:? "amount_usd")
      <*> (o .:? "block_range")

-- | ToJSON PANCAKESWAPV3ETHEREUMDepositDTO
instance A.ToJSON PANCAKESWAPV3ETHEREUMDepositDTO where
  toJSON PANCAKESWAPV3ETHEREUMDepositDTO {..} =
   _omitNulls
      [ "entry_time" .= pANCAKESWAPV3ETHEREUMDepositDTOEntryTime
      , "recv_time" .= pANCAKESWAPV3ETHEREUMDepositDTORecvTime
      , "block_number" .= pANCAKESWAPV3ETHEREUMDepositDTOBlockNumber
      , "block_" .= pANCAKESWAPV3ETHEREUMDepositDTOBlock
      , "id" .= pANCAKESWAPV3ETHEREUMDepositDTOId
      , "hash" .= pANCAKESWAPV3ETHEREUMDepositDTOHash
      , "nonce" .= pANCAKESWAPV3ETHEREUMDepositDTONonce
      , "log_index" .= pANCAKESWAPV3ETHEREUMDepositDTOLogIndex
      , "gas_limit" .= pANCAKESWAPV3ETHEREUMDepositDTOGasLimit
      , "gas_used" .= pANCAKESWAPV3ETHEREUMDepositDTOGasUsed
      , "gas_price" .= pANCAKESWAPV3ETHEREUMDepositDTOGasPrice
      , "protocol" .= pANCAKESWAPV3ETHEREUMDepositDTOProtocol
      , "account" .= pANCAKESWAPV3ETHEREUMDepositDTOAccount
      , "position" .= pANCAKESWAPV3ETHEREUMDepositDTOPosition
      , "pool" .= pANCAKESWAPV3ETHEREUMDepositDTOPool
      , "tick_lower" .= pANCAKESWAPV3ETHEREUMDepositDTOTickLower
      , "tick_upper" .= pANCAKESWAPV3ETHEREUMDepositDTOTickUpper
      , "timestamp" .= pANCAKESWAPV3ETHEREUMDepositDTOTimestamp
      , "liquidity" .= pANCAKESWAPV3ETHEREUMDepositDTOLiquidity
      , "input_tokens" .= pANCAKESWAPV3ETHEREUMDepositDTOInputTokens
      , "input_token_amounts" .= pANCAKESWAPV3ETHEREUMDepositDTOInputTokenAmounts
      , "reserve_amounts" .= pANCAKESWAPV3ETHEREUMDepositDTOReserveAmounts
      , "amount_usd" .= pANCAKESWAPV3ETHEREUMDepositDTOAmountUsd
      , "block_range" .= pANCAKESWAPV3ETHEREUMDepositDTOBlockRange
      ]


-- | Construct a value of type 'PANCAKESWAPV3ETHEREUMDepositDTO' (by applying it's required fields, if any)
mkPANCAKESWAPV3ETHEREUMDepositDTO
  :: PANCAKESWAPV3ETHEREUMDepositDTO
mkPANCAKESWAPV3ETHEREUMDepositDTO =
  PANCAKESWAPV3ETHEREUMDepositDTO
  { pANCAKESWAPV3ETHEREUMDepositDTOEntryTime = Nothing
  , pANCAKESWAPV3ETHEREUMDepositDTORecvTime = Nothing
  , pANCAKESWAPV3ETHEREUMDepositDTOBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMDepositDTOBlock = Nothing
  , pANCAKESWAPV3ETHEREUMDepositDTOId = Nothing
  , pANCAKESWAPV3ETHEREUMDepositDTOHash = Nothing
  , pANCAKESWAPV3ETHEREUMDepositDTONonce = Nothing
  , pANCAKESWAPV3ETHEREUMDepositDTOLogIndex = Nothing
  , pANCAKESWAPV3ETHEREUMDepositDTOGasLimit = Nothing
  , pANCAKESWAPV3ETHEREUMDepositDTOGasUsed = Nothing
  , pANCAKESWAPV3ETHEREUMDepositDTOGasPrice = Nothing
  , pANCAKESWAPV3ETHEREUMDepositDTOProtocol = Nothing
  , pANCAKESWAPV3ETHEREUMDepositDTOAccount = Nothing
  , pANCAKESWAPV3ETHEREUMDepositDTOPosition = Nothing
  , pANCAKESWAPV3ETHEREUMDepositDTOPool = Nothing
  , pANCAKESWAPV3ETHEREUMDepositDTOTickLower = Nothing
  , pANCAKESWAPV3ETHEREUMDepositDTOTickUpper = Nothing
  , pANCAKESWAPV3ETHEREUMDepositDTOTimestamp = Nothing
  , pANCAKESWAPV3ETHEREUMDepositDTOLiquidity = Nothing
  , pANCAKESWAPV3ETHEREUMDepositDTOInputTokens = Nothing
  , pANCAKESWAPV3ETHEREUMDepositDTOInputTokenAmounts = Nothing
  , pANCAKESWAPV3ETHEREUMDepositDTOReserveAmounts = Nothing
  , pANCAKESWAPV3ETHEREUMDepositDTOAmountUsd = Nothing
  , pANCAKESWAPV3ETHEREUMDepositDTOBlockRange = Nothing
  }

-- ** PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO
-- | PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO
--  Decentralized exchange (Dex) automated market maker (Amm) protocol. It's an entity that represents a protocol involving a smart contract that use automated market makers.
data PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO = PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO
  { pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOId :: !(Maybe Text) -- ^ "id" - Smart contract address of the protocol&#39;s main contract (Factory, Registry, etc).
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOName :: !(Maybe Text) -- ^ "name" - Name of the protocol, including version. e.g. Uniswap v3.
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOSlug :: !(Maybe Text) -- ^ "slug" - Slug of protocol, including version. e.g. uniswap-v3.
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOSchemaVersion :: !(Maybe Text) -- ^ "schema_version" - Version of the subgraph schema, in SemVer format (e.g. 1.0.0).
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOSubgraphVersion :: !(Maybe Text) -- ^ "subgraph_version" - Version of the subgraph implementation, in SemVer format (e.g. 1.0.0).
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOMethodologyVersion :: !(Maybe Text) -- ^ "methodology_version" - Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0).
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of the entire protocol.
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOTotalLiquidityUsd :: !(Maybe Text) -- ^ "total_liquidity_usd" - The sum of all active and non-active liquidity in USD for this pool.
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOActiveLiquidityUsd :: !(Maybe Text) -- ^ "active_liquidity_usd" - All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOUncollectedProtocolSideValueUsd :: !(Maybe Text) -- ^ "uncollected_protocol_side_value_usd" - All protocol-side value locking in USD that remains uncollected and unused in the protocol.
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOUncollectedSupplySideValueUsd :: !(Maybe Text) -- ^ "uncollected_supply_side_value_usd" - All supply-side value locking in USD that remains uncollected and unused in the protocol.
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOProtocolControlledValueUsd :: !(Maybe Text) -- ^ "protocol_controlled_value_usd" - Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All historical volume in USD.
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" - All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueUsers :: !(Maybe Int) -- ^ "cumulative_unique_users" - Number of cumulative unique users.
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueLps :: !(Maybe Int) -- ^ "cumulative_unique_l_ps" - Number of cumulative liquidity providers.
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueTraders :: !(Maybe Int) -- ^ "cumulative_unique_traders" - Number of cumulative traders
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOTotalPoolCount :: !(Maybe Int) -- ^ "total_pool_count" - Total number of pools.
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOOpenPositionCount :: !(Maybe Int) -- ^ "open_position_count" - Total number of open positions.
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOCumulativePositionCount :: !(Maybe Int) -- ^ "cumulative_position_count" - Total number of positions (open and closed).
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOLastSnapshotDayId :: !(Maybe Int) -- ^ "last_snapshot_day_id" - Day ID of the most recent daily snapshot.
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOLastUpdateTimestamp :: !(Maybe Text) -- ^ "last_update_timestamp" - Timestamp of the last time this entity was updated
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOLastUpdateBlockNumber :: !(Maybe Text) -- ^ "last_update_block_number" - Block number of the last time this entity was updated.
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTORegenesis :: !(Maybe Bool) -- ^ "regenesis" - This is a boolean to indicate whether or not the pools have been instantiated the were initialized before Optimism regenesis.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO
instance A.FromJSON PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO where
  parseJSON = A.withObject "PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO" $ \o ->
    PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "name")
      <*> (o .:? "slug")
      <*> (o .:? "schema_version")
      <*> (o .:? "subgraph_version")
      <*> (o .:? "methodology_version")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "total_liquidity_usd")
      <*> (o .:? "active_liquidity_usd")
      <*> (o .:? "uncollected_protocol_side_value_usd")
      <*> (o .:? "uncollected_supply_side_value_usd")
      <*> (o .:? "protocol_controlled_value_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "cumulative_unique_users")
      <*> (o .:? "cumulative_unique_l_ps")
      <*> (o .:? "cumulative_unique_traders")
      <*> (o .:? "total_pool_count")
      <*> (o .:? "open_position_count")
      <*> (o .:? "cumulative_position_count")
      <*> (o .:? "last_snapshot_day_id")
      <*> (o .:? "last_update_timestamp")
      <*> (o .:? "last_update_block_number")
      <*> (o .:? "regenesis")

-- | ToJSON PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO
instance A.ToJSON PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO where
  toJSON PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO {..} =
   _omitNulls
      [ "entry_time" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOEntryTime
      , "recv_time" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTORecvTime
      , "block_number" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOBlockNumber
      , "block_range" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOBlockRange
      , "id" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOId
      , "name" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOName
      , "slug" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOSlug
      , "schema_version" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOSchemaVersion
      , "subgraph_version" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOSubgraphVersion
      , "methodology_version" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOMethodologyVersion
      , "total_value_locked_usd" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOTotalValueLockedUsd
      , "total_liquidity_usd" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOTotalLiquidityUsd
      , "active_liquidity_usd" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOActiveLiquidityUsd
      , "uncollected_protocol_side_value_usd" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOUncollectedProtocolSideValueUsd
      , "uncollected_supply_side_value_usd" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOUncollectedSupplySideValueUsd
      , "protocol_controlled_value_usd" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOProtocolControlledValueUsd
      , "cumulative_volume_usd" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOCumulativeVolumeUsd
      , "cumulative_supply_side_revenue_usd" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOCumulativeSupplySideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOCumulativeProtocolSideRevenueUsd
      , "cumulative_total_revenue_usd" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOCumulativeTotalRevenueUsd
      , "cumulative_unique_users" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueUsers
      , "cumulative_unique_l_ps" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueLps
      , "cumulative_unique_traders" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueTraders
      , "total_pool_count" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOTotalPoolCount
      , "open_position_count" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOOpenPositionCount
      , "cumulative_position_count" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOCumulativePositionCount
      , "last_snapshot_day_id" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOLastSnapshotDayId
      , "last_update_timestamp" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOLastUpdateTimestamp
      , "last_update_block_number" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOLastUpdateBlockNumber
      , "regenesis" .= pANCAKESWAPV3ETHEREUMDexAmmProtocolDTORegenesis
      ]


-- | Construct a value of type 'PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO' (by applying it's required fields, if any)
mkPANCAKESWAPV3ETHEREUMDexAmmProtocolDTO
  :: PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO
mkPANCAKESWAPV3ETHEREUMDexAmmProtocolDTO =
  PANCAKESWAPV3ETHEREUMDexAmmProtocolDTO
  { pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOEntryTime = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTORecvTime = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOBlockRange = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOId = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOName = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOSlug = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOSchemaVersion = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOSubgraphVersion = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOMethodologyVersion = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOTotalValueLockedUsd = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOTotalLiquidityUsd = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOActiveLiquidityUsd = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOUncollectedProtocolSideValueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOUncollectedSupplySideValueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOProtocolControlledValueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOCumulativeVolumeUsd = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOCumulativeSupplySideRevenueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOCumulativeProtocolSideRevenueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOCumulativeTotalRevenueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueUsers = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueLps = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueTraders = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOTotalPoolCount = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOOpenPositionCount = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOCumulativePositionCount = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOLastSnapshotDayId = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOLastUpdateTimestamp = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTOLastUpdateBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMDexAmmProtocolDTORegenesis = Nothing
  }

-- ** PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO
-- | PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO
-- Daily financial metrics for PancakeSwap V3.
data PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO = PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO
  { pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOBlockNumber :: !(Maybe Int) -- ^ "block_number" - Block number of when this snapshot was taken/last modified.)
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOId :: !(Maybe Text) -- ^ "id" - ID is # of days since Unix epoch time.
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTODay :: !(Maybe Int) -- ^ "day" - Number of days since Unix epoch time.
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - Protocol this snapshot is associated with.
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of the entire protocol.
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOTotalLiquidityUsd :: !(Maybe Text) -- ^ "total_liquidity_usd" - The sum of all active and non-active liquidity in USD for this pool.
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOActiveLiquidityUsd :: !(Maybe Text) -- ^ "active_liquidity_usd" - All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pool&#39;s current tick.
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOUncollectedProtocolSideValueUsd :: !(Maybe Text) -- ^ "uncollected_protocol_side_value_usd" - All protocol-side value locking in USD that remains uncollected and unused in the protocol.
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOUncollectedSupplySideValueUsd :: !(Maybe Text) -- ^ "uncollected_supply_side_value_usd" - All supply-side value locking in USD that remains uncollected and unused in the protocol.
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOProtocolControlledValueUsd :: !(Maybe Text) -- ^ "protocol_controlled_value_usd" - Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTODailyVolumeUsd :: !(Maybe Text) -- ^ "daily_volume_usd" - All trade volume occurred in a given day, in USD
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All historical trade volume in USD
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTODailySupplySideRevenueUsd :: !(Maybe Text) -- ^ "daily_supply_side_revenue_usd" - Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTODailyProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "daily_protocol_side_revenue_usd" - Gross revenue for the protocol (revenue claimed by the protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - Gross revenue for the protocol (revenue claimed by the protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTODailyTotalRevenueUsd :: !(Maybe Text) -- ^ "daily_total_revenue_usd" - All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" - All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of when this snapshot was taken/last modified (May be taken after the interval has passed).
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO
instance A.FromJSON PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO where
  parseJSON = A.withObject "PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO" $ \o ->
    PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "day")
      <*> (o .:? "protocol")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "total_liquidity_usd")
      <*> (o .:? "active_liquidity_usd")
      <*> (o .:? "uncollected_protocol_side_value_usd")
      <*> (o .:? "uncollected_supply_side_value_usd")
      <*> (o .:? "protocol_controlled_value_usd")
      <*> (o .:? "daily_volume_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "daily_supply_side_revenue_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "daily_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "daily_total_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "timestamp")

-- | ToJSON PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO
instance A.ToJSON PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO where
  toJSON PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOEntryTime
      , "recv_time" .= pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTORecvTime
      , "block_number" .= pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOBlockNumber
      , "id" .= pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOId
      , "day" .= pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTODay
      , "protocol" .= pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOProtocol
      , "total_value_locked_usd" .= pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOTotalValueLockedUsd
      , "total_liquidity_usd" .= pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOTotalLiquidityUsd
      , "active_liquidity_usd" .= pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOActiveLiquidityUsd
      , "uncollected_protocol_side_value_usd" .= pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOUncollectedProtocolSideValueUsd
      , "uncollected_supply_side_value_usd" .= pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOUncollectedSupplySideValueUsd
      , "protocol_controlled_value_usd" .= pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOProtocolControlledValueUsd
      , "daily_volume_usd" .= pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTODailyVolumeUsd
      , "cumulative_volume_usd" .= pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeVolumeUsd
      , "daily_supply_side_revenue_usd" .= pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTODailySupplySideRevenueUsd
      , "cumulative_supply_side_revenue_usd" .= pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeSupplySideRevenueUsd
      , "daily_protocol_side_revenue_usd" .= pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTODailyProtocolSideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeProtocolSideRevenueUsd
      , "daily_total_revenue_usd" .= pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTODailyTotalRevenueUsd
      , "cumulative_total_revenue_usd" .= pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeTotalRevenueUsd
      , "timestamp" .= pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO' (by applying it's required fields, if any)
mkPANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO
  :: PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO
mkPANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO =
  PANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTO
  { pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOEntryTime = Nothing
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTORecvTime = Nothing
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOId = Nothing
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTODay = Nothing
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOProtocol = Nothing
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOTotalValueLockedUsd = Nothing
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOTotalLiquidityUsd = Nothing
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOActiveLiquidityUsd = Nothing
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOUncollectedProtocolSideValueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOUncollectedSupplySideValueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOProtocolControlledValueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTODailyVolumeUsd = Nothing
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeVolumeUsd = Nothing
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTODailySupplySideRevenueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeSupplySideRevenueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTODailyProtocolSideRevenueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeProtocolSideRevenueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTODailyTotalRevenueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeTotalRevenueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMFinancialsDailySnapshotDTOTimestamp = Nothing
  }

-- ** PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO
-- | PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO
-- 
data PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO = PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO
  { pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTOVid :: !(Maybe Integer) -- ^ "vid" - .
  , pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTOId :: !(Maybe Text) -- ^ "id" - Smart contract address of the pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTOInputTokens :: !(Maybe [Text]) -- ^ "input_tokens" - Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTOInputTokenBalances :: !(Maybe [Text]) -- ^ "input_token_balances" - Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTOTokenPrices :: !(Maybe [Text]) -- ^ "token_prices" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO
instance A.FromJSON PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO where
  parseJSON = A.withObject "PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO" $ \o ->
    PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "input_tokens")
      <*> (o .:? "input_token_balances")
      <*> (o .:? "token_prices")

-- | ToJSON PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO
instance A.ToJSON PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO where
  toJSON PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO {..} =
   _omitNulls
      [ "entry_time" .= pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTOEntryTime
      , "recv_time" .= pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTORecvTime
      , "block_number" .= pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTOBlockNumber
      , "vid" .= pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTOVid
      , "block_range" .= pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTOBlockRange
      , "id" .= pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTOId
      , "input_tokens" .= pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTOInputTokens
      , "input_token_balances" .= pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTOInputTokenBalances
      , "token_prices" .= pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTOTokenPrices
      ]


-- | Construct a value of type 'PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO' (by applying it's required fields, if any)
mkPANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO
  :: PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO
mkPANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO =
  PANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTO
  { pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTOEntryTime = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTORecvTime = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTOBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTOVid = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTOBlockRange = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTOId = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTOInputTokens = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTOInputTokenBalances = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolAmountDTOTokenPrices = Nothing
  }

-- ** PANCAKESWAPV3ETHEREUMLiquidityPoolDTO
-- | PANCAKESWAPV3ETHEREUMLiquidityPoolDTO
-- Pool-level metadata.
data PANCAKESWAPV3ETHEREUMLiquidityPoolDTO = PANCAKESWAPV3ETHEREUMLiquidityPoolDTO
  { pANCAKESWAPV3ETHEREUMLiquidityPoolDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOVid :: !(Maybe Integer) -- ^ "vid" - .
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - Block range of the liquidity pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOId :: !(Maybe Text) -- ^ "id" - Smart contract address of the pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOProtocol :: !(Maybe Text) -- ^ "protocol" - Protocol this pool belongs to.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOName :: !(Maybe Text) -- ^ "name" - Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT).
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOSymbol :: !(Maybe Text) -- ^ "symbol" - Symbol of liquidity pool (e.g. 3CRV).
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOLiquidityToken :: !(Maybe Text) -- ^ "liquidity_token" - Token that is to represent ownership of liquidity.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOInputTokens :: !(Maybe [Text]) -- ^ "input_tokens" - Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTORewardTokens :: !(Maybe [Text]) -- ^ "reward_tokens" - Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOFees :: !(Maybe [Text]) -- ^ "fees" - Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee.).
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOIsSingleSided :: !(Maybe Bool) -- ^ "is_single_sided" - Specifies whether this pool is single-sided (e.g. Bancor, Platypus&#39;s Alternative Pool). The specifics of the implementation depends on the protocol.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCreatedTimestamp :: !(Maybe Text) -- ^ "created_timestamp" - Timestamp when the liquidity pool was created.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCreatedBlockNumber :: !(Maybe Text) -- ^ "created_block_number" - Block number when the liquidity pool was created.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOTick :: !(Maybe Text) -- ^ "tick" - Current tick representing the price of token0/token1.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of this pool in USD.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOTotalLiquidity :: !(Maybe Text) -- ^ "total_liquidity" - Sum of all active and non-active liquidity for this pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOTotalLiquidityUsd :: !(Maybe Text) -- ^ "total_liquidity_usd" - Sum of all active and non-active liquidity in USD for this pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOActiveLiquidity :: !(Maybe Text) -- ^ "active_liquidity" - All liquidity &#x60;k&#x60; that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOActiveLiquidityUsd :: !(Maybe Text) -- ^ "active_liquidity_usd" - All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOUncollectedProtocolSideTokenAmounts :: !(Maybe [Text]) -- ^ "uncollected_protocol_side_token_amounts" - All protocol-side value locked in token amounts that remains uncollected and unused in the pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOUncollectedProtocolSideValuesUsd :: !(Maybe [Text]) -- ^ "uncollected_protocol_side_values_usd" - All protocol-side value locking in USD that remains uncollected and unused in the pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOUncollectedSupplySideTokenAmounts :: !(Maybe [Text]) -- ^ "uncollected_supply_side_token_amounts" - All supply-side value locked in token amounts that remains uncollected and unused in the pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOUncollectedSupplySideValuesUsd :: !(Maybe [Text]) -- ^ "uncollected_supply_side_values_usd" - All supply-side value locked in USD that remains uncollected and unused in the pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the supply side.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the protocol.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" -  All revenue generated by the liquidity pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeByTokenAmount :: !(Maybe [Text]) -- ^ "cumulative_volume_by_token_amount" - All trade volume occurred for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeByTokenUsd :: !(Maybe [Text]) -- ^ "cumulative_volume_by_token_usd" - All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOInputTokenBalances :: !(Maybe [Text]) -- ^ "input_token_balances" - Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOInputTokenBalancesUsd :: !(Maybe [Text]) -- ^ "input_token_balances_usd" - Amount of input tokens in USD in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOInputTokenWeights :: !(Maybe [Text]) -- ^ "input_token_weights" - Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOStakedOutputTokenAmount :: !(Maybe Text) -- ^ "staked_output_token_amount" - Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTORewardTokenEmissionsAmount :: !(Maybe [Text]) -- ^ "reward_token_emissions_amount" - Per-block reward token emission as of the current block normalized to a day, in token&#39;s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTORewardTokenEmissionsUsd :: !(Maybe [Text]) -- ^ "reward_token_emissions_usd" - Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeDepositCount :: !(Maybe Int) -- ^ "cumulative_deposit_count" - Total number of deposits (add liquidity).
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeWithdrawCount :: !(Maybe Int) -- ^ "cumulative_withdraw_count" - Total number of withdrawals (remove liquidity).
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeSwapCount :: !(Maybe Int) -- ^ "cumulative_swap_count" - Total number of trades (swaps).
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOPositionCount :: !(Maybe Int) -- ^ "position_count" - Number of positions in this market.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOOpenPositionCount :: !(Maybe Int) -- ^ "open_position_count" - Number of open positions in this market.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOClosedPositionCount :: !(Maybe Int) -- ^ "closed_position_count" - Number of closed positions in this market.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOLastSnapshotDayId :: !(Maybe Int) -- ^ "last_snapshot_day_id" - Day ID of the most recent daily snapshot.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOLastSnapshotHourId :: !(Maybe Int) -- ^ "last_snapshot_hour_id" - Hour ID of the most recent hourly snapshot.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOLastUpdateTimestamp :: !(Maybe Text) -- ^ "last_update_timestamp" - Timestamp of the last time this entity was updated.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOLastUpdateBlockNumber :: !(Maybe Text) -- ^ "last_update_block_number" - Block number of the last time this entity was updated.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOEvaluatedAsk :: !(Maybe Double) -- ^ /ReadOnly/ "evaluated_ask" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON PANCAKESWAPV3ETHEREUMLiquidityPoolDTO
instance A.FromJSON PANCAKESWAPV3ETHEREUMLiquidityPoolDTO where
  parseJSON = A.withObject "PANCAKESWAPV3ETHEREUMLiquidityPoolDTO" $ \o ->
    PANCAKESWAPV3ETHEREUMLiquidityPoolDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "protocol")
      <*> (o .:? "name")
      <*> (o .:? "symbol")
      <*> (o .:? "liquidity_token")
      <*> (o .:? "input_tokens")
      <*> (o .:? "reward_tokens")
      <*> (o .:? "fees")
      <*> (o .:? "is_single_sided")
      <*> (o .:? "created_timestamp")
      <*> (o .:? "created_block_number")
      <*> (o .:? "tick")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "total_liquidity")
      <*> (o .:? "total_liquidity_usd")
      <*> (o .:? "active_liquidity")
      <*> (o .:? "active_liquidity_usd")
      <*> (o .:? "uncollected_protocol_side_token_amounts")
      <*> (o .:? "uncollected_protocol_side_values_usd")
      <*> (o .:? "uncollected_supply_side_token_amounts")
      <*> (o .:? "uncollected_supply_side_values_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "cumulative_volume_by_token_amount")
      <*> (o .:? "cumulative_volume_by_token_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "input_token_balances")
      <*> (o .:? "input_token_balances_usd")
      <*> (o .:? "input_token_weights")
      <*> (o .:? "staked_output_token_amount")
      <*> (o .:? "reward_token_emissions_amount")
      <*> (o .:? "reward_token_emissions_usd")
      <*> (o .:? "cumulative_deposit_count")
      <*> (o .:? "cumulative_withdraw_count")
      <*> (o .:? "cumulative_swap_count")
      <*> (o .:? "position_count")
      <*> (o .:? "open_position_count")
      <*> (o .:? "closed_position_count")
      <*> (o .:? "last_snapshot_day_id")
      <*> (o .:? "last_snapshot_hour_id")
      <*> (o .:? "last_update_timestamp")
      <*> (o .:? "last_update_block_number")
      <*> (o .:? "evaluated_ask")

-- | ToJSON PANCAKESWAPV3ETHEREUMLiquidityPoolDTO
instance A.ToJSON PANCAKESWAPV3ETHEREUMLiquidityPoolDTO where
  toJSON PANCAKESWAPV3ETHEREUMLiquidityPoolDTO {..} =
   _omitNulls
      [ "entry_time" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOEntryTime
      , "recv_time" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTORecvTime
      , "block_number" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOBlockNumber
      , "vid" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOVid
      , "block_range" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOBlockRange
      , "id" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOId
      , "protocol" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOProtocol
      , "name" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOName
      , "symbol" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOSymbol
      , "liquidity_token" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOLiquidityToken
      , "input_tokens" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOInputTokens
      , "reward_tokens" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTORewardTokens
      , "fees" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOFees
      , "is_single_sided" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOIsSingleSided
      , "created_timestamp" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCreatedTimestamp
      , "created_block_number" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCreatedBlockNumber
      , "tick" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOTick
      , "total_value_locked_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOTotalValueLockedUsd
      , "total_liquidity" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOTotalLiquidity
      , "total_liquidity_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOTotalLiquidityUsd
      , "active_liquidity" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOActiveLiquidity
      , "active_liquidity_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOActiveLiquidityUsd
      , "uncollected_protocol_side_token_amounts" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOUncollectedProtocolSideTokenAmounts
      , "uncollected_protocol_side_values_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOUncollectedProtocolSideValuesUsd
      , "uncollected_supply_side_token_amounts" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOUncollectedSupplySideTokenAmounts
      , "uncollected_supply_side_values_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOUncollectedSupplySideValuesUsd
      , "cumulative_supply_side_revenue_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeSupplySideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeProtocolSideRevenueUsd
      , "cumulative_total_revenue_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeTotalRevenueUsd
      , "cumulative_volume_by_token_amount" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeByTokenAmount
      , "cumulative_volume_by_token_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeByTokenUsd
      , "cumulative_volume_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeUsd
      , "input_token_balances" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOInputTokenBalances
      , "input_token_balances_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOInputTokenBalancesUsd
      , "input_token_weights" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOInputTokenWeights
      , "staked_output_token_amount" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOStakedOutputTokenAmount
      , "reward_token_emissions_amount" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTORewardTokenEmissionsAmount
      , "reward_token_emissions_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTORewardTokenEmissionsUsd
      , "cumulative_deposit_count" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeDepositCount
      , "cumulative_withdraw_count" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeWithdrawCount
      , "cumulative_swap_count" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeSwapCount
      , "position_count" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOPositionCount
      , "open_position_count" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOOpenPositionCount
      , "closed_position_count" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOClosedPositionCount
      , "last_snapshot_day_id" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOLastSnapshotDayId
      , "last_snapshot_hour_id" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOLastSnapshotHourId
      , "last_update_timestamp" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOLastUpdateTimestamp
      , "last_update_block_number" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOLastUpdateBlockNumber
      , "evaluated_ask" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDTOEvaluatedAsk
      ]


-- | Construct a value of type 'PANCAKESWAPV3ETHEREUMLiquidityPoolDTO' (by applying it's required fields, if any)
mkPANCAKESWAPV3ETHEREUMLiquidityPoolDTO
  :: PANCAKESWAPV3ETHEREUMLiquidityPoolDTO
mkPANCAKESWAPV3ETHEREUMLiquidityPoolDTO =
  PANCAKESWAPV3ETHEREUMLiquidityPoolDTO
  { pANCAKESWAPV3ETHEREUMLiquidityPoolDTOEntryTime = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTORecvTime = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOVid = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOBlockRange = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOId = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOProtocol = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOName = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOSymbol = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOLiquidityToken = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOInputTokens = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTORewardTokens = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOFees = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOIsSingleSided = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCreatedTimestamp = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCreatedBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOTick = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOTotalValueLockedUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOTotalLiquidity = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOTotalLiquidityUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOActiveLiquidity = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOActiveLiquidityUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOUncollectedProtocolSideTokenAmounts = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOUncollectedProtocolSideValuesUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOUncollectedSupplySideTokenAmounts = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOUncollectedSupplySideValuesUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeSupplySideRevenueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeProtocolSideRevenueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeTotalRevenueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeByTokenAmount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeByTokenUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOInputTokenBalances = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOInputTokenBalancesUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOInputTokenWeights = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOStakedOutputTokenAmount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTORewardTokenEmissionsAmount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTORewardTokenEmissionsUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeDepositCount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeWithdrawCount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOCumulativeSwapCount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOPositionCount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOOpenPositionCount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOClosedPositionCount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOLastSnapshotDayId = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOLastSnapshotHourId = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOLastUpdateTimestamp = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOLastUpdateBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDTOEvaluatedAsk = Nothing
  }

-- ** PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
-- | PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
-- Represents a liquidity pool daily snapshot for PancakeSwap V3.
data PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO = PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
  { pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOBlock :: !(Maybe Int) -- ^ "block_" - The Ethereum block number associated with the liquidity pool daily snapshot.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: (smart contract address of the pool)-(# of days since Unix epoch time).
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODay :: !(Maybe Int) -- ^ "day" - Number of days since Unix epoch time.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - Protocol associated with the liquidity pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOPool :: !(Maybe Text) -- ^ "pool" - Pool this snapshot belongs to.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTick :: !(Maybe Text) -- ^ "tick" - Current tick representing the price of token0/token1.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of this pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalLiquidity :: !(Maybe Text) -- ^ "total_liquidity" - The sum of all active and non-active liquidity for this pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalLiquidityUsd :: !(Maybe Text) -- ^ "total_liquidity_usd" - Sum of all active and non-active liquidity in USD for this pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOActiveLiquidity :: !(Maybe Text) -- ^ "active_liquidity" - All liquidity &#x60;k&#x60; that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOActiveLiquidityUsd :: !(Maybe Text) -- ^ "active_liquidity_usd" - All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedProtocolSideTokenAmounts :: !(Maybe [Text]) -- ^ "uncollected_protocol_side_token_amounts" - All protocol-side value locked in token amounts that remains uncollected and unused in the pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedProtocolSideValuesUsd :: !(Maybe [Text]) -- ^ "uncollected_protocol_side_values_usd" - All protocol-side value locking in USD that remains uncollected and unused in the pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedSupplySideTokenAmounts :: !(Maybe [Text]) -- ^ "uncollected_supply_side_token_amounts" - All supply-side value locked in token amounts that remains uncollected and unused in the pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedSupplySideValuesUsd :: !(Maybe [Text]) -- ^ "uncollected_supply_side_values_usd" - All supply-side value locked in USD that remains uncollected and unused in the pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the supply side.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailySupplySideRevenueUsd :: !(Maybe Text) -- ^ "daily_supply_side_revenue_usd" - Daily revenue generated by the liquidity pool, accrued to the supply side.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the protocol.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "daily_protocol_side_revenue_usd" - Daily revenue generated by the liquidity pool, accrued to the protocol.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" - All revenue generated by the liquidity pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyTotalRevenueUsd :: !(Maybe Text) -- ^ "daily_total_revenue_usd" - Daily revenue generated by the liquidity pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All historical trade volume occurred in this pool, in USD.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeUsd :: !(Maybe Text) -- ^ "daily_volume_usd" - All trade volume occurred in a given day, in USD.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeByTokenAmount :: !(Maybe [Text]) -- ^ "cumulative_volume_by_token_amount" - All trade volume , in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenAmount :: !(Maybe [Text]) -- ^ "daily_volume_by_token_amount" - All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeByTokenUsd :: !(Maybe [Text]) -- ^ "cumulative_volume_by_token_usd" - All trade volume, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenUsd :: !(Maybe [Text]) -- ^ "daily_volume_by_token_usd" -  All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenBalances :: !(Maybe [Text]) -- ^ "input_token_balances" - Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenBalancesUsd :: !(Maybe [Text]) -- ^ "input_token_balances_usd" - Amount of input tokens in USD in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenWeights :: !(Maybe [Text]) -- ^ "input_token_weights" - Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOStakedOutputTokenAmount :: !(Maybe Text) -- ^ "staked_output_token_amount" - Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsAmount :: !(Maybe [Text]) -- ^ "reward_token_emissions_amount" - Per-block reward token emission as of the current block normalized to a day, in token&#39;s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsUsd :: !(Maybe [Text]) -- ^ "reward_token_emissions_usd" - Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeDepositCount :: !(Maybe Int) -- ^ "cumulative_deposit_count" - Total number of deposits (add liquidity).
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyDepositCount :: !(Maybe Int) -- ^ "daily_deposit_count" - Total number of deposits (add liquidity) in a day.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeWithdrawCount :: !(Maybe Int) -- ^ "cumulative_withdraw_count" - Total number of withdrawals (remove liquidity).
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyWithdrawCount :: !(Maybe Int) -- ^ "daily_withdraw_count" - Total number of withdrawals (remove liquidity) in a day.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeSwapCount :: !(Maybe Int) -- ^ "cumulative_swap_count" - Total number of trades (swaps).
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailySwapCount :: !(Maybe Int) -- ^ "daily_swap_count" - Total number of trades (swaps) in a day.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOPositionCount :: !(Maybe Int) -- ^ "position_count" - Number of positions in this market.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOOpenPositionCount :: !(Maybe Int) -- ^ "open_position_count" - Number of open positions in this market.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOClosedPositionCount :: !(Maybe Int) -- ^ "closed_position_count" - Number of closed positions in this market.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed).
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
instance A.FromJSON PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO where
  parseJSON = A.withObject "PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO" $ \o ->
    PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_")
      <*> (o .:? "id")
      <*> (o .:? "day")
      <*> (o .:? "protocol")
      <*> (o .:? "pool")
      <*> (o .:? "tick")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "total_liquidity")
      <*> (o .:? "total_liquidity_usd")
      <*> (o .:? "active_liquidity")
      <*> (o .:? "active_liquidity_usd")
      <*> (o .:? "uncollected_protocol_side_token_amounts")
      <*> (o .:? "uncollected_protocol_side_values_usd")
      <*> (o .:? "uncollected_supply_side_token_amounts")
      <*> (o .:? "uncollected_supply_side_values_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "daily_supply_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "daily_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "daily_total_revenue_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "daily_volume_usd")
      <*> (o .:? "cumulative_volume_by_token_amount")
      <*> (o .:? "daily_volume_by_token_amount")
      <*> (o .:? "cumulative_volume_by_token_usd")
      <*> (o .:? "daily_volume_by_token_usd")
      <*> (o .:? "input_token_balances")
      <*> (o .:? "input_token_balances_usd")
      <*> (o .:? "input_token_weights")
      <*> (o .:? "staked_output_token_amount")
      <*> (o .:? "reward_token_emissions_amount")
      <*> (o .:? "reward_token_emissions_usd")
      <*> (o .:? "cumulative_deposit_count")
      <*> (o .:? "daily_deposit_count")
      <*> (o .:? "cumulative_withdraw_count")
      <*> (o .:? "daily_withdraw_count")
      <*> (o .:? "cumulative_swap_count")
      <*> (o .:? "daily_swap_count")
      <*> (o .:? "position_count")
      <*> (o .:? "open_position_count")
      <*> (o .:? "closed_position_count")
      <*> (o .:? "timestamp")

-- | ToJSON PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
instance A.ToJSON PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO where
  toJSON PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOEntryTime
      , "recv_time" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORecvTime
      , "block_number" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOBlockNumber
      , "block_" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOBlock
      , "id" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOId
      , "day" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODay
      , "protocol" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOProtocol
      , "pool" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOPool
      , "tick" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTick
      , "total_value_locked_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalValueLockedUsd
      , "total_liquidity" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalLiquidity
      , "total_liquidity_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalLiquidityUsd
      , "active_liquidity" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOActiveLiquidity
      , "active_liquidity_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOActiveLiquidityUsd
      , "uncollected_protocol_side_token_amounts" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedProtocolSideTokenAmounts
      , "uncollected_protocol_side_values_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedProtocolSideValuesUsd
      , "uncollected_supply_side_token_amounts" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedSupplySideTokenAmounts
      , "uncollected_supply_side_values_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedSupplySideValuesUsd
      , "cumulative_supply_side_revenue_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeSupplySideRevenueUsd
      , "daily_supply_side_revenue_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailySupplySideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeProtocolSideRevenueUsd
      , "daily_protocol_side_revenue_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyProtocolSideRevenueUsd
      , "cumulative_total_revenue_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeTotalRevenueUsd
      , "daily_total_revenue_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyTotalRevenueUsd
      , "cumulative_volume_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeUsd
      , "daily_volume_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeUsd
      , "cumulative_volume_by_token_amount" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeByTokenAmount
      , "daily_volume_by_token_amount" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenAmount
      , "cumulative_volume_by_token_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeByTokenUsd
      , "daily_volume_by_token_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenUsd
      , "input_token_balances" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenBalances
      , "input_token_balances_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenBalancesUsd
      , "input_token_weights" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenWeights
      , "staked_output_token_amount" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOStakedOutputTokenAmount
      , "reward_token_emissions_amount" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsAmount
      , "reward_token_emissions_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsUsd
      , "cumulative_deposit_count" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeDepositCount
      , "daily_deposit_count" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyDepositCount
      , "cumulative_withdraw_count" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeWithdrawCount
      , "daily_withdraw_count" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyWithdrawCount
      , "cumulative_swap_count" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeSwapCount
      , "daily_swap_count" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailySwapCount
      , "position_count" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOPositionCount
      , "open_position_count" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOOpenPositionCount
      , "closed_position_count" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOClosedPositionCount
      , "timestamp" .= pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO' (by applying it's required fields, if any)
mkPANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
  :: PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
mkPANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO =
  PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
  { pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOEntryTime = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORecvTime = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOBlock = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOId = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODay = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOProtocol = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOPool = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTick = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalValueLockedUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalLiquidity = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalLiquidityUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOActiveLiquidity = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOActiveLiquidityUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedProtocolSideTokenAmounts = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedProtocolSideValuesUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedSupplySideTokenAmounts = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedSupplySideValuesUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeSupplySideRevenueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailySupplySideRevenueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeProtocolSideRevenueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyProtocolSideRevenueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeTotalRevenueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyTotalRevenueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeByTokenAmount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenAmount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeByTokenUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenBalances = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenBalancesUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenWeights = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOStakedOutputTokenAmount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsAmount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeDepositCount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyDepositCount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeWithdrawCount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyWithdrawCount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeSwapCount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailySwapCount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOPositionCount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOOpenPositionCount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOClosedPositionCount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTimestamp = Nothing
  }

-- ** PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO
-- | PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO
-- 
data PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO = PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO
  { pANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , pANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , pANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , pANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: (fee type)-(pool address)
  , pANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTOFeePercentage :: !(Maybe Text) -- ^ "fee_percentage" - Fee as a percentage of the trade (swap) amount. Does not always apply 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO
instance A.FromJSON PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO where
  parseJSON = A.withObject "PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO" $ \o ->
    PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "fee_percentage")

-- | ToJSON PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO
instance A.ToJSON PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO where
  toJSON PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO {..} =
   _omitNulls
      [ "entry_time" .= pANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTOEntryTime
      , "recv_time" .= pANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTORecvTime
      , "block_number" .= pANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTOBlockNumber
      , "block_range" .= pANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTOBlockRange
      , "id" .= pANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTOId
      , "fee_percentage" .= pANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTOFeePercentage
      ]


-- | Construct a value of type 'PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO' (by applying it's required fields, if any)
mkPANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO
  :: PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO
mkPANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO =
  PANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTO
  { pANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTOEntryTime = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTORecvTime = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTOBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTOBlockRange = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTOId = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolFeeDTOFeePercentage = Nothing
  }

-- ** PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
-- | PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
-- 
data PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO = PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
  { pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOId :: !(Maybe Text) -- ^ "id" - (Smart contract address of the pool)-( # of hours since Unix epoch time)
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHour :: !(Maybe Int) -- ^ "hour" - Number of hours since Unix epoch time
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - The protocol this snapshot belongs to
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOPool :: !(Maybe Text) -- ^ "pool" - The pool this snapshot belongs to
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTick :: !(Maybe Text) -- ^ "tick" - Current tick representing the price of token0/token1
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of this pool
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalLiquidity :: !(Maybe Text) -- ^ "total_liquidity" - The sum of all active and non-active liquidity for this pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalLiquidityUsd :: !(Maybe Text) -- ^ "total_liquidity_usd" - The sum of all active and non-active liquidity in USD for this pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOActiveLiquidity :: !(Maybe Text) -- ^ "active_liquidity" - All liquidity &#x60;k&#x60; that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pool&#39;s current tick.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOActiveLiquidityUsd :: !(Maybe Text) -- ^ "active_liquidity_usd" - All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pool&#39;s current tick.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedProtocolSideTokenAmounts :: !(Maybe [Text]) -- ^ "uncollected_protocol_side_token_amounts" - All protocol-side value locked in token amounts that remains uncollected and unused in the pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedProtocolSideValuesUsd :: !(Maybe [Text]) -- ^ "uncollected_protocol_side_values_usd" - All protocol-side value locking in USD that remains uncollected and unused in the pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedSupplySideTokenAmounts :: !(Maybe [Text]) -- ^ "uncollected_supply_side_token_amounts" - All supply-side value locked in token amounts that remains uncollected and unused in the pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedSupplySideValuesUsd :: !(Maybe [Text]) -- ^ "uncollected_supply_side_values_usd" - All supply-side value locked in USD that remains uncollected and unused in the pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the supply side.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlySupplySideRevenueUsd :: !(Maybe Text) -- ^ "hourly_supply_side_revenue_usd" - Hourly revenue generated by the liquidity pool, accrued to the supply side.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the protocol.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "hourly_protocol_side_revenue_usd" - Hourly revenue generated by the liquidity pool, accrued to the protocol.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" - All revenue generated by the liquidity pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyTotalRevenueUsd :: !(Maybe Text) -- ^ "hourly_total_revenue_usd" - Hourly revenue generated by the liquidity pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All historical trade volume occurred in this pool, in USD.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeUsd :: !(Maybe Text) -- ^ "hourly_volume_usd" - All trade volume occurred in a given hour, in USD.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeByTokenAmount :: !(Maybe [Text]) -- ^ "cumulative_volume_by_token_amount" - All trade volume, in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenAmount :: !(Maybe [Text]) -- ^ "hourly_volume_by_token_amount" - All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeByTokenUsd :: !(Maybe [Text]) -- ^ "cumulative_volume_by_token_usd" - All trade volume, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenUsd :: !(Maybe [Text]) -- ^ "hourly_volume_by_token_usd" - All trade volume occurred in a given hour for a specific input token, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenBalances :: !(Maybe [Text]) -- ^ "input_token_balances" - Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenBalancesUsd :: !(Maybe [Text]) -- ^ "input_token_balances_usd" - Amount of input tokens in USD in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenWeights :: !(Maybe [Text]) -- ^ "input_token_weights" - Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOStakedOutputTokenAmount :: !(Maybe Text) -- ^ "staked_output_token_amount" - Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsAmount :: !(Maybe [Text]) -- ^ "reward_token_emissions_amount" - Per-block reward token emission as of the current block normalized to a day (not hour), in token&#39;s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsUsd :: !(Maybe [Text]) -- ^ "reward_token_emissions_usd" - Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeDepositCount :: !(Maybe Int) -- ^ "cumulative_deposit_count" - Total number of deposits (add liquidity)
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyDepositCount :: !(Maybe Int) -- ^ "hourly_deposit_count" - Total number of deposits (add liquidity) in an hour
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeWithdrawCount :: !(Maybe Int) -- ^ "cumulative_withdraw_count" - Total number of withdrawals (remove liquidity)
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyWithdrawCount :: !(Maybe Int) -- ^ "hourly_withdraw_count" - Total number of withdrawals (remove liquidity) in an hour
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeSwapCount :: !(Maybe Int) -- ^ "cumulative_swap_count" - Total number of trades (swaps)
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlySwapCount :: !(Maybe Int) -- ^ "hourly_swap_count" - Total number of trades (swaps) in an hour
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOPositionCount :: !(Maybe Int) -- ^ "position_count" - Number of positions in this market
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOOpenPositionCount :: !(Maybe Int) -- ^ "open_position_count" - Number of open positions in this market
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOClosedPositionCount :: !(Maybe Int) -- ^ "closed_position_count" - Number of closed positions in this market
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
instance A.FromJSON PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO where
  parseJSON = A.withObject "PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO" $ \o ->
    PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "hour")
      <*> (o .:? "protocol")
      <*> (o .:? "pool")
      <*> (o .:? "tick")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "total_liquidity")
      <*> (o .:? "total_liquidity_usd")
      <*> (o .:? "active_liquidity")
      <*> (o .:? "active_liquidity_usd")
      <*> (o .:? "uncollected_protocol_side_token_amounts")
      <*> (o .:? "uncollected_protocol_side_values_usd")
      <*> (o .:? "uncollected_supply_side_token_amounts")
      <*> (o .:? "uncollected_supply_side_values_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "hourly_supply_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "hourly_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "hourly_total_revenue_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "hourly_volume_usd")
      <*> (o .:? "cumulative_volume_by_token_amount")
      <*> (o .:? "hourly_volume_by_token_amount")
      <*> (o .:? "cumulative_volume_by_token_usd")
      <*> (o .:? "hourly_volume_by_token_usd")
      <*> (o .:? "input_token_balances")
      <*> (o .:? "input_token_balances_usd")
      <*> (o .:? "input_token_weights")
      <*> (o .:? "staked_output_token_amount")
      <*> (o .:? "reward_token_emissions_amount")
      <*> (o .:? "reward_token_emissions_usd")
      <*> (o .:? "cumulative_deposit_count")
      <*> (o .:? "hourly_deposit_count")
      <*> (o .:? "cumulative_withdraw_count")
      <*> (o .:? "hourly_withdraw_count")
      <*> (o .:? "cumulative_swap_count")
      <*> (o .:? "hourly_swap_count")
      <*> (o .:? "position_count")
      <*> (o .:? "open_position_count")
      <*> (o .:? "closed_position_count")
      <*> (o .:? "timestamp")

-- | ToJSON PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
instance A.ToJSON PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO where
  toJSON PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOEntryTime
      , "recv_time" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORecvTime
      , "block_number" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOBlockNumber
      , "id" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOId
      , "hour" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHour
      , "protocol" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOProtocol
      , "pool" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOPool
      , "tick" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTick
      , "total_value_locked_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalValueLockedUsd
      , "total_liquidity" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalLiquidity
      , "total_liquidity_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalLiquidityUsd
      , "active_liquidity" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOActiveLiquidity
      , "active_liquidity_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOActiveLiquidityUsd
      , "uncollected_protocol_side_token_amounts" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedProtocolSideTokenAmounts
      , "uncollected_protocol_side_values_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedProtocolSideValuesUsd
      , "uncollected_supply_side_token_amounts" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedSupplySideTokenAmounts
      , "uncollected_supply_side_values_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedSupplySideValuesUsd
      , "cumulative_supply_side_revenue_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeSupplySideRevenueUsd
      , "hourly_supply_side_revenue_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlySupplySideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeProtocolSideRevenueUsd
      , "hourly_protocol_side_revenue_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyProtocolSideRevenueUsd
      , "cumulative_total_revenue_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeTotalRevenueUsd
      , "hourly_total_revenue_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyTotalRevenueUsd
      , "cumulative_volume_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeUsd
      , "hourly_volume_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeUsd
      , "cumulative_volume_by_token_amount" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeByTokenAmount
      , "hourly_volume_by_token_amount" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenAmount
      , "cumulative_volume_by_token_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeByTokenUsd
      , "hourly_volume_by_token_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenUsd
      , "input_token_balances" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenBalances
      , "input_token_balances_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenBalancesUsd
      , "input_token_weights" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenWeights
      , "staked_output_token_amount" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOStakedOutputTokenAmount
      , "reward_token_emissions_amount" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsAmount
      , "reward_token_emissions_usd" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsUsd
      , "cumulative_deposit_count" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeDepositCount
      , "hourly_deposit_count" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyDepositCount
      , "cumulative_withdraw_count" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeWithdrawCount
      , "hourly_withdraw_count" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyWithdrawCount
      , "cumulative_swap_count" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeSwapCount
      , "hourly_swap_count" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlySwapCount
      , "position_count" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOPositionCount
      , "open_position_count" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOOpenPositionCount
      , "closed_position_count" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOClosedPositionCount
      , "timestamp" .= pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO' (by applying it's required fields, if any)
mkPANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
  :: PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
mkPANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO =
  PANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
  { pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOEntryTime = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORecvTime = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOId = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHour = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOProtocol = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOPool = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTick = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalValueLockedUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalLiquidity = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalLiquidityUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOActiveLiquidity = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOActiveLiquidityUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedProtocolSideTokenAmounts = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedProtocolSideValuesUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedSupplySideTokenAmounts = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedSupplySideValuesUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeSupplySideRevenueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlySupplySideRevenueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeProtocolSideRevenueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyProtocolSideRevenueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeTotalRevenueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyTotalRevenueUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeByTokenAmount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenAmount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeByTokenUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenBalances = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenBalancesUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenWeights = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOStakedOutputTokenAmount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsAmount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsUsd = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeDepositCount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyDepositCount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeWithdrawCount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyWithdrawCount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeSwapCount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlySwapCount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOPositionCount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOOpenPositionCount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOClosedPositionCount = Nothing
  , pANCAKESWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTimestamp = Nothing
  }

-- ** PANCAKESWAPV3ETHEREUMPositionDTO
-- | PANCAKESWAPV3ETHEREUMPositionDTO
-- 
data PANCAKESWAPV3ETHEREUMPositionDTO = PANCAKESWAPV3ETHEREUMPositionDTO
  { pANCAKESWAPV3ETHEREUMPositionDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , pANCAKESWAPV3ETHEREUMPositionDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , pANCAKESWAPV3ETHEREUMPositionDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , pANCAKESWAPV3ETHEREUMPositionDTOId :: !(Maybe Text) -- ^ "id" - (account address)-(market address)-(count)
  , pANCAKESWAPV3ETHEREUMPositionDTOAccount :: !(Maybe Text) -- ^ "account" - Account that owns this position
  , pANCAKESWAPV3ETHEREUMPositionDTOPool :: !(Maybe Text) -- ^ "pool" - The liquidity pool in which this position was opened
  , pANCAKESWAPV3ETHEREUMPositionDTOHashOpened :: !(Maybe Text) -- ^ "hash_opened" - The hash of the transaction that opened this position
  , pANCAKESWAPV3ETHEREUMPositionDTOHashClosed :: !(Maybe Text) -- ^ "hash_closed" - The hash of the transaction that closed this position
  , pANCAKESWAPV3ETHEREUMPositionDTOBlockNumberOpened :: !(Maybe Text) -- ^ "block_number_opened" - Block number of when the position was opened
  , pANCAKESWAPV3ETHEREUMPositionDTOTimestampOpened :: !(Maybe Text) -- ^ "timestamp_opened" - Timestamp when the position was opened
  , pANCAKESWAPV3ETHEREUMPositionDTOBlockNumberClosed :: !(Maybe Text) -- ^ "block_number_closed" - Block number of when the position was closed (0 if still open)
  , pANCAKESWAPV3ETHEREUMPositionDTOTimestampClosed :: !(Maybe Text) -- ^ "timestamp_closed" - Timestamp when the position was closed (0 if still open)
  , pANCAKESWAPV3ETHEREUMPositionDTOTickLower :: !(Maybe Text) -- ^ "tick_lower" - lower tick of the position
  , pANCAKESWAPV3ETHEREUMPositionDTOTickUpper :: !(Maybe Text) -- ^ "tick_upper" - upper tick of the position
  , pANCAKESWAPV3ETHEREUMPositionDTOLiquidityToken :: !(Maybe Text) -- ^ "liquidity_token" - Token that is to represent ownership of liquidity
  , pANCAKESWAPV3ETHEREUMPositionDTOLiquidityTokenType :: !(Maybe Text) -- ^ "liquidity_token_type" - Type of token used to track liquidity
  , pANCAKESWAPV3ETHEREUMPositionDTOLiquidity :: !(Maybe Text) -- ^ "liquidity" - total position liquidity
  , pANCAKESWAPV3ETHEREUMPositionDTOLiquidityUsd :: !(Maybe Text) -- ^ "liquidity_usd" - total position liquidity in USD
  , pANCAKESWAPV3ETHEREUMPositionDTOCumulativeDepositTokenAmounts :: !(Maybe [Text]) -- ^ "cumulative_deposit_token_amounts" - amount of tokens ever deposited to position
  , pANCAKESWAPV3ETHEREUMPositionDTOCumulativeDepositUsd :: !(Maybe Text) -- ^ "cumulative_deposit_usd" - amount of tokens in USD deposited to position
  , pANCAKESWAPV3ETHEREUMPositionDTOCumulativeWithdrawTokenAmounts :: !(Maybe [Text]) -- ^ "cumulative_withdraw_token_amounts" - amount of tokens ever withdrawn from position (without fees)
  , pANCAKESWAPV3ETHEREUMPositionDTOCumulativeWithdrawUsd :: !(Maybe Text) -- ^ "cumulative_withdraw_usd" - amount of tokens in USD withdrawn from position (without fees)
  , pANCAKESWAPV3ETHEREUMPositionDTOCumulativeRewardUsd :: !(Maybe [Text]) -- ^ "cumulative_reward_usd" - Total reward token accumulated under this position, in USD
  , pANCAKESWAPV3ETHEREUMPositionDTODepositCount :: !(Maybe Int) -- ^ "deposit_count" - Number of deposits related to this position
  , pANCAKESWAPV3ETHEREUMPositionDTOWithdrawCount :: !(Maybe Int) -- ^ "withdraw_count" - Number of withdrawals related to this position
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON PANCAKESWAPV3ETHEREUMPositionDTO
instance A.FromJSON PANCAKESWAPV3ETHEREUMPositionDTO where
  parseJSON = A.withObject "PANCAKESWAPV3ETHEREUMPositionDTO" $ \o ->
    PANCAKESWAPV3ETHEREUMPositionDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "account")
      <*> (o .:? "pool")
      <*> (o .:? "hash_opened")
      <*> (o .:? "hash_closed")
      <*> (o .:? "block_number_opened")
      <*> (o .:? "timestamp_opened")
      <*> (o .:? "block_number_closed")
      <*> (o .:? "timestamp_closed")
      <*> (o .:? "tick_lower")
      <*> (o .:? "tick_upper")
      <*> (o .:? "liquidity_token")
      <*> (o .:? "liquidity_token_type")
      <*> (o .:? "liquidity")
      <*> (o .:? "liquidity_usd")
      <*> (o .:? "cumulative_deposit_token_amounts")
      <*> (o .:? "cumulative_deposit_usd")
      <*> (o .:? "cumulative_withdraw_token_amounts")
      <*> (o .:? "cumulative_withdraw_usd")
      <*> (o .:? "cumulative_reward_usd")
      <*> (o .:? "deposit_count")
      <*> (o .:? "withdraw_count")

-- | ToJSON PANCAKESWAPV3ETHEREUMPositionDTO
instance A.ToJSON PANCAKESWAPV3ETHEREUMPositionDTO where
  toJSON PANCAKESWAPV3ETHEREUMPositionDTO {..} =
   _omitNulls
      [ "entry_time" .= pANCAKESWAPV3ETHEREUMPositionDTOEntryTime
      , "recv_time" .= pANCAKESWAPV3ETHEREUMPositionDTORecvTime
      , "block_number" .= pANCAKESWAPV3ETHEREUMPositionDTOBlockNumber
      , "id" .= pANCAKESWAPV3ETHEREUMPositionDTOId
      , "account" .= pANCAKESWAPV3ETHEREUMPositionDTOAccount
      , "pool" .= pANCAKESWAPV3ETHEREUMPositionDTOPool
      , "hash_opened" .= pANCAKESWAPV3ETHEREUMPositionDTOHashOpened
      , "hash_closed" .= pANCAKESWAPV3ETHEREUMPositionDTOHashClosed
      , "block_number_opened" .= pANCAKESWAPV3ETHEREUMPositionDTOBlockNumberOpened
      , "timestamp_opened" .= pANCAKESWAPV3ETHEREUMPositionDTOTimestampOpened
      , "block_number_closed" .= pANCAKESWAPV3ETHEREUMPositionDTOBlockNumberClosed
      , "timestamp_closed" .= pANCAKESWAPV3ETHEREUMPositionDTOTimestampClosed
      , "tick_lower" .= pANCAKESWAPV3ETHEREUMPositionDTOTickLower
      , "tick_upper" .= pANCAKESWAPV3ETHEREUMPositionDTOTickUpper
      , "liquidity_token" .= pANCAKESWAPV3ETHEREUMPositionDTOLiquidityToken
      , "liquidity_token_type" .= pANCAKESWAPV3ETHEREUMPositionDTOLiquidityTokenType
      , "liquidity" .= pANCAKESWAPV3ETHEREUMPositionDTOLiquidity
      , "liquidity_usd" .= pANCAKESWAPV3ETHEREUMPositionDTOLiquidityUsd
      , "cumulative_deposit_token_amounts" .= pANCAKESWAPV3ETHEREUMPositionDTOCumulativeDepositTokenAmounts
      , "cumulative_deposit_usd" .= pANCAKESWAPV3ETHEREUMPositionDTOCumulativeDepositUsd
      , "cumulative_withdraw_token_amounts" .= pANCAKESWAPV3ETHEREUMPositionDTOCumulativeWithdrawTokenAmounts
      , "cumulative_withdraw_usd" .= pANCAKESWAPV3ETHEREUMPositionDTOCumulativeWithdrawUsd
      , "cumulative_reward_usd" .= pANCAKESWAPV3ETHEREUMPositionDTOCumulativeRewardUsd
      , "deposit_count" .= pANCAKESWAPV3ETHEREUMPositionDTODepositCount
      , "withdraw_count" .= pANCAKESWAPV3ETHEREUMPositionDTOWithdrawCount
      ]


-- | Construct a value of type 'PANCAKESWAPV3ETHEREUMPositionDTO' (by applying it's required fields, if any)
mkPANCAKESWAPV3ETHEREUMPositionDTO
  :: PANCAKESWAPV3ETHEREUMPositionDTO
mkPANCAKESWAPV3ETHEREUMPositionDTO =
  PANCAKESWAPV3ETHEREUMPositionDTO
  { pANCAKESWAPV3ETHEREUMPositionDTOEntryTime = Nothing
  , pANCAKESWAPV3ETHEREUMPositionDTORecvTime = Nothing
  , pANCAKESWAPV3ETHEREUMPositionDTOBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMPositionDTOId = Nothing
  , pANCAKESWAPV3ETHEREUMPositionDTOAccount = Nothing
  , pANCAKESWAPV3ETHEREUMPositionDTOPool = Nothing
  , pANCAKESWAPV3ETHEREUMPositionDTOHashOpened = Nothing
  , pANCAKESWAPV3ETHEREUMPositionDTOHashClosed = Nothing
  , pANCAKESWAPV3ETHEREUMPositionDTOBlockNumberOpened = Nothing
  , pANCAKESWAPV3ETHEREUMPositionDTOTimestampOpened = Nothing
  , pANCAKESWAPV3ETHEREUMPositionDTOBlockNumberClosed = Nothing
  , pANCAKESWAPV3ETHEREUMPositionDTOTimestampClosed = Nothing
  , pANCAKESWAPV3ETHEREUMPositionDTOTickLower = Nothing
  , pANCAKESWAPV3ETHEREUMPositionDTOTickUpper = Nothing
  , pANCAKESWAPV3ETHEREUMPositionDTOLiquidityToken = Nothing
  , pANCAKESWAPV3ETHEREUMPositionDTOLiquidityTokenType = Nothing
  , pANCAKESWAPV3ETHEREUMPositionDTOLiquidity = Nothing
  , pANCAKESWAPV3ETHEREUMPositionDTOLiquidityUsd = Nothing
  , pANCAKESWAPV3ETHEREUMPositionDTOCumulativeDepositTokenAmounts = Nothing
  , pANCAKESWAPV3ETHEREUMPositionDTOCumulativeDepositUsd = Nothing
  , pANCAKESWAPV3ETHEREUMPositionDTOCumulativeWithdrawTokenAmounts = Nothing
  , pANCAKESWAPV3ETHEREUMPositionDTOCumulativeWithdrawUsd = Nothing
  , pANCAKESWAPV3ETHEREUMPositionDTOCumulativeRewardUsd = Nothing
  , pANCAKESWAPV3ETHEREUMPositionDTODepositCount = Nothing
  , pANCAKESWAPV3ETHEREUMPositionDTOWithdrawCount = Nothing
  }

-- ** PANCAKESWAPV3ETHEREUMPositionSnapshotDTO
-- | PANCAKESWAPV3ETHEREUMPositionSnapshotDTO
-- 
data PANCAKESWAPV3ETHEREUMPositionSnapshotDTO = PANCAKESWAPV3ETHEREUMPositionSnapshotDTO
  { pANCAKESWAPV3ETHEREUMPositionSnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOId :: !(Maybe Text) -- ^ "id" -  (position id )-( transaction hash )-( log index ) 
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOHash :: !(Maybe Text) -- ^ "hash" - Transaction hash of the transaction that triggered this snapshot
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOLogIndex :: !(Maybe Int) -- ^ "log_index" - Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTONonce :: !(Maybe Text) -- ^ "nonce" - Nonce of the transaction that triggered this snapshot
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOPosition :: !(Maybe Text) -- ^ "position" - Position of this snapshot
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOLiquidityTokenType :: !(Maybe Text) -- ^ "liquidity_token_type" - Type of token used to track liquidity
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOLiquidity :: !(Maybe Text) -- ^ "liquidity" - total position liquidity
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOLiquidityUsd :: !(Maybe Text) -- ^ "liquidity_usd" - total position liquidity in USD
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOCumulativeDepositTokenAmounts :: !(Maybe [Text]) -- ^ "cumulative_deposit_token_amounts" - amount of tokens ever deposited to position
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOCumulativeDepositUsd :: !(Maybe Text) -- ^ "cumulative_deposit_usd" - amount of tokens in USD deposited to position
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOCumulativeWithdrawTokenAmounts :: !(Maybe [Text]) -- ^ "cumulative_withdraw_token_amounts" - amount of tokens ever withdrawn from position (without fees)
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOCumulativeWithdrawUsd :: !(Maybe Text) -- ^ "cumulative_withdraw_usd" - amount of tokens in USD withdrawn from position (without fees)
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOCumulativeRewardTokenAmounts :: !(Maybe [Text]) -- ^ "cumulative_reward_token_amounts" - Total reward token accumulated under this position, in native amounts
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOCumulativeRewardUsd :: !(Maybe [Text]) -- ^ "cumulative_reward_usd" - Total reward token accumulated under this position, in USD
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTODepositCount :: !(Maybe Int) -- ^ "deposit_count" - Number of deposits related to this position
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOWithdrawCount :: !(Maybe Int) -- ^ "withdraw_count" - Number of withdrawals related to this position
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this snapshot
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON PANCAKESWAPV3ETHEREUMPositionSnapshotDTO
instance A.FromJSON PANCAKESWAPV3ETHEREUMPositionSnapshotDTO where
  parseJSON = A.withObject "PANCAKESWAPV3ETHEREUMPositionSnapshotDTO" $ \o ->
    PANCAKESWAPV3ETHEREUMPositionSnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "hash")
      <*> (o .:? "log_index")
      <*> (o .:? "nonce")
      <*> (o .:? "position")
      <*> (o .:? "liquidity_token_type")
      <*> (o .:? "liquidity")
      <*> (o .:? "liquidity_usd")
      <*> (o .:? "cumulative_deposit_token_amounts")
      <*> (o .:? "cumulative_deposit_usd")
      <*> (o .:? "cumulative_withdraw_token_amounts")
      <*> (o .:? "cumulative_withdraw_usd")
      <*> (o .:? "cumulative_reward_token_amounts")
      <*> (o .:? "cumulative_reward_usd")
      <*> (o .:? "deposit_count")
      <*> (o .:? "withdraw_count")
      <*> (o .:? "timestamp")

-- | ToJSON PANCAKESWAPV3ETHEREUMPositionSnapshotDTO
instance A.ToJSON PANCAKESWAPV3ETHEREUMPositionSnapshotDTO where
  toJSON PANCAKESWAPV3ETHEREUMPositionSnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= pANCAKESWAPV3ETHEREUMPositionSnapshotDTOEntryTime
      , "recv_time" .= pANCAKESWAPV3ETHEREUMPositionSnapshotDTORecvTime
      , "block_number" .= pANCAKESWAPV3ETHEREUMPositionSnapshotDTOBlockNumber
      , "id" .= pANCAKESWAPV3ETHEREUMPositionSnapshotDTOId
      , "hash" .= pANCAKESWAPV3ETHEREUMPositionSnapshotDTOHash
      , "log_index" .= pANCAKESWAPV3ETHEREUMPositionSnapshotDTOLogIndex
      , "nonce" .= pANCAKESWAPV3ETHEREUMPositionSnapshotDTONonce
      , "position" .= pANCAKESWAPV3ETHEREUMPositionSnapshotDTOPosition
      , "liquidity_token_type" .= pANCAKESWAPV3ETHEREUMPositionSnapshotDTOLiquidityTokenType
      , "liquidity" .= pANCAKESWAPV3ETHEREUMPositionSnapshotDTOLiquidity
      , "liquidity_usd" .= pANCAKESWAPV3ETHEREUMPositionSnapshotDTOLiquidityUsd
      , "cumulative_deposit_token_amounts" .= pANCAKESWAPV3ETHEREUMPositionSnapshotDTOCumulativeDepositTokenAmounts
      , "cumulative_deposit_usd" .= pANCAKESWAPV3ETHEREUMPositionSnapshotDTOCumulativeDepositUsd
      , "cumulative_withdraw_token_amounts" .= pANCAKESWAPV3ETHEREUMPositionSnapshotDTOCumulativeWithdrawTokenAmounts
      , "cumulative_withdraw_usd" .= pANCAKESWAPV3ETHEREUMPositionSnapshotDTOCumulativeWithdrawUsd
      , "cumulative_reward_token_amounts" .= pANCAKESWAPV3ETHEREUMPositionSnapshotDTOCumulativeRewardTokenAmounts
      , "cumulative_reward_usd" .= pANCAKESWAPV3ETHEREUMPositionSnapshotDTOCumulativeRewardUsd
      , "deposit_count" .= pANCAKESWAPV3ETHEREUMPositionSnapshotDTODepositCount
      , "withdraw_count" .= pANCAKESWAPV3ETHEREUMPositionSnapshotDTOWithdrawCount
      , "timestamp" .= pANCAKESWAPV3ETHEREUMPositionSnapshotDTOTimestamp
      ]


-- | Construct a value of type 'PANCAKESWAPV3ETHEREUMPositionSnapshotDTO' (by applying it's required fields, if any)
mkPANCAKESWAPV3ETHEREUMPositionSnapshotDTO
  :: PANCAKESWAPV3ETHEREUMPositionSnapshotDTO
mkPANCAKESWAPV3ETHEREUMPositionSnapshotDTO =
  PANCAKESWAPV3ETHEREUMPositionSnapshotDTO
  { pANCAKESWAPV3ETHEREUMPositionSnapshotDTOEntryTime = Nothing
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTORecvTime = Nothing
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOId = Nothing
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOHash = Nothing
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOLogIndex = Nothing
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTONonce = Nothing
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOPosition = Nothing
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOLiquidityTokenType = Nothing
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOLiquidity = Nothing
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOLiquidityUsd = Nothing
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOCumulativeDepositTokenAmounts = Nothing
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOCumulativeDepositUsd = Nothing
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOCumulativeWithdrawTokenAmounts = Nothing
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOCumulativeWithdrawUsd = Nothing
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOCumulativeRewardTokenAmounts = Nothing
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOCumulativeRewardUsd = Nothing
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTODepositCount = Nothing
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOWithdrawCount = Nothing
  , pANCAKESWAPV3ETHEREUMPositionSnapshotDTOTimestamp = Nothing
  }

-- ** PANCAKESWAPV3ETHEREUMRewardTokenDTO
-- | PANCAKESWAPV3ETHEREUMRewardTokenDTO
-- Reward tokens awarded to lenders and borrowers.
data PANCAKESWAPV3ETHEREUMRewardTokenDTO = PANCAKESWAPV3ETHEREUMRewardTokenDTO
  { pANCAKESWAPV3ETHEREUMRewardTokenDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , pANCAKESWAPV3ETHEREUMRewardTokenDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , pANCAKESWAPV3ETHEREUMRewardTokenDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , pANCAKESWAPV3ETHEREUMRewardTokenDTOId :: !(Maybe Text) -- ^ "id" - (reward token type)-(smart contract address of the reward token)
  , pANCAKESWAPV3ETHEREUMRewardTokenDTOToken :: !(Maybe Text) -- ^ "token" - Reference to the actual token
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON PANCAKESWAPV3ETHEREUMRewardTokenDTO
instance A.FromJSON PANCAKESWAPV3ETHEREUMRewardTokenDTO where
  parseJSON = A.withObject "PANCAKESWAPV3ETHEREUMRewardTokenDTO" $ \o ->
    PANCAKESWAPV3ETHEREUMRewardTokenDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "token")

-- | ToJSON PANCAKESWAPV3ETHEREUMRewardTokenDTO
instance A.ToJSON PANCAKESWAPV3ETHEREUMRewardTokenDTO where
  toJSON PANCAKESWAPV3ETHEREUMRewardTokenDTO {..} =
   _omitNulls
      [ "entry_time" .= pANCAKESWAPV3ETHEREUMRewardTokenDTOEntryTime
      , "recv_time" .= pANCAKESWAPV3ETHEREUMRewardTokenDTORecvTime
      , "block_number" .= pANCAKESWAPV3ETHEREUMRewardTokenDTOBlockNumber
      , "id" .= pANCAKESWAPV3ETHEREUMRewardTokenDTOId
      , "token" .= pANCAKESWAPV3ETHEREUMRewardTokenDTOToken
      ]


-- | Construct a value of type 'PANCAKESWAPV3ETHEREUMRewardTokenDTO' (by applying it's required fields, if any)
mkPANCAKESWAPV3ETHEREUMRewardTokenDTO
  :: PANCAKESWAPV3ETHEREUMRewardTokenDTO
mkPANCAKESWAPV3ETHEREUMRewardTokenDTO =
  PANCAKESWAPV3ETHEREUMRewardTokenDTO
  { pANCAKESWAPV3ETHEREUMRewardTokenDTOEntryTime = Nothing
  , pANCAKESWAPV3ETHEREUMRewardTokenDTORecvTime = Nothing
  , pANCAKESWAPV3ETHEREUMRewardTokenDTOBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMRewardTokenDTOId = Nothing
  , pANCAKESWAPV3ETHEREUMRewardTokenDTOToken = Nothing
  }

-- ** PANCAKESWAPV3ETHEREUMSwapDTO
-- | PANCAKESWAPV3ETHEREUMSwapDTO
-- Trade (swap) event which occurred in a pool.
data PANCAKESWAPV3ETHEREUMSwapDTO = PANCAKESWAPV3ETHEREUMSwapDTO
  { pANCAKESWAPV3ETHEREUMSwapDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , pANCAKESWAPV3ETHEREUMSwapDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , pANCAKESWAPV3ETHEREUMSwapDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , pANCAKESWAPV3ETHEREUMSwapDTOBlock :: !(Maybe Int) -- ^ "block_" - Block number in which the swap operation was recorded.
  , pANCAKESWAPV3ETHEREUMSwapDTOId :: !(Maybe Text) -- ^ "id" - Unique string identifier of the swap operation, format: (transaction hash)-(log index).
  , pANCAKESWAPV3ETHEREUMSwapDTOHash :: !(Maybe Text) -- ^ "hash" - Transaction hash of the transaction that emitted this event.
  , pANCAKESWAPV3ETHEREUMSwapDTONonce :: !(Maybe Text) -- ^ "nonce" - Nonce of the transaction that emitted this event.
  , pANCAKESWAPV3ETHEREUMSwapDTOLogIndex :: !(Maybe Int) -- ^ "log_index" - Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0.
  , pANCAKESWAPV3ETHEREUMSwapDTOGasLimit :: !(Maybe Text) -- ^ "gas_limit" - Gas limit of the transaction that emitted this event.
  , pANCAKESWAPV3ETHEREUMSwapDTOGasUsed :: !(Maybe Text) -- ^ "gas_used" - Gas used in this transaction.
  , pANCAKESWAPV3ETHEREUMSwapDTOGasPrice :: !(Maybe Text) -- ^ "gas_price" - Gas price of the transaction that emitted this event.
  , pANCAKESWAPV3ETHEREUMSwapDTOProtocol :: !(Maybe Text) -- ^ "protocol" - The protocol this transaction belongs to.
  , pANCAKESWAPV3ETHEREUMSwapDTOAccount :: !(Maybe Text) -- ^ "account" - Account that emitted this event.
  , pANCAKESWAPV3ETHEREUMSwapDTOPool :: !(Maybe Text) -- ^ "pool" - The pool involving this event.
  , pANCAKESWAPV3ETHEREUMSwapDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this event.
  , pANCAKESWAPV3ETHEREUMSwapDTOTick :: !(Maybe Text) -- ^ "tick" - Tick of the swap operation.
  , pANCAKESWAPV3ETHEREUMSwapDTOTokenIn :: !(Maybe Text) -- ^ "token_in" - Token deposited into pool.
  , pANCAKESWAPV3ETHEREUMSwapDTOAmountIn :: !(Maybe Text) -- ^ "amount_in" - Amount of token deposited into pool in native units.
  , pANCAKESWAPV3ETHEREUMSwapDTOAmountInUsd :: !(Maybe Text) -- ^ "amount_in_usd" - Amount of token deposited into pool in USD.
  , pANCAKESWAPV3ETHEREUMSwapDTOTokenOut :: !(Maybe Text) -- ^ "token_out" - Token withdrawn from pool.
  , pANCAKESWAPV3ETHEREUMSwapDTOAmountOut :: !(Maybe Text) -- ^ "amount_out" - Amount of token withdrawn from pool in native units.
  , pANCAKESWAPV3ETHEREUMSwapDTOAmountOutUsd :: !(Maybe Text) -- ^ "amount_out_usd" - Amount of token withdrawn from pool in USD.
  , pANCAKESWAPV3ETHEREUMSwapDTOReserveAmounts :: !(Maybe [Text]) -- ^ "reserve_amounts" - Amount of input tokens in the liquidity pool.
  , pANCAKESWAPV3ETHEREUMSwapDTOPoolId :: !(Maybe Text) -- ^ /ReadOnly/ "pool_id"
  , pANCAKESWAPV3ETHEREUMSwapDTOTransactionId :: !(Maybe Text) -- ^ /ReadOnly/ "transaction_id"
  , pANCAKESWAPV3ETHEREUMSwapDTOEvaluatedPrice :: !(Maybe Double) -- ^ /ReadOnly/ "evaluated_price"
  , pANCAKESWAPV3ETHEREUMSwapDTOEvaluatedAmount :: !(Maybe Double) -- ^ /ReadOnly/ "evaluated_amount"
  , pANCAKESWAPV3ETHEREUMSwapDTOEvaluatedAggressor :: !(Maybe TransactionsETradeAggressiveSide) -- ^ "evaluated_aggressor"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON PANCAKESWAPV3ETHEREUMSwapDTO
instance A.FromJSON PANCAKESWAPV3ETHEREUMSwapDTO where
  parseJSON = A.withObject "PANCAKESWAPV3ETHEREUMSwapDTO" $ \o ->
    PANCAKESWAPV3ETHEREUMSwapDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_")
      <*> (o .:? "id")
      <*> (o .:? "hash")
      <*> (o .:? "nonce")
      <*> (o .:? "log_index")
      <*> (o .:? "gas_limit")
      <*> (o .:? "gas_used")
      <*> (o .:? "gas_price")
      <*> (o .:? "protocol")
      <*> (o .:? "account")
      <*> (o .:? "pool")
      <*> (o .:? "timestamp")
      <*> (o .:? "tick")
      <*> (o .:? "token_in")
      <*> (o .:? "amount_in")
      <*> (o .:? "amount_in_usd")
      <*> (o .:? "token_out")
      <*> (o .:? "amount_out")
      <*> (o .:? "amount_out_usd")
      <*> (o .:? "reserve_amounts")
      <*> (o .:? "pool_id")
      <*> (o .:? "transaction_id")
      <*> (o .:? "evaluated_price")
      <*> (o .:? "evaluated_amount")
      <*> (o .:? "evaluated_aggressor")

-- | ToJSON PANCAKESWAPV3ETHEREUMSwapDTO
instance A.ToJSON PANCAKESWAPV3ETHEREUMSwapDTO where
  toJSON PANCAKESWAPV3ETHEREUMSwapDTO {..} =
   _omitNulls
      [ "entry_time" .= pANCAKESWAPV3ETHEREUMSwapDTOEntryTime
      , "recv_time" .= pANCAKESWAPV3ETHEREUMSwapDTORecvTime
      , "block_number" .= pANCAKESWAPV3ETHEREUMSwapDTOBlockNumber
      , "block_" .= pANCAKESWAPV3ETHEREUMSwapDTOBlock
      , "id" .= pANCAKESWAPV3ETHEREUMSwapDTOId
      , "hash" .= pANCAKESWAPV3ETHEREUMSwapDTOHash
      , "nonce" .= pANCAKESWAPV3ETHEREUMSwapDTONonce
      , "log_index" .= pANCAKESWAPV3ETHEREUMSwapDTOLogIndex
      , "gas_limit" .= pANCAKESWAPV3ETHEREUMSwapDTOGasLimit
      , "gas_used" .= pANCAKESWAPV3ETHEREUMSwapDTOGasUsed
      , "gas_price" .= pANCAKESWAPV3ETHEREUMSwapDTOGasPrice
      , "protocol" .= pANCAKESWAPV3ETHEREUMSwapDTOProtocol
      , "account" .= pANCAKESWAPV3ETHEREUMSwapDTOAccount
      , "pool" .= pANCAKESWAPV3ETHEREUMSwapDTOPool
      , "timestamp" .= pANCAKESWAPV3ETHEREUMSwapDTOTimestamp
      , "tick" .= pANCAKESWAPV3ETHEREUMSwapDTOTick
      , "token_in" .= pANCAKESWAPV3ETHEREUMSwapDTOTokenIn
      , "amount_in" .= pANCAKESWAPV3ETHEREUMSwapDTOAmountIn
      , "amount_in_usd" .= pANCAKESWAPV3ETHEREUMSwapDTOAmountInUsd
      , "token_out" .= pANCAKESWAPV3ETHEREUMSwapDTOTokenOut
      , "amount_out" .= pANCAKESWAPV3ETHEREUMSwapDTOAmountOut
      , "amount_out_usd" .= pANCAKESWAPV3ETHEREUMSwapDTOAmountOutUsd
      , "reserve_amounts" .= pANCAKESWAPV3ETHEREUMSwapDTOReserveAmounts
      , "pool_id" .= pANCAKESWAPV3ETHEREUMSwapDTOPoolId
      , "transaction_id" .= pANCAKESWAPV3ETHEREUMSwapDTOTransactionId
      , "evaluated_price" .= pANCAKESWAPV3ETHEREUMSwapDTOEvaluatedPrice
      , "evaluated_amount" .= pANCAKESWAPV3ETHEREUMSwapDTOEvaluatedAmount
      , "evaluated_aggressor" .= pANCAKESWAPV3ETHEREUMSwapDTOEvaluatedAggressor
      ]


-- | Construct a value of type 'PANCAKESWAPV3ETHEREUMSwapDTO' (by applying it's required fields, if any)
mkPANCAKESWAPV3ETHEREUMSwapDTO
  :: PANCAKESWAPV3ETHEREUMSwapDTO
mkPANCAKESWAPV3ETHEREUMSwapDTO =
  PANCAKESWAPV3ETHEREUMSwapDTO
  { pANCAKESWAPV3ETHEREUMSwapDTOEntryTime = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTORecvTime = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOBlock = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOId = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOHash = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTONonce = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOLogIndex = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOGasLimit = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOGasUsed = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOGasPrice = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOProtocol = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOAccount = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOPool = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOTimestamp = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOTick = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOTokenIn = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOAmountIn = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOAmountInUsd = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOTokenOut = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOAmountOut = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOAmountOutUsd = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOReserveAmounts = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOPoolId = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOTransactionId = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOEvaluatedPrice = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOEvaluatedAmount = Nothing
  , pANCAKESWAPV3ETHEREUMSwapDTOEvaluatedAggressor = Nothing
  }

-- ** PANCAKESWAPV3ETHEREUMTickDTO
-- | PANCAKESWAPV3ETHEREUMTickDTO
-- 
data PANCAKESWAPV3ETHEREUMTickDTO = PANCAKESWAPV3ETHEREUMTickDTO
  { pANCAKESWAPV3ETHEREUMTickDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , pANCAKESWAPV3ETHEREUMTickDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , pANCAKESWAPV3ETHEREUMTickDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , pANCAKESWAPV3ETHEREUMTickDTOId :: !(Maybe Text) -- ^ "id" - (pool address)-(tick index)
  , pANCAKESWAPV3ETHEREUMTickDTOIndex :: !(Maybe Text) -- ^ "index" - tick index
  , pANCAKESWAPV3ETHEREUMTickDTOPool :: !(Maybe Text) -- ^ "pool" - Liquidity pool this tick belongs to
  , pANCAKESWAPV3ETHEREUMTickDTOCreatedTimestamp :: !(Maybe Text) -- ^ "created_timestamp" - Creation timestamp
  , pANCAKESWAPV3ETHEREUMTickDTOCreatedBlockNumber :: !(Maybe Text) -- ^ "created_block_number" - Creation block number
  , pANCAKESWAPV3ETHEREUMTickDTOPrices :: !(Maybe [Text]) -- ^ "prices" - calculated price of token0 of tick within this pool - constant
  , pANCAKESWAPV3ETHEREUMTickDTOLiquidityGross :: !(Maybe Text) -- ^ "liquidity_gross" - total liquidity pool has as tick lower or upper
  , pANCAKESWAPV3ETHEREUMTickDTOLiquidityGrossUsd :: !(Maybe Text) -- ^ "liquidity_gross_usd" - total liquidity in USD pool has as tick lower or upper
  , pANCAKESWAPV3ETHEREUMTickDTOLiquidityNet :: !(Maybe Text) -- ^ "liquidity_net" - how much liquidity changes when tick crossed
  , pANCAKESWAPV3ETHEREUMTickDTOLiquidityNetUsd :: !(Maybe Text) -- ^ "liquidity_net_usd" - how much liquidity in USD changes when tick crossed
  , pANCAKESWAPV3ETHEREUMTickDTOLastSnapshotDayId :: !(Maybe Int) -- ^ "last_snapshot_day_id" - Day ID of the most recent daily snapshot
  , pANCAKESWAPV3ETHEREUMTickDTOLastSnapshotHourId :: !(Maybe Int) -- ^ "last_snapshot_hour_id" - Hour ID of the most recent hourly snapshot
  , pANCAKESWAPV3ETHEREUMTickDTOLastUpdateTimestamp :: !(Maybe Text) -- ^ "last_update_timestamp" - Timestamp of the last time this entity was updated
  , pANCAKESWAPV3ETHEREUMTickDTOLastUpdateBlockNumber :: !(Maybe Text) -- ^ "last_update_block_number" - Block number of the last time this entity was updated
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON PANCAKESWAPV3ETHEREUMTickDTO
instance A.FromJSON PANCAKESWAPV3ETHEREUMTickDTO where
  parseJSON = A.withObject "PANCAKESWAPV3ETHEREUMTickDTO" $ \o ->
    PANCAKESWAPV3ETHEREUMTickDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "index")
      <*> (o .:? "pool")
      <*> (o .:? "created_timestamp")
      <*> (o .:? "created_block_number")
      <*> (o .:? "prices")
      <*> (o .:? "liquidity_gross")
      <*> (o .:? "liquidity_gross_usd")
      <*> (o .:? "liquidity_net")
      <*> (o .:? "liquidity_net_usd")
      <*> (o .:? "last_snapshot_day_id")
      <*> (o .:? "last_snapshot_hour_id")
      <*> (o .:? "last_update_timestamp")
      <*> (o .:? "last_update_block_number")

-- | ToJSON PANCAKESWAPV3ETHEREUMTickDTO
instance A.ToJSON PANCAKESWAPV3ETHEREUMTickDTO where
  toJSON PANCAKESWAPV3ETHEREUMTickDTO {..} =
   _omitNulls
      [ "entry_time" .= pANCAKESWAPV3ETHEREUMTickDTOEntryTime
      , "recv_time" .= pANCAKESWAPV3ETHEREUMTickDTORecvTime
      , "block_number" .= pANCAKESWAPV3ETHEREUMTickDTOBlockNumber
      , "id" .= pANCAKESWAPV3ETHEREUMTickDTOId
      , "index" .= pANCAKESWAPV3ETHEREUMTickDTOIndex
      , "pool" .= pANCAKESWAPV3ETHEREUMTickDTOPool
      , "created_timestamp" .= pANCAKESWAPV3ETHEREUMTickDTOCreatedTimestamp
      , "created_block_number" .= pANCAKESWAPV3ETHEREUMTickDTOCreatedBlockNumber
      , "prices" .= pANCAKESWAPV3ETHEREUMTickDTOPrices
      , "liquidity_gross" .= pANCAKESWAPV3ETHEREUMTickDTOLiquidityGross
      , "liquidity_gross_usd" .= pANCAKESWAPV3ETHEREUMTickDTOLiquidityGrossUsd
      , "liquidity_net" .= pANCAKESWAPV3ETHEREUMTickDTOLiquidityNet
      , "liquidity_net_usd" .= pANCAKESWAPV3ETHEREUMTickDTOLiquidityNetUsd
      , "last_snapshot_day_id" .= pANCAKESWAPV3ETHEREUMTickDTOLastSnapshotDayId
      , "last_snapshot_hour_id" .= pANCAKESWAPV3ETHEREUMTickDTOLastSnapshotHourId
      , "last_update_timestamp" .= pANCAKESWAPV3ETHEREUMTickDTOLastUpdateTimestamp
      , "last_update_block_number" .= pANCAKESWAPV3ETHEREUMTickDTOLastUpdateBlockNumber
      ]


-- | Construct a value of type 'PANCAKESWAPV3ETHEREUMTickDTO' (by applying it's required fields, if any)
mkPANCAKESWAPV3ETHEREUMTickDTO
  :: PANCAKESWAPV3ETHEREUMTickDTO
mkPANCAKESWAPV3ETHEREUMTickDTO =
  PANCAKESWAPV3ETHEREUMTickDTO
  { pANCAKESWAPV3ETHEREUMTickDTOEntryTime = Nothing
  , pANCAKESWAPV3ETHEREUMTickDTORecvTime = Nothing
  , pANCAKESWAPV3ETHEREUMTickDTOBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMTickDTOId = Nothing
  , pANCAKESWAPV3ETHEREUMTickDTOIndex = Nothing
  , pANCAKESWAPV3ETHEREUMTickDTOPool = Nothing
  , pANCAKESWAPV3ETHEREUMTickDTOCreatedTimestamp = Nothing
  , pANCAKESWAPV3ETHEREUMTickDTOCreatedBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMTickDTOPrices = Nothing
  , pANCAKESWAPV3ETHEREUMTickDTOLiquidityGross = Nothing
  , pANCAKESWAPV3ETHEREUMTickDTOLiquidityGrossUsd = Nothing
  , pANCAKESWAPV3ETHEREUMTickDTOLiquidityNet = Nothing
  , pANCAKESWAPV3ETHEREUMTickDTOLiquidityNetUsd = Nothing
  , pANCAKESWAPV3ETHEREUMTickDTOLastSnapshotDayId = Nothing
  , pANCAKESWAPV3ETHEREUMTickDTOLastSnapshotHourId = Nothing
  , pANCAKESWAPV3ETHEREUMTickDTOLastUpdateTimestamp = Nothing
  , pANCAKESWAPV3ETHEREUMTickDTOLastUpdateBlockNumber = Nothing
  }

-- ** PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO
-- | PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO
-- 
data PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO = PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO
  { pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , pANCAKESWAPV3ETHEREUMTickDailySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: (pool address)-(tick index)-(day ID)
  , pANCAKESWAPV3ETHEREUMTickDailySnapshotDTODayId :: !(Maybe Int) -- ^ "day_id" - Number of days since Unix epoch time
  , pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOTick :: !(Maybe Text) -- ^ "tick" - tick index
  , pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOPool :: !(Maybe Text) -- ^ "pool" - liquidity pool this tick belongs to
  , pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOLiquidityGross :: !(Maybe Text) -- ^ "liquidity_gross" - total liquidity pool has as tick lower or upper
  , pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOLiquidityGrossUsd :: !(Maybe Text) -- ^ "liquidity_gross_usd" - total liquidity in USD pool has as tick lower or upper
  , pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOLiquidityNet :: !(Maybe Text) -- ^ "liquidity_net" - how much liquidity changes when tick crossed
  , pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOLiquidityNetUsd :: !(Maybe Text) -- ^ "liquidity_net_usd" - how much liquidity in USD changes when tick crossed
  , pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO
instance A.FromJSON PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO where
  parseJSON = A.withObject "PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO" $ \o ->
    PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "day_id")
      <*> (o .:? "tick")
      <*> (o .:? "pool")
      <*> (o .:? "liquidity_gross")
      <*> (o .:? "liquidity_gross_usd")
      <*> (o .:? "liquidity_net")
      <*> (o .:? "liquidity_net_usd")
      <*> (o .:? "timestamp")

-- | ToJSON PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO
instance A.ToJSON PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO where
  toJSON PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOEntryTime
      , "recv_time" .= pANCAKESWAPV3ETHEREUMTickDailySnapshotDTORecvTime
      , "block_number" .= pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOBlockNumber
      , "id" .= pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOId
      , "day_id" .= pANCAKESWAPV3ETHEREUMTickDailySnapshotDTODayId
      , "tick" .= pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOTick
      , "pool" .= pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOPool
      , "liquidity_gross" .= pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOLiquidityGross
      , "liquidity_gross_usd" .= pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOLiquidityGrossUsd
      , "liquidity_net" .= pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOLiquidityNet
      , "liquidity_net_usd" .= pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOLiquidityNetUsd
      , "timestamp" .= pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO' (by applying it's required fields, if any)
mkPANCAKESWAPV3ETHEREUMTickDailySnapshotDTO
  :: PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO
mkPANCAKESWAPV3ETHEREUMTickDailySnapshotDTO =
  PANCAKESWAPV3ETHEREUMTickDailySnapshotDTO
  { pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOEntryTime = Nothing
  , pANCAKESWAPV3ETHEREUMTickDailySnapshotDTORecvTime = Nothing
  , pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOId = Nothing
  , pANCAKESWAPV3ETHEREUMTickDailySnapshotDTODayId = Nothing
  , pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOTick = Nothing
  , pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOPool = Nothing
  , pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOLiquidityGross = Nothing
  , pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOLiquidityGrossUsd = Nothing
  , pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOLiquidityNet = Nothing
  , pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOLiquidityNetUsd = Nothing
  , pANCAKESWAPV3ETHEREUMTickDailySnapshotDTOTimestamp = Nothing
  }

-- ** PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO
-- | PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO
-- 
data PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO = PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO
  { pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOId :: !(Maybe Text) -- ^ "id" - (pool address)-(tick index)-(hour ID)
  , pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOHourId :: !(Maybe Int) -- ^ "hour_id" - Number of hours since Unix epoch time
  , pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOTick :: !(Maybe Text) -- ^ "tick" - tick index
  , pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOPool :: !(Maybe Text) -- ^ "pool" - liquidity pool this tick belongs to
  , pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityGross :: !(Maybe Text) -- ^ "liquidity_gross" - total liquidity pool has as tick lower or upper
  , pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityGrossUsd :: !(Maybe Text) -- ^ "liquidity_gross_usd" - total liquidity in USD pool has as tick lower or upper
  , pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityNet :: !(Maybe Text) -- ^ "liquidity_net" - how much liquidity changes when tick crossed
  , pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityNetUsd :: !(Maybe Text) -- ^ "liquidity_net_usd" - how much liquidity in USD changes when tick crossed
  , pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO
instance A.FromJSON PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO where
  parseJSON = A.withObject "PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO" $ \o ->
    PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "hour_id")
      <*> (o .:? "tick")
      <*> (o .:? "pool")
      <*> (o .:? "liquidity_gross")
      <*> (o .:? "liquidity_gross_usd")
      <*> (o .:? "liquidity_net")
      <*> (o .:? "liquidity_net_usd")
      <*> (o .:? "timestamp")

-- | ToJSON PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO
instance A.ToJSON PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO where
  toJSON PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOEntryTime
      , "recv_time" .= pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTORecvTime
      , "block_number" .= pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOBlockNumber
      , "id" .= pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOId
      , "hour_id" .= pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOHourId
      , "tick" .= pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOTick
      , "pool" .= pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOPool
      , "liquidity_gross" .= pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityGross
      , "liquidity_gross_usd" .= pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityGrossUsd
      , "liquidity_net" .= pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityNet
      , "liquidity_net_usd" .= pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityNetUsd
      , "timestamp" .= pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO' (by applying it's required fields, if any)
mkPANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO
  :: PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO
mkPANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO =
  PANCAKESWAPV3ETHEREUMTickHourlySnapshotDTO
  { pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOEntryTime = Nothing
  , pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTORecvTime = Nothing
  , pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOId = Nothing
  , pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOHourId = Nothing
  , pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOTick = Nothing
  , pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOPool = Nothing
  , pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityGross = Nothing
  , pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityGrossUsd = Nothing
  , pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityNet = Nothing
  , pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityNetUsd = Nothing
  , pANCAKESWAPV3ETHEREUMTickHourlySnapshotDTOTimestamp = Nothing
  }

-- ** PANCAKESWAPV3ETHEREUMTokenDTO
-- | PANCAKESWAPV3ETHEREUMTokenDTO
-- Stores aggregated information for a specific token across all pairs that token is included in.
data PANCAKESWAPV3ETHEREUMTokenDTO = PANCAKESWAPV3ETHEREUMTokenDTO
  { pANCAKESWAPV3ETHEREUMTokenDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , pANCAKESWAPV3ETHEREUMTokenDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , pANCAKESWAPV3ETHEREUMTokenDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , pANCAKESWAPV3ETHEREUMTokenDTOVid :: !(Maybe Integer) -- ^ "vid" - .
  , pANCAKESWAPV3ETHEREUMTokenDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , pANCAKESWAPV3ETHEREUMTokenDTOId :: !(Maybe Text) -- ^ "id" - Smart contract address of the token.
  , pANCAKESWAPV3ETHEREUMTokenDTOName :: !(Maybe Text) -- ^ "name" - Name of the token, mirrored from the smart contract.
  , pANCAKESWAPV3ETHEREUMTokenDTOSymbol :: !(Maybe Text) -- ^ "symbol" - Symbol of the token, mirrored from the smart contract.
  , pANCAKESWAPV3ETHEREUMTokenDTODecimals :: !(Maybe Int) -- ^ "decimals" - The number of decimal places this token uses, default to 18.
  , pANCAKESWAPV3ETHEREUMTokenDTOLastPriceUsd :: !(Maybe Text) -- ^ "last_price_usd" - Optional field to track the price of a token, mostly for caching purposes.
  , pANCAKESWAPV3ETHEREUMTokenDTOLastPriceBlockNumber :: !(Maybe Text) -- ^ "last_price_block_number" - Optional field to track the block number of the last token price.
  , pANCAKESWAPV3ETHEREUMTokenDTOLastPricePool :: !(Maybe Text) -- ^ "last_price_pool" - Last pool that gave this token a price.
  , pANCAKESWAPV3ETHEREUMTokenDTOTotalSupply :: !(Maybe Text) -- ^ "total_supply" - Amount of tokens in the protocol.
  , pANCAKESWAPV3ETHEREUMTokenDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Total value locked in the protocol.
  , pANCAKESWAPV3ETHEREUMTokenDTOLargePriceChangeBuffer :: !(Maybe Int) -- ^ "large_price_change_buffer" - The buffer for detecting large price changes.
  , pANCAKESWAPV3ETHEREUMTokenDTOLargeTvlImpactBuffer :: !(Maybe Int) -- ^ "large_tvl_impact_buffer" - The buffer for detecting large TVL (Total Value Locked) impact.
  , pANCAKESWAPV3ETHEREUMTokenDTOTokenSymbol :: !(Maybe Text) -- ^ /ReadOnly/ "token_symbol"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON PANCAKESWAPV3ETHEREUMTokenDTO
instance A.FromJSON PANCAKESWAPV3ETHEREUMTokenDTO where
  parseJSON = A.withObject "PANCAKESWAPV3ETHEREUMTokenDTO" $ \o ->
    PANCAKESWAPV3ETHEREUMTokenDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "name")
      <*> (o .:? "symbol")
      <*> (o .:? "decimals")
      <*> (o .:? "last_price_usd")
      <*> (o .:? "last_price_block_number")
      <*> (o .:? "last_price_pool")
      <*> (o .:? "total_supply")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "large_price_change_buffer")
      <*> (o .:? "large_tvl_impact_buffer")
      <*> (o .:? "token_symbol")

-- | ToJSON PANCAKESWAPV3ETHEREUMTokenDTO
instance A.ToJSON PANCAKESWAPV3ETHEREUMTokenDTO where
  toJSON PANCAKESWAPV3ETHEREUMTokenDTO {..} =
   _omitNulls
      [ "entry_time" .= pANCAKESWAPV3ETHEREUMTokenDTOEntryTime
      , "recv_time" .= pANCAKESWAPV3ETHEREUMTokenDTORecvTime
      , "block_number" .= pANCAKESWAPV3ETHEREUMTokenDTOBlockNumber
      , "vid" .= pANCAKESWAPV3ETHEREUMTokenDTOVid
      , "block_range" .= pANCAKESWAPV3ETHEREUMTokenDTOBlockRange
      , "id" .= pANCAKESWAPV3ETHEREUMTokenDTOId
      , "name" .= pANCAKESWAPV3ETHEREUMTokenDTOName
      , "symbol" .= pANCAKESWAPV3ETHEREUMTokenDTOSymbol
      , "decimals" .= pANCAKESWAPV3ETHEREUMTokenDTODecimals
      , "last_price_usd" .= pANCAKESWAPV3ETHEREUMTokenDTOLastPriceUsd
      , "last_price_block_number" .= pANCAKESWAPV3ETHEREUMTokenDTOLastPriceBlockNumber
      , "last_price_pool" .= pANCAKESWAPV3ETHEREUMTokenDTOLastPricePool
      , "total_supply" .= pANCAKESWAPV3ETHEREUMTokenDTOTotalSupply
      , "total_value_locked_usd" .= pANCAKESWAPV3ETHEREUMTokenDTOTotalValueLockedUsd
      , "large_price_change_buffer" .= pANCAKESWAPV3ETHEREUMTokenDTOLargePriceChangeBuffer
      , "large_tvl_impact_buffer" .= pANCAKESWAPV3ETHEREUMTokenDTOLargeTvlImpactBuffer
      , "token_symbol" .= pANCAKESWAPV3ETHEREUMTokenDTOTokenSymbol
      ]


-- | Construct a value of type 'PANCAKESWAPV3ETHEREUMTokenDTO' (by applying it's required fields, if any)
mkPANCAKESWAPV3ETHEREUMTokenDTO
  :: PANCAKESWAPV3ETHEREUMTokenDTO
mkPANCAKESWAPV3ETHEREUMTokenDTO =
  PANCAKESWAPV3ETHEREUMTokenDTO
  { pANCAKESWAPV3ETHEREUMTokenDTOEntryTime = Nothing
  , pANCAKESWAPV3ETHEREUMTokenDTORecvTime = Nothing
  , pANCAKESWAPV3ETHEREUMTokenDTOBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMTokenDTOVid = Nothing
  , pANCAKESWAPV3ETHEREUMTokenDTOBlockRange = Nothing
  , pANCAKESWAPV3ETHEREUMTokenDTOId = Nothing
  , pANCAKESWAPV3ETHEREUMTokenDTOName = Nothing
  , pANCAKESWAPV3ETHEREUMTokenDTOSymbol = Nothing
  , pANCAKESWAPV3ETHEREUMTokenDTODecimals = Nothing
  , pANCAKESWAPV3ETHEREUMTokenDTOLastPriceUsd = Nothing
  , pANCAKESWAPV3ETHEREUMTokenDTOLastPriceBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMTokenDTOLastPricePool = Nothing
  , pANCAKESWAPV3ETHEREUMTokenDTOTotalSupply = Nothing
  , pANCAKESWAPV3ETHEREUMTokenDTOTotalValueLockedUsd = Nothing
  , pANCAKESWAPV3ETHEREUMTokenDTOLargePriceChangeBuffer = Nothing
  , pANCAKESWAPV3ETHEREUMTokenDTOLargeTvlImpactBuffer = Nothing
  , pANCAKESWAPV3ETHEREUMTokenDTOTokenSymbol = Nothing
  }

-- ** PANCAKESWAPV3ETHEREUMTokenWhiteListDTO
-- | PANCAKESWAPV3ETHEREUMTokenWhiteListDTO
-- 
data PANCAKESWAPV3ETHEREUMTokenWhiteListDTO = PANCAKESWAPV3ETHEREUMTokenWhiteListDTO
  { pANCAKESWAPV3ETHEREUMTokenWhiteListDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , pANCAKESWAPV3ETHEREUMTokenWhiteListDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , pANCAKESWAPV3ETHEREUMTokenWhiteListDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , pANCAKESWAPV3ETHEREUMTokenWhiteListDTOId :: !(Maybe Text) -- ^ "id" - Token Address
  , pANCAKESWAPV3ETHEREUMTokenWhiteListDTOWhitelistPools :: !(Maybe [Text]) -- ^ "whitelist_pools" - pools token is in that are white listed for USD pricing
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON PANCAKESWAPV3ETHEREUMTokenWhiteListDTO
instance A.FromJSON PANCAKESWAPV3ETHEREUMTokenWhiteListDTO where
  parseJSON = A.withObject "PANCAKESWAPV3ETHEREUMTokenWhiteListDTO" $ \o ->
    PANCAKESWAPV3ETHEREUMTokenWhiteListDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "whitelist_pools")

-- | ToJSON PANCAKESWAPV3ETHEREUMTokenWhiteListDTO
instance A.ToJSON PANCAKESWAPV3ETHEREUMTokenWhiteListDTO where
  toJSON PANCAKESWAPV3ETHEREUMTokenWhiteListDTO {..} =
   _omitNulls
      [ "entry_time" .= pANCAKESWAPV3ETHEREUMTokenWhiteListDTOEntryTime
      , "recv_time" .= pANCAKESWAPV3ETHEREUMTokenWhiteListDTORecvTime
      , "block_number" .= pANCAKESWAPV3ETHEREUMTokenWhiteListDTOBlockNumber
      , "id" .= pANCAKESWAPV3ETHEREUMTokenWhiteListDTOId
      , "whitelist_pools" .= pANCAKESWAPV3ETHEREUMTokenWhiteListDTOWhitelistPools
      ]


-- | Construct a value of type 'PANCAKESWAPV3ETHEREUMTokenWhiteListDTO' (by applying it's required fields, if any)
mkPANCAKESWAPV3ETHEREUMTokenWhiteListDTO
  :: PANCAKESWAPV3ETHEREUMTokenWhiteListDTO
mkPANCAKESWAPV3ETHEREUMTokenWhiteListDTO =
  PANCAKESWAPV3ETHEREUMTokenWhiteListDTO
  { pANCAKESWAPV3ETHEREUMTokenWhiteListDTOEntryTime = Nothing
  , pANCAKESWAPV3ETHEREUMTokenWhiteListDTORecvTime = Nothing
  , pANCAKESWAPV3ETHEREUMTokenWhiteListDTOBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMTokenWhiteListDTOId = Nothing
  , pANCAKESWAPV3ETHEREUMTokenWhiteListDTOWhitelistPools = Nothing
  }

-- ** PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO
-- | PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO
-- 
data PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO = PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO
  { pANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , pANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , pANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , pANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTOId :: !(Maybe Text) -- ^ "id" - Whitelist Token Symbol
  , pANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTOAddress :: !(Maybe Text) -- ^ "address" - Whitelist Token Address
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO
instance A.FromJSON PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO where
  parseJSON = A.withObject "PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO" $ \o ->
    PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "address")

-- | ToJSON PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO
instance A.ToJSON PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO where
  toJSON PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO {..} =
   _omitNulls
      [ "entry_time" .= pANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTOEntryTime
      , "recv_time" .= pANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTORecvTime
      , "block_number" .= pANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTOBlockNumber
      , "id" .= pANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTOId
      , "address" .= pANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTOAddress
      ]


-- | Construct a value of type 'PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO' (by applying it's required fields, if any)
mkPANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO
  :: PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO
mkPANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO =
  PANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTO
  { pANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTOEntryTime = Nothing
  , pANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTORecvTime = Nothing
  , pANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTOBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTOId = Nothing
  , pANCAKESWAPV3ETHEREUMTokenWhiteListSymbolDTOAddress = Nothing
  }

-- ** PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
-- | PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
-- 
data PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO = PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
  { pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTOId :: !(Maybe Text) -- ^ "id" - ID is # of days since Unix epoch time
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTODay :: !(Maybe Int) -- ^ "day" - Number of days since Unix epoch time
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - Protocol this snapshot is associated with
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyActiveUsers :: !(Maybe Int) -- ^ "daily_active_users" - Number of unique daily active users
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTOCumulativeUniqueUsers :: !(Maybe Int) -- ^ "cumulative_unique_users" - Number of cumulative unique users
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyTransactionCount :: !(Maybe Int) -- ^ "daily_transaction_count" - Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface.
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTOTotalPoolCount :: !(Maybe Int) -- ^ "total_pool_count" - Total number of pools
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyDepositCount :: !(Maybe Int) -- ^ "daily_deposit_count" - Total number of deposits (add liquidity) in an day
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyWithdrawCount :: !(Maybe Int) -- ^ "daily_withdraw_count" - Total number of withdrawals (remove liquidity) in an day
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailySwapCount :: !(Maybe Int) -- ^ "daily_swap_count" - Total number of trades (swaps) in an day
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
instance A.FromJSON PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO where
  parseJSON = A.withObject "PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO" $ \o ->
    PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "day")
      <*> (o .:? "protocol")
      <*> (o .:? "daily_active_users")
      <*> (o .:? "cumulative_unique_users")
      <*> (o .:? "daily_transaction_count")
      <*> (o .:? "total_pool_count")
      <*> (o .:? "daily_deposit_count")
      <*> (o .:? "daily_withdraw_count")
      <*> (o .:? "daily_swap_count")
      <*> (o .:? "timestamp")

-- | ToJSON PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
instance A.ToJSON PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO where
  toJSON PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTOEntryTime
      , "recv_time" .= pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTORecvTime
      , "block_number" .= pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTOBlockNumber
      , "id" .= pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTOId
      , "day" .= pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTODay
      , "protocol" .= pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTOProtocol
      , "daily_active_users" .= pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyActiveUsers
      , "cumulative_unique_users" .= pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTOCumulativeUniqueUsers
      , "daily_transaction_count" .= pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyTransactionCount
      , "total_pool_count" .= pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTOTotalPoolCount
      , "daily_deposit_count" .= pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyDepositCount
      , "daily_withdraw_count" .= pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyWithdrawCount
      , "daily_swap_count" .= pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailySwapCount
      , "timestamp" .= pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO' (by applying it's required fields, if any)
mkPANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
  :: PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
mkPANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO =
  PANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
  { pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTOEntryTime = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTORecvTime = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTOBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTOId = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTODay = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTOProtocol = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyActiveUsers = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTOCumulativeUniqueUsers = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyTransactionCount = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTOTotalPoolCount = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyDepositCount = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyWithdrawCount = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailySwapCount = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsDailySnapshotDTOTimestamp = Nothing
  }

-- ** PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
-- | PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
-- 
data PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO = PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
  { pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOId :: !(Maybe Text) -- ^ "id" - (# of hours since Unix epoch time)
  , pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHour :: !(Maybe Int) -- ^ "hour" - Number of hours since Unix epoch time
  , pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - Protocol this snapshot is associated with
  , pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyActiveUsers :: !(Maybe Int) -- ^ "hourly_active_users" - Number of unique hourly active users
  , pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOCumulativeUniqueUsers :: !(Maybe Int) -- ^ "cumulative_unique_users" - Number of cumulative unique users
  , pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyTransactionCount :: !(Maybe Int) -- ^ "hourly_transaction_count" - Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface.
  , pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyDepositCount :: !(Maybe Int) -- ^ "hourly_deposit_count" - Total number of deposits (add liquidity) in an hour
  , pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyWithdrawCount :: !(Maybe Int) -- ^ "hourly_withdraw_count" - Total number of withdrawals (remove liquidity) in an hour
  , pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlySwapCount :: !(Maybe Int) -- ^ "hourly_swap_count" - Total number of trades (swaps) in an hour
  , pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
instance A.FromJSON PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO where
  parseJSON = A.withObject "PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO" $ \o ->
    PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "hour")
      <*> (o .:? "protocol")
      <*> (o .:? "hourly_active_users")
      <*> (o .:? "cumulative_unique_users")
      <*> (o .:? "hourly_transaction_count")
      <*> (o .:? "hourly_deposit_count")
      <*> (o .:? "hourly_withdraw_count")
      <*> (o .:? "hourly_swap_count")
      <*> (o .:? "timestamp")

-- | ToJSON PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
instance A.ToJSON PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO where
  toJSON PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOEntryTime
      , "recv_time" .= pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTORecvTime
      , "block_number" .= pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOBlockNumber
      , "id" .= pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOId
      , "hour" .= pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHour
      , "protocol" .= pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOProtocol
      , "hourly_active_users" .= pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyActiveUsers
      , "cumulative_unique_users" .= pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOCumulativeUniqueUsers
      , "hourly_transaction_count" .= pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyTransactionCount
      , "hourly_deposit_count" .= pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyDepositCount
      , "hourly_withdraw_count" .= pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyWithdrawCount
      , "hourly_swap_count" .= pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlySwapCount
      , "timestamp" .= pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO' (by applying it's required fields, if any)
mkPANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
  :: PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
mkPANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO =
  PANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
  { pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOEntryTime = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTORecvTime = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOId = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHour = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOProtocol = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyActiveUsers = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOCumulativeUniqueUsers = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyTransactionCount = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyDepositCount = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyWithdrawCount = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlySwapCount = Nothing
  , pANCAKESWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOTimestamp = Nothing
  }

-- ** PANCAKESWAPV3ETHEREUMWithdrawDTO
-- | PANCAKESWAPV3ETHEREUMWithdrawDTO
-- 
data PANCAKESWAPV3ETHEREUMWithdrawDTO = PANCAKESWAPV3ETHEREUMWithdrawDTO
  { pANCAKESWAPV3ETHEREUMWithdrawDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , pANCAKESWAPV3ETHEREUMWithdrawDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , pANCAKESWAPV3ETHEREUMWithdrawDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , pANCAKESWAPV3ETHEREUMWithdrawDTOId :: !(Maybe Text) -- ^ "id" - (transaction hash)-(log index)
  , pANCAKESWAPV3ETHEREUMWithdrawDTOHash :: !(Maybe Text) -- ^ "hash" - Transaction hash of the transaction that emitted this event
  , pANCAKESWAPV3ETHEREUMWithdrawDTONonce :: !(Maybe Text) -- ^ "nonce" - Nonce of the transaction that emitted this event
  , pANCAKESWAPV3ETHEREUMWithdrawDTOLogIndex :: !(Maybe Int) -- ^ "log_index" - Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0
  , pANCAKESWAPV3ETHEREUMWithdrawDTOGasLimit :: !(Maybe Text) -- ^ "gas_limit" - Gas limit of the transaction that emitted this event
  , pANCAKESWAPV3ETHEREUMWithdrawDTOGasUsed :: !(Maybe Text) -- ^ "gas_used" - Gas used in this transaction. (Optional because not every chain will support this)
  , pANCAKESWAPV3ETHEREUMWithdrawDTOGasPrice :: !(Maybe Text) -- ^ "gas_price" - Gas price of the transaction that emitted this event
  , pANCAKESWAPV3ETHEREUMWithdrawDTOProtocol :: !(Maybe Text) -- ^ "protocol" - The protocol this transaction belongs to
  , pANCAKESWAPV3ETHEREUMWithdrawDTOAccount :: !(Maybe Text) -- ^ "account" - Account that emitted this event
  , pANCAKESWAPV3ETHEREUMWithdrawDTOPosition :: !(Maybe Text) -- ^ "position" - The user position changed by this event
  , pANCAKESWAPV3ETHEREUMWithdrawDTOTickLower :: !(Maybe Text) -- ^ "tick_lower" - lower tick of position
  , pANCAKESWAPV3ETHEREUMWithdrawDTOTickUpper :: !(Maybe Text) -- ^ "tick_upper" - upper tick of position
  , pANCAKESWAPV3ETHEREUMWithdrawDTOPool :: !(Maybe Text) -- ^ "pool" - The pool involving this event
  , pANCAKESWAPV3ETHEREUMWithdrawDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this event
  , pANCAKESWAPV3ETHEREUMWithdrawDTOLiquidity :: !(Maybe Text) -- ^ "liquidity" - Amount of liquidity burned
  , pANCAKESWAPV3ETHEREUMWithdrawDTOInputTokens :: !(Maybe [Text]) -- ^ "input_tokens" - Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool
  , pANCAKESWAPV3ETHEREUMWithdrawDTOInputTokenAmounts :: !(Maybe [Text]) -- ^ "input_token_amounts" - Amount of input tokens in the token&#39;s native unit
  , pANCAKESWAPV3ETHEREUMWithdrawDTOReserveAmounts :: !(Maybe [Text]) -- ^ "reserve_amounts" - Amount of input tokens in the liquidity pool
  , pANCAKESWAPV3ETHEREUMWithdrawDTOAmountUsd :: !(Maybe Text) -- ^ "amount_usd" - USD-normalized value of the transaction of the underlying (e.g. sum of tokens withdrawn from a pool)
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON PANCAKESWAPV3ETHEREUMWithdrawDTO
instance A.FromJSON PANCAKESWAPV3ETHEREUMWithdrawDTO where
  parseJSON = A.withObject "PANCAKESWAPV3ETHEREUMWithdrawDTO" $ \o ->
    PANCAKESWAPV3ETHEREUMWithdrawDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "hash")
      <*> (o .:? "nonce")
      <*> (o .:? "log_index")
      <*> (o .:? "gas_limit")
      <*> (o .:? "gas_used")
      <*> (o .:? "gas_price")
      <*> (o .:? "protocol")
      <*> (o .:? "account")
      <*> (o .:? "position")
      <*> (o .:? "tick_lower")
      <*> (o .:? "tick_upper")
      <*> (o .:? "pool")
      <*> (o .:? "timestamp")
      <*> (o .:? "liquidity")
      <*> (o .:? "input_tokens")
      <*> (o .:? "input_token_amounts")
      <*> (o .:? "reserve_amounts")
      <*> (o .:? "amount_usd")

-- | ToJSON PANCAKESWAPV3ETHEREUMWithdrawDTO
instance A.ToJSON PANCAKESWAPV3ETHEREUMWithdrawDTO where
  toJSON PANCAKESWAPV3ETHEREUMWithdrawDTO {..} =
   _omitNulls
      [ "entry_time" .= pANCAKESWAPV3ETHEREUMWithdrawDTOEntryTime
      , "recv_time" .= pANCAKESWAPV3ETHEREUMWithdrawDTORecvTime
      , "block_number" .= pANCAKESWAPV3ETHEREUMWithdrawDTOBlockNumber
      , "id" .= pANCAKESWAPV3ETHEREUMWithdrawDTOId
      , "hash" .= pANCAKESWAPV3ETHEREUMWithdrawDTOHash
      , "nonce" .= pANCAKESWAPV3ETHEREUMWithdrawDTONonce
      , "log_index" .= pANCAKESWAPV3ETHEREUMWithdrawDTOLogIndex
      , "gas_limit" .= pANCAKESWAPV3ETHEREUMWithdrawDTOGasLimit
      , "gas_used" .= pANCAKESWAPV3ETHEREUMWithdrawDTOGasUsed
      , "gas_price" .= pANCAKESWAPV3ETHEREUMWithdrawDTOGasPrice
      , "protocol" .= pANCAKESWAPV3ETHEREUMWithdrawDTOProtocol
      , "account" .= pANCAKESWAPV3ETHEREUMWithdrawDTOAccount
      , "position" .= pANCAKESWAPV3ETHEREUMWithdrawDTOPosition
      , "tick_lower" .= pANCAKESWAPV3ETHEREUMWithdrawDTOTickLower
      , "tick_upper" .= pANCAKESWAPV3ETHEREUMWithdrawDTOTickUpper
      , "pool" .= pANCAKESWAPV3ETHEREUMWithdrawDTOPool
      , "timestamp" .= pANCAKESWAPV3ETHEREUMWithdrawDTOTimestamp
      , "liquidity" .= pANCAKESWAPV3ETHEREUMWithdrawDTOLiquidity
      , "input_tokens" .= pANCAKESWAPV3ETHEREUMWithdrawDTOInputTokens
      , "input_token_amounts" .= pANCAKESWAPV3ETHEREUMWithdrawDTOInputTokenAmounts
      , "reserve_amounts" .= pANCAKESWAPV3ETHEREUMWithdrawDTOReserveAmounts
      , "amount_usd" .= pANCAKESWAPV3ETHEREUMWithdrawDTOAmountUsd
      ]


-- | Construct a value of type 'PANCAKESWAPV3ETHEREUMWithdrawDTO' (by applying it's required fields, if any)
mkPANCAKESWAPV3ETHEREUMWithdrawDTO
  :: PANCAKESWAPV3ETHEREUMWithdrawDTO
mkPANCAKESWAPV3ETHEREUMWithdrawDTO =
  PANCAKESWAPV3ETHEREUMWithdrawDTO
  { pANCAKESWAPV3ETHEREUMWithdrawDTOEntryTime = Nothing
  , pANCAKESWAPV3ETHEREUMWithdrawDTORecvTime = Nothing
  , pANCAKESWAPV3ETHEREUMWithdrawDTOBlockNumber = Nothing
  , pANCAKESWAPV3ETHEREUMWithdrawDTOId = Nothing
  , pANCAKESWAPV3ETHEREUMWithdrawDTOHash = Nothing
  , pANCAKESWAPV3ETHEREUMWithdrawDTONonce = Nothing
  , pANCAKESWAPV3ETHEREUMWithdrawDTOLogIndex = Nothing
  , pANCAKESWAPV3ETHEREUMWithdrawDTOGasLimit = Nothing
  , pANCAKESWAPV3ETHEREUMWithdrawDTOGasUsed = Nothing
  , pANCAKESWAPV3ETHEREUMWithdrawDTOGasPrice = Nothing
  , pANCAKESWAPV3ETHEREUMWithdrawDTOProtocol = Nothing
  , pANCAKESWAPV3ETHEREUMWithdrawDTOAccount = Nothing
  , pANCAKESWAPV3ETHEREUMWithdrawDTOPosition = Nothing
  , pANCAKESWAPV3ETHEREUMWithdrawDTOTickLower = Nothing
  , pANCAKESWAPV3ETHEREUMWithdrawDTOTickUpper = Nothing
  , pANCAKESWAPV3ETHEREUMWithdrawDTOPool = Nothing
  , pANCAKESWAPV3ETHEREUMWithdrawDTOTimestamp = Nothing
  , pANCAKESWAPV3ETHEREUMWithdrawDTOLiquidity = Nothing
  , pANCAKESWAPV3ETHEREUMWithdrawDTOInputTokens = Nothing
  , pANCAKESWAPV3ETHEREUMWithdrawDTOInputTokenAmounts = Nothing
  , pANCAKESWAPV3ETHEREUMWithdrawDTOReserveAmounts = Nothing
  , pANCAKESWAPV3ETHEREUMWithdrawDTOAmountUsd = Nothing
  }

-- ** SUSHISWAPV3ETHEREUMAccountDTO
-- | SUSHISWAPV3ETHEREUMAccountDTO
data SUSHISWAPV3ETHEREUMAccountDTO = SUSHISWAPV3ETHEREUMAccountDTO
  { sUSHISWAPV3ETHEREUMAccountDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sUSHISWAPV3ETHEREUMAccountDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sUSHISWAPV3ETHEREUMAccountDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sUSHISWAPV3ETHEREUMAccountDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , sUSHISWAPV3ETHEREUMAccountDTOId :: !(Maybe Text) -- ^ "id" - Account address.
  , sUSHISWAPV3ETHEREUMAccountDTOPositionCount :: !(Maybe Int) -- ^ "position_count" - Number of positions this account has.
  , sUSHISWAPV3ETHEREUMAccountDTOOpenPositionCount :: !(Maybe Int) -- ^ "open_position_count" - Number of open positions this account has.
  , sUSHISWAPV3ETHEREUMAccountDTOClosedPositionCount :: !(Maybe Int) -- ^ "closed_position_count" - Number of closed positions this account has.
  , sUSHISWAPV3ETHEREUMAccountDTODepositCount :: !(Maybe Int) -- ^ "deposit_count" - Number of deposits this account made.
  , sUSHISWAPV3ETHEREUMAccountDTOWithdrawCount :: !(Maybe Int) -- ^ "withdraw_count" - Number of withdrawals this account made.
  , sUSHISWAPV3ETHEREUMAccountDTOSwapCount :: !(Maybe Int) -- ^ "swap_count" - Number of times this account has traded/swapped.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SUSHISWAPV3ETHEREUMAccountDTO
instance A.FromJSON SUSHISWAPV3ETHEREUMAccountDTO where
  parseJSON = A.withObject "SUSHISWAPV3ETHEREUMAccountDTO" $ \o ->
    SUSHISWAPV3ETHEREUMAccountDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "position_count")
      <*> (o .:? "open_position_count")
      <*> (o .:? "closed_position_count")
      <*> (o .:? "deposit_count")
      <*> (o .:? "withdraw_count")
      <*> (o .:? "swap_count")

-- | ToJSON SUSHISWAPV3ETHEREUMAccountDTO
instance A.ToJSON SUSHISWAPV3ETHEREUMAccountDTO where
  toJSON SUSHISWAPV3ETHEREUMAccountDTO {..} =
   _omitNulls
      [ "entry_time" .= sUSHISWAPV3ETHEREUMAccountDTOEntryTime
      , "recv_time" .= sUSHISWAPV3ETHEREUMAccountDTORecvTime
      , "block_number" .= sUSHISWAPV3ETHEREUMAccountDTOBlockNumber
      , "block_range" .= sUSHISWAPV3ETHEREUMAccountDTOBlockRange
      , "id" .= sUSHISWAPV3ETHEREUMAccountDTOId
      , "position_count" .= sUSHISWAPV3ETHEREUMAccountDTOPositionCount
      , "open_position_count" .= sUSHISWAPV3ETHEREUMAccountDTOOpenPositionCount
      , "closed_position_count" .= sUSHISWAPV3ETHEREUMAccountDTOClosedPositionCount
      , "deposit_count" .= sUSHISWAPV3ETHEREUMAccountDTODepositCount
      , "withdraw_count" .= sUSHISWAPV3ETHEREUMAccountDTOWithdrawCount
      , "swap_count" .= sUSHISWAPV3ETHEREUMAccountDTOSwapCount
      ]


-- | Construct a value of type 'SUSHISWAPV3ETHEREUMAccountDTO' (by applying it's required fields, if any)
mkSUSHISWAPV3ETHEREUMAccountDTO
  :: SUSHISWAPV3ETHEREUMAccountDTO
mkSUSHISWAPV3ETHEREUMAccountDTO =
  SUSHISWAPV3ETHEREUMAccountDTO
  { sUSHISWAPV3ETHEREUMAccountDTOEntryTime = Nothing
  , sUSHISWAPV3ETHEREUMAccountDTORecvTime = Nothing
  , sUSHISWAPV3ETHEREUMAccountDTOBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMAccountDTOBlockRange = Nothing
  , sUSHISWAPV3ETHEREUMAccountDTOId = Nothing
  , sUSHISWAPV3ETHEREUMAccountDTOPositionCount = Nothing
  , sUSHISWAPV3ETHEREUMAccountDTOOpenPositionCount = Nothing
  , sUSHISWAPV3ETHEREUMAccountDTOClosedPositionCount = Nothing
  , sUSHISWAPV3ETHEREUMAccountDTODepositCount = Nothing
  , sUSHISWAPV3ETHEREUMAccountDTOWithdrawCount = Nothing
  , sUSHISWAPV3ETHEREUMAccountDTOSwapCount = Nothing
  }

-- ** SUSHISWAPV3ETHEREUMActiveAccountDTO
-- | SUSHISWAPV3ETHEREUMActiveAccountDTO
-- Entity for calculating daily/hourly active users.
data SUSHISWAPV3ETHEREUMActiveAccountDTO = SUSHISWAPV3ETHEREUMActiveAccountDTO
  { sUSHISWAPV3ETHEREUMActiveAccountDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sUSHISWAPV3ETHEREUMActiveAccountDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sUSHISWAPV3ETHEREUMActiveAccountDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sUSHISWAPV3ETHEREUMActiveAccountDTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: (daily/hourly)-(address of the account)-(days/hours since unix epoch)
  , sUSHISWAPV3ETHEREUMActiveAccountDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SUSHISWAPV3ETHEREUMActiveAccountDTO
instance A.FromJSON SUSHISWAPV3ETHEREUMActiveAccountDTO where
  parseJSON = A.withObject "SUSHISWAPV3ETHEREUMActiveAccountDTO" $ \o ->
    SUSHISWAPV3ETHEREUMActiveAccountDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "block_range")

-- | ToJSON SUSHISWAPV3ETHEREUMActiveAccountDTO
instance A.ToJSON SUSHISWAPV3ETHEREUMActiveAccountDTO where
  toJSON SUSHISWAPV3ETHEREUMActiveAccountDTO {..} =
   _omitNulls
      [ "entry_time" .= sUSHISWAPV3ETHEREUMActiveAccountDTOEntryTime
      , "recv_time" .= sUSHISWAPV3ETHEREUMActiveAccountDTORecvTime
      , "block_number" .= sUSHISWAPV3ETHEREUMActiveAccountDTOBlockNumber
      , "id" .= sUSHISWAPV3ETHEREUMActiveAccountDTOId
      , "block_range" .= sUSHISWAPV3ETHEREUMActiveAccountDTOBlockRange
      ]


-- | Construct a value of type 'SUSHISWAPV3ETHEREUMActiveAccountDTO' (by applying it's required fields, if any)
mkSUSHISWAPV3ETHEREUMActiveAccountDTO
  :: SUSHISWAPV3ETHEREUMActiveAccountDTO
mkSUSHISWAPV3ETHEREUMActiveAccountDTO =
  SUSHISWAPV3ETHEREUMActiveAccountDTO
  { sUSHISWAPV3ETHEREUMActiveAccountDTOEntryTime = Nothing
  , sUSHISWAPV3ETHEREUMActiveAccountDTORecvTime = Nothing
  , sUSHISWAPV3ETHEREUMActiveAccountDTOBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMActiveAccountDTOId = Nothing
  , sUSHISWAPV3ETHEREUMActiveAccountDTOBlockRange = Nothing
  }

-- ** SUSHISWAPV3ETHEREUMDepositDTO
-- | SUSHISWAPV3ETHEREUMDepositDTO
-- Entity represents a user action in the protocol involving the addition of funds to a liquidity pool.
data SUSHISWAPV3ETHEREUMDepositDTO = SUSHISWAPV3ETHEREUMDepositDTO
  { sUSHISWAPV3ETHEREUMDepositDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sUSHISWAPV3ETHEREUMDepositDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sUSHISWAPV3ETHEREUMDepositDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sUSHISWAPV3ETHEREUMDepositDTOBlock :: !(Maybe Int) -- ^ "block_" - 
  , sUSHISWAPV3ETHEREUMDepositDTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: (transaction hash)-(log index)
  , sUSHISWAPV3ETHEREUMDepositDTOHash :: !(Maybe Text) -- ^ "hash" - Transaction hash of the transaction that emitted this event.
  , sUSHISWAPV3ETHEREUMDepositDTONonce :: !(Maybe Text) -- ^ "nonce" - Nonce of the transaction that emitted this event.
  , sUSHISWAPV3ETHEREUMDepositDTOLogIndex :: !(Maybe Int) -- ^ "log_index" - Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0.
  , sUSHISWAPV3ETHEREUMDepositDTOGasLimit :: !(Maybe Text) -- ^ "gas_limit" - Gas limit of the transaction that emitted this event.
  , sUSHISWAPV3ETHEREUMDepositDTOGasUsed :: !(Maybe Text) -- ^ "gas_used" - Gas used in this transaction. (Optional because not every chain will support this).
  , sUSHISWAPV3ETHEREUMDepositDTOGasPrice :: !(Maybe Text) -- ^ "gas_price" - Gas price of the transaction that emitted this event.
  , sUSHISWAPV3ETHEREUMDepositDTOProtocol :: !(Maybe Text) -- ^ "protocol" - The protocol this transaction belongs to.
  , sUSHISWAPV3ETHEREUMDepositDTOAccount :: !(Maybe Text) -- ^ "account" - Account that emitted this event.
  , sUSHISWAPV3ETHEREUMDepositDTOPosition :: !(Maybe Text) -- ^ "position" - The user position changed by this event.
  , sUSHISWAPV3ETHEREUMDepositDTOPool :: !(Maybe Text) -- ^ "pool" - The pool involving this event.
  , sUSHISWAPV3ETHEREUMDepositDTOTickLower :: !(Maybe Text) -- ^ "tick_lower" - Lower tick of position.
  , sUSHISWAPV3ETHEREUMDepositDTOTickUpper :: !(Maybe Text) -- ^ "tick_upper" - Upper tick of position.
  , sUSHISWAPV3ETHEREUMDepositDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this event.
  , sUSHISWAPV3ETHEREUMDepositDTOLiquidity :: !(Maybe Text) -- ^ "liquidity" - Amount of liquidity minted.
  , sUSHISWAPV3ETHEREUMDepositDTOInputTokens :: !(Maybe [Text]) -- ^ "input_tokens" - Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool.
  , sUSHISWAPV3ETHEREUMDepositDTOInputTokenAmounts :: !(Maybe [Text]) -- ^ "input_token_amounts" - Amount of input tokens in the token&#39;s native unit.
  , sUSHISWAPV3ETHEREUMDepositDTOReserveAmounts :: !(Maybe [Text]) -- ^ "reserve_amounts" - Amount of input tokens in the liquidity pool.
  , sUSHISWAPV3ETHEREUMDepositDTOAmountUsd :: !(Maybe Text) -- ^ "amount_usd" - USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool).
  , sUSHISWAPV3ETHEREUMDepositDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SUSHISWAPV3ETHEREUMDepositDTO
instance A.FromJSON SUSHISWAPV3ETHEREUMDepositDTO where
  parseJSON = A.withObject "SUSHISWAPV3ETHEREUMDepositDTO" $ \o ->
    SUSHISWAPV3ETHEREUMDepositDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_")
      <*> (o .:? "id")
      <*> (o .:? "hash")
      <*> (o .:? "nonce")
      <*> (o .:? "log_index")
      <*> (o .:? "gas_limit")
      <*> (o .:? "gas_used")
      <*> (o .:? "gas_price")
      <*> (o .:? "protocol")
      <*> (o .:? "account")
      <*> (o .:? "position")
      <*> (o .:? "pool")
      <*> (o .:? "tick_lower")
      <*> (o .:? "tick_upper")
      <*> (o .:? "timestamp")
      <*> (o .:? "liquidity")
      <*> (o .:? "input_tokens")
      <*> (o .:? "input_token_amounts")
      <*> (o .:? "reserve_amounts")
      <*> (o .:? "amount_usd")
      <*> (o .:? "block_range")

-- | ToJSON SUSHISWAPV3ETHEREUMDepositDTO
instance A.ToJSON SUSHISWAPV3ETHEREUMDepositDTO where
  toJSON SUSHISWAPV3ETHEREUMDepositDTO {..} =
   _omitNulls
      [ "entry_time" .= sUSHISWAPV3ETHEREUMDepositDTOEntryTime
      , "recv_time" .= sUSHISWAPV3ETHEREUMDepositDTORecvTime
      , "block_number" .= sUSHISWAPV3ETHEREUMDepositDTOBlockNumber
      , "block_" .= sUSHISWAPV3ETHEREUMDepositDTOBlock
      , "id" .= sUSHISWAPV3ETHEREUMDepositDTOId
      , "hash" .= sUSHISWAPV3ETHEREUMDepositDTOHash
      , "nonce" .= sUSHISWAPV3ETHEREUMDepositDTONonce
      , "log_index" .= sUSHISWAPV3ETHEREUMDepositDTOLogIndex
      , "gas_limit" .= sUSHISWAPV3ETHEREUMDepositDTOGasLimit
      , "gas_used" .= sUSHISWAPV3ETHEREUMDepositDTOGasUsed
      , "gas_price" .= sUSHISWAPV3ETHEREUMDepositDTOGasPrice
      , "protocol" .= sUSHISWAPV3ETHEREUMDepositDTOProtocol
      , "account" .= sUSHISWAPV3ETHEREUMDepositDTOAccount
      , "position" .= sUSHISWAPV3ETHEREUMDepositDTOPosition
      , "pool" .= sUSHISWAPV3ETHEREUMDepositDTOPool
      , "tick_lower" .= sUSHISWAPV3ETHEREUMDepositDTOTickLower
      , "tick_upper" .= sUSHISWAPV3ETHEREUMDepositDTOTickUpper
      , "timestamp" .= sUSHISWAPV3ETHEREUMDepositDTOTimestamp
      , "liquidity" .= sUSHISWAPV3ETHEREUMDepositDTOLiquidity
      , "input_tokens" .= sUSHISWAPV3ETHEREUMDepositDTOInputTokens
      , "input_token_amounts" .= sUSHISWAPV3ETHEREUMDepositDTOInputTokenAmounts
      , "reserve_amounts" .= sUSHISWAPV3ETHEREUMDepositDTOReserveAmounts
      , "amount_usd" .= sUSHISWAPV3ETHEREUMDepositDTOAmountUsd
      , "block_range" .= sUSHISWAPV3ETHEREUMDepositDTOBlockRange
      ]


-- | Construct a value of type 'SUSHISWAPV3ETHEREUMDepositDTO' (by applying it's required fields, if any)
mkSUSHISWAPV3ETHEREUMDepositDTO
  :: SUSHISWAPV3ETHEREUMDepositDTO
mkSUSHISWAPV3ETHEREUMDepositDTO =
  SUSHISWAPV3ETHEREUMDepositDTO
  { sUSHISWAPV3ETHEREUMDepositDTOEntryTime = Nothing
  , sUSHISWAPV3ETHEREUMDepositDTORecvTime = Nothing
  , sUSHISWAPV3ETHEREUMDepositDTOBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMDepositDTOBlock = Nothing
  , sUSHISWAPV3ETHEREUMDepositDTOId = Nothing
  , sUSHISWAPV3ETHEREUMDepositDTOHash = Nothing
  , sUSHISWAPV3ETHEREUMDepositDTONonce = Nothing
  , sUSHISWAPV3ETHEREUMDepositDTOLogIndex = Nothing
  , sUSHISWAPV3ETHEREUMDepositDTOGasLimit = Nothing
  , sUSHISWAPV3ETHEREUMDepositDTOGasUsed = Nothing
  , sUSHISWAPV3ETHEREUMDepositDTOGasPrice = Nothing
  , sUSHISWAPV3ETHEREUMDepositDTOProtocol = Nothing
  , sUSHISWAPV3ETHEREUMDepositDTOAccount = Nothing
  , sUSHISWAPV3ETHEREUMDepositDTOPosition = Nothing
  , sUSHISWAPV3ETHEREUMDepositDTOPool = Nothing
  , sUSHISWAPV3ETHEREUMDepositDTOTickLower = Nothing
  , sUSHISWAPV3ETHEREUMDepositDTOTickUpper = Nothing
  , sUSHISWAPV3ETHEREUMDepositDTOTimestamp = Nothing
  , sUSHISWAPV3ETHEREUMDepositDTOLiquidity = Nothing
  , sUSHISWAPV3ETHEREUMDepositDTOInputTokens = Nothing
  , sUSHISWAPV3ETHEREUMDepositDTOInputTokenAmounts = Nothing
  , sUSHISWAPV3ETHEREUMDepositDTOReserveAmounts = Nothing
  , sUSHISWAPV3ETHEREUMDepositDTOAmountUsd = Nothing
  , sUSHISWAPV3ETHEREUMDepositDTOBlockRange = Nothing
  }

-- ** SUSHISWAPV3ETHEREUMDexAmmProtocolDTO
-- | SUSHISWAPV3ETHEREUMDexAmmProtocolDTO
--  Decentralized exchange (Dex) automated market maker (Amm) protocol. It's an entity that represents a protocol involving a smart contract that use automated market makers.
data SUSHISWAPV3ETHEREUMDexAmmProtocolDTO = SUSHISWAPV3ETHEREUMDexAmmProtocolDTO
  { sUSHISWAPV3ETHEREUMDexAmmProtocolDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOId :: !(Maybe Text) -- ^ "id" - Smart contract address of the protocol&#39;s main contract (Factory, Registry, etc).
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOName :: !(Maybe Text) -- ^ "name" - Name of the protocol, including version. e.g. Uniswap v3.
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOSlug :: !(Maybe Text) -- ^ "slug" - Slug of protocol, including version. e.g. uniswap-v3.
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOSchemaVersion :: !(Maybe Text) -- ^ "schema_version" - Version of the subgraph schema, in SemVer format (e.g. 1.0.0).
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOSubgraphVersion :: !(Maybe Text) -- ^ "subgraph_version" - Version of the subgraph implementation, in SemVer format (e.g. 1.0.0).
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOMethodologyVersion :: !(Maybe Text) -- ^ "methodology_version" - Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0).
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of the entire protocol.
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOTotalLiquidityUsd :: !(Maybe Text) -- ^ "total_liquidity_usd" - The sum of all active and non-active liquidity in USD for this pool.
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOActiveLiquidityUsd :: !(Maybe Text) -- ^ "active_liquidity_usd" - All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOUncollectedProtocolSideValueUsd :: !(Maybe Text) -- ^ "uncollected_protocol_side_value_usd" - All protocol-side value locking in USD that remains uncollected and unused in the protocol.
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOUncollectedSupplySideValueUsd :: !(Maybe Text) -- ^ "uncollected_supply_side_value_usd" - All supply-side value locking in USD that remains uncollected and unused in the protocol.
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOProtocolControlledValueUsd :: !(Maybe Text) -- ^ "protocol_controlled_value_usd" - Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All historical volume in USD.
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" - All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueUsers :: !(Maybe Int) -- ^ "cumulative_unique_users" - Number of cumulative unique users.
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueLps :: !(Maybe Int) -- ^ "cumulative_unique_l_ps" - Number of cumulative liquidity providers.
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueTraders :: !(Maybe Int) -- ^ "cumulative_unique_traders" - Number of cumulative traders
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOTotalPoolCount :: !(Maybe Int) -- ^ "total_pool_count" - Total number of pools.
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOOpenPositionCount :: !(Maybe Int) -- ^ "open_position_count" - Total number of open positions.
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOCumulativePositionCount :: !(Maybe Int) -- ^ "cumulative_position_count" - Total number of positions (open and closed).
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOLastSnapshotDayId :: !(Maybe Int) -- ^ "last_snapshot_day_id" - Day ID of the most recent daily snapshot.
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOLastUpdateTimestamp :: !(Maybe Text) -- ^ "last_update_timestamp" - Timestamp of the last time this entity was updated
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOLastUpdateBlockNumber :: !(Maybe Text) -- ^ "last_update_block_number" - Block number of the last time this entity was updated.
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTORegenesis :: !(Maybe Bool) -- ^ "regenesis" - This is a boolean to indicate whether or not the pools have been instantiated the were initialized before Optimism regenesis.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SUSHISWAPV3ETHEREUMDexAmmProtocolDTO
instance A.FromJSON SUSHISWAPV3ETHEREUMDexAmmProtocolDTO where
  parseJSON = A.withObject "SUSHISWAPV3ETHEREUMDexAmmProtocolDTO" $ \o ->
    SUSHISWAPV3ETHEREUMDexAmmProtocolDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "name")
      <*> (o .:? "slug")
      <*> (o .:? "schema_version")
      <*> (o .:? "subgraph_version")
      <*> (o .:? "methodology_version")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "total_liquidity_usd")
      <*> (o .:? "active_liquidity_usd")
      <*> (o .:? "uncollected_protocol_side_value_usd")
      <*> (o .:? "uncollected_supply_side_value_usd")
      <*> (o .:? "protocol_controlled_value_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "cumulative_unique_users")
      <*> (o .:? "cumulative_unique_l_ps")
      <*> (o .:? "cumulative_unique_traders")
      <*> (o .:? "total_pool_count")
      <*> (o .:? "open_position_count")
      <*> (o .:? "cumulative_position_count")
      <*> (o .:? "last_snapshot_day_id")
      <*> (o .:? "last_update_timestamp")
      <*> (o .:? "last_update_block_number")
      <*> (o .:? "regenesis")

-- | ToJSON SUSHISWAPV3ETHEREUMDexAmmProtocolDTO
instance A.ToJSON SUSHISWAPV3ETHEREUMDexAmmProtocolDTO where
  toJSON SUSHISWAPV3ETHEREUMDexAmmProtocolDTO {..} =
   _omitNulls
      [ "entry_time" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOEntryTime
      , "recv_time" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTORecvTime
      , "block_number" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOBlockNumber
      , "block_range" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOBlockRange
      , "id" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOId
      , "name" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOName
      , "slug" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOSlug
      , "schema_version" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOSchemaVersion
      , "subgraph_version" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOSubgraphVersion
      , "methodology_version" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOMethodologyVersion
      , "total_value_locked_usd" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOTotalValueLockedUsd
      , "total_liquidity_usd" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOTotalLiquidityUsd
      , "active_liquidity_usd" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOActiveLiquidityUsd
      , "uncollected_protocol_side_value_usd" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOUncollectedProtocolSideValueUsd
      , "uncollected_supply_side_value_usd" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOUncollectedSupplySideValueUsd
      , "protocol_controlled_value_usd" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOProtocolControlledValueUsd
      , "cumulative_volume_usd" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeVolumeUsd
      , "cumulative_supply_side_revenue_usd" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeSupplySideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeProtocolSideRevenueUsd
      , "cumulative_total_revenue_usd" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeTotalRevenueUsd
      , "cumulative_unique_users" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueUsers
      , "cumulative_unique_l_ps" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueLps
      , "cumulative_unique_traders" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueTraders
      , "total_pool_count" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOTotalPoolCount
      , "open_position_count" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOOpenPositionCount
      , "cumulative_position_count" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOCumulativePositionCount
      , "last_snapshot_day_id" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOLastSnapshotDayId
      , "last_update_timestamp" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOLastUpdateTimestamp
      , "last_update_block_number" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTOLastUpdateBlockNumber
      , "regenesis" .= sUSHISWAPV3ETHEREUMDexAmmProtocolDTORegenesis
      ]


-- | Construct a value of type 'SUSHISWAPV3ETHEREUMDexAmmProtocolDTO' (by applying it's required fields, if any)
mkSUSHISWAPV3ETHEREUMDexAmmProtocolDTO
  :: SUSHISWAPV3ETHEREUMDexAmmProtocolDTO
mkSUSHISWAPV3ETHEREUMDexAmmProtocolDTO =
  SUSHISWAPV3ETHEREUMDexAmmProtocolDTO
  { sUSHISWAPV3ETHEREUMDexAmmProtocolDTOEntryTime = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTORecvTime = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOBlockRange = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOId = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOName = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOSlug = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOSchemaVersion = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOSubgraphVersion = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOMethodologyVersion = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOTotalValueLockedUsd = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOTotalLiquidityUsd = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOActiveLiquidityUsd = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOUncollectedProtocolSideValueUsd = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOUncollectedSupplySideValueUsd = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOProtocolControlledValueUsd = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeVolumeUsd = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeSupplySideRevenueUsd = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeProtocolSideRevenueUsd = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeTotalRevenueUsd = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueUsers = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueLps = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueTraders = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOTotalPoolCount = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOOpenPositionCount = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOCumulativePositionCount = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOLastSnapshotDayId = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOLastUpdateTimestamp = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTOLastUpdateBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMDexAmmProtocolDTORegenesis = Nothing
  }

-- ** SUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTO
-- | SUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTO
-- Daily financial metrics for Sushiswap V3.
data SUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTO = SUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTO
  { sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOBlockNumber :: !(Maybe Int) -- ^ "block_number" - Block number of when this snapshot was taken/last modified.)
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOId :: !(Maybe Text) -- ^ "id" - ID is # of days since Unix epoch time.
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTODay :: !(Maybe Int) -- ^ "day" - Number of days since Unix epoch time.
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - Protocol this snapshot is associated with.
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of the entire protocol.
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOTotalLiquidityUsd :: !(Maybe Text) -- ^ "total_liquidity_usd" - The sum of all active and non-active liquidity in USD for this pool.
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOActiveLiquidityUsd :: !(Maybe Text) -- ^ "active_liquidity_usd" - All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pool&#39;s current tick.
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOUncollectedProtocolSideValueUsd :: !(Maybe Text) -- ^ "uncollected_protocol_side_value_usd" - All protocol-side value locking in USD that remains uncollected and unused in the protocol.
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOUncollectedSupplySideValueUsd :: !(Maybe Text) -- ^ "uncollected_supply_side_value_usd" - All supply-side value locking in USD that remains uncollected and unused in the protocol.
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOProtocolControlledValueUsd :: !(Maybe Text) -- ^ "protocol_controlled_value_usd" - Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTODailyVolumeUsd :: !(Maybe Text) -- ^ "daily_volume_usd" - All trade volume occurred in a given day, in USD
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All historical trade volume in USD
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTODailySupplySideRevenueUsd :: !(Maybe Text) -- ^ "daily_supply_side_revenue_usd" - Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTODailyProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "daily_protocol_side_revenue_usd" - Gross revenue for the protocol (revenue claimed by the protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - Gross revenue for the protocol (revenue claimed by the protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTODailyTotalRevenueUsd :: !(Maybe Text) -- ^ "daily_total_revenue_usd" - All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" - All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of when this snapshot was taken/last modified (May be taken after the interval has passed).
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTO
instance A.FromJSON SUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTO where
  parseJSON = A.withObject "SUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTO" $ \o ->
    SUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "day")
      <*> (o .:? "protocol")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "total_liquidity_usd")
      <*> (o .:? "active_liquidity_usd")
      <*> (o .:? "uncollected_protocol_side_value_usd")
      <*> (o .:? "uncollected_supply_side_value_usd")
      <*> (o .:? "protocol_controlled_value_usd")
      <*> (o .:? "daily_volume_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "daily_supply_side_revenue_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "daily_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "daily_total_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "timestamp")

-- | ToJSON SUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTO
instance A.ToJSON SUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTO where
  toJSON SUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOEntryTime
      , "recv_time" .= sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTORecvTime
      , "block_number" .= sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOBlockNumber
      , "id" .= sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOId
      , "day" .= sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTODay
      , "protocol" .= sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOProtocol
      , "total_value_locked_usd" .= sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOTotalValueLockedUsd
      , "total_liquidity_usd" .= sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOTotalLiquidityUsd
      , "active_liquidity_usd" .= sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOActiveLiquidityUsd
      , "uncollected_protocol_side_value_usd" .= sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOUncollectedProtocolSideValueUsd
      , "uncollected_supply_side_value_usd" .= sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOUncollectedSupplySideValueUsd
      , "protocol_controlled_value_usd" .= sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOProtocolControlledValueUsd
      , "daily_volume_usd" .= sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTODailyVolumeUsd
      , "cumulative_volume_usd" .= sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeVolumeUsd
      , "daily_supply_side_revenue_usd" .= sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTODailySupplySideRevenueUsd
      , "cumulative_supply_side_revenue_usd" .= sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeSupplySideRevenueUsd
      , "daily_protocol_side_revenue_usd" .= sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTODailyProtocolSideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeProtocolSideRevenueUsd
      , "daily_total_revenue_usd" .= sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTODailyTotalRevenueUsd
      , "cumulative_total_revenue_usd" .= sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeTotalRevenueUsd
      , "timestamp" .= sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'SUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTO' (by applying it's required fields, if any)
mkSUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTO
  :: SUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTO
mkSUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTO =
  SUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTO
  { sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOEntryTime = Nothing
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTORecvTime = Nothing
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOId = Nothing
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTODay = Nothing
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOProtocol = Nothing
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOTotalValueLockedUsd = Nothing
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOTotalLiquidityUsd = Nothing
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOActiveLiquidityUsd = Nothing
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOUncollectedProtocolSideValueUsd = Nothing
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOUncollectedSupplySideValueUsd = Nothing
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOProtocolControlledValueUsd = Nothing
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTODailyVolumeUsd = Nothing
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeVolumeUsd = Nothing
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTODailySupplySideRevenueUsd = Nothing
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeSupplySideRevenueUsd = Nothing
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTODailyProtocolSideRevenueUsd = Nothing
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeProtocolSideRevenueUsd = Nothing
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTODailyTotalRevenueUsd = Nothing
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeTotalRevenueUsd = Nothing
  , sUSHISWAPV3ETHEREUMFinancialsDailySnapshotDTOTimestamp = Nothing
  }

-- ** SUSHISWAPV3ETHEREUMLiquidityPoolAmountDTO
-- | SUSHISWAPV3ETHEREUMLiquidityPoolAmountDTO
-- 
data SUSHISWAPV3ETHEREUMLiquidityPoolAmountDTO = SUSHISWAPV3ETHEREUMLiquidityPoolAmountDTO
  { sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTOVid :: !(Maybe Integer) -- ^ "vid" - .
  , sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTOId :: !(Maybe Text) -- ^ "id" - Smart contract address of the pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTOInputTokens :: !(Maybe [Text]) -- ^ "input_tokens" - Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTOInputTokenBalances :: !(Maybe [Text]) -- ^ "input_token_balances" - Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTOTokenPrices :: !(Maybe [Text]) -- ^ "token_prices" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SUSHISWAPV3ETHEREUMLiquidityPoolAmountDTO
instance A.FromJSON SUSHISWAPV3ETHEREUMLiquidityPoolAmountDTO where
  parseJSON = A.withObject "SUSHISWAPV3ETHEREUMLiquidityPoolAmountDTO" $ \o ->
    SUSHISWAPV3ETHEREUMLiquidityPoolAmountDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "input_tokens")
      <*> (o .:? "input_token_balances")
      <*> (o .:? "token_prices")

-- | ToJSON SUSHISWAPV3ETHEREUMLiquidityPoolAmountDTO
instance A.ToJSON SUSHISWAPV3ETHEREUMLiquidityPoolAmountDTO where
  toJSON SUSHISWAPV3ETHEREUMLiquidityPoolAmountDTO {..} =
   _omitNulls
      [ "entry_time" .= sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTOEntryTime
      , "recv_time" .= sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTORecvTime
      , "block_number" .= sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTOBlockNumber
      , "vid" .= sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTOVid
      , "block_range" .= sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTOBlockRange
      , "id" .= sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTOId
      , "input_tokens" .= sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTOInputTokens
      , "input_token_balances" .= sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTOInputTokenBalances
      , "token_prices" .= sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTOTokenPrices
      ]


-- | Construct a value of type 'SUSHISWAPV3ETHEREUMLiquidityPoolAmountDTO' (by applying it's required fields, if any)
mkSUSHISWAPV3ETHEREUMLiquidityPoolAmountDTO
  :: SUSHISWAPV3ETHEREUMLiquidityPoolAmountDTO
mkSUSHISWAPV3ETHEREUMLiquidityPoolAmountDTO =
  SUSHISWAPV3ETHEREUMLiquidityPoolAmountDTO
  { sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTOEntryTime = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTORecvTime = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTOBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTOVid = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTOBlockRange = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTOId = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTOInputTokens = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTOInputTokenBalances = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolAmountDTOTokenPrices = Nothing
  }

-- ** SUSHISWAPV3ETHEREUMLiquidityPoolDTO
-- | SUSHISWAPV3ETHEREUMLiquidityPoolDTO
-- Pool-level metadata.
data SUSHISWAPV3ETHEREUMLiquidityPoolDTO = SUSHISWAPV3ETHEREUMLiquidityPoolDTO
  { sUSHISWAPV3ETHEREUMLiquidityPoolDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOVid :: !(Maybe Integer) -- ^ "vid" - .
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - Block range of the liquidity pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOId :: !(Maybe Text) -- ^ "id" - Smart contract address of the pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOProtocol :: !(Maybe Text) -- ^ "protocol" - Protocol this pool belongs to.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOName :: !(Maybe Text) -- ^ "name" - Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT).
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOSymbol :: !(Maybe Text) -- ^ "symbol" - Symbol of liquidity pool (e.g. 3CRV).
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOLiquidityToken :: !(Maybe Text) -- ^ "liquidity_token" - Token that is to represent ownership of liquidity.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOInputTokens :: !(Maybe [Text]) -- ^ "input_tokens" - Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTORewardTokens :: !(Maybe [Text]) -- ^ "reward_tokens" - Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOFees :: !(Maybe [Text]) -- ^ "fees" - Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee.).
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOIsSingleSided :: !(Maybe Bool) -- ^ "is_single_sided" - Specifies whether this pool is single-sided (e.g. Bancor, Platypus&#39;s Alternative Pool). The specifics of the implementation depends on the protocol.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOCreatedTimestamp :: !(Maybe Text) -- ^ "created_timestamp" - Timestamp when the liquidity pool was created.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOCreatedBlockNumber :: !(Maybe Text) -- ^ "created_block_number" - Block number when the liquidity pool was created.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOTick :: !(Maybe Text) -- ^ "tick" - Current tick representing the price of token0/token1.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of this pool in USD.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOTotalLiquidity :: !(Maybe Text) -- ^ "total_liquidity" - Sum of all active and non-active liquidity for this pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOTotalLiquidityUsd :: !(Maybe Text) -- ^ "total_liquidity_usd" - Sum of all active and non-active liquidity in USD for this pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOActiveLiquidity :: !(Maybe Text) -- ^ "active_liquidity" - All liquidity &#x60;k&#x60; that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOActiveLiquidityUsd :: !(Maybe Text) -- ^ "active_liquidity_usd" - All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOUncollectedProtocolSideTokenAmounts :: !(Maybe [Text]) -- ^ "uncollected_protocol_side_token_amounts" - All protocol-side value locked in token amounts that remains uncollected and unused in the pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOUncollectedProtocolSideValuesUsd :: !(Maybe [Text]) -- ^ "uncollected_protocol_side_values_usd" - All protocol-side value locking in USD that remains uncollected and unused in the pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOUncollectedSupplySideTokenAmounts :: !(Maybe [Text]) -- ^ "uncollected_supply_side_token_amounts" - All supply-side value locked in token amounts that remains uncollected and unused in the pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOUncollectedSupplySideValuesUsd :: !(Maybe [Text]) -- ^ "uncollected_supply_side_values_usd" - All supply-side value locked in USD that remains uncollected and unused in the pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the supply side.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the protocol.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" -  All revenue generated by the liquidity pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeByTokenAmount :: !(Maybe [Text]) -- ^ "cumulative_volume_by_token_amount" - All trade volume occurred for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeByTokenUsd :: !(Maybe [Text]) -- ^ "cumulative_volume_by_token_usd" - All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOInputTokenBalances :: !(Maybe [Text]) -- ^ "input_token_balances" - Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOInputTokenBalancesUsd :: !(Maybe [Text]) -- ^ "input_token_balances_usd" - Amount of input tokens in USD in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOInputTokenWeights :: !(Maybe [Text]) -- ^ "input_token_weights" - Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOStakedOutputTokenAmount :: !(Maybe Text) -- ^ "staked_output_token_amount" - Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTORewardTokenEmissionsAmount :: !(Maybe [Text]) -- ^ "reward_token_emissions_amount" - Per-block reward token emission as of the current block normalized to a day, in token&#39;s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTORewardTokenEmissionsUsd :: !(Maybe [Text]) -- ^ "reward_token_emissions_usd" - Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeDepositCount :: !(Maybe Int) -- ^ "cumulative_deposit_count" - Total number of deposits (add liquidity).
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeWithdrawCount :: !(Maybe Int) -- ^ "cumulative_withdraw_count" - Total number of withdrawals (remove liquidity).
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeSwapCount :: !(Maybe Int) -- ^ "cumulative_swap_count" - Total number of trades (swaps).
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOPositionCount :: !(Maybe Int) -- ^ "position_count" - Number of positions in this market.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOOpenPositionCount :: !(Maybe Int) -- ^ "open_position_count" - Number of open positions in this market.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOClosedPositionCount :: !(Maybe Int) -- ^ "closed_position_count" - Number of closed positions in this market.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOLastSnapshotDayId :: !(Maybe Int) -- ^ "last_snapshot_day_id" - Day ID of the most recent daily snapshot.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOLastSnapshotHourId :: !(Maybe Int) -- ^ "last_snapshot_hour_id" - Hour ID of the most recent hourly snapshot.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOLastUpdateTimestamp :: !(Maybe Text) -- ^ "last_update_timestamp" - Timestamp of the last time this entity was updated.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOLastUpdateBlockNumber :: !(Maybe Text) -- ^ "last_update_block_number" - Block number of the last time this entity was updated.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOEvaluatedAsk :: !(Maybe Double) -- ^ /ReadOnly/ "evaluated_ask" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SUSHISWAPV3ETHEREUMLiquidityPoolDTO
instance A.FromJSON SUSHISWAPV3ETHEREUMLiquidityPoolDTO where
  parseJSON = A.withObject "SUSHISWAPV3ETHEREUMLiquidityPoolDTO" $ \o ->
    SUSHISWAPV3ETHEREUMLiquidityPoolDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "protocol")
      <*> (o .:? "name")
      <*> (o .:? "symbol")
      <*> (o .:? "liquidity_token")
      <*> (o .:? "input_tokens")
      <*> (o .:? "reward_tokens")
      <*> (o .:? "fees")
      <*> (o .:? "is_single_sided")
      <*> (o .:? "created_timestamp")
      <*> (o .:? "created_block_number")
      <*> (o .:? "tick")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "total_liquidity")
      <*> (o .:? "total_liquidity_usd")
      <*> (o .:? "active_liquidity")
      <*> (o .:? "active_liquidity_usd")
      <*> (o .:? "uncollected_protocol_side_token_amounts")
      <*> (o .:? "uncollected_protocol_side_values_usd")
      <*> (o .:? "uncollected_supply_side_token_amounts")
      <*> (o .:? "uncollected_supply_side_values_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "cumulative_volume_by_token_amount")
      <*> (o .:? "cumulative_volume_by_token_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "input_token_balances")
      <*> (o .:? "input_token_balances_usd")
      <*> (o .:? "input_token_weights")
      <*> (o .:? "staked_output_token_amount")
      <*> (o .:? "reward_token_emissions_amount")
      <*> (o .:? "reward_token_emissions_usd")
      <*> (o .:? "cumulative_deposit_count")
      <*> (o .:? "cumulative_withdraw_count")
      <*> (o .:? "cumulative_swap_count")
      <*> (o .:? "position_count")
      <*> (o .:? "open_position_count")
      <*> (o .:? "closed_position_count")
      <*> (o .:? "last_snapshot_day_id")
      <*> (o .:? "last_snapshot_hour_id")
      <*> (o .:? "last_update_timestamp")
      <*> (o .:? "last_update_block_number")
      <*> (o .:? "evaluated_ask")

-- | ToJSON SUSHISWAPV3ETHEREUMLiquidityPoolDTO
instance A.ToJSON SUSHISWAPV3ETHEREUMLiquidityPoolDTO where
  toJSON SUSHISWAPV3ETHEREUMLiquidityPoolDTO {..} =
   _omitNulls
      [ "entry_time" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOEntryTime
      , "recv_time" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTORecvTime
      , "block_number" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOBlockNumber
      , "vid" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOVid
      , "block_range" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOBlockRange
      , "id" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOId
      , "protocol" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOProtocol
      , "name" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOName
      , "symbol" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOSymbol
      , "liquidity_token" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOLiquidityToken
      , "input_tokens" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOInputTokens
      , "reward_tokens" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTORewardTokens
      , "fees" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOFees
      , "is_single_sided" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOIsSingleSided
      , "created_timestamp" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOCreatedTimestamp
      , "created_block_number" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOCreatedBlockNumber
      , "tick" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOTick
      , "total_value_locked_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOTotalValueLockedUsd
      , "total_liquidity" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOTotalLiquidity
      , "total_liquidity_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOTotalLiquidityUsd
      , "active_liquidity" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOActiveLiquidity
      , "active_liquidity_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOActiveLiquidityUsd
      , "uncollected_protocol_side_token_amounts" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOUncollectedProtocolSideTokenAmounts
      , "uncollected_protocol_side_values_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOUncollectedProtocolSideValuesUsd
      , "uncollected_supply_side_token_amounts" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOUncollectedSupplySideTokenAmounts
      , "uncollected_supply_side_values_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOUncollectedSupplySideValuesUsd
      , "cumulative_supply_side_revenue_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeSupplySideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeProtocolSideRevenueUsd
      , "cumulative_total_revenue_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeTotalRevenueUsd
      , "cumulative_volume_by_token_amount" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeByTokenAmount
      , "cumulative_volume_by_token_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeByTokenUsd
      , "cumulative_volume_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeUsd
      , "input_token_balances" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOInputTokenBalances
      , "input_token_balances_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOInputTokenBalancesUsd
      , "input_token_weights" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOInputTokenWeights
      , "staked_output_token_amount" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOStakedOutputTokenAmount
      , "reward_token_emissions_amount" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTORewardTokenEmissionsAmount
      , "reward_token_emissions_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTORewardTokenEmissionsUsd
      , "cumulative_deposit_count" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeDepositCount
      , "cumulative_withdraw_count" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeWithdrawCount
      , "cumulative_swap_count" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeSwapCount
      , "position_count" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOPositionCount
      , "open_position_count" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOOpenPositionCount
      , "closed_position_count" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOClosedPositionCount
      , "last_snapshot_day_id" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOLastSnapshotDayId
      , "last_snapshot_hour_id" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOLastSnapshotHourId
      , "last_update_timestamp" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOLastUpdateTimestamp
      , "last_update_block_number" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOLastUpdateBlockNumber
      , "evaluated_ask" .= sUSHISWAPV3ETHEREUMLiquidityPoolDTOEvaluatedAsk
      ]


-- | Construct a value of type 'SUSHISWAPV3ETHEREUMLiquidityPoolDTO' (by applying it's required fields, if any)
mkSUSHISWAPV3ETHEREUMLiquidityPoolDTO
  :: SUSHISWAPV3ETHEREUMLiquidityPoolDTO
mkSUSHISWAPV3ETHEREUMLiquidityPoolDTO =
  SUSHISWAPV3ETHEREUMLiquidityPoolDTO
  { sUSHISWAPV3ETHEREUMLiquidityPoolDTOEntryTime = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTORecvTime = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOVid = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOBlockRange = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOId = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOProtocol = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOName = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOSymbol = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOLiquidityToken = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOInputTokens = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTORewardTokens = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOFees = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOIsSingleSided = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOCreatedTimestamp = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOCreatedBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOTick = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOTotalValueLockedUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOTotalLiquidity = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOTotalLiquidityUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOActiveLiquidity = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOActiveLiquidityUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOUncollectedProtocolSideTokenAmounts = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOUncollectedProtocolSideValuesUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOUncollectedSupplySideTokenAmounts = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOUncollectedSupplySideValuesUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeSupplySideRevenueUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeProtocolSideRevenueUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeTotalRevenueUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeByTokenAmount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeByTokenUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOInputTokenBalances = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOInputTokenBalancesUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOInputTokenWeights = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOStakedOutputTokenAmount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTORewardTokenEmissionsAmount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTORewardTokenEmissionsUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeDepositCount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeWithdrawCount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOCumulativeSwapCount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOPositionCount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOOpenPositionCount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOClosedPositionCount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOLastSnapshotDayId = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOLastSnapshotHourId = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOLastUpdateTimestamp = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOLastUpdateBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDTOEvaluatedAsk = Nothing
  }

-- ** SUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
-- | SUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
-- Represents a liquidity pool daily snapshot for Sushiswap V3.
data SUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO = SUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
  { sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOBlock :: !(Maybe Int) -- ^ "block_" - The Ethereum block number associated with the liquidity pool daily snapshot.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: (smart contract address of the pool)-(# of days since Unix epoch time).
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODay :: !(Maybe Int) -- ^ "day" - Number of days since Unix epoch time.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - Protocol associated with the liquidity pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOPool :: !(Maybe Text) -- ^ "pool" - Pool this snapshot belongs to.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTick :: !(Maybe Text) -- ^ "tick" - Current tick representing the price of token0/token1.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of this pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalLiquidity :: !(Maybe Text) -- ^ "total_liquidity" - The sum of all active and non-active liquidity for this pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalLiquidityUsd :: !(Maybe Text) -- ^ "total_liquidity_usd" - Sum of all active and non-active liquidity in USD for this pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOActiveLiquidity :: !(Maybe Text) -- ^ "active_liquidity" - All liquidity &#x60;k&#x60; that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOActiveLiquidityUsd :: !(Maybe Text) -- ^ "active_liquidity_usd" - All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedProtocolSideTokenAmounts :: !(Maybe [Text]) -- ^ "uncollected_protocol_side_token_amounts" - All protocol-side value locked in token amounts that remains uncollected and unused in the pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedProtocolSideValuesUsd :: !(Maybe [Text]) -- ^ "uncollected_protocol_side_values_usd" - All protocol-side value locking in USD that remains uncollected and unused in the pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedSupplySideTokenAmounts :: !(Maybe [Text]) -- ^ "uncollected_supply_side_token_amounts" - All supply-side value locked in token amounts that remains uncollected and unused in the pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedSupplySideValuesUsd :: !(Maybe [Text]) -- ^ "uncollected_supply_side_values_usd" - All supply-side value locked in USD that remains uncollected and unused in the pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the supply side.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailySupplySideRevenueUsd :: !(Maybe Text) -- ^ "daily_supply_side_revenue_usd" - Daily revenue generated by the liquidity pool, accrued to the supply side.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the protocol.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "daily_protocol_side_revenue_usd" - Daily revenue generated by the liquidity pool, accrued to the protocol.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" - All revenue generated by the liquidity pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyTotalRevenueUsd :: !(Maybe Text) -- ^ "daily_total_revenue_usd" - Daily revenue generated by the liquidity pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All historical trade volume occurred in this pool, in USD.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeUsd :: !(Maybe Text) -- ^ "daily_volume_usd" - All trade volume occurred in a given day, in USD.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeByTokenAmount :: !(Maybe [Text]) -- ^ "cumulative_volume_by_token_amount" - All trade volume , in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenAmount :: !(Maybe [Text]) -- ^ "daily_volume_by_token_amount" - All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeByTokenUsd :: !(Maybe [Text]) -- ^ "cumulative_volume_by_token_usd" - All trade volume, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenUsd :: !(Maybe [Text]) -- ^ "daily_volume_by_token_usd" -  All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenBalances :: !(Maybe [Text]) -- ^ "input_token_balances" - Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenBalancesUsd :: !(Maybe [Text]) -- ^ "input_token_balances_usd" - Amount of input tokens in USD in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenWeights :: !(Maybe [Text]) -- ^ "input_token_weights" - Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOStakedOutputTokenAmount :: !(Maybe Text) -- ^ "staked_output_token_amount" - Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsAmount :: !(Maybe [Text]) -- ^ "reward_token_emissions_amount" - Per-block reward token emission as of the current block normalized to a day, in token&#39;s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsUsd :: !(Maybe [Text]) -- ^ "reward_token_emissions_usd" - Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeDepositCount :: !(Maybe Int) -- ^ "cumulative_deposit_count" - Total number of deposits (add liquidity).
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyDepositCount :: !(Maybe Int) -- ^ "daily_deposit_count" - Total number of deposits (add liquidity) in a day.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeWithdrawCount :: !(Maybe Int) -- ^ "cumulative_withdraw_count" - Total number of withdrawals (remove liquidity).
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyWithdrawCount :: !(Maybe Int) -- ^ "daily_withdraw_count" - Total number of withdrawals (remove liquidity) in a day.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeSwapCount :: !(Maybe Int) -- ^ "cumulative_swap_count" - Total number of trades (swaps).
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailySwapCount :: !(Maybe Int) -- ^ "daily_swap_count" - Total number of trades (swaps) in a day.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOPositionCount :: !(Maybe Int) -- ^ "position_count" - Number of positions in this market.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOOpenPositionCount :: !(Maybe Int) -- ^ "open_position_count" - Number of open positions in this market.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOClosedPositionCount :: !(Maybe Int) -- ^ "closed_position_count" - Number of closed positions in this market.
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed).
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
instance A.FromJSON SUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO where
  parseJSON = A.withObject "SUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO" $ \o ->
    SUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_")
      <*> (o .:? "id")
      <*> (o .:? "day")
      <*> (o .:? "protocol")
      <*> (o .:? "pool")
      <*> (o .:? "tick")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "total_liquidity")
      <*> (o .:? "total_liquidity_usd")
      <*> (o .:? "active_liquidity")
      <*> (o .:? "active_liquidity_usd")
      <*> (o .:? "uncollected_protocol_side_token_amounts")
      <*> (o .:? "uncollected_protocol_side_values_usd")
      <*> (o .:? "uncollected_supply_side_token_amounts")
      <*> (o .:? "uncollected_supply_side_values_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "daily_supply_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "daily_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "daily_total_revenue_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "daily_volume_usd")
      <*> (o .:? "cumulative_volume_by_token_amount")
      <*> (o .:? "daily_volume_by_token_amount")
      <*> (o .:? "cumulative_volume_by_token_usd")
      <*> (o .:? "daily_volume_by_token_usd")
      <*> (o .:? "input_token_balances")
      <*> (o .:? "input_token_balances_usd")
      <*> (o .:? "input_token_weights")
      <*> (o .:? "staked_output_token_amount")
      <*> (o .:? "reward_token_emissions_amount")
      <*> (o .:? "reward_token_emissions_usd")
      <*> (o .:? "cumulative_deposit_count")
      <*> (o .:? "daily_deposit_count")
      <*> (o .:? "cumulative_withdraw_count")
      <*> (o .:? "daily_withdraw_count")
      <*> (o .:? "cumulative_swap_count")
      <*> (o .:? "daily_swap_count")
      <*> (o .:? "position_count")
      <*> (o .:? "open_position_count")
      <*> (o .:? "closed_position_count")
      <*> (o .:? "timestamp")

-- | ToJSON SUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
instance A.ToJSON SUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO where
  toJSON SUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOEntryTime
      , "recv_time" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORecvTime
      , "block_number" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOBlockNumber
      , "block_" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOBlock
      , "id" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOId
      , "day" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODay
      , "protocol" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOProtocol
      , "pool" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOPool
      , "tick" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTick
      , "total_value_locked_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalValueLockedUsd
      , "total_liquidity" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalLiquidity
      , "total_liquidity_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalLiquidityUsd
      , "active_liquidity" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOActiveLiquidity
      , "active_liquidity_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOActiveLiquidityUsd
      , "uncollected_protocol_side_token_amounts" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedProtocolSideTokenAmounts
      , "uncollected_protocol_side_values_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedProtocolSideValuesUsd
      , "uncollected_supply_side_token_amounts" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedSupplySideTokenAmounts
      , "uncollected_supply_side_values_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedSupplySideValuesUsd
      , "cumulative_supply_side_revenue_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeSupplySideRevenueUsd
      , "daily_supply_side_revenue_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailySupplySideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeProtocolSideRevenueUsd
      , "daily_protocol_side_revenue_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyProtocolSideRevenueUsd
      , "cumulative_total_revenue_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeTotalRevenueUsd
      , "daily_total_revenue_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyTotalRevenueUsd
      , "cumulative_volume_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeUsd
      , "daily_volume_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeUsd
      , "cumulative_volume_by_token_amount" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeByTokenAmount
      , "daily_volume_by_token_amount" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenAmount
      , "cumulative_volume_by_token_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeByTokenUsd
      , "daily_volume_by_token_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenUsd
      , "input_token_balances" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenBalances
      , "input_token_balances_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenBalancesUsd
      , "input_token_weights" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenWeights
      , "staked_output_token_amount" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOStakedOutputTokenAmount
      , "reward_token_emissions_amount" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsAmount
      , "reward_token_emissions_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsUsd
      , "cumulative_deposit_count" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeDepositCount
      , "daily_deposit_count" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyDepositCount
      , "cumulative_withdraw_count" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeWithdrawCount
      , "daily_withdraw_count" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyWithdrawCount
      , "cumulative_swap_count" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeSwapCount
      , "daily_swap_count" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailySwapCount
      , "position_count" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOPositionCount
      , "open_position_count" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOOpenPositionCount
      , "closed_position_count" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOClosedPositionCount
      , "timestamp" .= sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'SUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO' (by applying it's required fields, if any)
mkSUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
  :: SUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
mkSUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO =
  SUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
  { sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOEntryTime = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORecvTime = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOBlock = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOId = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODay = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOProtocol = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOPool = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTick = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalValueLockedUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalLiquidity = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalLiquidityUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOActiveLiquidity = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOActiveLiquidityUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedProtocolSideTokenAmounts = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedProtocolSideValuesUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedSupplySideTokenAmounts = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedSupplySideValuesUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeSupplySideRevenueUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailySupplySideRevenueUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeProtocolSideRevenueUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyProtocolSideRevenueUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeTotalRevenueUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyTotalRevenueUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeByTokenAmount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenAmount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeByTokenUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenBalances = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenBalancesUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenWeights = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOStakedOutputTokenAmount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsAmount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeDepositCount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyDepositCount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeWithdrawCount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyWithdrawCount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeSwapCount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailySwapCount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOPositionCount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOOpenPositionCount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOClosedPositionCount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTimestamp = Nothing
  }

-- ** SUSHISWAPV3ETHEREUMLiquidityPoolFeeDTO
-- | SUSHISWAPV3ETHEREUMLiquidityPoolFeeDTO
-- 
data SUSHISWAPV3ETHEREUMLiquidityPoolFeeDTO = SUSHISWAPV3ETHEREUMLiquidityPoolFeeDTO
  { sUSHISWAPV3ETHEREUMLiquidityPoolFeeDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sUSHISWAPV3ETHEREUMLiquidityPoolFeeDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sUSHISWAPV3ETHEREUMLiquidityPoolFeeDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sUSHISWAPV3ETHEREUMLiquidityPoolFeeDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , sUSHISWAPV3ETHEREUMLiquidityPoolFeeDTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: (fee type)-(pool address)
  , sUSHISWAPV3ETHEREUMLiquidityPoolFeeDTOFeePercentage :: !(Maybe Text) -- ^ "fee_percentage" - Fee as a percentage of the trade (swap) amount. Does not always apply 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SUSHISWAPV3ETHEREUMLiquidityPoolFeeDTO
instance A.FromJSON SUSHISWAPV3ETHEREUMLiquidityPoolFeeDTO where
  parseJSON = A.withObject "SUSHISWAPV3ETHEREUMLiquidityPoolFeeDTO" $ \o ->
    SUSHISWAPV3ETHEREUMLiquidityPoolFeeDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "fee_percentage")

-- | ToJSON SUSHISWAPV3ETHEREUMLiquidityPoolFeeDTO
instance A.ToJSON SUSHISWAPV3ETHEREUMLiquidityPoolFeeDTO where
  toJSON SUSHISWAPV3ETHEREUMLiquidityPoolFeeDTO {..} =
   _omitNulls
      [ "entry_time" .= sUSHISWAPV3ETHEREUMLiquidityPoolFeeDTOEntryTime
      , "recv_time" .= sUSHISWAPV3ETHEREUMLiquidityPoolFeeDTORecvTime
      , "block_number" .= sUSHISWAPV3ETHEREUMLiquidityPoolFeeDTOBlockNumber
      , "block_range" .= sUSHISWAPV3ETHEREUMLiquidityPoolFeeDTOBlockRange
      , "id" .= sUSHISWAPV3ETHEREUMLiquidityPoolFeeDTOId
      , "fee_percentage" .= sUSHISWAPV3ETHEREUMLiquidityPoolFeeDTOFeePercentage
      ]


-- | Construct a value of type 'SUSHISWAPV3ETHEREUMLiquidityPoolFeeDTO' (by applying it's required fields, if any)
mkSUSHISWAPV3ETHEREUMLiquidityPoolFeeDTO
  :: SUSHISWAPV3ETHEREUMLiquidityPoolFeeDTO
mkSUSHISWAPV3ETHEREUMLiquidityPoolFeeDTO =
  SUSHISWAPV3ETHEREUMLiquidityPoolFeeDTO
  { sUSHISWAPV3ETHEREUMLiquidityPoolFeeDTOEntryTime = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolFeeDTORecvTime = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolFeeDTOBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolFeeDTOBlockRange = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolFeeDTOId = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolFeeDTOFeePercentage = Nothing
  }

-- ** SUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
-- | SUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
-- 
data SUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO = SUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
  { sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOId :: !(Maybe Text) -- ^ "id" - (Smart contract address of the pool)-( # of hours since Unix epoch time)
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHour :: !(Maybe Int) -- ^ "hour" - Number of hours since Unix epoch time
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - The protocol this snapshot belongs to
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOPool :: !(Maybe Text) -- ^ "pool" - The pool this snapshot belongs to
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTick :: !(Maybe Text) -- ^ "tick" - Current tick representing the price of token0/token1
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of this pool
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalLiquidity :: !(Maybe Text) -- ^ "total_liquidity" - The sum of all active and non-active liquidity for this pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalLiquidityUsd :: !(Maybe Text) -- ^ "total_liquidity_usd" - The sum of all active and non-active liquidity in USD for this pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOActiveLiquidity :: !(Maybe Text) -- ^ "active_liquidity" - All liquidity &#x60;k&#x60; that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pool&#39;s current tick.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOActiveLiquidityUsd :: !(Maybe Text) -- ^ "active_liquidity_usd" - All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pool&#39;s current tick.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedProtocolSideTokenAmounts :: !(Maybe [Text]) -- ^ "uncollected_protocol_side_token_amounts" - All protocol-side value locked in token amounts that remains uncollected and unused in the pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedProtocolSideValuesUsd :: !(Maybe [Text]) -- ^ "uncollected_protocol_side_values_usd" - All protocol-side value locking in USD that remains uncollected and unused in the pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedSupplySideTokenAmounts :: !(Maybe [Text]) -- ^ "uncollected_supply_side_token_amounts" - All supply-side value locked in token amounts that remains uncollected and unused in the pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedSupplySideValuesUsd :: !(Maybe [Text]) -- ^ "uncollected_supply_side_values_usd" - All supply-side value locked in USD that remains uncollected and unused in the pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the supply side.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlySupplySideRevenueUsd :: !(Maybe Text) -- ^ "hourly_supply_side_revenue_usd" - Hourly revenue generated by the liquidity pool, accrued to the supply side.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the protocol.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "hourly_protocol_side_revenue_usd" - Hourly revenue generated by the liquidity pool, accrued to the protocol.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" - All revenue generated by the liquidity pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyTotalRevenueUsd :: !(Maybe Text) -- ^ "hourly_total_revenue_usd" - Hourly revenue generated by the liquidity pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All historical trade volume occurred in this pool, in USD.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeUsd :: !(Maybe Text) -- ^ "hourly_volume_usd" - All trade volume occurred in a given hour, in USD.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeByTokenAmount :: !(Maybe [Text]) -- ^ "cumulative_volume_by_token_amount" - All trade volume, in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenAmount :: !(Maybe [Text]) -- ^ "hourly_volume_by_token_amount" - All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeByTokenUsd :: !(Maybe [Text]) -- ^ "cumulative_volume_by_token_usd" - All trade volume, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenUsd :: !(Maybe [Text]) -- ^ "hourly_volume_by_token_usd" - All trade volume occurred in a given hour for a specific input token, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenBalances :: !(Maybe [Text]) -- ^ "input_token_balances" - Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenBalancesUsd :: !(Maybe [Text]) -- ^ "input_token_balances_usd" - Amount of input tokens in USD in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenWeights :: !(Maybe [Text]) -- ^ "input_token_weights" - Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOStakedOutputTokenAmount :: !(Maybe Text) -- ^ "staked_output_token_amount" - Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsAmount :: !(Maybe [Text]) -- ^ "reward_token_emissions_amount" - Per-block reward token emission as of the current block normalized to a day (not hour), in token&#39;s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsUsd :: !(Maybe [Text]) -- ^ "reward_token_emissions_usd" - Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeDepositCount :: !(Maybe Int) -- ^ "cumulative_deposit_count" - Total number of deposits (add liquidity)
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyDepositCount :: !(Maybe Int) -- ^ "hourly_deposit_count" - Total number of deposits (add liquidity) in an hour
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeWithdrawCount :: !(Maybe Int) -- ^ "cumulative_withdraw_count" - Total number of withdrawals (remove liquidity)
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyWithdrawCount :: !(Maybe Int) -- ^ "hourly_withdraw_count" - Total number of withdrawals (remove liquidity) in an hour
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeSwapCount :: !(Maybe Int) -- ^ "cumulative_swap_count" - Total number of trades (swaps)
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlySwapCount :: !(Maybe Int) -- ^ "hourly_swap_count" - Total number of trades (swaps) in an hour
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOPositionCount :: !(Maybe Int) -- ^ "position_count" - Number of positions in this market
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOOpenPositionCount :: !(Maybe Int) -- ^ "open_position_count" - Number of open positions in this market
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOClosedPositionCount :: !(Maybe Int) -- ^ "closed_position_count" - Number of closed positions in this market
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
instance A.FromJSON SUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO where
  parseJSON = A.withObject "SUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO" $ \o ->
    SUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "hour")
      <*> (o .:? "protocol")
      <*> (o .:? "pool")
      <*> (o .:? "tick")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "total_liquidity")
      <*> (o .:? "total_liquidity_usd")
      <*> (o .:? "active_liquidity")
      <*> (o .:? "active_liquidity_usd")
      <*> (o .:? "uncollected_protocol_side_token_amounts")
      <*> (o .:? "uncollected_protocol_side_values_usd")
      <*> (o .:? "uncollected_supply_side_token_amounts")
      <*> (o .:? "uncollected_supply_side_values_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "hourly_supply_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "hourly_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "hourly_total_revenue_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "hourly_volume_usd")
      <*> (o .:? "cumulative_volume_by_token_amount")
      <*> (o .:? "hourly_volume_by_token_amount")
      <*> (o .:? "cumulative_volume_by_token_usd")
      <*> (o .:? "hourly_volume_by_token_usd")
      <*> (o .:? "input_token_balances")
      <*> (o .:? "input_token_balances_usd")
      <*> (o .:? "input_token_weights")
      <*> (o .:? "staked_output_token_amount")
      <*> (o .:? "reward_token_emissions_amount")
      <*> (o .:? "reward_token_emissions_usd")
      <*> (o .:? "cumulative_deposit_count")
      <*> (o .:? "hourly_deposit_count")
      <*> (o .:? "cumulative_withdraw_count")
      <*> (o .:? "hourly_withdraw_count")
      <*> (o .:? "cumulative_swap_count")
      <*> (o .:? "hourly_swap_count")
      <*> (o .:? "position_count")
      <*> (o .:? "open_position_count")
      <*> (o .:? "closed_position_count")
      <*> (o .:? "timestamp")

-- | ToJSON SUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
instance A.ToJSON SUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO where
  toJSON SUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOEntryTime
      , "recv_time" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORecvTime
      , "block_number" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOBlockNumber
      , "id" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOId
      , "hour" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHour
      , "protocol" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOProtocol
      , "pool" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOPool
      , "tick" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTick
      , "total_value_locked_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalValueLockedUsd
      , "total_liquidity" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalLiquidity
      , "total_liquidity_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalLiquidityUsd
      , "active_liquidity" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOActiveLiquidity
      , "active_liquidity_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOActiveLiquidityUsd
      , "uncollected_protocol_side_token_amounts" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedProtocolSideTokenAmounts
      , "uncollected_protocol_side_values_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedProtocolSideValuesUsd
      , "uncollected_supply_side_token_amounts" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedSupplySideTokenAmounts
      , "uncollected_supply_side_values_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedSupplySideValuesUsd
      , "cumulative_supply_side_revenue_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeSupplySideRevenueUsd
      , "hourly_supply_side_revenue_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlySupplySideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeProtocolSideRevenueUsd
      , "hourly_protocol_side_revenue_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyProtocolSideRevenueUsd
      , "cumulative_total_revenue_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeTotalRevenueUsd
      , "hourly_total_revenue_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyTotalRevenueUsd
      , "cumulative_volume_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeUsd
      , "hourly_volume_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeUsd
      , "cumulative_volume_by_token_amount" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeByTokenAmount
      , "hourly_volume_by_token_amount" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenAmount
      , "cumulative_volume_by_token_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeByTokenUsd
      , "hourly_volume_by_token_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenUsd
      , "input_token_balances" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenBalances
      , "input_token_balances_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenBalancesUsd
      , "input_token_weights" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenWeights
      , "staked_output_token_amount" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOStakedOutputTokenAmount
      , "reward_token_emissions_amount" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsAmount
      , "reward_token_emissions_usd" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsUsd
      , "cumulative_deposit_count" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeDepositCount
      , "hourly_deposit_count" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyDepositCount
      , "cumulative_withdraw_count" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeWithdrawCount
      , "hourly_withdraw_count" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyWithdrawCount
      , "cumulative_swap_count" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeSwapCount
      , "hourly_swap_count" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlySwapCount
      , "position_count" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOPositionCount
      , "open_position_count" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOOpenPositionCount
      , "closed_position_count" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOClosedPositionCount
      , "timestamp" .= sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'SUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO' (by applying it's required fields, if any)
mkSUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
  :: SUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
mkSUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO =
  SUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
  { sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOEntryTime = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORecvTime = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOId = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHour = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOProtocol = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOPool = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTick = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalValueLockedUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalLiquidity = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalLiquidityUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOActiveLiquidity = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOActiveLiquidityUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedProtocolSideTokenAmounts = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedProtocolSideValuesUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedSupplySideTokenAmounts = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedSupplySideValuesUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeSupplySideRevenueUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlySupplySideRevenueUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeProtocolSideRevenueUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyProtocolSideRevenueUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeTotalRevenueUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyTotalRevenueUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeByTokenAmount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenAmount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeByTokenUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenBalances = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenBalancesUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenWeights = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOStakedOutputTokenAmount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsAmount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsUsd = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeDepositCount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyDepositCount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeWithdrawCount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyWithdrawCount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeSwapCount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlySwapCount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOPositionCount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOOpenPositionCount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOClosedPositionCount = Nothing
  , sUSHISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTimestamp = Nothing
  }

-- ** SUSHISWAPV3ETHEREUMPositionDTO
-- | SUSHISWAPV3ETHEREUMPositionDTO
-- 
data SUSHISWAPV3ETHEREUMPositionDTO = SUSHISWAPV3ETHEREUMPositionDTO
  { sUSHISWAPV3ETHEREUMPositionDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sUSHISWAPV3ETHEREUMPositionDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sUSHISWAPV3ETHEREUMPositionDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sUSHISWAPV3ETHEREUMPositionDTOId :: !(Maybe Text) -- ^ "id" - (account address)-(market address)-(count)
  , sUSHISWAPV3ETHEREUMPositionDTOAccount :: !(Maybe Text) -- ^ "account" - Account that owns this position
  , sUSHISWAPV3ETHEREUMPositionDTOPool :: !(Maybe Text) -- ^ "pool" - The liquidity pool in which this position was opened
  , sUSHISWAPV3ETHEREUMPositionDTOHashOpened :: !(Maybe Text) -- ^ "hash_opened" - The hash of the transaction that opened this position
  , sUSHISWAPV3ETHEREUMPositionDTOHashClosed :: !(Maybe Text) -- ^ "hash_closed" - The hash of the transaction that closed this position
  , sUSHISWAPV3ETHEREUMPositionDTOBlockNumberOpened :: !(Maybe Text) -- ^ "block_number_opened" - Block number of when the position was opened
  , sUSHISWAPV3ETHEREUMPositionDTOTimestampOpened :: !(Maybe Text) -- ^ "timestamp_opened" - Timestamp when the position was opened
  , sUSHISWAPV3ETHEREUMPositionDTOBlockNumberClosed :: !(Maybe Text) -- ^ "block_number_closed" - Block number of when the position was closed (0 if still open)
  , sUSHISWAPV3ETHEREUMPositionDTOTimestampClosed :: !(Maybe Text) -- ^ "timestamp_closed" - Timestamp when the position was closed (0 if still open)
  , sUSHISWAPV3ETHEREUMPositionDTOTickLower :: !(Maybe Text) -- ^ "tick_lower" - lower tick of the position
  , sUSHISWAPV3ETHEREUMPositionDTOTickUpper :: !(Maybe Text) -- ^ "tick_upper" - upper tick of the position
  , sUSHISWAPV3ETHEREUMPositionDTOLiquidityToken :: !(Maybe Text) -- ^ "liquidity_token" - Token that is to represent ownership of liquidity
  , sUSHISWAPV3ETHEREUMPositionDTOLiquidityTokenType :: !(Maybe Text) -- ^ "liquidity_token_type" - Type of token used to track liquidity
  , sUSHISWAPV3ETHEREUMPositionDTOLiquidity :: !(Maybe Text) -- ^ "liquidity" - total position liquidity
  , sUSHISWAPV3ETHEREUMPositionDTOLiquidityUsd :: !(Maybe Text) -- ^ "liquidity_usd" - total position liquidity in USD
  , sUSHISWAPV3ETHEREUMPositionDTOCumulativeDepositTokenAmounts :: !(Maybe [Text]) -- ^ "cumulative_deposit_token_amounts" - amount of tokens ever deposited to position
  , sUSHISWAPV3ETHEREUMPositionDTOCumulativeDepositUsd :: !(Maybe Text) -- ^ "cumulative_deposit_usd" - amount of tokens in USD deposited to position
  , sUSHISWAPV3ETHEREUMPositionDTOCumulativeWithdrawTokenAmounts :: !(Maybe [Text]) -- ^ "cumulative_withdraw_token_amounts" - amount of tokens ever withdrawn from position (without fees)
  , sUSHISWAPV3ETHEREUMPositionDTOCumulativeWithdrawUsd :: !(Maybe Text) -- ^ "cumulative_withdraw_usd" - amount of tokens in USD withdrawn from position (without fees)
  , sUSHISWAPV3ETHEREUMPositionDTOCumulativeRewardUsd :: !(Maybe [Text]) -- ^ "cumulative_reward_usd" - Total reward token accumulated under this position, in USD
  , sUSHISWAPV3ETHEREUMPositionDTODepositCount :: !(Maybe Int) -- ^ "deposit_count" - Number of deposits related to this position
  , sUSHISWAPV3ETHEREUMPositionDTOWithdrawCount :: !(Maybe Int) -- ^ "withdraw_count" - Number of withdrawals related to this position
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SUSHISWAPV3ETHEREUMPositionDTO
instance A.FromJSON SUSHISWAPV3ETHEREUMPositionDTO where
  parseJSON = A.withObject "SUSHISWAPV3ETHEREUMPositionDTO" $ \o ->
    SUSHISWAPV3ETHEREUMPositionDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "account")
      <*> (o .:? "pool")
      <*> (o .:? "hash_opened")
      <*> (o .:? "hash_closed")
      <*> (o .:? "block_number_opened")
      <*> (o .:? "timestamp_opened")
      <*> (o .:? "block_number_closed")
      <*> (o .:? "timestamp_closed")
      <*> (o .:? "tick_lower")
      <*> (o .:? "tick_upper")
      <*> (o .:? "liquidity_token")
      <*> (o .:? "liquidity_token_type")
      <*> (o .:? "liquidity")
      <*> (o .:? "liquidity_usd")
      <*> (o .:? "cumulative_deposit_token_amounts")
      <*> (o .:? "cumulative_deposit_usd")
      <*> (o .:? "cumulative_withdraw_token_amounts")
      <*> (o .:? "cumulative_withdraw_usd")
      <*> (o .:? "cumulative_reward_usd")
      <*> (o .:? "deposit_count")
      <*> (o .:? "withdraw_count")

-- | ToJSON SUSHISWAPV3ETHEREUMPositionDTO
instance A.ToJSON SUSHISWAPV3ETHEREUMPositionDTO where
  toJSON SUSHISWAPV3ETHEREUMPositionDTO {..} =
   _omitNulls
      [ "entry_time" .= sUSHISWAPV3ETHEREUMPositionDTOEntryTime
      , "recv_time" .= sUSHISWAPV3ETHEREUMPositionDTORecvTime
      , "block_number" .= sUSHISWAPV3ETHEREUMPositionDTOBlockNumber
      , "id" .= sUSHISWAPV3ETHEREUMPositionDTOId
      , "account" .= sUSHISWAPV3ETHEREUMPositionDTOAccount
      , "pool" .= sUSHISWAPV3ETHEREUMPositionDTOPool
      , "hash_opened" .= sUSHISWAPV3ETHEREUMPositionDTOHashOpened
      , "hash_closed" .= sUSHISWAPV3ETHEREUMPositionDTOHashClosed
      , "block_number_opened" .= sUSHISWAPV3ETHEREUMPositionDTOBlockNumberOpened
      , "timestamp_opened" .= sUSHISWAPV3ETHEREUMPositionDTOTimestampOpened
      , "block_number_closed" .= sUSHISWAPV3ETHEREUMPositionDTOBlockNumberClosed
      , "timestamp_closed" .= sUSHISWAPV3ETHEREUMPositionDTOTimestampClosed
      , "tick_lower" .= sUSHISWAPV3ETHEREUMPositionDTOTickLower
      , "tick_upper" .= sUSHISWAPV3ETHEREUMPositionDTOTickUpper
      , "liquidity_token" .= sUSHISWAPV3ETHEREUMPositionDTOLiquidityToken
      , "liquidity_token_type" .= sUSHISWAPV3ETHEREUMPositionDTOLiquidityTokenType
      , "liquidity" .= sUSHISWAPV3ETHEREUMPositionDTOLiquidity
      , "liquidity_usd" .= sUSHISWAPV3ETHEREUMPositionDTOLiquidityUsd
      , "cumulative_deposit_token_amounts" .= sUSHISWAPV3ETHEREUMPositionDTOCumulativeDepositTokenAmounts
      , "cumulative_deposit_usd" .= sUSHISWAPV3ETHEREUMPositionDTOCumulativeDepositUsd
      , "cumulative_withdraw_token_amounts" .= sUSHISWAPV3ETHEREUMPositionDTOCumulativeWithdrawTokenAmounts
      , "cumulative_withdraw_usd" .= sUSHISWAPV3ETHEREUMPositionDTOCumulativeWithdrawUsd
      , "cumulative_reward_usd" .= sUSHISWAPV3ETHEREUMPositionDTOCumulativeRewardUsd
      , "deposit_count" .= sUSHISWAPV3ETHEREUMPositionDTODepositCount
      , "withdraw_count" .= sUSHISWAPV3ETHEREUMPositionDTOWithdrawCount
      ]


-- | Construct a value of type 'SUSHISWAPV3ETHEREUMPositionDTO' (by applying it's required fields, if any)
mkSUSHISWAPV3ETHEREUMPositionDTO
  :: SUSHISWAPV3ETHEREUMPositionDTO
mkSUSHISWAPV3ETHEREUMPositionDTO =
  SUSHISWAPV3ETHEREUMPositionDTO
  { sUSHISWAPV3ETHEREUMPositionDTOEntryTime = Nothing
  , sUSHISWAPV3ETHEREUMPositionDTORecvTime = Nothing
  , sUSHISWAPV3ETHEREUMPositionDTOBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMPositionDTOId = Nothing
  , sUSHISWAPV3ETHEREUMPositionDTOAccount = Nothing
  , sUSHISWAPV3ETHEREUMPositionDTOPool = Nothing
  , sUSHISWAPV3ETHEREUMPositionDTOHashOpened = Nothing
  , sUSHISWAPV3ETHEREUMPositionDTOHashClosed = Nothing
  , sUSHISWAPV3ETHEREUMPositionDTOBlockNumberOpened = Nothing
  , sUSHISWAPV3ETHEREUMPositionDTOTimestampOpened = Nothing
  , sUSHISWAPV3ETHEREUMPositionDTOBlockNumberClosed = Nothing
  , sUSHISWAPV3ETHEREUMPositionDTOTimestampClosed = Nothing
  , sUSHISWAPV3ETHEREUMPositionDTOTickLower = Nothing
  , sUSHISWAPV3ETHEREUMPositionDTOTickUpper = Nothing
  , sUSHISWAPV3ETHEREUMPositionDTOLiquidityToken = Nothing
  , sUSHISWAPV3ETHEREUMPositionDTOLiquidityTokenType = Nothing
  , sUSHISWAPV3ETHEREUMPositionDTOLiquidity = Nothing
  , sUSHISWAPV3ETHEREUMPositionDTOLiquidityUsd = Nothing
  , sUSHISWAPV3ETHEREUMPositionDTOCumulativeDepositTokenAmounts = Nothing
  , sUSHISWAPV3ETHEREUMPositionDTOCumulativeDepositUsd = Nothing
  , sUSHISWAPV3ETHEREUMPositionDTOCumulativeWithdrawTokenAmounts = Nothing
  , sUSHISWAPV3ETHEREUMPositionDTOCumulativeWithdrawUsd = Nothing
  , sUSHISWAPV3ETHEREUMPositionDTOCumulativeRewardUsd = Nothing
  , sUSHISWAPV3ETHEREUMPositionDTODepositCount = Nothing
  , sUSHISWAPV3ETHEREUMPositionDTOWithdrawCount = Nothing
  }

-- ** SUSHISWAPV3ETHEREUMPositionSnapshotDTO
-- | SUSHISWAPV3ETHEREUMPositionSnapshotDTO
-- 
data SUSHISWAPV3ETHEREUMPositionSnapshotDTO = SUSHISWAPV3ETHEREUMPositionSnapshotDTO
  { sUSHISWAPV3ETHEREUMPositionSnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOId :: !(Maybe Text) -- ^ "id" -  (position id )-( transaction hash )-( log index ) 
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOHash :: !(Maybe Text) -- ^ "hash" - Transaction hash of the transaction that triggered this snapshot
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOLogIndex :: !(Maybe Int) -- ^ "log_index" - Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTONonce :: !(Maybe Text) -- ^ "nonce" - Nonce of the transaction that triggered this snapshot
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOPosition :: !(Maybe Text) -- ^ "position" - Position of this snapshot
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOLiquidityTokenType :: !(Maybe Text) -- ^ "liquidity_token_type" - Type of token used to track liquidity
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOLiquidity :: !(Maybe Text) -- ^ "liquidity" - total position liquidity
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOLiquidityUsd :: !(Maybe Text) -- ^ "liquidity_usd" - total position liquidity in USD
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOCumulativeDepositTokenAmounts :: !(Maybe [Text]) -- ^ "cumulative_deposit_token_amounts" - amount of tokens ever deposited to position
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOCumulativeDepositUsd :: !(Maybe Text) -- ^ "cumulative_deposit_usd" - amount of tokens in USD deposited to position
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOCumulativeWithdrawTokenAmounts :: !(Maybe [Text]) -- ^ "cumulative_withdraw_token_amounts" - amount of tokens ever withdrawn from position (without fees)
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOCumulativeWithdrawUsd :: !(Maybe Text) -- ^ "cumulative_withdraw_usd" - amount of tokens in USD withdrawn from position (without fees)
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOCumulativeRewardTokenAmounts :: !(Maybe [Text]) -- ^ "cumulative_reward_token_amounts" - Total reward token accumulated under this position, in native amounts
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOCumulativeRewardUsd :: !(Maybe [Text]) -- ^ "cumulative_reward_usd" - Total reward token accumulated under this position, in USD
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTODepositCount :: !(Maybe Int) -- ^ "deposit_count" - Number of deposits related to this position
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOWithdrawCount :: !(Maybe Int) -- ^ "withdraw_count" - Number of withdrawals related to this position
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this snapshot
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SUSHISWAPV3ETHEREUMPositionSnapshotDTO
instance A.FromJSON SUSHISWAPV3ETHEREUMPositionSnapshotDTO where
  parseJSON = A.withObject "SUSHISWAPV3ETHEREUMPositionSnapshotDTO" $ \o ->
    SUSHISWAPV3ETHEREUMPositionSnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "hash")
      <*> (o .:? "log_index")
      <*> (o .:? "nonce")
      <*> (o .:? "position")
      <*> (o .:? "liquidity_token_type")
      <*> (o .:? "liquidity")
      <*> (o .:? "liquidity_usd")
      <*> (o .:? "cumulative_deposit_token_amounts")
      <*> (o .:? "cumulative_deposit_usd")
      <*> (o .:? "cumulative_withdraw_token_amounts")
      <*> (o .:? "cumulative_withdraw_usd")
      <*> (o .:? "cumulative_reward_token_amounts")
      <*> (o .:? "cumulative_reward_usd")
      <*> (o .:? "deposit_count")
      <*> (o .:? "withdraw_count")
      <*> (o .:? "timestamp")

-- | ToJSON SUSHISWAPV3ETHEREUMPositionSnapshotDTO
instance A.ToJSON SUSHISWAPV3ETHEREUMPositionSnapshotDTO where
  toJSON SUSHISWAPV3ETHEREUMPositionSnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= sUSHISWAPV3ETHEREUMPositionSnapshotDTOEntryTime
      , "recv_time" .= sUSHISWAPV3ETHEREUMPositionSnapshotDTORecvTime
      , "block_number" .= sUSHISWAPV3ETHEREUMPositionSnapshotDTOBlockNumber
      , "id" .= sUSHISWAPV3ETHEREUMPositionSnapshotDTOId
      , "hash" .= sUSHISWAPV3ETHEREUMPositionSnapshotDTOHash
      , "log_index" .= sUSHISWAPV3ETHEREUMPositionSnapshotDTOLogIndex
      , "nonce" .= sUSHISWAPV3ETHEREUMPositionSnapshotDTONonce
      , "position" .= sUSHISWAPV3ETHEREUMPositionSnapshotDTOPosition
      , "liquidity_token_type" .= sUSHISWAPV3ETHEREUMPositionSnapshotDTOLiquidityTokenType
      , "liquidity" .= sUSHISWAPV3ETHEREUMPositionSnapshotDTOLiquidity
      , "liquidity_usd" .= sUSHISWAPV3ETHEREUMPositionSnapshotDTOLiquidityUsd
      , "cumulative_deposit_token_amounts" .= sUSHISWAPV3ETHEREUMPositionSnapshotDTOCumulativeDepositTokenAmounts
      , "cumulative_deposit_usd" .= sUSHISWAPV3ETHEREUMPositionSnapshotDTOCumulativeDepositUsd
      , "cumulative_withdraw_token_amounts" .= sUSHISWAPV3ETHEREUMPositionSnapshotDTOCumulativeWithdrawTokenAmounts
      , "cumulative_withdraw_usd" .= sUSHISWAPV3ETHEREUMPositionSnapshotDTOCumulativeWithdrawUsd
      , "cumulative_reward_token_amounts" .= sUSHISWAPV3ETHEREUMPositionSnapshotDTOCumulativeRewardTokenAmounts
      , "cumulative_reward_usd" .= sUSHISWAPV3ETHEREUMPositionSnapshotDTOCumulativeRewardUsd
      , "deposit_count" .= sUSHISWAPV3ETHEREUMPositionSnapshotDTODepositCount
      , "withdraw_count" .= sUSHISWAPV3ETHEREUMPositionSnapshotDTOWithdrawCount
      , "timestamp" .= sUSHISWAPV3ETHEREUMPositionSnapshotDTOTimestamp
      ]


-- | Construct a value of type 'SUSHISWAPV3ETHEREUMPositionSnapshotDTO' (by applying it's required fields, if any)
mkSUSHISWAPV3ETHEREUMPositionSnapshotDTO
  :: SUSHISWAPV3ETHEREUMPositionSnapshotDTO
mkSUSHISWAPV3ETHEREUMPositionSnapshotDTO =
  SUSHISWAPV3ETHEREUMPositionSnapshotDTO
  { sUSHISWAPV3ETHEREUMPositionSnapshotDTOEntryTime = Nothing
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTORecvTime = Nothing
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOId = Nothing
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOHash = Nothing
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOLogIndex = Nothing
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTONonce = Nothing
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOPosition = Nothing
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOLiquidityTokenType = Nothing
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOLiquidity = Nothing
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOLiquidityUsd = Nothing
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOCumulativeDepositTokenAmounts = Nothing
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOCumulativeDepositUsd = Nothing
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOCumulativeWithdrawTokenAmounts = Nothing
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOCumulativeWithdrawUsd = Nothing
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOCumulativeRewardTokenAmounts = Nothing
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOCumulativeRewardUsd = Nothing
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTODepositCount = Nothing
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOWithdrawCount = Nothing
  , sUSHISWAPV3ETHEREUMPositionSnapshotDTOTimestamp = Nothing
  }

-- ** SUSHISWAPV3ETHEREUMRewardTokenDTO
-- | SUSHISWAPV3ETHEREUMRewardTokenDTO
-- Reward tokens awarded to lenders and borrowers.
data SUSHISWAPV3ETHEREUMRewardTokenDTO = SUSHISWAPV3ETHEREUMRewardTokenDTO
  { sUSHISWAPV3ETHEREUMRewardTokenDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sUSHISWAPV3ETHEREUMRewardTokenDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sUSHISWAPV3ETHEREUMRewardTokenDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sUSHISWAPV3ETHEREUMRewardTokenDTOId :: !(Maybe Text) -- ^ "id" - (reward token type)-(smart contract address of the reward token)
  , sUSHISWAPV3ETHEREUMRewardTokenDTOToken :: !(Maybe Text) -- ^ "token" - Reference to the actual token
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SUSHISWAPV3ETHEREUMRewardTokenDTO
instance A.FromJSON SUSHISWAPV3ETHEREUMRewardTokenDTO where
  parseJSON = A.withObject "SUSHISWAPV3ETHEREUMRewardTokenDTO" $ \o ->
    SUSHISWAPV3ETHEREUMRewardTokenDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "token")

-- | ToJSON SUSHISWAPV3ETHEREUMRewardTokenDTO
instance A.ToJSON SUSHISWAPV3ETHEREUMRewardTokenDTO where
  toJSON SUSHISWAPV3ETHEREUMRewardTokenDTO {..} =
   _omitNulls
      [ "entry_time" .= sUSHISWAPV3ETHEREUMRewardTokenDTOEntryTime
      , "recv_time" .= sUSHISWAPV3ETHEREUMRewardTokenDTORecvTime
      , "block_number" .= sUSHISWAPV3ETHEREUMRewardTokenDTOBlockNumber
      , "id" .= sUSHISWAPV3ETHEREUMRewardTokenDTOId
      , "token" .= sUSHISWAPV3ETHEREUMRewardTokenDTOToken
      ]


-- | Construct a value of type 'SUSHISWAPV3ETHEREUMRewardTokenDTO' (by applying it's required fields, if any)
mkSUSHISWAPV3ETHEREUMRewardTokenDTO
  :: SUSHISWAPV3ETHEREUMRewardTokenDTO
mkSUSHISWAPV3ETHEREUMRewardTokenDTO =
  SUSHISWAPV3ETHEREUMRewardTokenDTO
  { sUSHISWAPV3ETHEREUMRewardTokenDTOEntryTime = Nothing
  , sUSHISWAPV3ETHEREUMRewardTokenDTORecvTime = Nothing
  , sUSHISWAPV3ETHEREUMRewardTokenDTOBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMRewardTokenDTOId = Nothing
  , sUSHISWAPV3ETHEREUMRewardTokenDTOToken = Nothing
  }

-- ** SUSHISWAPV3ETHEREUMSwapDTO
-- | SUSHISWAPV3ETHEREUMSwapDTO
-- Trade (swap) event which occurred in a pool.
data SUSHISWAPV3ETHEREUMSwapDTO = SUSHISWAPV3ETHEREUMSwapDTO
  { sUSHISWAPV3ETHEREUMSwapDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sUSHISWAPV3ETHEREUMSwapDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sUSHISWAPV3ETHEREUMSwapDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sUSHISWAPV3ETHEREUMSwapDTOBlock :: !(Maybe Int) -- ^ "block_" - Block number in which the swap operation was recorded.
  , sUSHISWAPV3ETHEREUMSwapDTOId :: !(Maybe Text) -- ^ "id" - Unique string identifier of the swap operation, format: (transaction hash)-(log index).
  , sUSHISWAPV3ETHEREUMSwapDTOHash :: !(Maybe Text) -- ^ "hash" - Transaction hash of the transaction that emitted this event.
  , sUSHISWAPV3ETHEREUMSwapDTONonce :: !(Maybe Text) -- ^ "nonce" - Nonce of the transaction that emitted this event.
  , sUSHISWAPV3ETHEREUMSwapDTOLogIndex :: !(Maybe Int) -- ^ "log_index" - Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0.
  , sUSHISWAPV3ETHEREUMSwapDTOGasLimit :: !(Maybe Text) -- ^ "gas_limit" - Gas limit of the transaction that emitted this event.
  , sUSHISWAPV3ETHEREUMSwapDTOGasUsed :: !(Maybe Text) -- ^ "gas_used" - Gas used in this transaction.
  , sUSHISWAPV3ETHEREUMSwapDTOGasPrice :: !(Maybe Text) -- ^ "gas_price" - Gas price of the transaction that emitted this event.
  , sUSHISWAPV3ETHEREUMSwapDTOProtocol :: !(Maybe Text) -- ^ "protocol" - The protocol this transaction belongs to.
  , sUSHISWAPV3ETHEREUMSwapDTOAccount :: !(Maybe Text) -- ^ "account" - Account that emitted this event.
  , sUSHISWAPV3ETHEREUMSwapDTOPool :: !(Maybe Text) -- ^ "pool" - The pool involving this event.
  , sUSHISWAPV3ETHEREUMSwapDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this event.
  , sUSHISWAPV3ETHEREUMSwapDTOTick :: !(Maybe Text) -- ^ "tick" - Tick of the swap operation.
  , sUSHISWAPV3ETHEREUMSwapDTOTokenIn :: !(Maybe Text) -- ^ "token_in" - Token deposited into pool.
  , sUSHISWAPV3ETHEREUMSwapDTOAmountIn :: !(Maybe Text) -- ^ "amount_in" - Amount of token deposited into pool in native units.
  , sUSHISWAPV3ETHEREUMSwapDTOAmountInUsd :: !(Maybe Text) -- ^ "amount_in_usd" - Amount of token deposited into pool in USD.
  , sUSHISWAPV3ETHEREUMSwapDTOTokenOut :: !(Maybe Text) -- ^ "token_out" - Token withdrawn from pool.
  , sUSHISWAPV3ETHEREUMSwapDTOAmountOut :: !(Maybe Text) -- ^ "amount_out" - Amount of token withdrawn from pool in native units.
  , sUSHISWAPV3ETHEREUMSwapDTOAmountOutUsd :: !(Maybe Text) -- ^ "amount_out_usd" - Amount of token withdrawn from pool in USD.
  , sUSHISWAPV3ETHEREUMSwapDTOReserveAmounts :: !(Maybe [Text]) -- ^ "reserve_amounts" - Amount of input tokens in the liquidity pool.
  , sUSHISWAPV3ETHEREUMSwapDTOPoolId :: !(Maybe Text) -- ^ /ReadOnly/ "pool_id"
  , sUSHISWAPV3ETHEREUMSwapDTOTransactionId :: !(Maybe Text) -- ^ /ReadOnly/ "transaction_id"
  , sUSHISWAPV3ETHEREUMSwapDTOEvaluatedPrice :: !(Maybe Double) -- ^ /ReadOnly/ "evaluated_price"
  , sUSHISWAPV3ETHEREUMSwapDTOEvaluatedAmount :: !(Maybe Double) -- ^ /ReadOnly/ "evaluated_amount"
  , sUSHISWAPV3ETHEREUMSwapDTOEvaluatedAggressor :: !(Maybe TransactionsETradeAggressiveSide) -- ^ "evaluated_aggressor"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SUSHISWAPV3ETHEREUMSwapDTO
instance A.FromJSON SUSHISWAPV3ETHEREUMSwapDTO where
  parseJSON = A.withObject "SUSHISWAPV3ETHEREUMSwapDTO" $ \o ->
    SUSHISWAPV3ETHEREUMSwapDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_")
      <*> (o .:? "id")
      <*> (o .:? "hash")
      <*> (o .:? "nonce")
      <*> (o .:? "log_index")
      <*> (o .:? "gas_limit")
      <*> (o .:? "gas_used")
      <*> (o .:? "gas_price")
      <*> (o .:? "protocol")
      <*> (o .:? "account")
      <*> (o .:? "pool")
      <*> (o .:? "timestamp")
      <*> (o .:? "tick")
      <*> (o .:? "token_in")
      <*> (o .:? "amount_in")
      <*> (o .:? "amount_in_usd")
      <*> (o .:? "token_out")
      <*> (o .:? "amount_out")
      <*> (o .:? "amount_out_usd")
      <*> (o .:? "reserve_amounts")
      <*> (o .:? "pool_id")
      <*> (o .:? "transaction_id")
      <*> (o .:? "evaluated_price")
      <*> (o .:? "evaluated_amount")
      <*> (o .:? "evaluated_aggressor")

-- | ToJSON SUSHISWAPV3ETHEREUMSwapDTO
instance A.ToJSON SUSHISWAPV3ETHEREUMSwapDTO where
  toJSON SUSHISWAPV3ETHEREUMSwapDTO {..} =
   _omitNulls
      [ "entry_time" .= sUSHISWAPV3ETHEREUMSwapDTOEntryTime
      , "recv_time" .= sUSHISWAPV3ETHEREUMSwapDTORecvTime
      , "block_number" .= sUSHISWAPV3ETHEREUMSwapDTOBlockNumber
      , "block_" .= sUSHISWAPV3ETHEREUMSwapDTOBlock
      , "id" .= sUSHISWAPV3ETHEREUMSwapDTOId
      , "hash" .= sUSHISWAPV3ETHEREUMSwapDTOHash
      , "nonce" .= sUSHISWAPV3ETHEREUMSwapDTONonce
      , "log_index" .= sUSHISWAPV3ETHEREUMSwapDTOLogIndex
      , "gas_limit" .= sUSHISWAPV3ETHEREUMSwapDTOGasLimit
      , "gas_used" .= sUSHISWAPV3ETHEREUMSwapDTOGasUsed
      , "gas_price" .= sUSHISWAPV3ETHEREUMSwapDTOGasPrice
      , "protocol" .= sUSHISWAPV3ETHEREUMSwapDTOProtocol
      , "account" .= sUSHISWAPV3ETHEREUMSwapDTOAccount
      , "pool" .= sUSHISWAPV3ETHEREUMSwapDTOPool
      , "timestamp" .= sUSHISWAPV3ETHEREUMSwapDTOTimestamp
      , "tick" .= sUSHISWAPV3ETHEREUMSwapDTOTick
      , "token_in" .= sUSHISWAPV3ETHEREUMSwapDTOTokenIn
      , "amount_in" .= sUSHISWAPV3ETHEREUMSwapDTOAmountIn
      , "amount_in_usd" .= sUSHISWAPV3ETHEREUMSwapDTOAmountInUsd
      , "token_out" .= sUSHISWAPV3ETHEREUMSwapDTOTokenOut
      , "amount_out" .= sUSHISWAPV3ETHEREUMSwapDTOAmountOut
      , "amount_out_usd" .= sUSHISWAPV3ETHEREUMSwapDTOAmountOutUsd
      , "reserve_amounts" .= sUSHISWAPV3ETHEREUMSwapDTOReserveAmounts
      , "pool_id" .= sUSHISWAPV3ETHEREUMSwapDTOPoolId
      , "transaction_id" .= sUSHISWAPV3ETHEREUMSwapDTOTransactionId
      , "evaluated_price" .= sUSHISWAPV3ETHEREUMSwapDTOEvaluatedPrice
      , "evaluated_amount" .= sUSHISWAPV3ETHEREUMSwapDTOEvaluatedAmount
      , "evaluated_aggressor" .= sUSHISWAPV3ETHEREUMSwapDTOEvaluatedAggressor
      ]


-- | Construct a value of type 'SUSHISWAPV3ETHEREUMSwapDTO' (by applying it's required fields, if any)
mkSUSHISWAPV3ETHEREUMSwapDTO
  :: SUSHISWAPV3ETHEREUMSwapDTO
mkSUSHISWAPV3ETHEREUMSwapDTO =
  SUSHISWAPV3ETHEREUMSwapDTO
  { sUSHISWAPV3ETHEREUMSwapDTOEntryTime = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTORecvTime = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOBlock = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOId = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOHash = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTONonce = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOLogIndex = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOGasLimit = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOGasUsed = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOGasPrice = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOProtocol = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOAccount = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOPool = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOTimestamp = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOTick = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOTokenIn = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOAmountIn = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOAmountInUsd = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOTokenOut = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOAmountOut = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOAmountOutUsd = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOReserveAmounts = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOPoolId = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOTransactionId = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOEvaluatedPrice = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOEvaluatedAmount = Nothing
  , sUSHISWAPV3ETHEREUMSwapDTOEvaluatedAggressor = Nothing
  }

-- ** SUSHISWAPV3ETHEREUMTickDTO
-- | SUSHISWAPV3ETHEREUMTickDTO
-- 
data SUSHISWAPV3ETHEREUMTickDTO = SUSHISWAPV3ETHEREUMTickDTO
  { sUSHISWAPV3ETHEREUMTickDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sUSHISWAPV3ETHEREUMTickDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sUSHISWAPV3ETHEREUMTickDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sUSHISWAPV3ETHEREUMTickDTOId :: !(Maybe Text) -- ^ "id" - (pool address)-(tick index)
  , sUSHISWAPV3ETHEREUMTickDTOIndex :: !(Maybe Text) -- ^ "index" - tick index
  , sUSHISWAPV3ETHEREUMTickDTOPool :: !(Maybe Text) -- ^ "pool" - Liquidity pool this tick belongs to
  , sUSHISWAPV3ETHEREUMTickDTOCreatedTimestamp :: !(Maybe Text) -- ^ "created_timestamp" - Creation timestamp
  , sUSHISWAPV3ETHEREUMTickDTOCreatedBlockNumber :: !(Maybe Text) -- ^ "created_block_number" - Creation block number
  , sUSHISWAPV3ETHEREUMTickDTOPrices :: !(Maybe [Text]) -- ^ "prices" - calculated price of token0 of tick within this pool - constant
  , sUSHISWAPV3ETHEREUMTickDTOLiquidityGross :: !(Maybe Text) -- ^ "liquidity_gross" - total liquidity pool has as tick lower or upper
  , sUSHISWAPV3ETHEREUMTickDTOLiquidityGrossUsd :: !(Maybe Text) -- ^ "liquidity_gross_usd" - total liquidity in USD pool has as tick lower or upper
  , sUSHISWAPV3ETHEREUMTickDTOLiquidityNet :: !(Maybe Text) -- ^ "liquidity_net" - how much liquidity changes when tick crossed
  , sUSHISWAPV3ETHEREUMTickDTOLiquidityNetUsd :: !(Maybe Text) -- ^ "liquidity_net_usd" - how much liquidity in USD changes when tick crossed
  , sUSHISWAPV3ETHEREUMTickDTOLastSnapshotDayId :: !(Maybe Int) -- ^ "last_snapshot_day_id" - Day ID of the most recent daily snapshot
  , sUSHISWAPV3ETHEREUMTickDTOLastSnapshotHourId :: !(Maybe Int) -- ^ "last_snapshot_hour_id" - Hour ID of the most recent hourly snapshot
  , sUSHISWAPV3ETHEREUMTickDTOLastUpdateTimestamp :: !(Maybe Text) -- ^ "last_update_timestamp" - Timestamp of the last time this entity was updated
  , sUSHISWAPV3ETHEREUMTickDTOLastUpdateBlockNumber :: !(Maybe Text) -- ^ "last_update_block_number" - Block number of the last time this entity was updated
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SUSHISWAPV3ETHEREUMTickDTO
instance A.FromJSON SUSHISWAPV3ETHEREUMTickDTO where
  parseJSON = A.withObject "SUSHISWAPV3ETHEREUMTickDTO" $ \o ->
    SUSHISWAPV3ETHEREUMTickDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "index")
      <*> (o .:? "pool")
      <*> (o .:? "created_timestamp")
      <*> (o .:? "created_block_number")
      <*> (o .:? "prices")
      <*> (o .:? "liquidity_gross")
      <*> (o .:? "liquidity_gross_usd")
      <*> (o .:? "liquidity_net")
      <*> (o .:? "liquidity_net_usd")
      <*> (o .:? "last_snapshot_day_id")
      <*> (o .:? "last_snapshot_hour_id")
      <*> (o .:? "last_update_timestamp")
      <*> (o .:? "last_update_block_number")

-- | ToJSON SUSHISWAPV3ETHEREUMTickDTO
instance A.ToJSON SUSHISWAPV3ETHEREUMTickDTO where
  toJSON SUSHISWAPV3ETHEREUMTickDTO {..} =
   _omitNulls
      [ "entry_time" .= sUSHISWAPV3ETHEREUMTickDTOEntryTime
      , "recv_time" .= sUSHISWAPV3ETHEREUMTickDTORecvTime
      , "block_number" .= sUSHISWAPV3ETHEREUMTickDTOBlockNumber
      , "id" .= sUSHISWAPV3ETHEREUMTickDTOId
      , "index" .= sUSHISWAPV3ETHEREUMTickDTOIndex
      , "pool" .= sUSHISWAPV3ETHEREUMTickDTOPool
      , "created_timestamp" .= sUSHISWAPV3ETHEREUMTickDTOCreatedTimestamp
      , "created_block_number" .= sUSHISWAPV3ETHEREUMTickDTOCreatedBlockNumber
      , "prices" .= sUSHISWAPV3ETHEREUMTickDTOPrices
      , "liquidity_gross" .= sUSHISWAPV3ETHEREUMTickDTOLiquidityGross
      , "liquidity_gross_usd" .= sUSHISWAPV3ETHEREUMTickDTOLiquidityGrossUsd
      , "liquidity_net" .= sUSHISWAPV3ETHEREUMTickDTOLiquidityNet
      , "liquidity_net_usd" .= sUSHISWAPV3ETHEREUMTickDTOLiquidityNetUsd
      , "last_snapshot_day_id" .= sUSHISWAPV3ETHEREUMTickDTOLastSnapshotDayId
      , "last_snapshot_hour_id" .= sUSHISWAPV3ETHEREUMTickDTOLastSnapshotHourId
      , "last_update_timestamp" .= sUSHISWAPV3ETHEREUMTickDTOLastUpdateTimestamp
      , "last_update_block_number" .= sUSHISWAPV3ETHEREUMTickDTOLastUpdateBlockNumber
      ]


-- | Construct a value of type 'SUSHISWAPV3ETHEREUMTickDTO' (by applying it's required fields, if any)
mkSUSHISWAPV3ETHEREUMTickDTO
  :: SUSHISWAPV3ETHEREUMTickDTO
mkSUSHISWAPV3ETHEREUMTickDTO =
  SUSHISWAPV3ETHEREUMTickDTO
  { sUSHISWAPV3ETHEREUMTickDTOEntryTime = Nothing
  , sUSHISWAPV3ETHEREUMTickDTORecvTime = Nothing
  , sUSHISWAPV3ETHEREUMTickDTOBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMTickDTOId = Nothing
  , sUSHISWAPV3ETHEREUMTickDTOIndex = Nothing
  , sUSHISWAPV3ETHEREUMTickDTOPool = Nothing
  , sUSHISWAPV3ETHEREUMTickDTOCreatedTimestamp = Nothing
  , sUSHISWAPV3ETHEREUMTickDTOCreatedBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMTickDTOPrices = Nothing
  , sUSHISWAPV3ETHEREUMTickDTOLiquidityGross = Nothing
  , sUSHISWAPV3ETHEREUMTickDTOLiquidityGrossUsd = Nothing
  , sUSHISWAPV3ETHEREUMTickDTOLiquidityNet = Nothing
  , sUSHISWAPV3ETHEREUMTickDTOLiquidityNetUsd = Nothing
  , sUSHISWAPV3ETHEREUMTickDTOLastSnapshotDayId = Nothing
  , sUSHISWAPV3ETHEREUMTickDTOLastSnapshotHourId = Nothing
  , sUSHISWAPV3ETHEREUMTickDTOLastUpdateTimestamp = Nothing
  , sUSHISWAPV3ETHEREUMTickDTOLastUpdateBlockNumber = Nothing
  }

-- ** SUSHISWAPV3ETHEREUMTickDailySnapshotDTO
-- | SUSHISWAPV3ETHEREUMTickDailySnapshotDTO
-- 
data SUSHISWAPV3ETHEREUMTickDailySnapshotDTO = SUSHISWAPV3ETHEREUMTickDailySnapshotDTO
  { sUSHISWAPV3ETHEREUMTickDailySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sUSHISWAPV3ETHEREUMTickDailySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sUSHISWAPV3ETHEREUMTickDailySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sUSHISWAPV3ETHEREUMTickDailySnapshotDTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: (pool address)-(tick index)-(day ID)
  , sUSHISWAPV3ETHEREUMTickDailySnapshotDTODayId :: !(Maybe Int) -- ^ "day_id" - Number of days since Unix epoch time
  , sUSHISWAPV3ETHEREUMTickDailySnapshotDTOTick :: !(Maybe Text) -- ^ "tick" - tick index
  , sUSHISWAPV3ETHEREUMTickDailySnapshotDTOPool :: !(Maybe Text) -- ^ "pool" - liquidity pool this tick belongs to
  , sUSHISWAPV3ETHEREUMTickDailySnapshotDTOLiquidityGross :: !(Maybe Text) -- ^ "liquidity_gross" - total liquidity pool has as tick lower or upper
  , sUSHISWAPV3ETHEREUMTickDailySnapshotDTOLiquidityGrossUsd :: !(Maybe Text) -- ^ "liquidity_gross_usd" - total liquidity in USD pool has as tick lower or upper
  , sUSHISWAPV3ETHEREUMTickDailySnapshotDTOLiquidityNet :: !(Maybe Text) -- ^ "liquidity_net" - how much liquidity changes when tick crossed
  , sUSHISWAPV3ETHEREUMTickDailySnapshotDTOLiquidityNetUsd :: !(Maybe Text) -- ^ "liquidity_net_usd" - how much liquidity in USD changes when tick crossed
  , sUSHISWAPV3ETHEREUMTickDailySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SUSHISWAPV3ETHEREUMTickDailySnapshotDTO
instance A.FromJSON SUSHISWAPV3ETHEREUMTickDailySnapshotDTO where
  parseJSON = A.withObject "SUSHISWAPV3ETHEREUMTickDailySnapshotDTO" $ \o ->
    SUSHISWAPV3ETHEREUMTickDailySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "day_id")
      <*> (o .:? "tick")
      <*> (o .:? "pool")
      <*> (o .:? "liquidity_gross")
      <*> (o .:? "liquidity_gross_usd")
      <*> (o .:? "liquidity_net")
      <*> (o .:? "liquidity_net_usd")
      <*> (o .:? "timestamp")

-- | ToJSON SUSHISWAPV3ETHEREUMTickDailySnapshotDTO
instance A.ToJSON SUSHISWAPV3ETHEREUMTickDailySnapshotDTO where
  toJSON SUSHISWAPV3ETHEREUMTickDailySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= sUSHISWAPV3ETHEREUMTickDailySnapshotDTOEntryTime
      , "recv_time" .= sUSHISWAPV3ETHEREUMTickDailySnapshotDTORecvTime
      , "block_number" .= sUSHISWAPV3ETHEREUMTickDailySnapshotDTOBlockNumber
      , "id" .= sUSHISWAPV3ETHEREUMTickDailySnapshotDTOId
      , "day_id" .= sUSHISWAPV3ETHEREUMTickDailySnapshotDTODayId
      , "tick" .= sUSHISWAPV3ETHEREUMTickDailySnapshotDTOTick
      , "pool" .= sUSHISWAPV3ETHEREUMTickDailySnapshotDTOPool
      , "liquidity_gross" .= sUSHISWAPV3ETHEREUMTickDailySnapshotDTOLiquidityGross
      , "liquidity_gross_usd" .= sUSHISWAPV3ETHEREUMTickDailySnapshotDTOLiquidityGrossUsd
      , "liquidity_net" .= sUSHISWAPV3ETHEREUMTickDailySnapshotDTOLiquidityNet
      , "liquidity_net_usd" .= sUSHISWAPV3ETHEREUMTickDailySnapshotDTOLiquidityNetUsd
      , "timestamp" .= sUSHISWAPV3ETHEREUMTickDailySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'SUSHISWAPV3ETHEREUMTickDailySnapshotDTO' (by applying it's required fields, if any)
mkSUSHISWAPV3ETHEREUMTickDailySnapshotDTO
  :: SUSHISWAPV3ETHEREUMTickDailySnapshotDTO
mkSUSHISWAPV3ETHEREUMTickDailySnapshotDTO =
  SUSHISWAPV3ETHEREUMTickDailySnapshotDTO
  { sUSHISWAPV3ETHEREUMTickDailySnapshotDTOEntryTime = Nothing
  , sUSHISWAPV3ETHEREUMTickDailySnapshotDTORecvTime = Nothing
  , sUSHISWAPV3ETHEREUMTickDailySnapshotDTOBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMTickDailySnapshotDTOId = Nothing
  , sUSHISWAPV3ETHEREUMTickDailySnapshotDTODayId = Nothing
  , sUSHISWAPV3ETHEREUMTickDailySnapshotDTOTick = Nothing
  , sUSHISWAPV3ETHEREUMTickDailySnapshotDTOPool = Nothing
  , sUSHISWAPV3ETHEREUMTickDailySnapshotDTOLiquidityGross = Nothing
  , sUSHISWAPV3ETHEREUMTickDailySnapshotDTOLiquidityGrossUsd = Nothing
  , sUSHISWAPV3ETHEREUMTickDailySnapshotDTOLiquidityNet = Nothing
  , sUSHISWAPV3ETHEREUMTickDailySnapshotDTOLiquidityNetUsd = Nothing
  , sUSHISWAPV3ETHEREUMTickDailySnapshotDTOTimestamp = Nothing
  }

-- ** SUSHISWAPV3ETHEREUMTickHourlySnapshotDTO
-- | SUSHISWAPV3ETHEREUMTickHourlySnapshotDTO
-- 
data SUSHISWAPV3ETHEREUMTickHourlySnapshotDTO = SUSHISWAPV3ETHEREUMTickHourlySnapshotDTO
  { sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sUSHISWAPV3ETHEREUMTickHourlySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOId :: !(Maybe Text) -- ^ "id" - (pool address)-(tick index)-(hour ID)
  , sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOHourId :: !(Maybe Int) -- ^ "hour_id" - Number of hours since Unix epoch time
  , sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOTick :: !(Maybe Text) -- ^ "tick" - tick index
  , sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOPool :: !(Maybe Text) -- ^ "pool" - liquidity pool this tick belongs to
  , sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityGross :: !(Maybe Text) -- ^ "liquidity_gross" - total liquidity pool has as tick lower or upper
  , sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityGrossUsd :: !(Maybe Text) -- ^ "liquidity_gross_usd" - total liquidity in USD pool has as tick lower or upper
  , sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityNet :: !(Maybe Text) -- ^ "liquidity_net" - how much liquidity changes when tick crossed
  , sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityNetUsd :: !(Maybe Text) -- ^ "liquidity_net_usd" - how much liquidity in USD changes when tick crossed
  , sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SUSHISWAPV3ETHEREUMTickHourlySnapshotDTO
instance A.FromJSON SUSHISWAPV3ETHEREUMTickHourlySnapshotDTO where
  parseJSON = A.withObject "SUSHISWAPV3ETHEREUMTickHourlySnapshotDTO" $ \o ->
    SUSHISWAPV3ETHEREUMTickHourlySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "hour_id")
      <*> (o .:? "tick")
      <*> (o .:? "pool")
      <*> (o .:? "liquidity_gross")
      <*> (o .:? "liquidity_gross_usd")
      <*> (o .:? "liquidity_net")
      <*> (o .:? "liquidity_net_usd")
      <*> (o .:? "timestamp")

-- | ToJSON SUSHISWAPV3ETHEREUMTickHourlySnapshotDTO
instance A.ToJSON SUSHISWAPV3ETHEREUMTickHourlySnapshotDTO where
  toJSON SUSHISWAPV3ETHEREUMTickHourlySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOEntryTime
      , "recv_time" .= sUSHISWAPV3ETHEREUMTickHourlySnapshotDTORecvTime
      , "block_number" .= sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOBlockNumber
      , "id" .= sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOId
      , "hour_id" .= sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOHourId
      , "tick" .= sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOTick
      , "pool" .= sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOPool
      , "liquidity_gross" .= sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityGross
      , "liquidity_gross_usd" .= sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityGrossUsd
      , "liquidity_net" .= sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityNet
      , "liquidity_net_usd" .= sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityNetUsd
      , "timestamp" .= sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'SUSHISWAPV3ETHEREUMTickHourlySnapshotDTO' (by applying it's required fields, if any)
mkSUSHISWAPV3ETHEREUMTickHourlySnapshotDTO
  :: SUSHISWAPV3ETHEREUMTickHourlySnapshotDTO
mkSUSHISWAPV3ETHEREUMTickHourlySnapshotDTO =
  SUSHISWAPV3ETHEREUMTickHourlySnapshotDTO
  { sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOEntryTime = Nothing
  , sUSHISWAPV3ETHEREUMTickHourlySnapshotDTORecvTime = Nothing
  , sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOId = Nothing
  , sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOHourId = Nothing
  , sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOTick = Nothing
  , sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOPool = Nothing
  , sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityGross = Nothing
  , sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityGrossUsd = Nothing
  , sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityNet = Nothing
  , sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityNetUsd = Nothing
  , sUSHISWAPV3ETHEREUMTickHourlySnapshotDTOTimestamp = Nothing
  }

-- ** SUSHISWAPV3ETHEREUMTokenDTO
-- | SUSHISWAPV3ETHEREUMTokenDTO
-- Stores aggregated information for a specific token across all pairs that token is included in.
data SUSHISWAPV3ETHEREUMTokenDTO = SUSHISWAPV3ETHEREUMTokenDTO
  { sUSHISWAPV3ETHEREUMTokenDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sUSHISWAPV3ETHEREUMTokenDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sUSHISWAPV3ETHEREUMTokenDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sUSHISWAPV3ETHEREUMTokenDTOVid :: !(Maybe Integer) -- ^ "vid" - .
  , sUSHISWAPV3ETHEREUMTokenDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , sUSHISWAPV3ETHEREUMTokenDTOId :: !(Maybe Text) -- ^ "id" - Smart contract address of the token.
  , sUSHISWAPV3ETHEREUMTokenDTOName :: !(Maybe Text) -- ^ "name" - Name of the token, mirrored from the smart contract.
  , sUSHISWAPV3ETHEREUMTokenDTOSymbol :: !(Maybe Text) -- ^ "symbol" - Symbol of the token, mirrored from the smart contract.
  , sUSHISWAPV3ETHEREUMTokenDTODecimals :: !(Maybe Int) -- ^ "decimals" - The number of decimal places this token uses, default to 18.
  , sUSHISWAPV3ETHEREUMTokenDTOLastPriceUsd :: !(Maybe Text) -- ^ "last_price_usd" - Optional field to track the price of a token, mostly for caching purposes.
  , sUSHISWAPV3ETHEREUMTokenDTOLastPriceBlockNumber :: !(Maybe Text) -- ^ "last_price_block_number" - Optional field to track the block number of the last token price.
  , sUSHISWAPV3ETHEREUMTokenDTOLastPricePool :: !(Maybe Text) -- ^ "last_price_pool" - Last pool that gave this token a price.
  , sUSHISWAPV3ETHEREUMTokenDTOTotalSupply :: !(Maybe Text) -- ^ "total_supply" - Amount of tokens in the protocol.
  , sUSHISWAPV3ETHEREUMTokenDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Total value locked in the protocol.
  , sUSHISWAPV3ETHEREUMTokenDTOLargePriceChangeBuffer :: !(Maybe Int) -- ^ "large_price_change_buffer" - The buffer for detecting large price changes.
  , sUSHISWAPV3ETHEREUMTokenDTOLargeTvlImpactBuffer :: !(Maybe Int) -- ^ "large_tvl_impact_buffer" - The buffer for detecting large TVL (Total Value Locked) impact.
  , sUSHISWAPV3ETHEREUMTokenDTOTokenSymbol :: !(Maybe Text) -- ^ /ReadOnly/ "token_symbol"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SUSHISWAPV3ETHEREUMTokenDTO
instance A.FromJSON SUSHISWAPV3ETHEREUMTokenDTO where
  parseJSON = A.withObject "SUSHISWAPV3ETHEREUMTokenDTO" $ \o ->
    SUSHISWAPV3ETHEREUMTokenDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "name")
      <*> (o .:? "symbol")
      <*> (o .:? "decimals")
      <*> (o .:? "last_price_usd")
      <*> (o .:? "last_price_block_number")
      <*> (o .:? "last_price_pool")
      <*> (o .:? "total_supply")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "large_price_change_buffer")
      <*> (o .:? "large_tvl_impact_buffer")
      <*> (o .:? "token_symbol")

-- | ToJSON SUSHISWAPV3ETHEREUMTokenDTO
instance A.ToJSON SUSHISWAPV3ETHEREUMTokenDTO where
  toJSON SUSHISWAPV3ETHEREUMTokenDTO {..} =
   _omitNulls
      [ "entry_time" .= sUSHISWAPV3ETHEREUMTokenDTOEntryTime
      , "recv_time" .= sUSHISWAPV3ETHEREUMTokenDTORecvTime
      , "block_number" .= sUSHISWAPV3ETHEREUMTokenDTOBlockNumber
      , "vid" .= sUSHISWAPV3ETHEREUMTokenDTOVid
      , "block_range" .= sUSHISWAPV3ETHEREUMTokenDTOBlockRange
      , "id" .= sUSHISWAPV3ETHEREUMTokenDTOId
      , "name" .= sUSHISWAPV3ETHEREUMTokenDTOName
      , "symbol" .= sUSHISWAPV3ETHEREUMTokenDTOSymbol
      , "decimals" .= sUSHISWAPV3ETHEREUMTokenDTODecimals
      , "last_price_usd" .= sUSHISWAPV3ETHEREUMTokenDTOLastPriceUsd
      , "last_price_block_number" .= sUSHISWAPV3ETHEREUMTokenDTOLastPriceBlockNumber
      , "last_price_pool" .= sUSHISWAPV3ETHEREUMTokenDTOLastPricePool
      , "total_supply" .= sUSHISWAPV3ETHEREUMTokenDTOTotalSupply
      , "total_value_locked_usd" .= sUSHISWAPV3ETHEREUMTokenDTOTotalValueLockedUsd
      , "large_price_change_buffer" .= sUSHISWAPV3ETHEREUMTokenDTOLargePriceChangeBuffer
      , "large_tvl_impact_buffer" .= sUSHISWAPV3ETHEREUMTokenDTOLargeTvlImpactBuffer
      , "token_symbol" .= sUSHISWAPV3ETHEREUMTokenDTOTokenSymbol
      ]


-- | Construct a value of type 'SUSHISWAPV3ETHEREUMTokenDTO' (by applying it's required fields, if any)
mkSUSHISWAPV3ETHEREUMTokenDTO
  :: SUSHISWAPV3ETHEREUMTokenDTO
mkSUSHISWAPV3ETHEREUMTokenDTO =
  SUSHISWAPV3ETHEREUMTokenDTO
  { sUSHISWAPV3ETHEREUMTokenDTOEntryTime = Nothing
  , sUSHISWAPV3ETHEREUMTokenDTORecvTime = Nothing
  , sUSHISWAPV3ETHEREUMTokenDTOBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMTokenDTOVid = Nothing
  , sUSHISWAPV3ETHEREUMTokenDTOBlockRange = Nothing
  , sUSHISWAPV3ETHEREUMTokenDTOId = Nothing
  , sUSHISWAPV3ETHEREUMTokenDTOName = Nothing
  , sUSHISWAPV3ETHEREUMTokenDTOSymbol = Nothing
  , sUSHISWAPV3ETHEREUMTokenDTODecimals = Nothing
  , sUSHISWAPV3ETHEREUMTokenDTOLastPriceUsd = Nothing
  , sUSHISWAPV3ETHEREUMTokenDTOLastPriceBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMTokenDTOLastPricePool = Nothing
  , sUSHISWAPV3ETHEREUMTokenDTOTotalSupply = Nothing
  , sUSHISWAPV3ETHEREUMTokenDTOTotalValueLockedUsd = Nothing
  , sUSHISWAPV3ETHEREUMTokenDTOLargePriceChangeBuffer = Nothing
  , sUSHISWAPV3ETHEREUMTokenDTOLargeTvlImpactBuffer = Nothing
  , sUSHISWAPV3ETHEREUMTokenDTOTokenSymbol = Nothing
  }

-- ** SUSHISWAPV3ETHEREUMTokenWhiteListDTO
-- | SUSHISWAPV3ETHEREUMTokenWhiteListDTO
-- 
data SUSHISWAPV3ETHEREUMTokenWhiteListDTO = SUSHISWAPV3ETHEREUMTokenWhiteListDTO
  { sUSHISWAPV3ETHEREUMTokenWhiteListDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sUSHISWAPV3ETHEREUMTokenWhiteListDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sUSHISWAPV3ETHEREUMTokenWhiteListDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sUSHISWAPV3ETHEREUMTokenWhiteListDTOId :: !(Maybe Text) -- ^ "id" - Token Address
  , sUSHISWAPV3ETHEREUMTokenWhiteListDTOWhitelistPools :: !(Maybe [Text]) -- ^ "whitelist_pools" - pools token is in that are white listed for USD pricing
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SUSHISWAPV3ETHEREUMTokenWhiteListDTO
instance A.FromJSON SUSHISWAPV3ETHEREUMTokenWhiteListDTO where
  parseJSON = A.withObject "SUSHISWAPV3ETHEREUMTokenWhiteListDTO" $ \o ->
    SUSHISWAPV3ETHEREUMTokenWhiteListDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "whitelist_pools")

-- | ToJSON SUSHISWAPV3ETHEREUMTokenWhiteListDTO
instance A.ToJSON SUSHISWAPV3ETHEREUMTokenWhiteListDTO where
  toJSON SUSHISWAPV3ETHEREUMTokenWhiteListDTO {..} =
   _omitNulls
      [ "entry_time" .= sUSHISWAPV3ETHEREUMTokenWhiteListDTOEntryTime
      , "recv_time" .= sUSHISWAPV3ETHEREUMTokenWhiteListDTORecvTime
      , "block_number" .= sUSHISWAPV3ETHEREUMTokenWhiteListDTOBlockNumber
      , "id" .= sUSHISWAPV3ETHEREUMTokenWhiteListDTOId
      , "whitelist_pools" .= sUSHISWAPV3ETHEREUMTokenWhiteListDTOWhitelistPools
      ]


-- | Construct a value of type 'SUSHISWAPV3ETHEREUMTokenWhiteListDTO' (by applying it's required fields, if any)
mkSUSHISWAPV3ETHEREUMTokenWhiteListDTO
  :: SUSHISWAPV3ETHEREUMTokenWhiteListDTO
mkSUSHISWAPV3ETHEREUMTokenWhiteListDTO =
  SUSHISWAPV3ETHEREUMTokenWhiteListDTO
  { sUSHISWAPV3ETHEREUMTokenWhiteListDTOEntryTime = Nothing
  , sUSHISWAPV3ETHEREUMTokenWhiteListDTORecvTime = Nothing
  , sUSHISWAPV3ETHEREUMTokenWhiteListDTOBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMTokenWhiteListDTOId = Nothing
  , sUSHISWAPV3ETHEREUMTokenWhiteListDTOWhitelistPools = Nothing
  }

-- ** SUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTO
-- | SUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTO
-- 
data SUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTO = SUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTO
  { sUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTOId :: !(Maybe Text) -- ^ "id" - Whitelist Token Symbol
  , sUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTOAddress :: !(Maybe Text) -- ^ "address" - Whitelist Token Address
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTO
instance A.FromJSON SUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTO where
  parseJSON = A.withObject "SUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTO" $ \o ->
    SUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "address")

-- | ToJSON SUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTO
instance A.ToJSON SUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTO where
  toJSON SUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTO {..} =
   _omitNulls
      [ "entry_time" .= sUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTOEntryTime
      , "recv_time" .= sUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTORecvTime
      , "block_number" .= sUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTOBlockNumber
      , "id" .= sUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTOId
      , "address" .= sUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTOAddress
      ]


-- | Construct a value of type 'SUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTO' (by applying it's required fields, if any)
mkSUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTO
  :: SUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTO
mkSUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTO =
  SUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTO
  { sUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTOEntryTime = Nothing
  , sUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTORecvTime = Nothing
  , sUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTOBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTOId = Nothing
  , sUSHISWAPV3ETHEREUMTokenWhiteListSymbolDTOAddress = Nothing
  }

-- ** SUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
-- | SUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
-- 
data SUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO = SUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
  { sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOId :: !(Maybe Text) -- ^ "id" - ID is # of days since Unix epoch time
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODay :: !(Maybe Int) -- ^ "day" - Number of days since Unix epoch time
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - Protocol this snapshot is associated with
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyActiveUsers :: !(Maybe Int) -- ^ "daily_active_users" - Number of unique daily active users
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOCumulativeUniqueUsers :: !(Maybe Int) -- ^ "cumulative_unique_users" - Number of cumulative unique users
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyTransactionCount :: !(Maybe Int) -- ^ "daily_transaction_count" - Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface.
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOTotalPoolCount :: !(Maybe Int) -- ^ "total_pool_count" - Total number of pools
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyDepositCount :: !(Maybe Int) -- ^ "daily_deposit_count" - Total number of deposits (add liquidity) in an day
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyWithdrawCount :: !(Maybe Int) -- ^ "daily_withdraw_count" - Total number of withdrawals (remove liquidity) in an day
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailySwapCount :: !(Maybe Int) -- ^ "daily_swap_count" - Total number of trades (swaps) in an day
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
instance A.FromJSON SUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO where
  parseJSON = A.withObject "SUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO" $ \o ->
    SUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "day")
      <*> (o .:? "protocol")
      <*> (o .:? "daily_active_users")
      <*> (o .:? "cumulative_unique_users")
      <*> (o .:? "daily_transaction_count")
      <*> (o .:? "total_pool_count")
      <*> (o .:? "daily_deposit_count")
      <*> (o .:? "daily_withdraw_count")
      <*> (o .:? "daily_swap_count")
      <*> (o .:? "timestamp")

-- | ToJSON SUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
instance A.ToJSON SUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO where
  toJSON SUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOEntryTime
      , "recv_time" .= sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTORecvTime
      , "block_number" .= sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOBlockNumber
      , "id" .= sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOId
      , "day" .= sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODay
      , "protocol" .= sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOProtocol
      , "daily_active_users" .= sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyActiveUsers
      , "cumulative_unique_users" .= sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOCumulativeUniqueUsers
      , "daily_transaction_count" .= sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyTransactionCount
      , "total_pool_count" .= sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOTotalPoolCount
      , "daily_deposit_count" .= sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyDepositCount
      , "daily_withdraw_count" .= sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyWithdrawCount
      , "daily_swap_count" .= sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailySwapCount
      , "timestamp" .= sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'SUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO' (by applying it's required fields, if any)
mkSUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
  :: SUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
mkSUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO =
  SUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
  { sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOEntryTime = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTORecvTime = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOId = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODay = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOProtocol = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyActiveUsers = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOCumulativeUniqueUsers = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyTransactionCount = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOTotalPoolCount = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyDepositCount = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyWithdrawCount = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailySwapCount = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOTimestamp = Nothing
  }

-- ** SUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
-- | SUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
-- 
data SUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO = SUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
  { sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOId :: !(Maybe Text) -- ^ "id" - (# of hours since Unix epoch time)
  , sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHour :: !(Maybe Int) -- ^ "hour" - Number of hours since Unix epoch time
  , sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - Protocol this snapshot is associated with
  , sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyActiveUsers :: !(Maybe Int) -- ^ "hourly_active_users" - Number of unique hourly active users
  , sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOCumulativeUniqueUsers :: !(Maybe Int) -- ^ "cumulative_unique_users" - Number of cumulative unique users
  , sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyTransactionCount :: !(Maybe Int) -- ^ "hourly_transaction_count" - Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface.
  , sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyDepositCount :: !(Maybe Int) -- ^ "hourly_deposit_count" - Total number of deposits (add liquidity) in an hour
  , sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyWithdrawCount :: !(Maybe Int) -- ^ "hourly_withdraw_count" - Total number of withdrawals (remove liquidity) in an hour
  , sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlySwapCount :: !(Maybe Int) -- ^ "hourly_swap_count" - Total number of trades (swaps) in an hour
  , sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
instance A.FromJSON SUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO where
  parseJSON = A.withObject "SUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO" $ \o ->
    SUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "hour")
      <*> (o .:? "protocol")
      <*> (o .:? "hourly_active_users")
      <*> (o .:? "cumulative_unique_users")
      <*> (o .:? "hourly_transaction_count")
      <*> (o .:? "hourly_deposit_count")
      <*> (o .:? "hourly_withdraw_count")
      <*> (o .:? "hourly_swap_count")
      <*> (o .:? "timestamp")

-- | ToJSON SUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
instance A.ToJSON SUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO where
  toJSON SUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOEntryTime
      , "recv_time" .= sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTORecvTime
      , "block_number" .= sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOBlockNumber
      , "id" .= sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOId
      , "hour" .= sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHour
      , "protocol" .= sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOProtocol
      , "hourly_active_users" .= sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyActiveUsers
      , "cumulative_unique_users" .= sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOCumulativeUniqueUsers
      , "hourly_transaction_count" .= sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyTransactionCount
      , "hourly_deposit_count" .= sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyDepositCount
      , "hourly_withdraw_count" .= sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyWithdrawCount
      , "hourly_swap_count" .= sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlySwapCount
      , "timestamp" .= sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'SUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO' (by applying it's required fields, if any)
mkSUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
  :: SUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
mkSUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO =
  SUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
  { sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOEntryTime = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTORecvTime = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOId = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHour = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOProtocol = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyActiveUsers = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOCumulativeUniqueUsers = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyTransactionCount = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyDepositCount = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyWithdrawCount = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlySwapCount = Nothing
  , sUSHISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOTimestamp = Nothing
  }

-- ** SUSHISWAPV3ETHEREUMWithdrawDTO
-- | SUSHISWAPV3ETHEREUMWithdrawDTO
-- 
data SUSHISWAPV3ETHEREUMWithdrawDTO = SUSHISWAPV3ETHEREUMWithdrawDTO
  { sUSHISWAPV3ETHEREUMWithdrawDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , sUSHISWAPV3ETHEREUMWithdrawDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , sUSHISWAPV3ETHEREUMWithdrawDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , sUSHISWAPV3ETHEREUMWithdrawDTOId :: !(Maybe Text) -- ^ "id" - (transaction hash)-(log index)
  , sUSHISWAPV3ETHEREUMWithdrawDTOHash :: !(Maybe Text) -- ^ "hash" - Transaction hash of the transaction that emitted this event
  , sUSHISWAPV3ETHEREUMWithdrawDTONonce :: !(Maybe Text) -- ^ "nonce" - Nonce of the transaction that emitted this event
  , sUSHISWAPV3ETHEREUMWithdrawDTOLogIndex :: !(Maybe Int) -- ^ "log_index" - Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0
  , sUSHISWAPV3ETHEREUMWithdrawDTOGasLimit :: !(Maybe Text) -- ^ "gas_limit" - Gas limit of the transaction that emitted this event
  , sUSHISWAPV3ETHEREUMWithdrawDTOGasUsed :: !(Maybe Text) -- ^ "gas_used" - Gas used in this transaction. (Optional because not every chain will support this)
  , sUSHISWAPV3ETHEREUMWithdrawDTOGasPrice :: !(Maybe Text) -- ^ "gas_price" - Gas price of the transaction that emitted this event
  , sUSHISWAPV3ETHEREUMWithdrawDTOProtocol :: !(Maybe Text) -- ^ "protocol" - The protocol this transaction belongs to
  , sUSHISWAPV3ETHEREUMWithdrawDTOAccount :: !(Maybe Text) -- ^ "account" - Account that emitted this event
  , sUSHISWAPV3ETHEREUMWithdrawDTOPosition :: !(Maybe Text) -- ^ "position" - The user position changed by this event
  , sUSHISWAPV3ETHEREUMWithdrawDTOTickLower :: !(Maybe Text) -- ^ "tick_lower" - lower tick of position
  , sUSHISWAPV3ETHEREUMWithdrawDTOTickUpper :: !(Maybe Text) -- ^ "tick_upper" - upper tick of position
  , sUSHISWAPV3ETHEREUMWithdrawDTOPool :: !(Maybe Text) -- ^ "pool" - The pool involving this event
  , sUSHISWAPV3ETHEREUMWithdrawDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this event
  , sUSHISWAPV3ETHEREUMWithdrawDTOLiquidity :: !(Maybe Text) -- ^ "liquidity" - Amount of liquidity burned
  , sUSHISWAPV3ETHEREUMWithdrawDTOInputTokens :: !(Maybe [Text]) -- ^ "input_tokens" - Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool
  , sUSHISWAPV3ETHEREUMWithdrawDTOInputTokenAmounts :: !(Maybe [Text]) -- ^ "input_token_amounts" - Amount of input tokens in the token&#39;s native unit
  , sUSHISWAPV3ETHEREUMWithdrawDTOReserveAmounts :: !(Maybe [Text]) -- ^ "reserve_amounts" - Amount of input tokens in the liquidity pool
  , sUSHISWAPV3ETHEREUMWithdrawDTOAmountUsd :: !(Maybe Text) -- ^ "amount_usd" - USD-normalized value of the transaction of the underlying (e.g. sum of tokens withdrawn from a pool)
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SUSHISWAPV3ETHEREUMWithdrawDTO
instance A.FromJSON SUSHISWAPV3ETHEREUMWithdrawDTO where
  parseJSON = A.withObject "SUSHISWAPV3ETHEREUMWithdrawDTO" $ \o ->
    SUSHISWAPV3ETHEREUMWithdrawDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "hash")
      <*> (o .:? "nonce")
      <*> (o .:? "log_index")
      <*> (o .:? "gas_limit")
      <*> (o .:? "gas_used")
      <*> (o .:? "gas_price")
      <*> (o .:? "protocol")
      <*> (o .:? "account")
      <*> (o .:? "position")
      <*> (o .:? "tick_lower")
      <*> (o .:? "tick_upper")
      <*> (o .:? "pool")
      <*> (o .:? "timestamp")
      <*> (o .:? "liquidity")
      <*> (o .:? "input_tokens")
      <*> (o .:? "input_token_amounts")
      <*> (o .:? "reserve_amounts")
      <*> (o .:? "amount_usd")

-- | ToJSON SUSHISWAPV3ETHEREUMWithdrawDTO
instance A.ToJSON SUSHISWAPV3ETHEREUMWithdrawDTO where
  toJSON SUSHISWAPV3ETHEREUMWithdrawDTO {..} =
   _omitNulls
      [ "entry_time" .= sUSHISWAPV3ETHEREUMWithdrawDTOEntryTime
      , "recv_time" .= sUSHISWAPV3ETHEREUMWithdrawDTORecvTime
      , "block_number" .= sUSHISWAPV3ETHEREUMWithdrawDTOBlockNumber
      , "id" .= sUSHISWAPV3ETHEREUMWithdrawDTOId
      , "hash" .= sUSHISWAPV3ETHEREUMWithdrawDTOHash
      , "nonce" .= sUSHISWAPV3ETHEREUMWithdrawDTONonce
      , "log_index" .= sUSHISWAPV3ETHEREUMWithdrawDTOLogIndex
      , "gas_limit" .= sUSHISWAPV3ETHEREUMWithdrawDTOGasLimit
      , "gas_used" .= sUSHISWAPV3ETHEREUMWithdrawDTOGasUsed
      , "gas_price" .= sUSHISWAPV3ETHEREUMWithdrawDTOGasPrice
      , "protocol" .= sUSHISWAPV3ETHEREUMWithdrawDTOProtocol
      , "account" .= sUSHISWAPV3ETHEREUMWithdrawDTOAccount
      , "position" .= sUSHISWAPV3ETHEREUMWithdrawDTOPosition
      , "tick_lower" .= sUSHISWAPV3ETHEREUMWithdrawDTOTickLower
      , "tick_upper" .= sUSHISWAPV3ETHEREUMWithdrawDTOTickUpper
      , "pool" .= sUSHISWAPV3ETHEREUMWithdrawDTOPool
      , "timestamp" .= sUSHISWAPV3ETHEREUMWithdrawDTOTimestamp
      , "liquidity" .= sUSHISWAPV3ETHEREUMWithdrawDTOLiquidity
      , "input_tokens" .= sUSHISWAPV3ETHEREUMWithdrawDTOInputTokens
      , "input_token_amounts" .= sUSHISWAPV3ETHEREUMWithdrawDTOInputTokenAmounts
      , "reserve_amounts" .= sUSHISWAPV3ETHEREUMWithdrawDTOReserveAmounts
      , "amount_usd" .= sUSHISWAPV3ETHEREUMWithdrawDTOAmountUsd
      ]


-- | Construct a value of type 'SUSHISWAPV3ETHEREUMWithdrawDTO' (by applying it's required fields, if any)
mkSUSHISWAPV3ETHEREUMWithdrawDTO
  :: SUSHISWAPV3ETHEREUMWithdrawDTO
mkSUSHISWAPV3ETHEREUMWithdrawDTO =
  SUSHISWAPV3ETHEREUMWithdrawDTO
  { sUSHISWAPV3ETHEREUMWithdrawDTOEntryTime = Nothing
  , sUSHISWAPV3ETHEREUMWithdrawDTORecvTime = Nothing
  , sUSHISWAPV3ETHEREUMWithdrawDTOBlockNumber = Nothing
  , sUSHISWAPV3ETHEREUMWithdrawDTOId = Nothing
  , sUSHISWAPV3ETHEREUMWithdrawDTOHash = Nothing
  , sUSHISWAPV3ETHEREUMWithdrawDTONonce = Nothing
  , sUSHISWAPV3ETHEREUMWithdrawDTOLogIndex = Nothing
  , sUSHISWAPV3ETHEREUMWithdrawDTOGasLimit = Nothing
  , sUSHISWAPV3ETHEREUMWithdrawDTOGasUsed = Nothing
  , sUSHISWAPV3ETHEREUMWithdrawDTOGasPrice = Nothing
  , sUSHISWAPV3ETHEREUMWithdrawDTOProtocol = Nothing
  , sUSHISWAPV3ETHEREUMWithdrawDTOAccount = Nothing
  , sUSHISWAPV3ETHEREUMWithdrawDTOPosition = Nothing
  , sUSHISWAPV3ETHEREUMWithdrawDTOTickLower = Nothing
  , sUSHISWAPV3ETHEREUMWithdrawDTOTickUpper = Nothing
  , sUSHISWAPV3ETHEREUMWithdrawDTOPool = Nothing
  , sUSHISWAPV3ETHEREUMWithdrawDTOTimestamp = Nothing
  , sUSHISWAPV3ETHEREUMWithdrawDTOLiquidity = Nothing
  , sUSHISWAPV3ETHEREUMWithdrawDTOInputTokens = Nothing
  , sUSHISWAPV3ETHEREUMWithdrawDTOInputTokenAmounts = Nothing
  , sUSHISWAPV3ETHEREUMWithdrawDTOReserveAmounts = Nothing
  , sUSHISWAPV3ETHEREUMWithdrawDTOAmountUsd = Nothing
  }

-- ** UNISWAPV2ETHEREUMAccountDTO
-- | UNISWAPV2ETHEREUMAccountDTO
data UNISWAPV2ETHEREUMAccountDTO = UNISWAPV2ETHEREUMAccountDTO
  { uNISWAPV2ETHEREUMAccountDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV2ETHEREUMAccountDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV2ETHEREUMAccountDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV2ETHEREUMAccountDTOBlock :: !(Maybe Int) -- ^ "block_" - 
  , uNISWAPV2ETHEREUMAccountDTOId :: !(Maybe Text) -- ^ "id" - Account address.
  , uNISWAPV2ETHEREUMAccountDTOBlockRange :: !(Maybe Text) -- ^ /ReadOnly/ "block_range" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV2ETHEREUMAccountDTO
instance A.FromJSON UNISWAPV2ETHEREUMAccountDTO where
  parseJSON = A.withObject "UNISWAPV2ETHEREUMAccountDTO" $ \o ->
    UNISWAPV2ETHEREUMAccountDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_")
      <*> (o .:? "id")
      <*> (o .:? "block_range")

-- | ToJSON UNISWAPV2ETHEREUMAccountDTO
instance A.ToJSON UNISWAPV2ETHEREUMAccountDTO where
  toJSON UNISWAPV2ETHEREUMAccountDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV2ETHEREUMAccountDTOEntryTime
      , "recv_time" .= uNISWAPV2ETHEREUMAccountDTORecvTime
      , "block_number" .= uNISWAPV2ETHEREUMAccountDTOBlockNumber
      , "block_" .= uNISWAPV2ETHEREUMAccountDTOBlock
      , "id" .= uNISWAPV2ETHEREUMAccountDTOId
      , "block_range" .= uNISWAPV2ETHEREUMAccountDTOBlockRange
      ]


-- | Construct a value of type 'UNISWAPV2ETHEREUMAccountDTO' (by applying it's required fields, if any)
mkUNISWAPV2ETHEREUMAccountDTO
  :: UNISWAPV2ETHEREUMAccountDTO
mkUNISWAPV2ETHEREUMAccountDTO =
  UNISWAPV2ETHEREUMAccountDTO
  { uNISWAPV2ETHEREUMAccountDTOEntryTime = Nothing
  , uNISWAPV2ETHEREUMAccountDTORecvTime = Nothing
  , uNISWAPV2ETHEREUMAccountDTOBlockNumber = Nothing
  , uNISWAPV2ETHEREUMAccountDTOBlock = Nothing
  , uNISWAPV2ETHEREUMAccountDTOId = Nothing
  , uNISWAPV2ETHEREUMAccountDTOBlockRange = Nothing
  }

-- ** UNISWAPV2ETHEREUMActiveAccountDTO
-- | UNISWAPV2ETHEREUMActiveAccountDTO
-- Entity for calculating daily/hourly active users.
data UNISWAPV2ETHEREUMActiveAccountDTO = UNISWAPV2ETHEREUMActiveAccountDTO
  { uNISWAPV2ETHEREUMActiveAccountDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV2ETHEREUMActiveAccountDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV2ETHEREUMActiveAccountDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV2ETHEREUMActiveAccountDTOBlock :: !(Maybe Int) -- ^ "block_" - 
  , uNISWAPV2ETHEREUMActiveAccountDTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: (daily/hourly)-(address of the account)-(days/hours since unix epoch)
  , uNISWAPV2ETHEREUMActiveAccountDTOBlockRange :: !(Maybe Text) -- ^ /ReadOnly/ "block_range" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV2ETHEREUMActiveAccountDTO
instance A.FromJSON UNISWAPV2ETHEREUMActiveAccountDTO where
  parseJSON = A.withObject "UNISWAPV2ETHEREUMActiveAccountDTO" $ \o ->
    UNISWAPV2ETHEREUMActiveAccountDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_")
      <*> (o .:? "id")
      <*> (o .:? "block_range")

-- | ToJSON UNISWAPV2ETHEREUMActiveAccountDTO
instance A.ToJSON UNISWAPV2ETHEREUMActiveAccountDTO where
  toJSON UNISWAPV2ETHEREUMActiveAccountDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV2ETHEREUMActiveAccountDTOEntryTime
      , "recv_time" .= uNISWAPV2ETHEREUMActiveAccountDTORecvTime
      , "block_number" .= uNISWAPV2ETHEREUMActiveAccountDTOBlockNumber
      , "block_" .= uNISWAPV2ETHEREUMActiveAccountDTOBlock
      , "id" .= uNISWAPV2ETHEREUMActiveAccountDTOId
      , "block_range" .= uNISWAPV2ETHEREUMActiveAccountDTOBlockRange
      ]


-- | Construct a value of type 'UNISWAPV2ETHEREUMActiveAccountDTO' (by applying it's required fields, if any)
mkUNISWAPV2ETHEREUMActiveAccountDTO
  :: UNISWAPV2ETHEREUMActiveAccountDTO
mkUNISWAPV2ETHEREUMActiveAccountDTO =
  UNISWAPV2ETHEREUMActiveAccountDTO
  { uNISWAPV2ETHEREUMActiveAccountDTOEntryTime = Nothing
  , uNISWAPV2ETHEREUMActiveAccountDTORecvTime = Nothing
  , uNISWAPV2ETHEREUMActiveAccountDTOBlockNumber = Nothing
  , uNISWAPV2ETHEREUMActiveAccountDTOBlock = Nothing
  , uNISWAPV2ETHEREUMActiveAccountDTOId = Nothing
  , uNISWAPV2ETHEREUMActiveAccountDTOBlockRange = Nothing
  }

-- ** UNISWAPV2ETHEREUMDepositDTO
-- | UNISWAPV2ETHEREUMDepositDTO
-- Entity represents a user action in the protocol involving the addition of funds to a liquidity pool.
data UNISWAPV2ETHEREUMDepositDTO = UNISWAPV2ETHEREUMDepositDTO
  { uNISWAPV2ETHEREUMDepositDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV2ETHEREUMDepositDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV2ETHEREUMDepositDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV2ETHEREUMDepositDTOBlock :: !(Maybe Int) -- ^ "block_" - 
  , uNISWAPV2ETHEREUMDepositDTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: (transaction hash)-(log index)
  , uNISWAPV2ETHEREUMDepositDTOHash :: !(Maybe Text) -- ^ "hash" - Transaction hash of the transaction that emitted this event.
  , uNISWAPV2ETHEREUMDepositDTOLogIndex :: !(Maybe Int) -- ^ "log_index" - Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0.
  , uNISWAPV2ETHEREUMDepositDTOProtocol :: !(Maybe Text) -- ^ "protocol" - The protocol this transaction belongs to.
  , uNISWAPV2ETHEREUMDepositDTOTo :: !(Maybe Text) -- ^ "to" - Address that received the tokens.
  , uNISWAPV2ETHEREUMDepositDTOFrom :: !(Maybe Text) -- ^ "from" - Address that sent the tokens
  , uNISWAPV2ETHEREUMDepositDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this event
  , uNISWAPV2ETHEREUMDepositDTOInputTokens :: !(Maybe [Text]) -- ^ "input_tokens" - Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool
  , uNISWAPV2ETHEREUMDepositDTOOutputToken :: !(Maybe Text) -- ^ "output_token" - Output token of the pool. E.g. the UNI-LP token
  , uNISWAPV2ETHEREUMDepositDTOInputTokenAmounts :: !(Maybe [Text]) -- ^ "input_token_amounts" - Amount of input tokens in the token&#39;s native unit
  , uNISWAPV2ETHEREUMDepositDTOOutputTokenAmount :: !(Maybe Text) -- ^ "output_token_amount" - Amount of output tokens in the token&#39;s native unit
  , uNISWAPV2ETHEREUMDepositDTOReserveAmounts :: !(Maybe [Text]) -- ^ "reserve_amounts" - Amount of input tokens in the liquidity pool
  , uNISWAPV2ETHEREUMDepositDTOAmountUsd :: !(Maybe Text) -- ^ "amount_usd" - USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool)
  , uNISWAPV2ETHEREUMDepositDTOPool :: !(Maybe Text) -- ^ "pool" - The pool involving this transaction
  , uNISWAPV2ETHEREUMDepositDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV2ETHEREUMDepositDTO
instance A.FromJSON UNISWAPV2ETHEREUMDepositDTO where
  parseJSON = A.withObject "UNISWAPV2ETHEREUMDepositDTO" $ \o ->
    UNISWAPV2ETHEREUMDepositDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_")
      <*> (o .:? "id")
      <*> (o .:? "hash")
      <*> (o .:? "log_index")
      <*> (o .:? "protocol")
      <*> (o .:? "to")
      <*> (o .:? "from")
      <*> (o .:? "timestamp")
      <*> (o .:? "input_tokens")
      <*> (o .:? "output_token")
      <*> (o .:? "input_token_amounts")
      <*> (o .:? "output_token_amount")
      <*> (o .:? "reserve_amounts")
      <*> (o .:? "amount_usd")
      <*> (o .:? "pool")
      <*> (o .:? "block_range")

-- | ToJSON UNISWAPV2ETHEREUMDepositDTO
instance A.ToJSON UNISWAPV2ETHEREUMDepositDTO where
  toJSON UNISWAPV2ETHEREUMDepositDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV2ETHEREUMDepositDTOEntryTime
      , "recv_time" .= uNISWAPV2ETHEREUMDepositDTORecvTime
      , "block_number" .= uNISWAPV2ETHEREUMDepositDTOBlockNumber
      , "block_" .= uNISWAPV2ETHEREUMDepositDTOBlock
      , "id" .= uNISWAPV2ETHEREUMDepositDTOId
      , "hash" .= uNISWAPV2ETHEREUMDepositDTOHash
      , "log_index" .= uNISWAPV2ETHEREUMDepositDTOLogIndex
      , "protocol" .= uNISWAPV2ETHEREUMDepositDTOProtocol
      , "to" .= uNISWAPV2ETHEREUMDepositDTOTo
      , "from" .= uNISWAPV2ETHEREUMDepositDTOFrom
      , "timestamp" .= uNISWAPV2ETHEREUMDepositDTOTimestamp
      , "input_tokens" .= uNISWAPV2ETHEREUMDepositDTOInputTokens
      , "output_token" .= uNISWAPV2ETHEREUMDepositDTOOutputToken
      , "input_token_amounts" .= uNISWAPV2ETHEREUMDepositDTOInputTokenAmounts
      , "output_token_amount" .= uNISWAPV2ETHEREUMDepositDTOOutputTokenAmount
      , "reserve_amounts" .= uNISWAPV2ETHEREUMDepositDTOReserveAmounts
      , "amount_usd" .= uNISWAPV2ETHEREUMDepositDTOAmountUsd
      , "pool" .= uNISWAPV2ETHEREUMDepositDTOPool
      , "block_range" .= uNISWAPV2ETHEREUMDepositDTOBlockRange
      ]


-- | Construct a value of type 'UNISWAPV2ETHEREUMDepositDTO' (by applying it's required fields, if any)
mkUNISWAPV2ETHEREUMDepositDTO
  :: UNISWAPV2ETHEREUMDepositDTO
mkUNISWAPV2ETHEREUMDepositDTO =
  UNISWAPV2ETHEREUMDepositDTO
  { uNISWAPV2ETHEREUMDepositDTOEntryTime = Nothing
  , uNISWAPV2ETHEREUMDepositDTORecvTime = Nothing
  , uNISWAPV2ETHEREUMDepositDTOBlockNumber = Nothing
  , uNISWAPV2ETHEREUMDepositDTOBlock = Nothing
  , uNISWAPV2ETHEREUMDepositDTOId = Nothing
  , uNISWAPV2ETHEREUMDepositDTOHash = Nothing
  , uNISWAPV2ETHEREUMDepositDTOLogIndex = Nothing
  , uNISWAPV2ETHEREUMDepositDTOProtocol = Nothing
  , uNISWAPV2ETHEREUMDepositDTOTo = Nothing
  , uNISWAPV2ETHEREUMDepositDTOFrom = Nothing
  , uNISWAPV2ETHEREUMDepositDTOTimestamp = Nothing
  , uNISWAPV2ETHEREUMDepositDTOInputTokens = Nothing
  , uNISWAPV2ETHEREUMDepositDTOOutputToken = Nothing
  , uNISWAPV2ETHEREUMDepositDTOInputTokenAmounts = Nothing
  , uNISWAPV2ETHEREUMDepositDTOOutputTokenAmount = Nothing
  , uNISWAPV2ETHEREUMDepositDTOReserveAmounts = Nothing
  , uNISWAPV2ETHEREUMDepositDTOAmountUsd = Nothing
  , uNISWAPV2ETHEREUMDepositDTOPool = Nothing
  , uNISWAPV2ETHEREUMDepositDTOBlockRange = Nothing
  }

-- ** UNISWAPV2ETHEREUMDexAmmProtocolDTO
-- | UNISWAPV2ETHEREUMDexAmmProtocolDTO
--  Decentralized exchange (Dex) automated market maker (Amm) protocol. It's an entity that represents a protocol involving a smart contract that use automated market makers.
data UNISWAPV2ETHEREUMDexAmmProtocolDTO = UNISWAPV2ETHEREUMDexAmmProtocolDTO
  { uNISWAPV2ETHEREUMDexAmmProtocolDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV2ETHEREUMDexAmmProtocolDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOId :: !(Maybe Text) -- ^ "id" - Smart contract address of the protocol&#39;s main contract (Factory, Registry, etc)
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOName :: !(Maybe Text) -- ^ "name" - Name of the protocol, including version. e.g. Uniswap v3
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOSlug :: !(Maybe Text) -- ^ "slug" - Slug of protocol, including version. e.g. uniswap-v3
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOSchemaVersion :: !(Maybe Text) -- ^ "schema_version" -  Version of the subgraph schema, in SemVer format (e.g. 1.0.0)
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOSubgraphVersion :: !(Maybe Text) -- ^ "subgraph_version" - Version of the subgraph implementation, in SemVer format (e.g. 1.0.0)
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOMethodologyVersion :: !(Maybe Text) -- ^ "methodology_version" - Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0)
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of the entire protocol
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOProtocolControlledValueUsd :: !(Maybe Text) -- ^ "protocol_controlled_value_usd" - Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All historical volume in USD
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" - All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOCumulativeUniqueUsers :: !(Maybe Int) -- ^ "cumulative_unique_users" - Number of cumulative unique users
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOTotalPoolCount :: !(Maybe Int) -- ^ "total_pool_count" - Total number of pools
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV2ETHEREUMDexAmmProtocolDTO
instance A.FromJSON UNISWAPV2ETHEREUMDexAmmProtocolDTO where
  parseJSON = A.withObject "UNISWAPV2ETHEREUMDexAmmProtocolDTO" $ \o ->
    UNISWAPV2ETHEREUMDexAmmProtocolDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "name")
      <*> (o .:? "slug")
      <*> (o .:? "schema_version")
      <*> (o .:? "subgraph_version")
      <*> (o .:? "methodology_version")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "protocol_controlled_value_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "cumulative_unique_users")
      <*> (o .:? "total_pool_count")

-- | ToJSON UNISWAPV2ETHEREUMDexAmmProtocolDTO
instance A.ToJSON UNISWAPV2ETHEREUMDexAmmProtocolDTO where
  toJSON UNISWAPV2ETHEREUMDexAmmProtocolDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV2ETHEREUMDexAmmProtocolDTOEntryTime
      , "recv_time" .= uNISWAPV2ETHEREUMDexAmmProtocolDTORecvTime
      , "block_number" .= uNISWAPV2ETHEREUMDexAmmProtocolDTOBlockNumber
      , "block_range" .= uNISWAPV2ETHEREUMDexAmmProtocolDTOBlockRange
      , "id" .= uNISWAPV2ETHEREUMDexAmmProtocolDTOId
      , "name" .= uNISWAPV2ETHEREUMDexAmmProtocolDTOName
      , "slug" .= uNISWAPV2ETHEREUMDexAmmProtocolDTOSlug
      , "schema_version" .= uNISWAPV2ETHEREUMDexAmmProtocolDTOSchemaVersion
      , "subgraph_version" .= uNISWAPV2ETHEREUMDexAmmProtocolDTOSubgraphVersion
      , "methodology_version" .= uNISWAPV2ETHEREUMDexAmmProtocolDTOMethodologyVersion
      , "total_value_locked_usd" .= uNISWAPV2ETHEREUMDexAmmProtocolDTOTotalValueLockedUsd
      , "protocol_controlled_value_usd" .= uNISWAPV2ETHEREUMDexAmmProtocolDTOProtocolControlledValueUsd
      , "cumulative_volume_usd" .= uNISWAPV2ETHEREUMDexAmmProtocolDTOCumulativeVolumeUsd
      , "cumulative_supply_side_revenue_usd" .= uNISWAPV2ETHEREUMDexAmmProtocolDTOCumulativeSupplySideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= uNISWAPV2ETHEREUMDexAmmProtocolDTOCumulativeProtocolSideRevenueUsd
      , "cumulative_total_revenue_usd" .= uNISWAPV2ETHEREUMDexAmmProtocolDTOCumulativeTotalRevenueUsd
      , "cumulative_unique_users" .= uNISWAPV2ETHEREUMDexAmmProtocolDTOCumulativeUniqueUsers
      , "total_pool_count" .= uNISWAPV2ETHEREUMDexAmmProtocolDTOTotalPoolCount
      ]


-- | Construct a value of type 'UNISWAPV2ETHEREUMDexAmmProtocolDTO' (by applying it's required fields, if any)
mkUNISWAPV2ETHEREUMDexAmmProtocolDTO
  :: UNISWAPV2ETHEREUMDexAmmProtocolDTO
mkUNISWAPV2ETHEREUMDexAmmProtocolDTO =
  UNISWAPV2ETHEREUMDexAmmProtocolDTO
  { uNISWAPV2ETHEREUMDexAmmProtocolDTOEntryTime = Nothing
  , uNISWAPV2ETHEREUMDexAmmProtocolDTORecvTime = Nothing
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOBlockNumber = Nothing
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOBlockRange = Nothing
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOId = Nothing
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOName = Nothing
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOSlug = Nothing
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOSchemaVersion = Nothing
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOSubgraphVersion = Nothing
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOMethodologyVersion = Nothing
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOTotalValueLockedUsd = Nothing
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOProtocolControlledValueUsd = Nothing
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOCumulativeVolumeUsd = Nothing
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOCumulativeSupplySideRevenueUsd = Nothing
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOCumulativeProtocolSideRevenueUsd = Nothing
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOCumulativeTotalRevenueUsd = Nothing
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOCumulativeUniqueUsers = Nothing
  , uNISWAPV2ETHEREUMDexAmmProtocolDTOTotalPoolCount = Nothing
  }

-- ** UNISWAPV2ETHEREUMFinancialsDailySnapshotDTO
-- | UNISWAPV2ETHEREUMFinancialsDailySnapshotDTO
-- Daily financial metrics for Uniswap V2.
data UNISWAPV2ETHEREUMFinancialsDailySnapshotDTO = UNISWAPV2ETHEREUMFinancialsDailySnapshotDTO
  { uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOId :: !(Maybe Text) -- ^ "id" - ID is # of days since Unix epoch time
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - Protocol this snapshot is associated with
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of the entire protocol
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOProtocolControlledValueUsd :: !(Maybe Text) -- ^ "protocol_controlled_value_usd" - Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTODailyVolumeUsd :: !(Maybe Text) -- ^ "daily_volume_usd" - All trade volume occurred in a given day, in USD
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All historical trade volume in USD
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTODailySupplySideRevenueUsd :: !(Maybe Text) -- ^ "daily_supply_side_revenue_usd" - Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTODailyProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "daily_protocol_side_revenue_usd" - Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTODailyTotalRevenueUsd :: !(Maybe Text) -- ^ "daily_total_revenue_usd" - ll revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" - All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this snapshot
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV2ETHEREUMFinancialsDailySnapshotDTO
instance A.FromJSON UNISWAPV2ETHEREUMFinancialsDailySnapshotDTO where
  parseJSON = A.withObject "UNISWAPV2ETHEREUMFinancialsDailySnapshotDTO" $ \o ->
    UNISWAPV2ETHEREUMFinancialsDailySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "protocol")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "protocol_controlled_value_usd")
      <*> (o .:? "daily_volume_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "daily_supply_side_revenue_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "daily_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "daily_total_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "timestamp")

-- | ToJSON UNISWAPV2ETHEREUMFinancialsDailySnapshotDTO
instance A.ToJSON UNISWAPV2ETHEREUMFinancialsDailySnapshotDTO where
  toJSON UNISWAPV2ETHEREUMFinancialsDailySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOEntryTime
      , "recv_time" .= uNISWAPV2ETHEREUMFinancialsDailySnapshotDTORecvTime
      , "block_number" .= uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOBlockNumber
      , "block_range" .= uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOBlockRange
      , "id" .= uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOId
      , "protocol" .= uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOProtocol
      , "total_value_locked_usd" .= uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOTotalValueLockedUsd
      , "protocol_controlled_value_usd" .= uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOProtocolControlledValueUsd
      , "daily_volume_usd" .= uNISWAPV2ETHEREUMFinancialsDailySnapshotDTODailyVolumeUsd
      , "cumulative_volume_usd" .= uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOCumulativeVolumeUsd
      , "daily_supply_side_revenue_usd" .= uNISWAPV2ETHEREUMFinancialsDailySnapshotDTODailySupplySideRevenueUsd
      , "cumulative_supply_side_revenue_usd" .= uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOCumulativeSupplySideRevenueUsd
      , "daily_protocol_side_revenue_usd" .= uNISWAPV2ETHEREUMFinancialsDailySnapshotDTODailyProtocolSideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOCumulativeProtocolSideRevenueUsd
      , "daily_total_revenue_usd" .= uNISWAPV2ETHEREUMFinancialsDailySnapshotDTODailyTotalRevenueUsd
      , "cumulative_total_revenue_usd" .= uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOCumulativeTotalRevenueUsd
      , "timestamp" .= uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'UNISWAPV2ETHEREUMFinancialsDailySnapshotDTO' (by applying it's required fields, if any)
mkUNISWAPV2ETHEREUMFinancialsDailySnapshotDTO
  :: UNISWAPV2ETHEREUMFinancialsDailySnapshotDTO
mkUNISWAPV2ETHEREUMFinancialsDailySnapshotDTO =
  UNISWAPV2ETHEREUMFinancialsDailySnapshotDTO
  { uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOEntryTime = Nothing
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTORecvTime = Nothing
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOBlockNumber = Nothing
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOBlockRange = Nothing
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOId = Nothing
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOProtocol = Nothing
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOTotalValueLockedUsd = Nothing
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOProtocolControlledValueUsd = Nothing
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTODailyVolumeUsd = Nothing
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOCumulativeVolumeUsd = Nothing
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTODailySupplySideRevenueUsd = Nothing
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOCumulativeSupplySideRevenueUsd = Nothing
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTODailyProtocolSideRevenueUsd = Nothing
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOCumulativeProtocolSideRevenueUsd = Nothing
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTODailyTotalRevenueUsd = Nothing
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOCumulativeTotalRevenueUsd = Nothing
  , uNISWAPV2ETHEREUMFinancialsDailySnapshotDTOTimestamp = Nothing
  }

-- ** UNISWAPV2ETHEREUMLiquidityPoolAmountDTO
-- | UNISWAPV2ETHEREUMLiquidityPoolAmountDTO
-- 
data UNISWAPV2ETHEREUMLiquidityPoolAmountDTO = UNISWAPV2ETHEREUMLiquidityPoolAmountDTO
  { uNISWAPV2ETHEREUMLiquidityPoolAmountDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV2ETHEREUMLiquidityPoolAmountDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV2ETHEREUMLiquidityPoolAmountDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV2ETHEREUMLiquidityPoolAmountDTOVid :: !(Maybe Integer) -- ^ "vid" - .
  , uNISWAPV2ETHEREUMLiquidityPoolAmountDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - .
  , uNISWAPV2ETHEREUMLiquidityPoolAmountDTOId :: !(Maybe Text) -- ^ "id" - Smart contract address of the pool
  , uNISWAPV2ETHEREUMLiquidityPoolAmountDTOInputTokens :: !(Maybe [Text]) -- ^ "input_tokens" - Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool
  , uNISWAPV2ETHEREUMLiquidityPoolAmountDTOInputTokenBalances :: !(Maybe [Text]) -- ^ "input_token_balances" - Amount of input tokens in the pool. The ordering is the same as the pool&#39;s &#39;inputTokens&#39; field.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV2ETHEREUMLiquidityPoolAmountDTO
instance A.FromJSON UNISWAPV2ETHEREUMLiquidityPoolAmountDTO where
  parseJSON = A.withObject "UNISWAPV2ETHEREUMLiquidityPoolAmountDTO" $ \o ->
    UNISWAPV2ETHEREUMLiquidityPoolAmountDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "input_tokens")
      <*> (o .:? "input_token_balances")

-- | ToJSON UNISWAPV2ETHEREUMLiquidityPoolAmountDTO
instance A.ToJSON UNISWAPV2ETHEREUMLiquidityPoolAmountDTO where
  toJSON UNISWAPV2ETHEREUMLiquidityPoolAmountDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV2ETHEREUMLiquidityPoolAmountDTOEntryTime
      , "recv_time" .= uNISWAPV2ETHEREUMLiquidityPoolAmountDTORecvTime
      , "block_number" .= uNISWAPV2ETHEREUMLiquidityPoolAmountDTOBlockNumber
      , "vid" .= uNISWAPV2ETHEREUMLiquidityPoolAmountDTOVid
      , "block_range" .= uNISWAPV2ETHEREUMLiquidityPoolAmountDTOBlockRange
      , "id" .= uNISWAPV2ETHEREUMLiquidityPoolAmountDTOId
      , "input_tokens" .= uNISWAPV2ETHEREUMLiquidityPoolAmountDTOInputTokens
      , "input_token_balances" .= uNISWAPV2ETHEREUMLiquidityPoolAmountDTOInputTokenBalances
      ]


-- | Construct a value of type 'UNISWAPV2ETHEREUMLiquidityPoolAmountDTO' (by applying it's required fields, if any)
mkUNISWAPV2ETHEREUMLiquidityPoolAmountDTO
  :: UNISWAPV2ETHEREUMLiquidityPoolAmountDTO
mkUNISWAPV2ETHEREUMLiquidityPoolAmountDTO =
  UNISWAPV2ETHEREUMLiquidityPoolAmountDTO
  { uNISWAPV2ETHEREUMLiquidityPoolAmountDTOEntryTime = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolAmountDTORecvTime = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolAmountDTOBlockNumber = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolAmountDTOVid = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolAmountDTOBlockRange = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolAmountDTOId = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolAmountDTOInputTokens = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolAmountDTOInputTokenBalances = Nothing
  }

-- ** UNISWAPV2ETHEREUMLiquidityPoolDTO
-- | UNISWAPV2ETHEREUMLiquidityPoolDTO
-- Pool-level metadata.
data UNISWAPV2ETHEREUMLiquidityPoolDTO = UNISWAPV2ETHEREUMLiquidityPoolDTO
  { uNISWAPV2ETHEREUMLiquidityPoolDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV2ETHEREUMLiquidityPoolDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV2ETHEREUMLiquidityPoolDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV2ETHEREUMLiquidityPoolDTOVid :: !(Maybe Integer) -- ^ "vid" - .
  , uNISWAPV2ETHEREUMLiquidityPoolDTOId :: !(Maybe Text) -- ^ "id" - Smart contract address of the pool
  , uNISWAPV2ETHEREUMLiquidityPoolDTOProtocol :: !(Maybe Text) -- ^ "protocol" - The protocol this pool belongs to
  , uNISWAPV2ETHEREUMLiquidityPoolDTOName :: !(Maybe Text) -- ^ "name" - Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT)
  , uNISWAPV2ETHEREUMLiquidityPoolDTOSymbol :: !(Maybe Text) -- ^ "symbol" - Symbol of liquidity pool (e.g. 3CRV)
  , uNISWAPV2ETHEREUMLiquidityPoolDTOInputTokens :: !(Maybe [Text]) -- ^ "input_tokens" - Tokens that need to be deposited to take a position in the protocol
  , uNISWAPV2ETHEREUMLiquidityPoolDTOOutputToken :: !(Maybe Text) -- ^ "output_token" - Token that is minted to track ownership of position in protocol
  , uNISWAPV2ETHEREUMLiquidityPoolDTORewardTokens :: !(Maybe [Text]) -- ^ "reward_tokens" - Aditional tokens that are given as reward for position in a protocol
  , uNISWAPV2ETHEREUMLiquidityPoolDTOFees :: !(Maybe [Text]) -- ^ "fees" - Fees per trade incurred to the user
  , uNISWAPV2ETHEREUMLiquidityPoolDTOIsSingleSided :: !(Maybe Bool) -- ^ "is_single_sided" - Whether this pool is single-sided
  , uNISWAPV2ETHEREUMLiquidityPoolDTOCreatedTimestamp :: !(Maybe Text) -- ^ "created_timestamp" - Creation timestamp
  , uNISWAPV2ETHEREUMLiquidityPoolDTOCreatedBlockNumber :: !(Maybe Text) -- ^ "created_block_number" - Creation block number
  , uNISWAPV2ETHEREUMLiquidityPoolDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of this pool in USD
  , uNISWAPV2ETHEREUMLiquidityPoolDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the supply side
  , uNISWAPV2ETHEREUMLiquidityPoolDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the protocol
  , uNISWAPV2ETHEREUMLiquidityPoolDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" - All revenue generated by the liquidity pool
  , uNISWAPV2ETHEREUMLiquidityPoolDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All historical trade volume occurred in this pool, in USD
  , uNISWAPV2ETHEREUMLiquidityPoolDTOInputTokenBalances :: !(Maybe [Text]) -- ^ "input_token_balances" - Amount of input tokens in the pool
  , uNISWAPV2ETHEREUMLiquidityPoolDTOInputTokenWeights :: !(Maybe [Text]) -- ^ "input_token_weights" - Weights of input tokens in the liquidity pool in percentage values
  , uNISWAPV2ETHEREUMLiquidityPoolDTOOutputTokenSupply :: !(Maybe Text) -- ^ "output_token_supply" - Total supply of output token
  , uNISWAPV2ETHEREUMLiquidityPoolDTOOutputTokenPriceUsd :: !(Maybe Text) -- ^ "output_token_price_usd" - Price per share of output token in USD
  , uNISWAPV2ETHEREUMLiquidityPoolDTOStakedOutputTokenAmount :: !(Maybe Text) -- ^ "staked_output_token_amount" - Total supply of output tokens that are staked
  , uNISWAPV2ETHEREUMLiquidityPoolDTORewardTokenEmissionsAmount :: !(Maybe [Text]) -- ^ "reward_token_emissions_amount" - Per-block reward token emission as of the current block normalized to a day, in token&#39;s native amount
  , uNISWAPV2ETHEREUMLiquidityPoolDTORewardTokenEmissionsUsd :: !(Maybe [Text]) -- ^ "reward_token_emissions_usd" - Per-block reward token emission as of the current block normalized to a day, in USD value
  , uNISWAPV2ETHEREUMLiquidityPoolDTOEvaluatedAsk :: !(Maybe Double) -- ^ /ReadOnly/ "evaluated_ask" - Evaluated ask value of the liquidity pool.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV2ETHEREUMLiquidityPoolDTO
instance A.FromJSON UNISWAPV2ETHEREUMLiquidityPoolDTO where
  parseJSON = A.withObject "UNISWAPV2ETHEREUMLiquidityPoolDTO" $ \o ->
    UNISWAPV2ETHEREUMLiquidityPoolDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "id")
      <*> (o .:? "protocol")
      <*> (o .:? "name")
      <*> (o .:? "symbol")
      <*> (o .:? "input_tokens")
      <*> (o .:? "output_token")
      <*> (o .:? "reward_tokens")
      <*> (o .:? "fees")
      <*> (o .:? "is_single_sided")
      <*> (o .:? "created_timestamp")
      <*> (o .:? "created_block_number")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "input_token_balances")
      <*> (o .:? "input_token_weights")
      <*> (o .:? "output_token_supply")
      <*> (o .:? "output_token_price_usd")
      <*> (o .:? "staked_output_token_amount")
      <*> (o .:? "reward_token_emissions_amount")
      <*> (o .:? "reward_token_emissions_usd")
      <*> (o .:? "evaluated_ask")

-- | ToJSON UNISWAPV2ETHEREUMLiquidityPoolDTO
instance A.ToJSON UNISWAPV2ETHEREUMLiquidityPoolDTO where
  toJSON UNISWAPV2ETHEREUMLiquidityPoolDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV2ETHEREUMLiquidityPoolDTOEntryTime
      , "recv_time" .= uNISWAPV2ETHEREUMLiquidityPoolDTORecvTime
      , "block_number" .= uNISWAPV2ETHEREUMLiquidityPoolDTOBlockNumber
      , "vid" .= uNISWAPV2ETHEREUMLiquidityPoolDTOVid
      , "id" .= uNISWAPV2ETHEREUMLiquidityPoolDTOId
      , "protocol" .= uNISWAPV2ETHEREUMLiquidityPoolDTOProtocol
      , "name" .= uNISWAPV2ETHEREUMLiquidityPoolDTOName
      , "symbol" .= uNISWAPV2ETHEREUMLiquidityPoolDTOSymbol
      , "input_tokens" .= uNISWAPV2ETHEREUMLiquidityPoolDTOInputTokens
      , "output_token" .= uNISWAPV2ETHEREUMLiquidityPoolDTOOutputToken
      , "reward_tokens" .= uNISWAPV2ETHEREUMLiquidityPoolDTORewardTokens
      , "fees" .= uNISWAPV2ETHEREUMLiquidityPoolDTOFees
      , "is_single_sided" .= uNISWAPV2ETHEREUMLiquidityPoolDTOIsSingleSided
      , "created_timestamp" .= uNISWAPV2ETHEREUMLiquidityPoolDTOCreatedTimestamp
      , "created_block_number" .= uNISWAPV2ETHEREUMLiquidityPoolDTOCreatedBlockNumber
      , "total_value_locked_usd" .= uNISWAPV2ETHEREUMLiquidityPoolDTOTotalValueLockedUsd
      , "cumulative_supply_side_revenue_usd" .= uNISWAPV2ETHEREUMLiquidityPoolDTOCumulativeSupplySideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= uNISWAPV2ETHEREUMLiquidityPoolDTOCumulativeProtocolSideRevenueUsd
      , "cumulative_total_revenue_usd" .= uNISWAPV2ETHEREUMLiquidityPoolDTOCumulativeTotalRevenueUsd
      , "cumulative_volume_usd" .= uNISWAPV2ETHEREUMLiquidityPoolDTOCumulativeVolumeUsd
      , "input_token_balances" .= uNISWAPV2ETHEREUMLiquidityPoolDTOInputTokenBalances
      , "input_token_weights" .= uNISWAPV2ETHEREUMLiquidityPoolDTOInputTokenWeights
      , "output_token_supply" .= uNISWAPV2ETHEREUMLiquidityPoolDTOOutputTokenSupply
      , "output_token_price_usd" .= uNISWAPV2ETHEREUMLiquidityPoolDTOOutputTokenPriceUsd
      , "staked_output_token_amount" .= uNISWAPV2ETHEREUMLiquidityPoolDTOStakedOutputTokenAmount
      , "reward_token_emissions_amount" .= uNISWAPV2ETHEREUMLiquidityPoolDTORewardTokenEmissionsAmount
      , "reward_token_emissions_usd" .= uNISWAPV2ETHEREUMLiquidityPoolDTORewardTokenEmissionsUsd
      , "evaluated_ask" .= uNISWAPV2ETHEREUMLiquidityPoolDTOEvaluatedAsk
      ]


-- | Construct a value of type 'UNISWAPV2ETHEREUMLiquidityPoolDTO' (by applying it's required fields, if any)
mkUNISWAPV2ETHEREUMLiquidityPoolDTO
  :: UNISWAPV2ETHEREUMLiquidityPoolDTO
mkUNISWAPV2ETHEREUMLiquidityPoolDTO =
  UNISWAPV2ETHEREUMLiquidityPoolDTO
  { uNISWAPV2ETHEREUMLiquidityPoolDTOEntryTime = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTORecvTime = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTOBlockNumber = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTOVid = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTOId = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTOProtocol = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTOName = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTOSymbol = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTOInputTokens = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTOOutputToken = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTORewardTokens = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTOFees = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTOIsSingleSided = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTOCreatedTimestamp = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTOCreatedBlockNumber = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTOTotalValueLockedUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTOCumulativeSupplySideRevenueUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTOCumulativeProtocolSideRevenueUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTOCumulativeTotalRevenueUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTOCumulativeVolumeUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTOInputTokenBalances = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTOInputTokenWeights = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTOOutputTokenSupply = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTOOutputTokenPriceUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTOStakedOutputTokenAmount = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTORewardTokenEmissionsAmount = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTORewardTokenEmissionsUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDTOEvaluatedAsk = Nothing
  }

-- ** UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO
-- | UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO
-- Represents a liquidity pool daily snapshot for Uniswap V2.
data UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO = UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO
  { uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - .
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOId :: !(Maybe Text) -- ^ "id" - (smart contract address of the pool)-(# of days since Unix epoch time)
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - The protocol this snapshot belongs to
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOPool :: !(Maybe Text) -- ^ "pool" - The pool this snapshot belongs to
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this snapshot
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of this pool
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the supply side.
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTODailySupplySideRevenueUsd :: !(Maybe Text) -- ^ "daily_supply_side_revenue_usd" - Daily revenue generated by the liquidity pool, accrued to the supply side.
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the protocol.
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTODailyProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "daily_protocol_side_revenue_usd" - Daily revenue generated by the liquidity pool, accrued to the protocol.
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" - All revenue generated by the liquidity pool.
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTODailyTotalRevenueUsd :: !(Maybe Text) -- ^ "daily_total_revenue_usd" - Daily revenue generated by the liquidity pool.
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeUsd :: !(Maybe Text) -- ^ "daily_volume_usd" - All trade volume occurred in a given day, in USD.
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenAmount :: !(Maybe [Text]) -- ^ "daily_volume_by_token_amount" - All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenUsd :: !(Maybe [Text]) -- ^ "daily_volume_by_token_usd" - All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field..
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All historical trade volume occurred in this pool, in USD.
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenBalances :: !(Maybe [Text]) -- ^ "input_token_balances" - Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenWeights :: !(Maybe [Text]) -- ^ "input_token_weights" - Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOOutputTokenSupply :: !(Maybe Text) -- ^ "output_token_supply" - Total supply of output token. Note that certain DEXes don&#39;t have an output token (e.g. Bancor).
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOOutputTokenPriceUsd :: !(Maybe Text) -- ^ "output_token_price_usd" - Price per share of output token in USD.
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOStakedOutputTokenAmount :: !(Maybe Text) -- ^ "staked_output_token_amount" - Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY..
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsAmount :: !(Maybe [Text]) -- ^ "reward_token_emissions_amount" - Per-block reward token emission as of the current block normalized to a day, in token&#39;s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsUsd :: !(Maybe [Text]) -- ^ "reward_token_emissions_usd" - Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO
instance A.FromJSON UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO where
  parseJSON = A.withObject "UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO" $ \o ->
    UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "protocol")
      <*> (o .:? "pool")
      <*> (o .:? "timestamp")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "daily_supply_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "daily_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "daily_total_revenue_usd")
      <*> (o .:? "daily_volume_usd")
      <*> (o .:? "daily_volume_by_token_amount")
      <*> (o .:? "daily_volume_by_token_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "input_token_balances")
      <*> (o .:? "input_token_weights")
      <*> (o .:? "output_token_supply")
      <*> (o .:? "output_token_price_usd")
      <*> (o .:? "staked_output_token_amount")
      <*> (o .:? "reward_token_emissions_amount")
      <*> (o .:? "reward_token_emissions_usd")

-- | ToJSON UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO
instance A.ToJSON UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO where
  toJSON UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOEntryTime
      , "recv_time" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTORecvTime
      , "block_number" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOBlockNumber
      , "block_range" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOBlockRange
      , "id" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOId
      , "protocol" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOProtocol
      , "pool" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOPool
      , "timestamp" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOTimestamp
      , "total_value_locked_usd" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOTotalValueLockedUsd
      , "cumulative_supply_side_revenue_usd" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeSupplySideRevenueUsd
      , "daily_supply_side_revenue_usd" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTODailySupplySideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeProtocolSideRevenueUsd
      , "daily_protocol_side_revenue_usd" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTODailyProtocolSideRevenueUsd
      , "cumulative_total_revenue_usd" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeTotalRevenueUsd
      , "daily_total_revenue_usd" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTODailyTotalRevenueUsd
      , "daily_volume_usd" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeUsd
      , "daily_volume_by_token_amount" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenAmount
      , "daily_volume_by_token_usd" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenUsd
      , "cumulative_volume_usd" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeUsd
      , "input_token_balances" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenBalances
      , "input_token_weights" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenWeights
      , "output_token_supply" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOOutputTokenSupply
      , "output_token_price_usd" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOOutputTokenPriceUsd
      , "staked_output_token_amount" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOStakedOutputTokenAmount
      , "reward_token_emissions_amount" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsAmount
      , "reward_token_emissions_usd" .= uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsUsd
      ]


-- | Construct a value of type 'UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO' (by applying it's required fields, if any)
mkUNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO
  :: UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO
mkUNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO =
  UNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTO
  { uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOEntryTime = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTORecvTime = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOBlockNumber = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOBlockRange = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOId = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOProtocol = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOPool = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOTimestamp = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOTotalValueLockedUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeSupplySideRevenueUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTODailySupplySideRevenueUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeProtocolSideRevenueUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTODailyProtocolSideRevenueUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeTotalRevenueUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTODailyTotalRevenueUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenAmount = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenBalances = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenWeights = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOOutputTokenSupply = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOOutputTokenPriceUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTOStakedOutputTokenAmount = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsAmount = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsUsd = Nothing
  }

-- ** UNISWAPV2ETHEREUMLiquidityPoolFeeDTO
-- | UNISWAPV2ETHEREUMLiquidityPoolFeeDTO
-- 
data UNISWAPV2ETHEREUMLiquidityPoolFeeDTO = UNISWAPV2ETHEREUMLiquidityPoolFeeDTO
  { uNISWAPV2ETHEREUMLiquidityPoolFeeDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV2ETHEREUMLiquidityPoolFeeDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV2ETHEREUMLiquidityPoolFeeDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV2ETHEREUMLiquidityPoolFeeDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , uNISWAPV2ETHEREUMLiquidityPoolFeeDTOId :: !(Maybe Text) -- ^ "id" - (fee type)-(pool address)
  , uNISWAPV2ETHEREUMLiquidityPoolFeeDTOFeePercentage :: !(Maybe Text) -- ^ "fee_percentage" - Fee as a percentage of the trade (swap) amount. Does not always apply
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV2ETHEREUMLiquidityPoolFeeDTO
instance A.FromJSON UNISWAPV2ETHEREUMLiquidityPoolFeeDTO where
  parseJSON = A.withObject "UNISWAPV2ETHEREUMLiquidityPoolFeeDTO" $ \o ->
    UNISWAPV2ETHEREUMLiquidityPoolFeeDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "fee_percentage")

-- | ToJSON UNISWAPV2ETHEREUMLiquidityPoolFeeDTO
instance A.ToJSON UNISWAPV2ETHEREUMLiquidityPoolFeeDTO where
  toJSON UNISWAPV2ETHEREUMLiquidityPoolFeeDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV2ETHEREUMLiquidityPoolFeeDTOEntryTime
      , "recv_time" .= uNISWAPV2ETHEREUMLiquidityPoolFeeDTORecvTime
      , "block_number" .= uNISWAPV2ETHEREUMLiquidityPoolFeeDTOBlockNumber
      , "block_range" .= uNISWAPV2ETHEREUMLiquidityPoolFeeDTOBlockRange
      , "id" .= uNISWAPV2ETHEREUMLiquidityPoolFeeDTOId
      , "fee_percentage" .= uNISWAPV2ETHEREUMLiquidityPoolFeeDTOFeePercentage
      ]


-- | Construct a value of type 'UNISWAPV2ETHEREUMLiquidityPoolFeeDTO' (by applying it's required fields, if any)
mkUNISWAPV2ETHEREUMLiquidityPoolFeeDTO
  :: UNISWAPV2ETHEREUMLiquidityPoolFeeDTO
mkUNISWAPV2ETHEREUMLiquidityPoolFeeDTO =
  UNISWAPV2ETHEREUMLiquidityPoolFeeDTO
  { uNISWAPV2ETHEREUMLiquidityPoolFeeDTOEntryTime = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolFeeDTORecvTime = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolFeeDTOBlockNumber = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolFeeDTOBlockRange = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolFeeDTOId = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolFeeDTOFeePercentage = Nothing
  }

-- ** UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO
-- | UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO
-- 
data UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO = UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO
  { uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOId :: !(Maybe Text) -- ^ "id" - (smart contract address of the pool)-(# of hours since Unix epoch time)
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - The protocol this snapshot belongs to
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOPool :: !(Maybe Text) -- ^ "pool" - The pool this snapshot belongs to
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this snapshot
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of this pool
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the supply side.
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOHourlySupplySideRevenueUsd :: !(Maybe Text) -- ^ "hourly_supply_side_revenue_usd" - Hourly revenue generated by the liquidity pool, accrued to the supply side.
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the protocol.
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "hourly_protocol_side_revenue_usd" - Hourly revenue generated by the liquidity pool, accrued to the protocol.
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" - All revenue generated by the liquidity pool.
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyTotalRevenueUsd :: !(Maybe Text) -- ^ "hourly_total_revenue_usd" - Hourly revenue generated by the liquidity pool.
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeUsd :: !(Maybe Text) -- ^ "hourly_volume_usd" - All trade volume occurred in a given hour, in USD
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenAmount :: !(Maybe [Text]) -- ^ "hourly_volume_by_token_amount" - All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#39;inputTokens&#39; field.
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenUsd :: !(Maybe [Text]) -- ^ "hourly_volume_by_token_usd" - All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#39;inputTokens&#39; field.
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All historical trade volume occurred in this pool, in USD
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenBalances :: !(Maybe [Text]) -- ^ "input_token_balances" - Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenWeights :: !(Maybe [Text]) -- ^ "input_token_weights" - Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOOutputTokenSupply :: !(Maybe Text) -- ^ "output_token_supply" - Total supply of output token. Note that certain DEXes don&#39;t have an output token (e.g. Bancor)
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOOutputTokenPriceUsd :: !(Maybe Text) -- ^ "output_token_price_usd" - Price per share of output token in USD
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOStakedOutputTokenAmount :: !(Maybe Text) -- ^ "staked_output_token_amount" - Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsAmount :: !(Maybe [Text]) -- ^ "reward_token_emissions_amount" - Per-block reward token emission as of the current block normalized to a day (not hour), in token&#39;s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsUsd :: !(Maybe [Text]) -- ^ "reward_token_emissions_usd" - Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO
instance A.FromJSON UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO where
  parseJSON = A.withObject "UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO" $ \o ->
    UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "protocol")
      <*> (o .:? "pool")
      <*> (o .:? "timestamp")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "hourly_supply_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "hourly_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "hourly_total_revenue_usd")
      <*> (o .:? "hourly_volume_usd")
      <*> (o .:? "hourly_volume_by_token_amount")
      <*> (o .:? "hourly_volume_by_token_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "input_token_balances")
      <*> (o .:? "input_token_weights")
      <*> (o .:? "output_token_supply")
      <*> (o .:? "output_token_price_usd")
      <*> (o .:? "staked_output_token_amount")
      <*> (o .:? "reward_token_emissions_amount")
      <*> (o .:? "reward_token_emissions_usd")

-- | ToJSON UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO
instance A.ToJSON UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO where
  toJSON UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOEntryTime
      , "recv_time" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTORecvTime
      , "block_number" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOBlockNumber
      , "block_range" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOBlockRange
      , "id" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOId
      , "protocol" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOProtocol
      , "pool" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOPool
      , "timestamp" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOTimestamp
      , "total_value_locked_usd" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOTotalValueLockedUsd
      , "cumulative_supply_side_revenue_usd" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeSupplySideRevenueUsd
      , "hourly_supply_side_revenue_usd" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOHourlySupplySideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeProtocolSideRevenueUsd
      , "hourly_protocol_side_revenue_usd" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyProtocolSideRevenueUsd
      , "cumulative_total_revenue_usd" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeTotalRevenueUsd
      , "hourly_total_revenue_usd" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyTotalRevenueUsd
      , "hourly_volume_usd" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeUsd
      , "hourly_volume_by_token_amount" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenAmount
      , "hourly_volume_by_token_usd" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenUsd
      , "cumulative_volume_usd" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeUsd
      , "input_token_balances" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenBalances
      , "input_token_weights" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenWeights
      , "output_token_supply" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOOutputTokenSupply
      , "output_token_price_usd" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOOutputTokenPriceUsd
      , "staked_output_token_amount" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOStakedOutputTokenAmount
      , "reward_token_emissions_amount" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsAmount
      , "reward_token_emissions_usd" .= uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsUsd
      ]


-- | Construct a value of type 'UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO' (by applying it's required fields, if any)
mkUNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO
  :: UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO
mkUNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO =
  UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO
  { uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOEntryTime = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTORecvTime = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOBlockNumber = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOBlockRange = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOId = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOProtocol = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOPool = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOTimestamp = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOTotalValueLockedUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeSupplySideRevenueUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOHourlySupplySideRevenueUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeProtocolSideRevenueUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyProtocolSideRevenueUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeTotalRevenueUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyTotalRevenueUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenAmount = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenBalances = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenWeights = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOOutputTokenSupply = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOOutputTokenPriceUsd = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTOStakedOutputTokenAmount = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsAmount = Nothing
  , uNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsUsd = Nothing
  }

-- ** UNISWAPV2ETHEREUMMasterChefAddressToPidDTO
-- | UNISWAPV2ETHEREUMMasterChefAddressToPidDTO
-- .
data UNISWAPV2ETHEREUMMasterChefAddressToPidDTO = UNISWAPV2ETHEREUMMasterChefAddressToPidDTO
  { uNISWAPV2ETHEREUMMasterChefAddressToPidDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV2ETHEREUMMasterChefAddressToPidDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV2ETHEREUMMasterChefAddressToPidDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV2ETHEREUMMasterChefAddressToPidDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , uNISWAPV2ETHEREUMMasterChefAddressToPidDTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: (masterchef type) - (address of the staking pool per the masterchef pid)
  , uNISWAPV2ETHEREUMMasterChefAddressToPidDTOPid :: !(Maybe Text) -- ^ "pid" - Pid referenced in the MasterChef Contract
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV2ETHEREUMMasterChefAddressToPidDTO
instance A.FromJSON UNISWAPV2ETHEREUMMasterChefAddressToPidDTO where
  parseJSON = A.withObject "UNISWAPV2ETHEREUMMasterChefAddressToPidDTO" $ \o ->
    UNISWAPV2ETHEREUMMasterChefAddressToPidDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "pid")

-- | ToJSON UNISWAPV2ETHEREUMMasterChefAddressToPidDTO
instance A.ToJSON UNISWAPV2ETHEREUMMasterChefAddressToPidDTO where
  toJSON UNISWAPV2ETHEREUMMasterChefAddressToPidDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV2ETHEREUMMasterChefAddressToPidDTOEntryTime
      , "recv_time" .= uNISWAPV2ETHEREUMMasterChefAddressToPidDTORecvTime
      , "block_number" .= uNISWAPV2ETHEREUMMasterChefAddressToPidDTOBlockNumber
      , "block_range" .= uNISWAPV2ETHEREUMMasterChefAddressToPidDTOBlockRange
      , "id" .= uNISWAPV2ETHEREUMMasterChefAddressToPidDTOId
      , "pid" .= uNISWAPV2ETHEREUMMasterChefAddressToPidDTOPid
      ]


-- | Construct a value of type 'UNISWAPV2ETHEREUMMasterChefAddressToPidDTO' (by applying it's required fields, if any)
mkUNISWAPV2ETHEREUMMasterChefAddressToPidDTO
  :: UNISWAPV2ETHEREUMMasterChefAddressToPidDTO
mkUNISWAPV2ETHEREUMMasterChefAddressToPidDTO =
  UNISWAPV2ETHEREUMMasterChefAddressToPidDTO
  { uNISWAPV2ETHEREUMMasterChefAddressToPidDTOEntryTime = Nothing
  , uNISWAPV2ETHEREUMMasterChefAddressToPidDTORecvTime = Nothing
  , uNISWAPV2ETHEREUMMasterChefAddressToPidDTOBlockNumber = Nothing
  , uNISWAPV2ETHEREUMMasterChefAddressToPidDTOBlockRange = Nothing
  , uNISWAPV2ETHEREUMMasterChefAddressToPidDTOId = Nothing
  , uNISWAPV2ETHEREUMMasterChefAddressToPidDTOPid = Nothing
  }

-- ** UNISWAPV2ETHEREUMMasterChefDTO
-- | UNISWAPV2ETHEREUMMasterChefDTO
-- Smart contract that is used to manage the liquidity mining program on Uniswap V2.
data UNISWAPV2ETHEREUMMasterChefDTO = UNISWAPV2ETHEREUMMasterChefDTO
  { uNISWAPV2ETHEREUMMasterChefDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV2ETHEREUMMasterChefDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV2ETHEREUMMasterChefDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV2ETHEREUMMasterChefDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , uNISWAPV2ETHEREUMMasterChefDTOId :: !(Maybe Text) -- ^ "id" - (masterChef type) - (pid referenced in the masterchef contract)
  , uNISWAPV2ETHEREUMMasterChefDTOAddress :: !(Maybe Text) -- ^ "address" - Address of the masterchef contract
  , uNISWAPV2ETHEREUMMasterChefDTOTotalAllocPoint :: !(Maybe Text) -- ^ "total_alloc_point" - Total allocation point of all staking pools
  , uNISWAPV2ETHEREUMMasterChefDTORewardTokenRate :: !(Maybe Text) -- ^ "reward_token_rate" - Amount of reward tokens emitted per block or timestamp
  , uNISWAPV2ETHEREUMMasterChefDTORewardTokenInterval :: !(Maybe Text) -- ^ "reward_token_interval" - Indicates whether rewards are indicated by block or timestamp
  , uNISWAPV2ETHEREUMMasterChefDTOAdjustedRewardTokenRate :: !(Maybe Text) -- ^ "adjusted_reward_token_rate" - Reward token rate given after you adjust for allocations either burned or not applicable
  , uNISWAPV2ETHEREUMMasterChefDTOLastUpdatedRewardRate :: !(Maybe Text) -- ^ "last_updated_reward_rate" - Last time the adjusted reward token rate was updated
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV2ETHEREUMMasterChefDTO
instance A.FromJSON UNISWAPV2ETHEREUMMasterChefDTO where
  parseJSON = A.withObject "UNISWAPV2ETHEREUMMasterChefDTO" $ \o ->
    UNISWAPV2ETHEREUMMasterChefDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "address")
      <*> (o .:? "total_alloc_point")
      <*> (o .:? "reward_token_rate")
      <*> (o .:? "reward_token_interval")
      <*> (o .:? "adjusted_reward_token_rate")
      <*> (o .:? "last_updated_reward_rate")

-- | ToJSON UNISWAPV2ETHEREUMMasterChefDTO
instance A.ToJSON UNISWAPV2ETHEREUMMasterChefDTO where
  toJSON UNISWAPV2ETHEREUMMasterChefDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV2ETHEREUMMasterChefDTOEntryTime
      , "recv_time" .= uNISWAPV2ETHEREUMMasterChefDTORecvTime
      , "block_number" .= uNISWAPV2ETHEREUMMasterChefDTOBlockNumber
      , "block_range" .= uNISWAPV2ETHEREUMMasterChefDTOBlockRange
      , "id" .= uNISWAPV2ETHEREUMMasterChefDTOId
      , "address" .= uNISWAPV2ETHEREUMMasterChefDTOAddress
      , "total_alloc_point" .= uNISWAPV2ETHEREUMMasterChefDTOTotalAllocPoint
      , "reward_token_rate" .= uNISWAPV2ETHEREUMMasterChefDTORewardTokenRate
      , "reward_token_interval" .= uNISWAPV2ETHEREUMMasterChefDTORewardTokenInterval
      , "adjusted_reward_token_rate" .= uNISWAPV2ETHEREUMMasterChefDTOAdjustedRewardTokenRate
      , "last_updated_reward_rate" .= uNISWAPV2ETHEREUMMasterChefDTOLastUpdatedRewardRate
      ]


-- | Construct a value of type 'UNISWAPV2ETHEREUMMasterChefDTO' (by applying it's required fields, if any)
mkUNISWAPV2ETHEREUMMasterChefDTO
  :: UNISWAPV2ETHEREUMMasterChefDTO
mkUNISWAPV2ETHEREUMMasterChefDTO =
  UNISWAPV2ETHEREUMMasterChefDTO
  { uNISWAPV2ETHEREUMMasterChefDTOEntryTime = Nothing
  , uNISWAPV2ETHEREUMMasterChefDTORecvTime = Nothing
  , uNISWAPV2ETHEREUMMasterChefDTOBlockNumber = Nothing
  , uNISWAPV2ETHEREUMMasterChefDTOBlockRange = Nothing
  , uNISWAPV2ETHEREUMMasterChefDTOId = Nothing
  , uNISWAPV2ETHEREUMMasterChefDTOAddress = Nothing
  , uNISWAPV2ETHEREUMMasterChefDTOTotalAllocPoint = Nothing
  , uNISWAPV2ETHEREUMMasterChefDTORewardTokenRate = Nothing
  , uNISWAPV2ETHEREUMMasterChefDTORewardTokenInterval = Nothing
  , uNISWAPV2ETHEREUMMasterChefDTOAdjustedRewardTokenRate = Nothing
  , uNISWAPV2ETHEREUMMasterChefDTOLastUpdatedRewardRate = Nothing
  }

-- ** UNISWAPV2ETHEREUMMasterChefRewarderDTO
-- | UNISWAPV2ETHEREUMMasterChefRewarderDTO
-- 
data UNISWAPV2ETHEREUMMasterChefRewarderDTO = UNISWAPV2ETHEREUMMasterChefRewarderDTO
  { uNISWAPV2ETHEREUMMasterChefRewarderDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV2ETHEREUMMasterChefRewarderDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV2ETHEREUMMasterChefRewarderDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV2ETHEREUMMasterChefRewarderDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , uNISWAPV2ETHEREUMMasterChefRewarderDTOId :: !(Maybe Text) -- ^ "id" - Address of the rewarder contract associated to some staking pool
  , uNISWAPV2ETHEREUMMasterChefRewarderDTOPool :: !(Maybe Text) -- ^ "pool" - Staking pool to which this rewarder is associated
  , uNISWAPV2ETHEREUMMasterChefRewarderDTORewardToken :: !(Maybe Text) -- ^ "reward_token" - Address of the token given by this rewarder
  , uNISWAPV2ETHEREUMMasterChefRewarderDTOTokenPerSec :: !(Maybe Text) -- ^ "token_per_sec" - Number of tokens rewarded per second per LP staked in pool by this rewarder
  , uNISWAPV2ETHEREUMMasterChefRewarderDTORateCalculatedAt :: !(Maybe Text) -- ^ "rate_calculated_at" - Timestamp from the last time tokenPerSec was calculated
  , uNISWAPV2ETHEREUMMasterChefRewarderDTOHasFunds :: !(Maybe Bool) -- ^ "has_funds" - A field to keep track if there are any funds to give away in the rewarder
  , uNISWAPV2ETHEREUMMasterChefRewarderDTOHasFundsAt :: !(Maybe Text) -- ^ "has_funds_at" - When it was last checked that there were funds in the rewarder
  , uNISWAPV2ETHEREUMMasterChefRewarderDTOCanRetrieveRate :: !(Maybe Bool) -- ^ "can_retrieve_rate" - If true it means the rewardRate can be retrieved directly from the contract, without crazy math
  , uNISWAPV2ETHEREUMMasterChefRewarderDTORewardRateCalculationInProgress :: !(Maybe Bool) -- ^ "reward_rate_calculation_in_progress" - Utility field to calculate the rewarder reward rate
  , uNISWAPV2ETHEREUMMasterChefRewarderDTOProbes :: !(Maybe [Text]) -- ^ "probes" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV2ETHEREUMMasterChefRewarderDTO
instance A.FromJSON UNISWAPV2ETHEREUMMasterChefRewarderDTO where
  parseJSON = A.withObject "UNISWAPV2ETHEREUMMasterChefRewarderDTO" $ \o ->
    UNISWAPV2ETHEREUMMasterChefRewarderDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "pool")
      <*> (o .:? "reward_token")
      <*> (o .:? "token_per_sec")
      <*> (o .:? "rate_calculated_at")
      <*> (o .:? "has_funds")
      <*> (o .:? "has_funds_at")
      <*> (o .:? "can_retrieve_rate")
      <*> (o .:? "reward_rate_calculation_in_progress")
      <*> (o .:? "probes")

-- | ToJSON UNISWAPV2ETHEREUMMasterChefRewarderDTO
instance A.ToJSON UNISWAPV2ETHEREUMMasterChefRewarderDTO where
  toJSON UNISWAPV2ETHEREUMMasterChefRewarderDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV2ETHEREUMMasterChefRewarderDTOEntryTime
      , "recv_time" .= uNISWAPV2ETHEREUMMasterChefRewarderDTORecvTime
      , "block_number" .= uNISWAPV2ETHEREUMMasterChefRewarderDTOBlockNumber
      , "block_range" .= uNISWAPV2ETHEREUMMasterChefRewarderDTOBlockRange
      , "id" .= uNISWAPV2ETHEREUMMasterChefRewarderDTOId
      , "pool" .= uNISWAPV2ETHEREUMMasterChefRewarderDTOPool
      , "reward_token" .= uNISWAPV2ETHEREUMMasterChefRewarderDTORewardToken
      , "token_per_sec" .= uNISWAPV2ETHEREUMMasterChefRewarderDTOTokenPerSec
      , "rate_calculated_at" .= uNISWAPV2ETHEREUMMasterChefRewarderDTORateCalculatedAt
      , "has_funds" .= uNISWAPV2ETHEREUMMasterChefRewarderDTOHasFunds
      , "has_funds_at" .= uNISWAPV2ETHEREUMMasterChefRewarderDTOHasFundsAt
      , "can_retrieve_rate" .= uNISWAPV2ETHEREUMMasterChefRewarderDTOCanRetrieveRate
      , "reward_rate_calculation_in_progress" .= uNISWAPV2ETHEREUMMasterChefRewarderDTORewardRateCalculationInProgress
      , "probes" .= uNISWAPV2ETHEREUMMasterChefRewarderDTOProbes
      ]


-- | Construct a value of type 'UNISWAPV2ETHEREUMMasterChefRewarderDTO' (by applying it's required fields, if any)
mkUNISWAPV2ETHEREUMMasterChefRewarderDTO
  :: UNISWAPV2ETHEREUMMasterChefRewarderDTO
mkUNISWAPV2ETHEREUMMasterChefRewarderDTO =
  UNISWAPV2ETHEREUMMasterChefRewarderDTO
  { uNISWAPV2ETHEREUMMasterChefRewarderDTOEntryTime = Nothing
  , uNISWAPV2ETHEREUMMasterChefRewarderDTORecvTime = Nothing
  , uNISWAPV2ETHEREUMMasterChefRewarderDTOBlockNumber = Nothing
  , uNISWAPV2ETHEREUMMasterChefRewarderDTOBlockRange = Nothing
  , uNISWAPV2ETHEREUMMasterChefRewarderDTOId = Nothing
  , uNISWAPV2ETHEREUMMasterChefRewarderDTOPool = Nothing
  , uNISWAPV2ETHEREUMMasterChefRewarderDTORewardToken = Nothing
  , uNISWAPV2ETHEREUMMasterChefRewarderDTOTokenPerSec = Nothing
  , uNISWAPV2ETHEREUMMasterChefRewarderDTORateCalculatedAt = Nothing
  , uNISWAPV2ETHEREUMMasterChefRewarderDTOHasFunds = Nothing
  , uNISWAPV2ETHEREUMMasterChefRewarderDTOHasFundsAt = Nothing
  , uNISWAPV2ETHEREUMMasterChefRewarderDTOCanRetrieveRate = Nothing
  , uNISWAPV2ETHEREUMMasterChefRewarderDTORewardRateCalculationInProgress = Nothing
  , uNISWAPV2ETHEREUMMasterChefRewarderDTOProbes = Nothing
  }

-- ** UNISWAPV2ETHEREUMMasterChefStakingPoolDTO
-- | UNISWAPV2ETHEREUMMasterChefStakingPoolDTO
-- 
data UNISWAPV2ETHEREUMMasterChefStakingPoolDTO = UNISWAPV2ETHEREUMMasterChefStakingPoolDTO
  { uNISWAPV2ETHEREUMMasterChefStakingPoolDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV2ETHEREUMMasterChefStakingPoolDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV2ETHEREUMMasterChefStakingPoolDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV2ETHEREUMMasterChefStakingPoolDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , uNISWAPV2ETHEREUMMasterChefStakingPoolDTOId :: !(Maybe Text) -- ^ "id" - (masterchef type) - (pid referenced in the masterchef contract)
  , uNISWAPV2ETHEREUMMasterChefStakingPoolDTOPoolAddress :: !(Maybe Text) -- ^ "pool_address" - Staking pool to which this rewarder is associated
  , uNISWAPV2ETHEREUMMasterChefStakingPoolDTOPoolAllocPoint :: !(Maybe Text) -- ^ "pool_alloc_point" - Allocation point of this MasterChef Staking pool
  , uNISWAPV2ETHEREUMMasterChefStakingPoolDTOMultiplier :: !(Maybe Text) -- ^ "multiplier" - Reward Multiplier for a given staking pool
  , uNISWAPV2ETHEREUMMasterChefStakingPoolDTOLastRewardBlock :: !(Maybe Text) -- ^ "last_reward_block" - Last block where rewards were given out
  , uNISWAPV2ETHEREUMMasterChefStakingPoolDTORewarder :: !(Maybe Text) -- ^ "rewarder" - Optional address of a bonus rewarder, to give additional tokens on top of masterchefs
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV2ETHEREUMMasterChefStakingPoolDTO
instance A.FromJSON UNISWAPV2ETHEREUMMasterChefStakingPoolDTO where
  parseJSON = A.withObject "UNISWAPV2ETHEREUMMasterChefStakingPoolDTO" $ \o ->
    UNISWAPV2ETHEREUMMasterChefStakingPoolDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "pool_address")
      <*> (o .:? "pool_alloc_point")
      <*> (o .:? "multiplier")
      <*> (o .:? "last_reward_block")
      <*> (o .:? "rewarder")

-- | ToJSON UNISWAPV2ETHEREUMMasterChefStakingPoolDTO
instance A.ToJSON UNISWAPV2ETHEREUMMasterChefStakingPoolDTO where
  toJSON UNISWAPV2ETHEREUMMasterChefStakingPoolDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV2ETHEREUMMasterChefStakingPoolDTOEntryTime
      , "recv_time" .= uNISWAPV2ETHEREUMMasterChefStakingPoolDTORecvTime
      , "block_number" .= uNISWAPV2ETHEREUMMasterChefStakingPoolDTOBlockNumber
      , "block_range" .= uNISWAPV2ETHEREUMMasterChefStakingPoolDTOBlockRange
      , "id" .= uNISWAPV2ETHEREUMMasterChefStakingPoolDTOId
      , "pool_address" .= uNISWAPV2ETHEREUMMasterChefStakingPoolDTOPoolAddress
      , "pool_alloc_point" .= uNISWAPV2ETHEREUMMasterChefStakingPoolDTOPoolAllocPoint
      , "multiplier" .= uNISWAPV2ETHEREUMMasterChefStakingPoolDTOMultiplier
      , "last_reward_block" .= uNISWAPV2ETHEREUMMasterChefStakingPoolDTOLastRewardBlock
      , "rewarder" .= uNISWAPV2ETHEREUMMasterChefStakingPoolDTORewarder
      ]


-- | Construct a value of type 'UNISWAPV2ETHEREUMMasterChefStakingPoolDTO' (by applying it's required fields, if any)
mkUNISWAPV2ETHEREUMMasterChefStakingPoolDTO
  :: UNISWAPV2ETHEREUMMasterChefStakingPoolDTO
mkUNISWAPV2ETHEREUMMasterChefStakingPoolDTO =
  UNISWAPV2ETHEREUMMasterChefStakingPoolDTO
  { uNISWAPV2ETHEREUMMasterChefStakingPoolDTOEntryTime = Nothing
  , uNISWAPV2ETHEREUMMasterChefStakingPoolDTORecvTime = Nothing
  , uNISWAPV2ETHEREUMMasterChefStakingPoolDTOBlockNumber = Nothing
  , uNISWAPV2ETHEREUMMasterChefStakingPoolDTOBlockRange = Nothing
  , uNISWAPV2ETHEREUMMasterChefStakingPoolDTOId = Nothing
  , uNISWAPV2ETHEREUMMasterChefStakingPoolDTOPoolAddress = Nothing
  , uNISWAPV2ETHEREUMMasterChefStakingPoolDTOPoolAllocPoint = Nothing
  , uNISWAPV2ETHEREUMMasterChefStakingPoolDTOMultiplier = Nothing
  , uNISWAPV2ETHEREUMMasterChefStakingPoolDTOLastRewardBlock = Nothing
  , uNISWAPV2ETHEREUMMasterChefStakingPoolDTORewarder = Nothing
  }

-- ** UNISWAPV2ETHEREUMRewardTokenDTO
-- | UNISWAPV2ETHEREUMRewardTokenDTO
-- 
data UNISWAPV2ETHEREUMRewardTokenDTO = UNISWAPV2ETHEREUMRewardTokenDTO
  { uNISWAPV2ETHEREUMRewardTokenDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV2ETHEREUMRewardTokenDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV2ETHEREUMRewardTokenDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV2ETHEREUMRewardTokenDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , uNISWAPV2ETHEREUMRewardTokenDTOId :: !(Maybe Text) -- ^ "id" - (reward token type)-(smart contract address of the reward token)
  , uNISWAPV2ETHEREUMRewardTokenDTOToken :: !(Maybe Text) -- ^ "token" - Reference to the actual token
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV2ETHEREUMRewardTokenDTO
instance A.FromJSON UNISWAPV2ETHEREUMRewardTokenDTO where
  parseJSON = A.withObject "UNISWAPV2ETHEREUMRewardTokenDTO" $ \o ->
    UNISWAPV2ETHEREUMRewardTokenDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "token")

-- | ToJSON UNISWAPV2ETHEREUMRewardTokenDTO
instance A.ToJSON UNISWAPV2ETHEREUMRewardTokenDTO where
  toJSON UNISWAPV2ETHEREUMRewardTokenDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV2ETHEREUMRewardTokenDTOEntryTime
      , "recv_time" .= uNISWAPV2ETHEREUMRewardTokenDTORecvTime
      , "block_number" .= uNISWAPV2ETHEREUMRewardTokenDTOBlockNumber
      , "block_range" .= uNISWAPV2ETHEREUMRewardTokenDTOBlockRange
      , "id" .= uNISWAPV2ETHEREUMRewardTokenDTOId
      , "token" .= uNISWAPV2ETHEREUMRewardTokenDTOToken
      ]


-- | Construct a value of type 'UNISWAPV2ETHEREUMRewardTokenDTO' (by applying it's required fields, if any)
mkUNISWAPV2ETHEREUMRewardTokenDTO
  :: UNISWAPV2ETHEREUMRewardTokenDTO
mkUNISWAPV2ETHEREUMRewardTokenDTO =
  UNISWAPV2ETHEREUMRewardTokenDTO
  { uNISWAPV2ETHEREUMRewardTokenDTOEntryTime = Nothing
  , uNISWAPV2ETHEREUMRewardTokenDTORecvTime = Nothing
  , uNISWAPV2ETHEREUMRewardTokenDTOBlockNumber = Nothing
  , uNISWAPV2ETHEREUMRewardTokenDTOBlockRange = Nothing
  , uNISWAPV2ETHEREUMRewardTokenDTOId = Nothing
  , uNISWAPV2ETHEREUMRewardTokenDTOToken = Nothing
  }

-- ** UNISWAPV2ETHEREUMRewarderProbeDTO
-- | UNISWAPV2ETHEREUMRewarderProbeDTO
-- 
data UNISWAPV2ETHEREUMRewarderProbeDTO = UNISWAPV2ETHEREUMRewarderProbeDTO
  { uNISWAPV2ETHEREUMRewarderProbeDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV2ETHEREUMRewarderProbeDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV2ETHEREUMRewarderProbeDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV2ETHEREUMRewarderProbeDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , uNISWAPV2ETHEREUMRewarderProbeDTOId :: !(Maybe Text) -- ^ "id" - (rewarder)-(probeNum)
  , uNISWAPV2ETHEREUMRewarderProbeDTOUser :: !(Maybe Text) -- ^ "user" - The address being probed
  , uNISWAPV2ETHEREUMRewarderProbeDTOPending :: !(Maybe Text) -- ^ "pending" - The value from the last probe
  , uNISWAPV2ETHEREUMRewarderProbeDTOBlockNum :: !(Maybe Text) -- ^ "block_num" - Block at which the probe was made
  , uNISWAPV2ETHEREUMRewarderProbeDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Block timestamp at whihc the probe was taken
  , uNISWAPV2ETHEREUMRewarderProbeDTOLpStaked :: !(Maybe Text) -- ^ "lp_staked" - Total LP staked in pool at the time of the probe
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV2ETHEREUMRewarderProbeDTO
instance A.FromJSON UNISWAPV2ETHEREUMRewarderProbeDTO where
  parseJSON = A.withObject "UNISWAPV2ETHEREUMRewarderProbeDTO" $ \o ->
    UNISWAPV2ETHEREUMRewarderProbeDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "user")
      <*> (o .:? "pending")
      <*> (o .:? "block_num")
      <*> (o .:? "timestamp")
      <*> (o .:? "lp_staked")

-- | ToJSON UNISWAPV2ETHEREUMRewarderProbeDTO
instance A.ToJSON UNISWAPV2ETHEREUMRewarderProbeDTO where
  toJSON UNISWAPV2ETHEREUMRewarderProbeDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV2ETHEREUMRewarderProbeDTOEntryTime
      , "recv_time" .= uNISWAPV2ETHEREUMRewarderProbeDTORecvTime
      , "block_number" .= uNISWAPV2ETHEREUMRewarderProbeDTOBlockNumber
      , "block_range" .= uNISWAPV2ETHEREUMRewarderProbeDTOBlockRange
      , "id" .= uNISWAPV2ETHEREUMRewarderProbeDTOId
      , "user" .= uNISWAPV2ETHEREUMRewarderProbeDTOUser
      , "pending" .= uNISWAPV2ETHEREUMRewarderProbeDTOPending
      , "block_num" .= uNISWAPV2ETHEREUMRewarderProbeDTOBlockNum
      , "timestamp" .= uNISWAPV2ETHEREUMRewarderProbeDTOTimestamp
      , "lp_staked" .= uNISWAPV2ETHEREUMRewarderProbeDTOLpStaked
      ]


-- | Construct a value of type 'UNISWAPV2ETHEREUMRewarderProbeDTO' (by applying it's required fields, if any)
mkUNISWAPV2ETHEREUMRewarderProbeDTO
  :: UNISWAPV2ETHEREUMRewarderProbeDTO
mkUNISWAPV2ETHEREUMRewarderProbeDTO =
  UNISWAPV2ETHEREUMRewarderProbeDTO
  { uNISWAPV2ETHEREUMRewarderProbeDTOEntryTime = Nothing
  , uNISWAPV2ETHEREUMRewarderProbeDTORecvTime = Nothing
  , uNISWAPV2ETHEREUMRewarderProbeDTOBlockNumber = Nothing
  , uNISWAPV2ETHEREUMRewarderProbeDTOBlockRange = Nothing
  , uNISWAPV2ETHEREUMRewarderProbeDTOId = Nothing
  , uNISWAPV2ETHEREUMRewarderProbeDTOUser = Nothing
  , uNISWAPV2ETHEREUMRewarderProbeDTOPending = Nothing
  , uNISWAPV2ETHEREUMRewarderProbeDTOBlockNum = Nothing
  , uNISWAPV2ETHEREUMRewarderProbeDTOTimestamp = Nothing
  , uNISWAPV2ETHEREUMRewarderProbeDTOLpStaked = Nothing
  }

-- ** UNISWAPV2ETHEREUMSwapDTO
-- | UNISWAPV2ETHEREUMSwapDTO
-- Trade (swap) event which occurred in a pool.
data UNISWAPV2ETHEREUMSwapDTO = UNISWAPV2ETHEREUMSwapDTO
  { uNISWAPV2ETHEREUMSwapDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV2ETHEREUMSwapDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV2ETHEREUMSwapDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV2ETHEREUMSwapDTOBlock :: !(Maybe Int) -- ^ "block_" - 
  , uNISWAPV2ETHEREUMSwapDTOId :: !(Maybe Text) -- ^ "id" - swap-(Transaction hash)-(Log index)
  , uNISWAPV2ETHEREUMSwapDTOHash :: !(Maybe Text) -- ^ "hash" - Transaction hash of the transaction that emitted this event
  , uNISWAPV2ETHEREUMSwapDTOLogIndex :: !(Maybe Int) -- ^ "log_index" - Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0
  , uNISWAPV2ETHEREUMSwapDTOProtocol :: !(Maybe Text) -- ^ "protocol" - The protocol this transaction belongs to
  , uNISWAPV2ETHEREUMSwapDTOTo :: !(Maybe Text) -- ^ "to" - Address that received the tokens
  , uNISWAPV2ETHEREUMSwapDTOFrom :: !(Maybe Text) -- ^ "from" - Address that sent the tokens
  , uNISWAPV2ETHEREUMSwapDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this event
  , uNISWAPV2ETHEREUMSwapDTOTokenIn :: !(Maybe Text) -- ^ "token_in" - Token deposited into pool
  , uNISWAPV2ETHEREUMSwapDTOAmountIn :: !(Maybe Text) -- ^ "amount_in" - Amount of token deposited into pool in native units
  , uNISWAPV2ETHEREUMSwapDTOAmountInUsd :: !(Maybe Text) -- ^ "amount_in_usd" - Amount of token deposited into pool in USD
  , uNISWAPV2ETHEREUMSwapDTOTokenOut :: !(Maybe Text) -- ^ "token_out" - Token withdrawn from pool
  , uNISWAPV2ETHEREUMSwapDTOAmountOut :: !(Maybe Text) -- ^ "amount_out" - Amount of token withdrawn from pool in native units
  , uNISWAPV2ETHEREUMSwapDTOAmountOutUsd :: !(Maybe Text) -- ^ "amount_out_usd" - Amount of token withdrawn from pool in USD
  , uNISWAPV2ETHEREUMSwapDTOReserveAmounts :: !(Maybe [Text]) -- ^ "reserve_amounts" - Amount of input tokens in the liquidity pool
  , uNISWAPV2ETHEREUMSwapDTOPool :: !(Maybe Text) -- ^ "pool" - The pool involving this transaction
  , uNISWAPV2ETHEREUMSwapDTOBlockRange :: !(Maybe Text) -- ^ /ReadOnly/ "block_range"
  , uNISWAPV2ETHEREUMSwapDTOPoolId :: !(Maybe Text) -- ^ /ReadOnly/ "pool_id"
  , uNISWAPV2ETHEREUMSwapDTOTransactionId :: !(Maybe Text) -- ^ /ReadOnly/ "transaction_id"
  , uNISWAPV2ETHEREUMSwapDTOEvaluatedPrice :: !(Maybe Double) -- ^ /ReadOnly/ "evaluated_price"
  , uNISWAPV2ETHEREUMSwapDTOEvaluatedAmount :: !(Maybe Double) -- ^ /ReadOnly/ "evaluated_amount"
  , uNISWAPV2ETHEREUMSwapDTOEvaluatedAggressor :: !(Maybe TransactionsETradeAggressiveSide) -- ^ "evaluated_aggressor"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV2ETHEREUMSwapDTO
instance A.FromJSON UNISWAPV2ETHEREUMSwapDTO where
  parseJSON = A.withObject "UNISWAPV2ETHEREUMSwapDTO" $ \o ->
    UNISWAPV2ETHEREUMSwapDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_")
      <*> (o .:? "id")
      <*> (o .:? "hash")
      <*> (o .:? "log_index")
      <*> (o .:? "protocol")
      <*> (o .:? "to")
      <*> (o .:? "from")
      <*> (o .:? "timestamp")
      <*> (o .:? "token_in")
      <*> (o .:? "amount_in")
      <*> (o .:? "amount_in_usd")
      <*> (o .:? "token_out")
      <*> (o .:? "amount_out")
      <*> (o .:? "amount_out_usd")
      <*> (o .:? "reserve_amounts")
      <*> (o .:? "pool")
      <*> (o .:? "block_range")
      <*> (o .:? "pool_id")
      <*> (o .:? "transaction_id")
      <*> (o .:? "evaluated_price")
      <*> (o .:? "evaluated_amount")
      <*> (o .:? "evaluated_aggressor")

-- | ToJSON UNISWAPV2ETHEREUMSwapDTO
instance A.ToJSON UNISWAPV2ETHEREUMSwapDTO where
  toJSON UNISWAPV2ETHEREUMSwapDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV2ETHEREUMSwapDTOEntryTime
      , "recv_time" .= uNISWAPV2ETHEREUMSwapDTORecvTime
      , "block_number" .= uNISWAPV2ETHEREUMSwapDTOBlockNumber
      , "block_" .= uNISWAPV2ETHEREUMSwapDTOBlock
      , "id" .= uNISWAPV2ETHEREUMSwapDTOId
      , "hash" .= uNISWAPV2ETHEREUMSwapDTOHash
      , "log_index" .= uNISWAPV2ETHEREUMSwapDTOLogIndex
      , "protocol" .= uNISWAPV2ETHEREUMSwapDTOProtocol
      , "to" .= uNISWAPV2ETHEREUMSwapDTOTo
      , "from" .= uNISWAPV2ETHEREUMSwapDTOFrom
      , "timestamp" .= uNISWAPV2ETHEREUMSwapDTOTimestamp
      , "token_in" .= uNISWAPV2ETHEREUMSwapDTOTokenIn
      , "amount_in" .= uNISWAPV2ETHEREUMSwapDTOAmountIn
      , "amount_in_usd" .= uNISWAPV2ETHEREUMSwapDTOAmountInUsd
      , "token_out" .= uNISWAPV2ETHEREUMSwapDTOTokenOut
      , "amount_out" .= uNISWAPV2ETHEREUMSwapDTOAmountOut
      , "amount_out_usd" .= uNISWAPV2ETHEREUMSwapDTOAmountOutUsd
      , "reserve_amounts" .= uNISWAPV2ETHEREUMSwapDTOReserveAmounts
      , "pool" .= uNISWAPV2ETHEREUMSwapDTOPool
      , "block_range" .= uNISWAPV2ETHEREUMSwapDTOBlockRange
      , "pool_id" .= uNISWAPV2ETHEREUMSwapDTOPoolId
      , "transaction_id" .= uNISWAPV2ETHEREUMSwapDTOTransactionId
      , "evaluated_price" .= uNISWAPV2ETHEREUMSwapDTOEvaluatedPrice
      , "evaluated_amount" .= uNISWAPV2ETHEREUMSwapDTOEvaluatedAmount
      , "evaluated_aggressor" .= uNISWAPV2ETHEREUMSwapDTOEvaluatedAggressor
      ]


-- | Construct a value of type 'UNISWAPV2ETHEREUMSwapDTO' (by applying it's required fields, if any)
mkUNISWAPV2ETHEREUMSwapDTO
  :: UNISWAPV2ETHEREUMSwapDTO
mkUNISWAPV2ETHEREUMSwapDTO =
  UNISWAPV2ETHEREUMSwapDTO
  { uNISWAPV2ETHEREUMSwapDTOEntryTime = Nothing
  , uNISWAPV2ETHEREUMSwapDTORecvTime = Nothing
  , uNISWAPV2ETHEREUMSwapDTOBlockNumber = Nothing
  , uNISWAPV2ETHEREUMSwapDTOBlock = Nothing
  , uNISWAPV2ETHEREUMSwapDTOId = Nothing
  , uNISWAPV2ETHEREUMSwapDTOHash = Nothing
  , uNISWAPV2ETHEREUMSwapDTOLogIndex = Nothing
  , uNISWAPV2ETHEREUMSwapDTOProtocol = Nothing
  , uNISWAPV2ETHEREUMSwapDTOTo = Nothing
  , uNISWAPV2ETHEREUMSwapDTOFrom = Nothing
  , uNISWAPV2ETHEREUMSwapDTOTimestamp = Nothing
  , uNISWAPV2ETHEREUMSwapDTOTokenIn = Nothing
  , uNISWAPV2ETHEREUMSwapDTOAmountIn = Nothing
  , uNISWAPV2ETHEREUMSwapDTOAmountInUsd = Nothing
  , uNISWAPV2ETHEREUMSwapDTOTokenOut = Nothing
  , uNISWAPV2ETHEREUMSwapDTOAmountOut = Nothing
  , uNISWAPV2ETHEREUMSwapDTOAmountOutUsd = Nothing
  , uNISWAPV2ETHEREUMSwapDTOReserveAmounts = Nothing
  , uNISWAPV2ETHEREUMSwapDTOPool = Nothing
  , uNISWAPV2ETHEREUMSwapDTOBlockRange = Nothing
  , uNISWAPV2ETHEREUMSwapDTOPoolId = Nothing
  , uNISWAPV2ETHEREUMSwapDTOTransactionId = Nothing
  , uNISWAPV2ETHEREUMSwapDTOEvaluatedPrice = Nothing
  , uNISWAPV2ETHEREUMSwapDTOEvaluatedAmount = Nothing
  , uNISWAPV2ETHEREUMSwapDTOEvaluatedAggressor = Nothing
  }

-- ** UNISWAPV2ETHEREUMTokenDTO
-- | UNISWAPV2ETHEREUMTokenDTO
-- Stores aggregated information for a specific token across all pairs that token is included in.
data UNISWAPV2ETHEREUMTokenDTO = UNISWAPV2ETHEREUMTokenDTO
  { uNISWAPV2ETHEREUMTokenDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV2ETHEREUMTokenDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV2ETHEREUMTokenDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV2ETHEREUMTokenDTOVid :: !(Maybe Integer) -- ^ "vid" - .
  , uNISWAPV2ETHEREUMTokenDTOId :: !(Maybe Text) -- ^ "id" - Smart contract address of the token
  , uNISWAPV2ETHEREUMTokenDTOName :: !(Maybe Text) -- ^ "name" - Name of the token, mirrored from the smart contract
  , uNISWAPV2ETHEREUMTokenDTOSymbol :: !(Maybe Text) -- ^ "symbol" - Symbol of the token, mirrored from the smart contract
  , uNISWAPV2ETHEREUMTokenDTODecimals :: !(Maybe Int) -- ^ "decimals" - The number of decimal places this token uses, default to 18
  , uNISWAPV2ETHEREUMTokenDTOLastPriceUsd :: !(Maybe Text) -- ^ "last_price_usd" - Optional field to track the price of a token, mostly for caching purposes
  , uNISWAPV2ETHEREUMTokenDTOLastPriceBlockNumber :: !(Maybe Text) -- ^ "last_price_block_number" - Optional field to track the block number of the last token price
  , uNISWAPV2ETHEREUMTokenDTOTotalSupply :: !(Maybe Text) -- ^ "total_supply" - amount of tokens in the protocol
  , uNISWAPV2ETHEREUMTokenDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Total value locked in the protocol
  , uNISWAPV2ETHEREUMTokenDTOLargePriceChangeBuffer :: !(Maybe Int) -- ^ "large_price_change_buffer" - Buffer for large price changes
  , uNISWAPV2ETHEREUMTokenDTOLargeTvlImpactBuffer :: !(Maybe Int) -- ^ "large_tvl_impact_buffer" - Buffer for large TVL impacts
  , uNISWAPV2ETHEREUMTokenDTOTokenSymbol :: !(Maybe Text) -- ^ /ReadOnly/ "token_symbol"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV2ETHEREUMTokenDTO
instance A.FromJSON UNISWAPV2ETHEREUMTokenDTO where
  parseJSON = A.withObject "UNISWAPV2ETHEREUMTokenDTO" $ \o ->
    UNISWAPV2ETHEREUMTokenDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "id")
      <*> (o .:? "name")
      <*> (o .:? "symbol")
      <*> (o .:? "decimals")
      <*> (o .:? "last_price_usd")
      <*> (o .:? "last_price_block_number")
      <*> (o .:? "total_supply")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "large_price_change_buffer")
      <*> (o .:? "large_tvl_impact_buffer")
      <*> (o .:? "token_symbol")

-- | ToJSON UNISWAPV2ETHEREUMTokenDTO
instance A.ToJSON UNISWAPV2ETHEREUMTokenDTO where
  toJSON UNISWAPV2ETHEREUMTokenDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV2ETHEREUMTokenDTOEntryTime
      , "recv_time" .= uNISWAPV2ETHEREUMTokenDTORecvTime
      , "block_number" .= uNISWAPV2ETHEREUMTokenDTOBlockNumber
      , "vid" .= uNISWAPV2ETHEREUMTokenDTOVid
      , "id" .= uNISWAPV2ETHEREUMTokenDTOId
      , "name" .= uNISWAPV2ETHEREUMTokenDTOName
      , "symbol" .= uNISWAPV2ETHEREUMTokenDTOSymbol
      , "decimals" .= uNISWAPV2ETHEREUMTokenDTODecimals
      , "last_price_usd" .= uNISWAPV2ETHEREUMTokenDTOLastPriceUsd
      , "last_price_block_number" .= uNISWAPV2ETHEREUMTokenDTOLastPriceBlockNumber
      , "total_supply" .= uNISWAPV2ETHEREUMTokenDTOTotalSupply
      , "total_value_locked_usd" .= uNISWAPV2ETHEREUMTokenDTOTotalValueLockedUsd
      , "large_price_change_buffer" .= uNISWAPV2ETHEREUMTokenDTOLargePriceChangeBuffer
      , "large_tvl_impact_buffer" .= uNISWAPV2ETHEREUMTokenDTOLargeTvlImpactBuffer
      , "token_symbol" .= uNISWAPV2ETHEREUMTokenDTOTokenSymbol
      ]


-- | Construct a value of type 'UNISWAPV2ETHEREUMTokenDTO' (by applying it's required fields, if any)
mkUNISWAPV2ETHEREUMTokenDTO
  :: UNISWAPV2ETHEREUMTokenDTO
mkUNISWAPV2ETHEREUMTokenDTO =
  UNISWAPV2ETHEREUMTokenDTO
  { uNISWAPV2ETHEREUMTokenDTOEntryTime = Nothing
  , uNISWAPV2ETHEREUMTokenDTORecvTime = Nothing
  , uNISWAPV2ETHEREUMTokenDTOBlockNumber = Nothing
  , uNISWAPV2ETHEREUMTokenDTOVid = Nothing
  , uNISWAPV2ETHEREUMTokenDTOId = Nothing
  , uNISWAPV2ETHEREUMTokenDTOName = Nothing
  , uNISWAPV2ETHEREUMTokenDTOSymbol = Nothing
  , uNISWAPV2ETHEREUMTokenDTODecimals = Nothing
  , uNISWAPV2ETHEREUMTokenDTOLastPriceUsd = Nothing
  , uNISWAPV2ETHEREUMTokenDTOLastPriceBlockNumber = Nothing
  , uNISWAPV2ETHEREUMTokenDTOTotalSupply = Nothing
  , uNISWAPV2ETHEREUMTokenDTOTotalValueLockedUsd = Nothing
  , uNISWAPV2ETHEREUMTokenDTOLargePriceChangeBuffer = Nothing
  , uNISWAPV2ETHEREUMTokenDTOLargeTvlImpactBuffer = Nothing
  , uNISWAPV2ETHEREUMTokenDTOTokenSymbol = Nothing
  }

-- ** UNISWAPV2ETHEREUMTokenWhiteListDTO
-- | UNISWAPV2ETHEREUMTokenWhiteListDTO
-- 
data UNISWAPV2ETHEREUMTokenWhiteListDTO = UNISWAPV2ETHEREUMTokenWhiteListDTO
  { uNISWAPV2ETHEREUMTokenWhiteListDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV2ETHEREUMTokenWhiteListDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV2ETHEREUMTokenWhiteListDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV2ETHEREUMTokenWhiteListDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , uNISWAPV2ETHEREUMTokenWhiteListDTOId :: !(Maybe Text) -- ^ "id" - Token Address
  , uNISWAPV2ETHEREUMTokenWhiteListDTOWhitelistPools :: !(Maybe [Text]) -- ^ "whitelist_pools" - pools token is in that are white listed for USD pricing
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV2ETHEREUMTokenWhiteListDTO
instance A.FromJSON UNISWAPV2ETHEREUMTokenWhiteListDTO where
  parseJSON = A.withObject "UNISWAPV2ETHEREUMTokenWhiteListDTO" $ \o ->
    UNISWAPV2ETHEREUMTokenWhiteListDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "whitelist_pools")

-- | ToJSON UNISWAPV2ETHEREUMTokenWhiteListDTO
instance A.ToJSON UNISWAPV2ETHEREUMTokenWhiteListDTO where
  toJSON UNISWAPV2ETHEREUMTokenWhiteListDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV2ETHEREUMTokenWhiteListDTOEntryTime
      , "recv_time" .= uNISWAPV2ETHEREUMTokenWhiteListDTORecvTime
      , "block_number" .= uNISWAPV2ETHEREUMTokenWhiteListDTOBlockNumber
      , "block_range" .= uNISWAPV2ETHEREUMTokenWhiteListDTOBlockRange
      , "id" .= uNISWAPV2ETHEREUMTokenWhiteListDTOId
      , "whitelist_pools" .= uNISWAPV2ETHEREUMTokenWhiteListDTOWhitelistPools
      ]


-- | Construct a value of type 'UNISWAPV2ETHEREUMTokenWhiteListDTO' (by applying it's required fields, if any)
mkUNISWAPV2ETHEREUMTokenWhiteListDTO
  :: UNISWAPV2ETHEREUMTokenWhiteListDTO
mkUNISWAPV2ETHEREUMTokenWhiteListDTO =
  UNISWAPV2ETHEREUMTokenWhiteListDTO
  { uNISWAPV2ETHEREUMTokenWhiteListDTOEntryTime = Nothing
  , uNISWAPV2ETHEREUMTokenWhiteListDTORecvTime = Nothing
  , uNISWAPV2ETHEREUMTokenWhiteListDTOBlockNumber = Nothing
  , uNISWAPV2ETHEREUMTokenWhiteListDTOBlockRange = Nothing
  , uNISWAPV2ETHEREUMTokenWhiteListDTOId = Nothing
  , uNISWAPV2ETHEREUMTokenWhiteListDTOWhitelistPools = Nothing
  }

-- ** UNISWAPV2ETHEREUMTransferDTO
-- | UNISWAPV2ETHEREUMTransferDTO
-- 
data UNISWAPV2ETHEREUMTransferDTO = UNISWAPV2ETHEREUMTransferDTO
  { uNISWAPV2ETHEREUMTransferDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV2ETHEREUMTransferDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV2ETHEREUMTransferDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV2ETHEREUMTransferDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - Entity is used to track data from the transfer events (execution of: deposit/withdraw, mint/burn).
  , uNISWAPV2ETHEREUMTransferDTOId :: !(Maybe Text) -- ^ "id" - Transaction hash.
  , uNISWAPV2ETHEREUMTransferDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - 
  , uNISWAPV2ETHEREUMTransferDTOSender :: !(Maybe Text) -- ^ "sender" - 
  , uNISWAPV2ETHEREUMTransferDTOType :: !(Maybe Text) -- ^ "type" - 
  , uNISWAPV2ETHEREUMTransferDTOLiquidity :: !(Maybe Text) -- ^ "liquidity" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV2ETHEREUMTransferDTO
instance A.FromJSON UNISWAPV2ETHEREUMTransferDTO where
  parseJSON = A.withObject "UNISWAPV2ETHEREUMTransferDTO" $ \o ->
    UNISWAPV2ETHEREUMTransferDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "timestamp")
      <*> (o .:? "sender")
      <*> (o .:? "type")
      <*> (o .:? "liquidity")

-- | ToJSON UNISWAPV2ETHEREUMTransferDTO
instance A.ToJSON UNISWAPV2ETHEREUMTransferDTO where
  toJSON UNISWAPV2ETHEREUMTransferDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV2ETHEREUMTransferDTOEntryTime
      , "recv_time" .= uNISWAPV2ETHEREUMTransferDTORecvTime
      , "block_number" .= uNISWAPV2ETHEREUMTransferDTOBlockNumber
      , "block_range" .= uNISWAPV2ETHEREUMTransferDTOBlockRange
      , "id" .= uNISWAPV2ETHEREUMTransferDTOId
      , "timestamp" .= uNISWAPV2ETHEREUMTransferDTOTimestamp
      , "sender" .= uNISWAPV2ETHEREUMTransferDTOSender
      , "type" .= uNISWAPV2ETHEREUMTransferDTOType
      , "liquidity" .= uNISWAPV2ETHEREUMTransferDTOLiquidity
      ]


-- | Construct a value of type 'UNISWAPV2ETHEREUMTransferDTO' (by applying it's required fields, if any)
mkUNISWAPV2ETHEREUMTransferDTO
  :: UNISWAPV2ETHEREUMTransferDTO
mkUNISWAPV2ETHEREUMTransferDTO =
  UNISWAPV2ETHEREUMTransferDTO
  { uNISWAPV2ETHEREUMTransferDTOEntryTime = Nothing
  , uNISWAPV2ETHEREUMTransferDTORecvTime = Nothing
  , uNISWAPV2ETHEREUMTransferDTOBlockNumber = Nothing
  , uNISWAPV2ETHEREUMTransferDTOBlockRange = Nothing
  , uNISWAPV2ETHEREUMTransferDTOId = Nothing
  , uNISWAPV2ETHEREUMTransferDTOTimestamp = Nothing
  , uNISWAPV2ETHEREUMTransferDTOSender = Nothing
  , uNISWAPV2ETHEREUMTransferDTOType = Nothing
  , uNISWAPV2ETHEREUMTransferDTOLiquidity = Nothing
  }

-- ** UNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO
-- | UNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO
-- 
data UNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO = UNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO
  { uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTOId :: !(Maybe Text) -- ^ "id" - ID is # of days since Unix epoch time
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - Protocol this snapshot is associated with
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTODailyActiveUsers :: !(Maybe Int) -- ^ "daily_active_users" - Number of unique daily active users
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTOCumulativeUniqueUsers :: !(Maybe Int) -- ^ "cumulative_unique_users" - Number of cumulative unique users
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTODailyTransactionCount :: !(Maybe Int) -- ^ "daily_transaction_count" - Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface.
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTODailyDepositCount :: !(Maybe Int) -- ^ "daily_deposit_count" - Total number of deposits (add liquidity) in a day
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTODailyWithdrawCount :: !(Maybe Int) -- ^ "daily_withdraw_count" - Total number of withdrawals (remove liquidity) in a day
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTODailySwapCount :: !(Maybe Int) -- ^ "daily_swap_count" - Total number of trades (swaps) in a day
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTOTotalPoolCount :: !(Maybe Int) -- ^ "total_pool_count" - Total number of pools
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this snapshot
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO
instance A.FromJSON UNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO where
  parseJSON = A.withObject "UNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO" $ \o ->
    UNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "protocol")
      <*> (o .:? "daily_active_users")
      <*> (o .:? "cumulative_unique_users")
      <*> (o .:? "daily_transaction_count")
      <*> (o .:? "daily_deposit_count")
      <*> (o .:? "daily_withdraw_count")
      <*> (o .:? "daily_swap_count")
      <*> (o .:? "total_pool_count")
      <*> (o .:? "timestamp")

-- | ToJSON UNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO
instance A.ToJSON UNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO where
  toJSON UNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTOEntryTime
      , "recv_time" .= uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTORecvTime
      , "block_number" .= uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTOBlockNumber
      , "block_range" .= uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTOBlockRange
      , "id" .= uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTOId
      , "protocol" .= uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTOProtocol
      , "daily_active_users" .= uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTODailyActiveUsers
      , "cumulative_unique_users" .= uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTOCumulativeUniqueUsers
      , "daily_transaction_count" .= uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTODailyTransactionCount
      , "daily_deposit_count" .= uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTODailyDepositCount
      , "daily_withdraw_count" .= uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTODailyWithdrawCount
      , "daily_swap_count" .= uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTODailySwapCount
      , "total_pool_count" .= uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTOTotalPoolCount
      , "timestamp" .= uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'UNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO' (by applying it's required fields, if any)
mkUNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO
  :: UNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO
mkUNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO =
  UNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTO
  { uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTOEntryTime = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTORecvTime = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTOBlockNumber = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTOBlockRange = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTOId = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTOProtocol = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTODailyActiveUsers = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTOCumulativeUniqueUsers = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTODailyTransactionCount = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTODailyDepositCount = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTODailyWithdrawCount = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTODailySwapCount = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTOTotalPoolCount = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsDailySnapshotDTOTimestamp = Nothing
  }

-- ** UNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTO
-- | UNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTO
-- 
data UNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTO = UNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTO
  { uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOId :: !(Maybe Text) -- ^ "id" - # of hours since Unix epoch time
  , uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - Protocol this snapshot is associated with
  , uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOHourlyActiveUsers :: !(Maybe Int) -- ^ "hourly_active_users" - Number of unique hourly active users
  , uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOCumulativeUniqueUsers :: !(Maybe Int) -- ^ "cumulative_unique_users" - Number of cumulative unique users
  , uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOHourlyTransactionCount :: !(Maybe Int) -- ^ "hourly_transaction_count" - Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface.
  , uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOHourlyDepositCount :: !(Maybe Int) -- ^ "hourly_deposit_count" -  Total number of deposits (add liquidity) in an hour
  , uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOHourlyWithdrawCount :: !(Maybe Int) -- ^ "hourly_withdraw_count" - Total number of withdrawals (remove liquidity) in an hour
  , uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOHourlySwapCount :: !(Maybe Int) -- ^ "hourly_swap_count" - Total number of trades (swaps) in an hour
  , uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this snapshot
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTO
instance A.FromJSON UNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTO where
  parseJSON = A.withObject "UNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTO" $ \o ->
    UNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "protocol")
      <*> (o .:? "hourly_active_users")
      <*> (o .:? "cumulative_unique_users")
      <*> (o .:? "hourly_transaction_count")
      <*> (o .:? "hourly_deposit_count")
      <*> (o .:? "hourly_withdraw_count")
      <*> (o .:? "hourly_swap_count")
      <*> (o .:? "timestamp")

-- | ToJSON UNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTO
instance A.ToJSON UNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTO where
  toJSON UNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOEntryTime
      , "recv_time" .= uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTORecvTime
      , "block_number" .= uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOBlockNumber
      , "block_range" .= uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOBlockRange
      , "id" .= uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOId
      , "protocol" .= uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOProtocol
      , "hourly_active_users" .= uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOHourlyActiveUsers
      , "cumulative_unique_users" .= uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOCumulativeUniqueUsers
      , "hourly_transaction_count" .= uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOHourlyTransactionCount
      , "hourly_deposit_count" .= uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOHourlyDepositCount
      , "hourly_withdraw_count" .= uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOHourlyWithdrawCount
      , "hourly_swap_count" .= uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOHourlySwapCount
      , "timestamp" .= uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'UNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTO' (by applying it's required fields, if any)
mkUNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTO
  :: UNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTO
mkUNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTO =
  UNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTO
  { uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOEntryTime = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTORecvTime = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOBlockNumber = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOBlockRange = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOId = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOProtocol = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOHourlyActiveUsers = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOCumulativeUniqueUsers = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOHourlyTransactionCount = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOHourlyDepositCount = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOHourlyWithdrawCount = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOHourlySwapCount = Nothing
  , uNISWAPV2ETHEREUMUsageMetricsHourlySnapshotDTOTimestamp = Nothing
  }

-- ** UNISWAPV2ETHEREUMWithdrawDTO
-- | UNISWAPV2ETHEREUMWithdrawDTO
-- 
data UNISWAPV2ETHEREUMWithdrawDTO = UNISWAPV2ETHEREUMWithdrawDTO
  { uNISWAPV2ETHEREUMWithdrawDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV2ETHEREUMWithdrawDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV2ETHEREUMWithdrawDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV2ETHEREUMWithdrawDTOBlock :: !(Maybe Int) -- ^ "block_" - 
  , uNISWAPV2ETHEREUMWithdrawDTOId :: !(Maybe Text) -- ^ "id" - Withdraw-(transaction hash)-(log index)
  , uNISWAPV2ETHEREUMWithdrawDTOHash :: !(Maybe Text) -- ^ "hash" - Transaction hash of the transaction that emitted this event
  , uNISWAPV2ETHEREUMWithdrawDTOLogIndex :: !(Maybe Int) -- ^ "log_index" - Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0
  , uNISWAPV2ETHEREUMWithdrawDTOProtocol :: !(Maybe Text) -- ^ "protocol" - The protocol this transaction belongs to
  , uNISWAPV2ETHEREUMWithdrawDTOTo :: !(Maybe Text) -- ^ "to" - Address that received the tokens
  , uNISWAPV2ETHEREUMWithdrawDTOFrom :: !(Maybe Text) -- ^ "from" - Address that sent the tokens
  , uNISWAPV2ETHEREUMWithdrawDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this event
  , uNISWAPV2ETHEREUMWithdrawDTOInputTokens :: !(Maybe [Text]) -- ^ "input_tokens" - Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool
  , uNISWAPV2ETHEREUMWithdrawDTOOutputToken :: !(Maybe Text) -- ^ "output_token" - Output token of the pool (not output token of the event/transaction). E.g. the UNI-LP token
  , uNISWAPV2ETHEREUMWithdrawDTOInputTokenAmounts :: !(Maybe [Text]) -- ^ "input_token_amounts" - Amount of input tokens in the token&#39;s native unit
  , uNISWAPV2ETHEREUMWithdrawDTOOutputTokenAmount :: !(Maybe Text) -- ^ "output_token_amount" - Amount of output tokens in the token&#39;s native unit
  , uNISWAPV2ETHEREUMWithdrawDTOReserveAmounts :: !(Maybe [Text]) -- ^ "reserve_amounts" - Amount of input tokens in the liquidity pool
  , uNISWAPV2ETHEREUMWithdrawDTOAmountUsd :: !(Maybe Text) -- ^ "amount_usd" - USD-normalized value of the transaction of the underlying (e.g. sum of tokens withdrawn from a pool)
  , uNISWAPV2ETHEREUMWithdrawDTOPool :: !(Maybe Text) -- ^ "pool" - The pool involving this transaction
  , uNISWAPV2ETHEREUMWithdrawDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV2ETHEREUMWithdrawDTO
instance A.FromJSON UNISWAPV2ETHEREUMWithdrawDTO where
  parseJSON = A.withObject "UNISWAPV2ETHEREUMWithdrawDTO" $ \o ->
    UNISWAPV2ETHEREUMWithdrawDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_")
      <*> (o .:? "id")
      <*> (o .:? "hash")
      <*> (o .:? "log_index")
      <*> (o .:? "protocol")
      <*> (o .:? "to")
      <*> (o .:? "from")
      <*> (o .:? "timestamp")
      <*> (o .:? "input_tokens")
      <*> (o .:? "output_token")
      <*> (o .:? "input_token_amounts")
      <*> (o .:? "output_token_amount")
      <*> (o .:? "reserve_amounts")
      <*> (o .:? "amount_usd")
      <*> (o .:? "pool")
      <*> (o .:? "block_range")

-- | ToJSON UNISWAPV2ETHEREUMWithdrawDTO
instance A.ToJSON UNISWAPV2ETHEREUMWithdrawDTO where
  toJSON UNISWAPV2ETHEREUMWithdrawDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV2ETHEREUMWithdrawDTOEntryTime
      , "recv_time" .= uNISWAPV2ETHEREUMWithdrawDTORecvTime
      , "block_number" .= uNISWAPV2ETHEREUMWithdrawDTOBlockNumber
      , "block_" .= uNISWAPV2ETHEREUMWithdrawDTOBlock
      , "id" .= uNISWAPV2ETHEREUMWithdrawDTOId
      , "hash" .= uNISWAPV2ETHEREUMWithdrawDTOHash
      , "log_index" .= uNISWAPV2ETHEREUMWithdrawDTOLogIndex
      , "protocol" .= uNISWAPV2ETHEREUMWithdrawDTOProtocol
      , "to" .= uNISWAPV2ETHEREUMWithdrawDTOTo
      , "from" .= uNISWAPV2ETHEREUMWithdrawDTOFrom
      , "timestamp" .= uNISWAPV2ETHEREUMWithdrawDTOTimestamp
      , "input_tokens" .= uNISWAPV2ETHEREUMWithdrawDTOInputTokens
      , "output_token" .= uNISWAPV2ETHEREUMWithdrawDTOOutputToken
      , "input_token_amounts" .= uNISWAPV2ETHEREUMWithdrawDTOInputTokenAmounts
      , "output_token_amount" .= uNISWAPV2ETHEREUMWithdrawDTOOutputTokenAmount
      , "reserve_amounts" .= uNISWAPV2ETHEREUMWithdrawDTOReserveAmounts
      , "amount_usd" .= uNISWAPV2ETHEREUMWithdrawDTOAmountUsd
      , "pool" .= uNISWAPV2ETHEREUMWithdrawDTOPool
      , "block_range" .= uNISWAPV2ETHEREUMWithdrawDTOBlockRange
      ]


-- | Construct a value of type 'UNISWAPV2ETHEREUMWithdrawDTO' (by applying it's required fields, if any)
mkUNISWAPV2ETHEREUMWithdrawDTO
  :: UNISWAPV2ETHEREUMWithdrawDTO
mkUNISWAPV2ETHEREUMWithdrawDTO =
  UNISWAPV2ETHEREUMWithdrawDTO
  { uNISWAPV2ETHEREUMWithdrawDTOEntryTime = Nothing
  , uNISWAPV2ETHEREUMWithdrawDTORecvTime = Nothing
  , uNISWAPV2ETHEREUMWithdrawDTOBlockNumber = Nothing
  , uNISWAPV2ETHEREUMWithdrawDTOBlock = Nothing
  , uNISWAPV2ETHEREUMWithdrawDTOId = Nothing
  , uNISWAPV2ETHEREUMWithdrawDTOHash = Nothing
  , uNISWAPV2ETHEREUMWithdrawDTOLogIndex = Nothing
  , uNISWAPV2ETHEREUMWithdrawDTOProtocol = Nothing
  , uNISWAPV2ETHEREUMWithdrawDTOTo = Nothing
  , uNISWAPV2ETHEREUMWithdrawDTOFrom = Nothing
  , uNISWAPV2ETHEREUMWithdrawDTOTimestamp = Nothing
  , uNISWAPV2ETHEREUMWithdrawDTOInputTokens = Nothing
  , uNISWAPV2ETHEREUMWithdrawDTOOutputToken = Nothing
  , uNISWAPV2ETHEREUMWithdrawDTOInputTokenAmounts = Nothing
  , uNISWAPV2ETHEREUMWithdrawDTOOutputTokenAmount = Nothing
  , uNISWAPV2ETHEREUMWithdrawDTOReserveAmounts = Nothing
  , uNISWAPV2ETHEREUMWithdrawDTOAmountUsd = Nothing
  , uNISWAPV2ETHEREUMWithdrawDTOPool = Nothing
  , uNISWAPV2ETHEREUMWithdrawDTOBlockRange = Nothing
  }

-- ** UNISWAPV3ETHEREUMAccountDTO
-- | UNISWAPV3ETHEREUMAccountDTO
data UNISWAPV3ETHEREUMAccountDTO = UNISWAPV3ETHEREUMAccountDTO
  { uNISWAPV3ETHEREUMAccountDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV3ETHEREUMAccountDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV3ETHEREUMAccountDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV3ETHEREUMAccountDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , uNISWAPV3ETHEREUMAccountDTOId :: !(Maybe Text) -- ^ "id" - Account address.
  , uNISWAPV3ETHEREUMAccountDTOPositionCount :: !(Maybe Int) -- ^ "position_count" - Number of positions this account has.
  , uNISWAPV3ETHEREUMAccountDTOOpenPositionCount :: !(Maybe Int) -- ^ "open_position_count" - Number of open positions this account has.
  , uNISWAPV3ETHEREUMAccountDTOClosedPositionCount :: !(Maybe Int) -- ^ "closed_position_count" - Number of closed positions this account has.
  , uNISWAPV3ETHEREUMAccountDTODepositCount :: !(Maybe Int) -- ^ "deposit_count" - Number of deposits this account made.
  , uNISWAPV3ETHEREUMAccountDTOWithdrawCount :: !(Maybe Int) -- ^ "withdraw_count" - Number of withdrawals this account made.
  , uNISWAPV3ETHEREUMAccountDTOSwapCount :: !(Maybe Int) -- ^ "swap_count" - Number of times this account has traded/swapped.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV3ETHEREUMAccountDTO
instance A.FromJSON UNISWAPV3ETHEREUMAccountDTO where
  parseJSON = A.withObject "UNISWAPV3ETHEREUMAccountDTO" $ \o ->
    UNISWAPV3ETHEREUMAccountDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "position_count")
      <*> (o .:? "open_position_count")
      <*> (o .:? "closed_position_count")
      <*> (o .:? "deposit_count")
      <*> (o .:? "withdraw_count")
      <*> (o .:? "swap_count")

-- | ToJSON UNISWAPV3ETHEREUMAccountDTO
instance A.ToJSON UNISWAPV3ETHEREUMAccountDTO where
  toJSON UNISWAPV3ETHEREUMAccountDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV3ETHEREUMAccountDTOEntryTime
      , "recv_time" .= uNISWAPV3ETHEREUMAccountDTORecvTime
      , "block_number" .= uNISWAPV3ETHEREUMAccountDTOBlockNumber
      , "block_range" .= uNISWAPV3ETHEREUMAccountDTOBlockRange
      , "id" .= uNISWAPV3ETHEREUMAccountDTOId
      , "position_count" .= uNISWAPV3ETHEREUMAccountDTOPositionCount
      , "open_position_count" .= uNISWAPV3ETHEREUMAccountDTOOpenPositionCount
      , "closed_position_count" .= uNISWAPV3ETHEREUMAccountDTOClosedPositionCount
      , "deposit_count" .= uNISWAPV3ETHEREUMAccountDTODepositCount
      , "withdraw_count" .= uNISWAPV3ETHEREUMAccountDTOWithdrawCount
      , "swap_count" .= uNISWAPV3ETHEREUMAccountDTOSwapCount
      ]


-- | Construct a value of type 'UNISWAPV3ETHEREUMAccountDTO' (by applying it's required fields, if any)
mkUNISWAPV3ETHEREUMAccountDTO
  :: UNISWAPV3ETHEREUMAccountDTO
mkUNISWAPV3ETHEREUMAccountDTO =
  UNISWAPV3ETHEREUMAccountDTO
  { uNISWAPV3ETHEREUMAccountDTOEntryTime = Nothing
  , uNISWAPV3ETHEREUMAccountDTORecvTime = Nothing
  , uNISWAPV3ETHEREUMAccountDTOBlockNumber = Nothing
  , uNISWAPV3ETHEREUMAccountDTOBlockRange = Nothing
  , uNISWAPV3ETHEREUMAccountDTOId = Nothing
  , uNISWAPV3ETHEREUMAccountDTOPositionCount = Nothing
  , uNISWAPV3ETHEREUMAccountDTOOpenPositionCount = Nothing
  , uNISWAPV3ETHEREUMAccountDTOClosedPositionCount = Nothing
  , uNISWAPV3ETHEREUMAccountDTODepositCount = Nothing
  , uNISWAPV3ETHEREUMAccountDTOWithdrawCount = Nothing
  , uNISWAPV3ETHEREUMAccountDTOSwapCount = Nothing
  }

-- ** UNISWAPV3ETHEREUMActiveAccountDTO
-- | UNISWAPV3ETHEREUMActiveAccountDTO
-- Entity for calculating daily/hourly active users.
data UNISWAPV3ETHEREUMActiveAccountDTO = UNISWAPV3ETHEREUMActiveAccountDTO
  { uNISWAPV3ETHEREUMActiveAccountDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV3ETHEREUMActiveAccountDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV3ETHEREUMActiveAccountDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV3ETHEREUMActiveAccountDTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: (daily/hourly)-(address of the account)-(days/hours since unix epoch)
  , uNISWAPV3ETHEREUMActiveAccountDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV3ETHEREUMActiveAccountDTO
instance A.FromJSON UNISWAPV3ETHEREUMActiveAccountDTO where
  parseJSON = A.withObject "UNISWAPV3ETHEREUMActiveAccountDTO" $ \o ->
    UNISWAPV3ETHEREUMActiveAccountDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "block_range")

-- | ToJSON UNISWAPV3ETHEREUMActiveAccountDTO
instance A.ToJSON UNISWAPV3ETHEREUMActiveAccountDTO where
  toJSON UNISWAPV3ETHEREUMActiveAccountDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV3ETHEREUMActiveAccountDTOEntryTime
      , "recv_time" .= uNISWAPV3ETHEREUMActiveAccountDTORecvTime
      , "block_number" .= uNISWAPV3ETHEREUMActiveAccountDTOBlockNumber
      , "id" .= uNISWAPV3ETHEREUMActiveAccountDTOId
      , "block_range" .= uNISWAPV3ETHEREUMActiveAccountDTOBlockRange
      ]


-- | Construct a value of type 'UNISWAPV3ETHEREUMActiveAccountDTO' (by applying it's required fields, if any)
mkUNISWAPV3ETHEREUMActiveAccountDTO
  :: UNISWAPV3ETHEREUMActiveAccountDTO
mkUNISWAPV3ETHEREUMActiveAccountDTO =
  UNISWAPV3ETHEREUMActiveAccountDTO
  { uNISWAPV3ETHEREUMActiveAccountDTOEntryTime = Nothing
  , uNISWAPV3ETHEREUMActiveAccountDTORecvTime = Nothing
  , uNISWAPV3ETHEREUMActiveAccountDTOBlockNumber = Nothing
  , uNISWAPV3ETHEREUMActiveAccountDTOId = Nothing
  , uNISWAPV3ETHEREUMActiveAccountDTOBlockRange = Nothing
  }

-- ** UNISWAPV3ETHEREUMDepositDTO
-- | UNISWAPV3ETHEREUMDepositDTO
-- Entity represents a user action in the protocol involving the addition of funds to a liquidity pool.
data UNISWAPV3ETHEREUMDepositDTO = UNISWAPV3ETHEREUMDepositDTO
  { uNISWAPV3ETHEREUMDepositDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV3ETHEREUMDepositDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV3ETHEREUMDepositDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV3ETHEREUMDepositDTOBlock :: !(Maybe Int) -- ^ "block_" - 
  , uNISWAPV3ETHEREUMDepositDTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: (transaction hash)-(log index)
  , uNISWAPV3ETHEREUMDepositDTOHash :: !(Maybe Text) -- ^ "hash" - Transaction hash of the transaction that emitted this event.
  , uNISWAPV3ETHEREUMDepositDTONonce :: !(Maybe Text) -- ^ "nonce" - Nonce of the transaction that emitted this event.
  , uNISWAPV3ETHEREUMDepositDTOLogIndex :: !(Maybe Int) -- ^ "log_index" - Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0.
  , uNISWAPV3ETHEREUMDepositDTOGasLimit :: !(Maybe Text) -- ^ "gas_limit" - Gas limit of the transaction that emitted this event.
  , uNISWAPV3ETHEREUMDepositDTOGasUsed :: !(Maybe Text) -- ^ "gas_used" - Gas used in this transaction. (Optional because not every chain will support this).
  , uNISWAPV3ETHEREUMDepositDTOGasPrice :: !(Maybe Text) -- ^ "gas_price" - Gas price of the transaction that emitted this event.
  , uNISWAPV3ETHEREUMDepositDTOProtocol :: !(Maybe Text) -- ^ "protocol" - The protocol this transaction belongs to.
  , uNISWAPV3ETHEREUMDepositDTOAccount :: !(Maybe Text) -- ^ "account" - Account that emitted this event.
  , uNISWAPV3ETHEREUMDepositDTOPosition :: !(Maybe Text) -- ^ "position" - The user position changed by this event.
  , uNISWAPV3ETHEREUMDepositDTOPool :: !(Maybe Text) -- ^ "pool" - The pool involving this event.
  , uNISWAPV3ETHEREUMDepositDTOTickLower :: !(Maybe Text) -- ^ "tick_lower" - Lower tick of position.
  , uNISWAPV3ETHEREUMDepositDTOTickUpper :: !(Maybe Text) -- ^ "tick_upper" - Upper tick of position.
  , uNISWAPV3ETHEREUMDepositDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this event.
  , uNISWAPV3ETHEREUMDepositDTOLiquidity :: !(Maybe Text) -- ^ "liquidity" - Amount of liquidity minted.
  , uNISWAPV3ETHEREUMDepositDTOInputTokens :: !(Maybe [Text]) -- ^ "input_tokens" - Input tokens of the pool. E.g. WETH and USDC to a WETH-USDC pool.
  , uNISWAPV3ETHEREUMDepositDTOInputTokenAmounts :: !(Maybe [Text]) -- ^ "input_token_amounts" - Amount of input tokens in the token&#39;s native unit.
  , uNISWAPV3ETHEREUMDepositDTOReserveAmounts :: !(Maybe [Text]) -- ^ "reserve_amounts" - Amount of input tokens in the liquidity pool.
  , uNISWAPV3ETHEREUMDepositDTOAmountUsd :: !(Maybe Text) -- ^ "amount_usd" - USD-normalized value of the transaction of the underlying (e.g. sum of tokens deposited into a pool).
  , uNISWAPV3ETHEREUMDepositDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV3ETHEREUMDepositDTO
instance A.FromJSON UNISWAPV3ETHEREUMDepositDTO where
  parseJSON = A.withObject "UNISWAPV3ETHEREUMDepositDTO" $ \o ->
    UNISWAPV3ETHEREUMDepositDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_")
      <*> (o .:? "id")
      <*> (o .:? "hash")
      <*> (o .:? "nonce")
      <*> (o .:? "log_index")
      <*> (o .:? "gas_limit")
      <*> (o .:? "gas_used")
      <*> (o .:? "gas_price")
      <*> (o .:? "protocol")
      <*> (o .:? "account")
      <*> (o .:? "position")
      <*> (o .:? "pool")
      <*> (o .:? "tick_lower")
      <*> (o .:? "tick_upper")
      <*> (o .:? "timestamp")
      <*> (o .:? "liquidity")
      <*> (o .:? "input_tokens")
      <*> (o .:? "input_token_amounts")
      <*> (o .:? "reserve_amounts")
      <*> (o .:? "amount_usd")
      <*> (o .:? "block_range")

-- | ToJSON UNISWAPV3ETHEREUMDepositDTO
instance A.ToJSON UNISWAPV3ETHEREUMDepositDTO where
  toJSON UNISWAPV3ETHEREUMDepositDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV3ETHEREUMDepositDTOEntryTime
      , "recv_time" .= uNISWAPV3ETHEREUMDepositDTORecvTime
      , "block_number" .= uNISWAPV3ETHEREUMDepositDTOBlockNumber
      , "block_" .= uNISWAPV3ETHEREUMDepositDTOBlock
      , "id" .= uNISWAPV3ETHEREUMDepositDTOId
      , "hash" .= uNISWAPV3ETHEREUMDepositDTOHash
      , "nonce" .= uNISWAPV3ETHEREUMDepositDTONonce
      , "log_index" .= uNISWAPV3ETHEREUMDepositDTOLogIndex
      , "gas_limit" .= uNISWAPV3ETHEREUMDepositDTOGasLimit
      , "gas_used" .= uNISWAPV3ETHEREUMDepositDTOGasUsed
      , "gas_price" .= uNISWAPV3ETHEREUMDepositDTOGasPrice
      , "protocol" .= uNISWAPV3ETHEREUMDepositDTOProtocol
      , "account" .= uNISWAPV3ETHEREUMDepositDTOAccount
      , "position" .= uNISWAPV3ETHEREUMDepositDTOPosition
      , "pool" .= uNISWAPV3ETHEREUMDepositDTOPool
      , "tick_lower" .= uNISWAPV3ETHEREUMDepositDTOTickLower
      , "tick_upper" .= uNISWAPV3ETHEREUMDepositDTOTickUpper
      , "timestamp" .= uNISWAPV3ETHEREUMDepositDTOTimestamp
      , "liquidity" .= uNISWAPV3ETHEREUMDepositDTOLiquidity
      , "input_tokens" .= uNISWAPV3ETHEREUMDepositDTOInputTokens
      , "input_token_amounts" .= uNISWAPV3ETHEREUMDepositDTOInputTokenAmounts
      , "reserve_amounts" .= uNISWAPV3ETHEREUMDepositDTOReserveAmounts
      , "amount_usd" .= uNISWAPV3ETHEREUMDepositDTOAmountUsd
      , "block_range" .= uNISWAPV3ETHEREUMDepositDTOBlockRange
      ]


-- | Construct a value of type 'UNISWAPV3ETHEREUMDepositDTO' (by applying it's required fields, if any)
mkUNISWAPV3ETHEREUMDepositDTO
  :: UNISWAPV3ETHEREUMDepositDTO
mkUNISWAPV3ETHEREUMDepositDTO =
  UNISWAPV3ETHEREUMDepositDTO
  { uNISWAPV3ETHEREUMDepositDTOEntryTime = Nothing
  , uNISWAPV3ETHEREUMDepositDTORecvTime = Nothing
  , uNISWAPV3ETHEREUMDepositDTOBlockNumber = Nothing
  , uNISWAPV3ETHEREUMDepositDTOBlock = Nothing
  , uNISWAPV3ETHEREUMDepositDTOId = Nothing
  , uNISWAPV3ETHEREUMDepositDTOHash = Nothing
  , uNISWAPV3ETHEREUMDepositDTONonce = Nothing
  , uNISWAPV3ETHEREUMDepositDTOLogIndex = Nothing
  , uNISWAPV3ETHEREUMDepositDTOGasLimit = Nothing
  , uNISWAPV3ETHEREUMDepositDTOGasUsed = Nothing
  , uNISWAPV3ETHEREUMDepositDTOGasPrice = Nothing
  , uNISWAPV3ETHEREUMDepositDTOProtocol = Nothing
  , uNISWAPV3ETHEREUMDepositDTOAccount = Nothing
  , uNISWAPV3ETHEREUMDepositDTOPosition = Nothing
  , uNISWAPV3ETHEREUMDepositDTOPool = Nothing
  , uNISWAPV3ETHEREUMDepositDTOTickLower = Nothing
  , uNISWAPV3ETHEREUMDepositDTOTickUpper = Nothing
  , uNISWAPV3ETHEREUMDepositDTOTimestamp = Nothing
  , uNISWAPV3ETHEREUMDepositDTOLiquidity = Nothing
  , uNISWAPV3ETHEREUMDepositDTOInputTokens = Nothing
  , uNISWAPV3ETHEREUMDepositDTOInputTokenAmounts = Nothing
  , uNISWAPV3ETHEREUMDepositDTOReserveAmounts = Nothing
  , uNISWAPV3ETHEREUMDepositDTOAmountUsd = Nothing
  , uNISWAPV3ETHEREUMDepositDTOBlockRange = Nothing
  }

-- ** UNISWAPV3ETHEREUMDexAmmProtocolDTO
-- | UNISWAPV3ETHEREUMDexAmmProtocolDTO
--  Decentralized exchange (Dex) automated market maker (Amm) protocol. It's an entity that represents a protocol involving a smart contract that use automated market makers.
data UNISWAPV3ETHEREUMDexAmmProtocolDTO = UNISWAPV3ETHEREUMDexAmmProtocolDTO
  { uNISWAPV3ETHEREUMDexAmmProtocolDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV3ETHEREUMDexAmmProtocolDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOId :: !(Maybe Text) -- ^ "id" - Smart contract address of the protocol&#39;s main contract (Factory, Registry, etc).
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOName :: !(Maybe Text) -- ^ "name" - Name of the protocol, including version. e.g. Uniswap v3.
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOSlug :: !(Maybe Text) -- ^ "slug" - Slug of protocol, including version. e.g. uniswap-v3.
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOSchemaVersion :: !(Maybe Text) -- ^ "schema_version" - Version of the subgraph schema, in SemVer format (e.g. 1.0.0).
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOSubgraphVersion :: !(Maybe Text) -- ^ "subgraph_version" - Version of the subgraph implementation, in SemVer format (e.g. 1.0.0).
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOMethodologyVersion :: !(Maybe Text) -- ^ "methodology_version" - Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0).
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of the entire protocol.
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOTotalLiquidityUsd :: !(Maybe Text) -- ^ "total_liquidity_usd" - The sum of all active and non-active liquidity in USD for this pool.
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOActiveLiquidityUsd :: !(Maybe Text) -- ^ "active_liquidity_usd" - All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOUncollectedProtocolSideValueUsd :: !(Maybe Text) -- ^ "uncollected_protocol_side_value_usd" - All protocol-side value locking in USD that remains uncollected and unused in the protocol.
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOUncollectedSupplySideValueUsd :: !(Maybe Text) -- ^ "uncollected_supply_side_value_usd" - All supply-side value locking in USD that remains uncollected and unused in the protocol.
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOProtocolControlledValueUsd :: !(Maybe Text) -- ^ "protocol_controlled_value_usd" - Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All historical volume in USD.
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" - All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueUsers :: !(Maybe Int) -- ^ "cumulative_unique_users" - Number of cumulative unique users.
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueLps :: !(Maybe Int) -- ^ "cumulative_unique_l_ps" - Number of cumulative liquidity providers.
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueTraders :: !(Maybe Int) -- ^ "cumulative_unique_traders" - Number of cumulative traders
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOTotalPoolCount :: !(Maybe Int) -- ^ "total_pool_count" - Total number of pools.
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOOpenPositionCount :: !(Maybe Int) -- ^ "open_position_count" - Total number of open positions.
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOCumulativePositionCount :: !(Maybe Int) -- ^ "cumulative_position_count" - Total number of positions (open and closed).
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOLastSnapshotDayId :: !(Maybe Int) -- ^ "last_snapshot_day_id" - Day ID of the most recent daily snapshot.
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOLastUpdateTimestamp :: !(Maybe Text) -- ^ "last_update_timestamp" - Timestamp of the last time this entity was updated
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOLastUpdateBlockNumber :: !(Maybe Text) -- ^ "last_update_block_number" - Block number of the last time this entity was updated.
  , uNISWAPV3ETHEREUMDexAmmProtocolDTORegenesis :: !(Maybe Bool) -- ^ "regenesis" - This is a boolean to indicate whether or not the pools have been instantiated the were initialized before Optimism regenesis.
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV3ETHEREUMDexAmmProtocolDTO
instance A.FromJSON UNISWAPV3ETHEREUMDexAmmProtocolDTO where
  parseJSON = A.withObject "UNISWAPV3ETHEREUMDexAmmProtocolDTO" $ \o ->
    UNISWAPV3ETHEREUMDexAmmProtocolDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "name")
      <*> (o .:? "slug")
      <*> (o .:? "schema_version")
      <*> (o .:? "subgraph_version")
      <*> (o .:? "methodology_version")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "total_liquidity_usd")
      <*> (o .:? "active_liquidity_usd")
      <*> (o .:? "uncollected_protocol_side_value_usd")
      <*> (o .:? "uncollected_supply_side_value_usd")
      <*> (o .:? "protocol_controlled_value_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "cumulative_unique_users")
      <*> (o .:? "cumulative_unique_l_ps")
      <*> (o .:? "cumulative_unique_traders")
      <*> (o .:? "total_pool_count")
      <*> (o .:? "open_position_count")
      <*> (o .:? "cumulative_position_count")
      <*> (o .:? "last_snapshot_day_id")
      <*> (o .:? "last_update_timestamp")
      <*> (o .:? "last_update_block_number")
      <*> (o .:? "regenesis")

-- | ToJSON UNISWAPV3ETHEREUMDexAmmProtocolDTO
instance A.ToJSON UNISWAPV3ETHEREUMDexAmmProtocolDTO where
  toJSON UNISWAPV3ETHEREUMDexAmmProtocolDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOEntryTime
      , "recv_time" .= uNISWAPV3ETHEREUMDexAmmProtocolDTORecvTime
      , "block_number" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOBlockNumber
      , "block_range" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOBlockRange
      , "id" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOId
      , "name" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOName
      , "slug" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOSlug
      , "schema_version" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOSchemaVersion
      , "subgraph_version" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOSubgraphVersion
      , "methodology_version" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOMethodologyVersion
      , "total_value_locked_usd" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOTotalValueLockedUsd
      , "total_liquidity_usd" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOTotalLiquidityUsd
      , "active_liquidity_usd" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOActiveLiquidityUsd
      , "uncollected_protocol_side_value_usd" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOUncollectedProtocolSideValueUsd
      , "uncollected_supply_side_value_usd" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOUncollectedSupplySideValueUsd
      , "protocol_controlled_value_usd" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOProtocolControlledValueUsd
      , "cumulative_volume_usd" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeVolumeUsd
      , "cumulative_supply_side_revenue_usd" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeSupplySideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeProtocolSideRevenueUsd
      , "cumulative_total_revenue_usd" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeTotalRevenueUsd
      , "cumulative_unique_users" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueUsers
      , "cumulative_unique_l_ps" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueLps
      , "cumulative_unique_traders" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueTraders
      , "total_pool_count" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOTotalPoolCount
      , "open_position_count" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOOpenPositionCount
      , "cumulative_position_count" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOCumulativePositionCount
      , "last_snapshot_day_id" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOLastSnapshotDayId
      , "last_update_timestamp" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOLastUpdateTimestamp
      , "last_update_block_number" .= uNISWAPV3ETHEREUMDexAmmProtocolDTOLastUpdateBlockNumber
      , "regenesis" .= uNISWAPV3ETHEREUMDexAmmProtocolDTORegenesis
      ]


-- | Construct a value of type 'UNISWAPV3ETHEREUMDexAmmProtocolDTO' (by applying it's required fields, if any)
mkUNISWAPV3ETHEREUMDexAmmProtocolDTO
  :: UNISWAPV3ETHEREUMDexAmmProtocolDTO
mkUNISWAPV3ETHEREUMDexAmmProtocolDTO =
  UNISWAPV3ETHEREUMDexAmmProtocolDTO
  { uNISWAPV3ETHEREUMDexAmmProtocolDTOEntryTime = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTORecvTime = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOBlockNumber = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOBlockRange = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOId = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOName = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOSlug = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOSchemaVersion = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOSubgraphVersion = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOMethodologyVersion = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOTotalValueLockedUsd = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOTotalLiquidityUsd = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOActiveLiquidityUsd = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOUncollectedProtocolSideValueUsd = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOUncollectedSupplySideValueUsd = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOProtocolControlledValueUsd = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeVolumeUsd = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeSupplySideRevenueUsd = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeProtocolSideRevenueUsd = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeTotalRevenueUsd = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueUsers = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueLps = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOCumulativeUniqueTraders = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOTotalPoolCount = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOOpenPositionCount = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOCumulativePositionCount = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOLastSnapshotDayId = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOLastUpdateTimestamp = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTOLastUpdateBlockNumber = Nothing
  , uNISWAPV3ETHEREUMDexAmmProtocolDTORegenesis = Nothing
  }

-- ** UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO
-- | UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO
-- Daily financial metrics for Uniswap V3.
data UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO = UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO
  { uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOId :: !(Maybe Text) -- ^ "id" - ID is # of days since Unix epoch time.
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTODay :: !(Maybe Int) -- ^ "day" - Number of days since Unix epoch time.
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - Protocol this snapshot is associated with.
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of the entire protocol.
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOTotalLiquidityUsd :: !(Maybe Text) -- ^ "total_liquidity_usd" - The sum of all active and non-active liquidity in USD for this pool.
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOActiveLiquidityUsd :: !(Maybe Text) -- ^ "active_liquidity_usd" - All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pool&#39;s current tick.
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOUncollectedProtocolSideValueUsd :: !(Maybe Text) -- ^ "uncollected_protocol_side_value_usd" - All protocol-side value locking in USD that remains uncollected and unused in the protocol.
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOUncollectedSupplySideValueUsd :: !(Maybe Text) -- ^ "uncollected_supply_side_value_usd" - All supply-side value locking in USD that remains uncollected and unused in the protocol.
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOProtocolControlledValueUsd :: !(Maybe Text) -- ^ "protocol_controlled_value_usd" - Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTODailyVolumeUsd :: !(Maybe Text) -- ^ "daily_volume_usd" - All trade volume occurred in a given day, in USD
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All historical trade volume in USD
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTODailySupplySideRevenueUsd :: !(Maybe Text) -- ^ "daily_supply_side_revenue_usd" - Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTODailyProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "daily_protocol_side_revenue_usd" - Gross revenue for the protocol (revenue claimed by the protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - Gross revenue for the protocol (revenue claimed by the protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTODailyTotalRevenueUsd :: !(Maybe Text) -- ^ "daily_total_revenue_usd" - All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" - All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of when this snapshot was taken/last modified (May be taken after the interval has passed).
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO
instance A.FromJSON UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO where
  parseJSON = A.withObject "UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO" $ \o ->
    UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "day")
      <*> (o .:? "protocol")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "total_liquidity_usd")
      <*> (o .:? "active_liquidity_usd")
      <*> (o .:? "uncollected_protocol_side_value_usd")
      <*> (o .:? "uncollected_supply_side_value_usd")
      <*> (o .:? "protocol_controlled_value_usd")
      <*> (o .:? "daily_volume_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "daily_supply_side_revenue_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "daily_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "daily_total_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "timestamp")

-- | ToJSON UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO
instance A.ToJSON UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO where
  toJSON UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOEntryTime
      , "recv_time" .= uNISWAPV3ETHEREUMFinancialsDailySnapshotDTORecvTime
      , "block_number" .= uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOBlockNumber
      , "id" .= uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOId
      , "day" .= uNISWAPV3ETHEREUMFinancialsDailySnapshotDTODay
      , "protocol" .= uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOProtocol
      , "total_value_locked_usd" .= uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOTotalValueLockedUsd
      , "total_liquidity_usd" .= uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOTotalLiquidityUsd
      , "active_liquidity_usd" .= uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOActiveLiquidityUsd
      , "uncollected_protocol_side_value_usd" .= uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOUncollectedProtocolSideValueUsd
      , "uncollected_supply_side_value_usd" .= uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOUncollectedSupplySideValueUsd
      , "protocol_controlled_value_usd" .= uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOProtocolControlledValueUsd
      , "daily_volume_usd" .= uNISWAPV3ETHEREUMFinancialsDailySnapshotDTODailyVolumeUsd
      , "cumulative_volume_usd" .= uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeVolumeUsd
      , "daily_supply_side_revenue_usd" .= uNISWAPV3ETHEREUMFinancialsDailySnapshotDTODailySupplySideRevenueUsd
      , "cumulative_supply_side_revenue_usd" .= uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeSupplySideRevenueUsd
      , "daily_protocol_side_revenue_usd" .= uNISWAPV3ETHEREUMFinancialsDailySnapshotDTODailyProtocolSideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeProtocolSideRevenueUsd
      , "daily_total_revenue_usd" .= uNISWAPV3ETHEREUMFinancialsDailySnapshotDTODailyTotalRevenueUsd
      , "cumulative_total_revenue_usd" .= uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeTotalRevenueUsd
      , "timestamp" .= uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO' (by applying it's required fields, if any)
mkUNISWAPV3ETHEREUMFinancialsDailySnapshotDTO
  :: UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO
mkUNISWAPV3ETHEREUMFinancialsDailySnapshotDTO =
  UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO
  { uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOEntryTime = Nothing
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTORecvTime = Nothing
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOBlockNumber = Nothing
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOId = Nothing
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTODay = Nothing
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOProtocol = Nothing
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOTotalValueLockedUsd = Nothing
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOTotalLiquidityUsd = Nothing
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOActiveLiquidityUsd = Nothing
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOUncollectedProtocolSideValueUsd = Nothing
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOUncollectedSupplySideValueUsd = Nothing
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOProtocolControlledValueUsd = Nothing
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTODailyVolumeUsd = Nothing
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeVolumeUsd = Nothing
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTODailySupplySideRevenueUsd = Nothing
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeSupplySideRevenueUsd = Nothing
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTODailyProtocolSideRevenueUsd = Nothing
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeProtocolSideRevenueUsd = Nothing
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTODailyTotalRevenueUsd = Nothing
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOCumulativeTotalRevenueUsd = Nothing
  , uNISWAPV3ETHEREUMFinancialsDailySnapshotDTOTimestamp = Nothing
  }

-- ** UNISWAPV3ETHEREUMLiquidityPoolAmountDTO
-- | UNISWAPV3ETHEREUMLiquidityPoolAmountDTO
-- 
data UNISWAPV3ETHEREUMLiquidityPoolAmountDTO = UNISWAPV3ETHEREUMLiquidityPoolAmountDTO
  { uNISWAPV3ETHEREUMLiquidityPoolAmountDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV3ETHEREUMLiquidityPoolAmountDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV3ETHEREUMLiquidityPoolAmountDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV3ETHEREUMLiquidityPoolAmountDTOVid :: !(Maybe Integer) -- ^ "vid" - .
  , uNISWAPV3ETHEREUMLiquidityPoolAmountDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , uNISWAPV3ETHEREUMLiquidityPoolAmountDTOId :: !(Maybe Text) -- ^ "id" - Smart contract address of the pool.
  , uNISWAPV3ETHEREUMLiquidityPoolAmountDTOInputTokens :: !(Maybe [Text]) -- ^ "input_tokens" - Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool.
  , uNISWAPV3ETHEREUMLiquidityPoolAmountDTOInputTokenBalances :: !(Maybe [Text]) -- ^ "input_token_balances" - Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , uNISWAPV3ETHEREUMLiquidityPoolAmountDTOTokenPrices :: !(Maybe [Text]) -- ^ "token_prices" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV3ETHEREUMLiquidityPoolAmountDTO
instance A.FromJSON UNISWAPV3ETHEREUMLiquidityPoolAmountDTO where
  parseJSON = A.withObject "UNISWAPV3ETHEREUMLiquidityPoolAmountDTO" $ \o ->
    UNISWAPV3ETHEREUMLiquidityPoolAmountDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "input_tokens")
      <*> (o .:? "input_token_balances")
      <*> (o .:? "token_prices")

-- | ToJSON UNISWAPV3ETHEREUMLiquidityPoolAmountDTO
instance A.ToJSON UNISWAPV3ETHEREUMLiquidityPoolAmountDTO where
  toJSON UNISWAPV3ETHEREUMLiquidityPoolAmountDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV3ETHEREUMLiquidityPoolAmountDTOEntryTime
      , "recv_time" .= uNISWAPV3ETHEREUMLiquidityPoolAmountDTORecvTime
      , "block_number" .= uNISWAPV3ETHEREUMLiquidityPoolAmountDTOBlockNumber
      , "vid" .= uNISWAPV3ETHEREUMLiquidityPoolAmountDTOVid
      , "block_range" .= uNISWAPV3ETHEREUMLiquidityPoolAmountDTOBlockRange
      , "id" .= uNISWAPV3ETHEREUMLiquidityPoolAmountDTOId
      , "input_tokens" .= uNISWAPV3ETHEREUMLiquidityPoolAmountDTOInputTokens
      , "input_token_balances" .= uNISWAPV3ETHEREUMLiquidityPoolAmountDTOInputTokenBalances
      , "token_prices" .= uNISWAPV3ETHEREUMLiquidityPoolAmountDTOTokenPrices
      ]


-- | Construct a value of type 'UNISWAPV3ETHEREUMLiquidityPoolAmountDTO' (by applying it's required fields, if any)
mkUNISWAPV3ETHEREUMLiquidityPoolAmountDTO
  :: UNISWAPV3ETHEREUMLiquidityPoolAmountDTO
mkUNISWAPV3ETHEREUMLiquidityPoolAmountDTO =
  UNISWAPV3ETHEREUMLiquidityPoolAmountDTO
  { uNISWAPV3ETHEREUMLiquidityPoolAmountDTOEntryTime = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolAmountDTORecvTime = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolAmountDTOBlockNumber = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolAmountDTOVid = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolAmountDTOBlockRange = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolAmountDTOId = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolAmountDTOInputTokens = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolAmountDTOInputTokenBalances = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolAmountDTOTokenPrices = Nothing
  }

-- ** UNISWAPV3ETHEREUMLiquidityPoolDTO
-- | UNISWAPV3ETHEREUMLiquidityPoolDTO
-- Pool-level metadata.
data UNISWAPV3ETHEREUMLiquidityPoolDTO = UNISWAPV3ETHEREUMLiquidityPoolDTO
  { uNISWAPV3ETHEREUMLiquidityPoolDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV3ETHEREUMLiquidityPoolDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV3ETHEREUMLiquidityPoolDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOVid :: !(Maybe Integer) -- ^ "vid" - .
  , uNISWAPV3ETHEREUMLiquidityPoolDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - Block range of the liquidity pool.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOId :: !(Maybe Text) -- ^ "id" - Smart contract address of the pool.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOProtocol :: !(Maybe Text) -- ^ "protocol" - Protocol this pool belongs to.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOName :: !(Maybe Text) -- ^ "name" - Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT).
  , uNISWAPV3ETHEREUMLiquidityPoolDTOSymbol :: !(Maybe Text) -- ^ "symbol" - Symbol of liquidity pool (e.g. 3CRV).
  , uNISWAPV3ETHEREUMLiquidityPoolDTOLiquidityToken :: !(Maybe Text) -- ^ "liquidity_token" - Token that is to represent ownership of liquidity.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOInputTokens :: !(Maybe [Text]) -- ^ "input_tokens" - Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer.
  , uNISWAPV3ETHEREUMLiquidityPoolDTORewardTokens :: !(Maybe [Text]) -- ^ "reward_tokens" - Additional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOFees :: !(Maybe [Text]) -- ^ "fees" - Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee.).
  , uNISWAPV3ETHEREUMLiquidityPoolDTOIsSingleSided :: !(Maybe Bool) -- ^ "is_single_sided" - Specifies whether this pool is single-sided (e.g. Bancor, Platypus&#39;s Alternative Pool). The specifics of the implementation depends on the protocol.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOCreatedTimestamp :: !(Maybe Text) -- ^ "created_timestamp" - Timestamp when the liquidity pool was created.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOCreatedBlockNumber :: !(Maybe Text) -- ^ "created_block_number" - Block number when the liquidity pool was created.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOTick :: !(Maybe Text) -- ^ "tick" - Current tick representing the price of token0/token1.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of this pool in USD.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOTotalLiquidity :: !(Maybe Text) -- ^ "total_liquidity" - Sum of all active and non-active liquidity for this pool.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOTotalLiquidityUsd :: !(Maybe Text) -- ^ "total_liquidity_usd" - Sum of all active and non-active liquidity in USD for this pool.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOActiveLiquidity :: !(Maybe Text) -- ^ "active_liquidity" - All liquidity &#x60;k&#x60; that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOActiveLiquidityUsd :: !(Maybe Text) -- ^ "active_liquidity_usd" - All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOUncollectedProtocolSideTokenAmounts :: !(Maybe [Text]) -- ^ "uncollected_protocol_side_token_amounts" - All protocol-side value locked in token amounts that remains uncollected and unused in the pool.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOUncollectedProtocolSideValuesUsd :: !(Maybe [Text]) -- ^ "uncollected_protocol_side_values_usd" - All protocol-side value locking in USD that remains uncollected and unused in the pool.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOUncollectedSupplySideTokenAmounts :: !(Maybe [Text]) -- ^ "uncollected_supply_side_token_amounts" - All supply-side value locked in token amounts that remains uncollected and unused in the pool.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOUncollectedSupplySideValuesUsd :: !(Maybe [Text]) -- ^ "uncollected_supply_side_values_usd" - All supply-side value locked in USD that remains uncollected and unused in the pool.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the supply side.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the protocol.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" -  All revenue generated by the liquidity pool.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeByTokenAmount :: !(Maybe [Text]) -- ^ "cumulative_volume_by_token_amount" - All trade volume occurred for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeByTokenUsd :: !(Maybe [Text]) -- ^ "cumulative_volume_by_token_usd" - All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All trade volume occurred for a specific input token, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOInputTokenBalances :: !(Maybe [Text]) -- ^ "input_token_balances" - Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOInputTokenBalancesUsd :: !(Maybe [Text]) -- ^ "input_token_balances_usd" - Amount of input tokens in USD in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOInputTokenWeights :: !(Maybe [Text]) -- ^ "input_token_weights" - Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOStakedOutputTokenAmount :: !(Maybe Text) -- ^ "staked_output_token_amount" - Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
  , uNISWAPV3ETHEREUMLiquidityPoolDTORewardTokenEmissionsAmount :: !(Maybe [Text]) -- ^ "reward_token_emissions_amount" - Per-block reward token emission as of the current block normalized to a day, in token&#39;s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
  , uNISWAPV3ETHEREUMLiquidityPoolDTORewardTokenEmissionsUsd :: !(Maybe [Text]) -- ^ "reward_token_emissions_usd" - Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeDepositCount :: !(Maybe Int) -- ^ "cumulative_deposit_count" - Total number of deposits (add liquidity).
  , uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeWithdrawCount :: !(Maybe Int) -- ^ "cumulative_withdraw_count" - Total number of withdrawals (remove liquidity).
  , uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeSwapCount :: !(Maybe Int) -- ^ "cumulative_swap_count" - Total number of trades (swaps).
  , uNISWAPV3ETHEREUMLiquidityPoolDTOPositionCount :: !(Maybe Int) -- ^ "position_count" - Number of positions in this market.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOOpenPositionCount :: !(Maybe Int) -- ^ "open_position_count" - Number of open positions in this market.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOClosedPositionCount :: !(Maybe Int) -- ^ "closed_position_count" - Number of closed positions in this market.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOLastSnapshotDayId :: !(Maybe Int) -- ^ "last_snapshot_day_id" - Day ID of the most recent daily snapshot.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOLastSnapshotHourId :: !(Maybe Int) -- ^ "last_snapshot_hour_id" - Hour ID of the most recent hourly snapshot.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOLastUpdateTimestamp :: !(Maybe Text) -- ^ "last_update_timestamp" - Timestamp of the last time this entity was updated.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOLastUpdateBlockNumber :: !(Maybe Text) -- ^ "last_update_block_number" - Block number of the last time this entity was updated.
  , uNISWAPV3ETHEREUMLiquidityPoolDTOEvaluatedAsk :: !(Maybe Double) -- ^ /ReadOnly/ "evaluated_ask" - 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV3ETHEREUMLiquidityPoolDTO
instance A.FromJSON UNISWAPV3ETHEREUMLiquidityPoolDTO where
  parseJSON = A.withObject "UNISWAPV3ETHEREUMLiquidityPoolDTO" $ \o ->
    UNISWAPV3ETHEREUMLiquidityPoolDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "protocol")
      <*> (o .:? "name")
      <*> (o .:? "symbol")
      <*> (o .:? "liquidity_token")
      <*> (o .:? "input_tokens")
      <*> (o .:? "reward_tokens")
      <*> (o .:? "fees")
      <*> (o .:? "is_single_sided")
      <*> (o .:? "created_timestamp")
      <*> (o .:? "created_block_number")
      <*> (o .:? "tick")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "total_liquidity")
      <*> (o .:? "total_liquidity_usd")
      <*> (o .:? "active_liquidity")
      <*> (o .:? "active_liquidity_usd")
      <*> (o .:? "uncollected_protocol_side_token_amounts")
      <*> (o .:? "uncollected_protocol_side_values_usd")
      <*> (o .:? "uncollected_supply_side_token_amounts")
      <*> (o .:? "uncollected_supply_side_values_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "cumulative_volume_by_token_amount")
      <*> (o .:? "cumulative_volume_by_token_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "input_token_balances")
      <*> (o .:? "input_token_balances_usd")
      <*> (o .:? "input_token_weights")
      <*> (o .:? "staked_output_token_amount")
      <*> (o .:? "reward_token_emissions_amount")
      <*> (o .:? "reward_token_emissions_usd")
      <*> (o .:? "cumulative_deposit_count")
      <*> (o .:? "cumulative_withdraw_count")
      <*> (o .:? "cumulative_swap_count")
      <*> (o .:? "position_count")
      <*> (o .:? "open_position_count")
      <*> (o .:? "closed_position_count")
      <*> (o .:? "last_snapshot_day_id")
      <*> (o .:? "last_snapshot_hour_id")
      <*> (o .:? "last_update_timestamp")
      <*> (o .:? "last_update_block_number")
      <*> (o .:? "evaluated_ask")

-- | ToJSON UNISWAPV3ETHEREUMLiquidityPoolDTO
instance A.ToJSON UNISWAPV3ETHEREUMLiquidityPoolDTO where
  toJSON UNISWAPV3ETHEREUMLiquidityPoolDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV3ETHEREUMLiquidityPoolDTOEntryTime
      , "recv_time" .= uNISWAPV3ETHEREUMLiquidityPoolDTORecvTime
      , "block_number" .= uNISWAPV3ETHEREUMLiquidityPoolDTOBlockNumber
      , "vid" .= uNISWAPV3ETHEREUMLiquidityPoolDTOVid
      , "block_range" .= uNISWAPV3ETHEREUMLiquidityPoolDTOBlockRange
      , "id" .= uNISWAPV3ETHEREUMLiquidityPoolDTOId
      , "protocol" .= uNISWAPV3ETHEREUMLiquidityPoolDTOProtocol
      , "name" .= uNISWAPV3ETHEREUMLiquidityPoolDTOName
      , "symbol" .= uNISWAPV3ETHEREUMLiquidityPoolDTOSymbol
      , "liquidity_token" .= uNISWAPV3ETHEREUMLiquidityPoolDTOLiquidityToken
      , "input_tokens" .= uNISWAPV3ETHEREUMLiquidityPoolDTOInputTokens
      , "reward_tokens" .= uNISWAPV3ETHEREUMLiquidityPoolDTORewardTokens
      , "fees" .= uNISWAPV3ETHEREUMLiquidityPoolDTOFees
      , "is_single_sided" .= uNISWAPV3ETHEREUMLiquidityPoolDTOIsSingleSided
      , "created_timestamp" .= uNISWAPV3ETHEREUMLiquidityPoolDTOCreatedTimestamp
      , "created_block_number" .= uNISWAPV3ETHEREUMLiquidityPoolDTOCreatedBlockNumber
      , "tick" .= uNISWAPV3ETHEREUMLiquidityPoolDTOTick
      , "total_value_locked_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDTOTotalValueLockedUsd
      , "total_liquidity" .= uNISWAPV3ETHEREUMLiquidityPoolDTOTotalLiquidity
      , "total_liquidity_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDTOTotalLiquidityUsd
      , "active_liquidity" .= uNISWAPV3ETHEREUMLiquidityPoolDTOActiveLiquidity
      , "active_liquidity_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDTOActiveLiquidityUsd
      , "uncollected_protocol_side_token_amounts" .= uNISWAPV3ETHEREUMLiquidityPoolDTOUncollectedProtocolSideTokenAmounts
      , "uncollected_protocol_side_values_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDTOUncollectedProtocolSideValuesUsd
      , "uncollected_supply_side_token_amounts" .= uNISWAPV3ETHEREUMLiquidityPoolDTOUncollectedSupplySideTokenAmounts
      , "uncollected_supply_side_values_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDTOUncollectedSupplySideValuesUsd
      , "cumulative_supply_side_revenue_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeSupplySideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeProtocolSideRevenueUsd
      , "cumulative_total_revenue_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeTotalRevenueUsd
      , "cumulative_volume_by_token_amount" .= uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeByTokenAmount
      , "cumulative_volume_by_token_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeByTokenUsd
      , "cumulative_volume_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeUsd
      , "input_token_balances" .= uNISWAPV3ETHEREUMLiquidityPoolDTOInputTokenBalances
      , "input_token_balances_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDTOInputTokenBalancesUsd
      , "input_token_weights" .= uNISWAPV3ETHEREUMLiquidityPoolDTOInputTokenWeights
      , "staked_output_token_amount" .= uNISWAPV3ETHEREUMLiquidityPoolDTOStakedOutputTokenAmount
      , "reward_token_emissions_amount" .= uNISWAPV3ETHEREUMLiquidityPoolDTORewardTokenEmissionsAmount
      , "reward_token_emissions_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDTORewardTokenEmissionsUsd
      , "cumulative_deposit_count" .= uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeDepositCount
      , "cumulative_withdraw_count" .= uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeWithdrawCount
      , "cumulative_swap_count" .= uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeSwapCount
      , "position_count" .= uNISWAPV3ETHEREUMLiquidityPoolDTOPositionCount
      , "open_position_count" .= uNISWAPV3ETHEREUMLiquidityPoolDTOOpenPositionCount
      , "closed_position_count" .= uNISWAPV3ETHEREUMLiquidityPoolDTOClosedPositionCount
      , "last_snapshot_day_id" .= uNISWAPV3ETHEREUMLiquidityPoolDTOLastSnapshotDayId
      , "last_snapshot_hour_id" .= uNISWAPV3ETHEREUMLiquidityPoolDTOLastSnapshotHourId
      , "last_update_timestamp" .= uNISWAPV3ETHEREUMLiquidityPoolDTOLastUpdateTimestamp
      , "last_update_block_number" .= uNISWAPV3ETHEREUMLiquidityPoolDTOLastUpdateBlockNumber
      , "evaluated_ask" .= uNISWAPV3ETHEREUMLiquidityPoolDTOEvaluatedAsk
      ]


-- | Construct a value of type 'UNISWAPV3ETHEREUMLiquidityPoolDTO' (by applying it's required fields, if any)
mkUNISWAPV3ETHEREUMLiquidityPoolDTO
  :: UNISWAPV3ETHEREUMLiquidityPoolDTO
mkUNISWAPV3ETHEREUMLiquidityPoolDTO =
  UNISWAPV3ETHEREUMLiquidityPoolDTO
  { uNISWAPV3ETHEREUMLiquidityPoolDTOEntryTime = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTORecvTime = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOBlockNumber = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOVid = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOBlockRange = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOId = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOProtocol = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOName = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOSymbol = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOLiquidityToken = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOInputTokens = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTORewardTokens = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOFees = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOIsSingleSided = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOCreatedTimestamp = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOCreatedBlockNumber = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOTick = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOTotalValueLockedUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOTotalLiquidity = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOTotalLiquidityUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOActiveLiquidity = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOActiveLiquidityUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOUncollectedProtocolSideTokenAmounts = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOUncollectedProtocolSideValuesUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOUncollectedSupplySideTokenAmounts = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOUncollectedSupplySideValuesUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeSupplySideRevenueUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeProtocolSideRevenueUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeTotalRevenueUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeByTokenAmount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeByTokenUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeVolumeUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOInputTokenBalances = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOInputTokenBalancesUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOInputTokenWeights = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOStakedOutputTokenAmount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTORewardTokenEmissionsAmount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTORewardTokenEmissionsUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeDepositCount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeWithdrawCount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOCumulativeSwapCount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOPositionCount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOOpenPositionCount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOClosedPositionCount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOLastSnapshotDayId = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOLastSnapshotHourId = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOLastUpdateTimestamp = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOLastUpdateBlockNumber = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDTOEvaluatedAsk = Nothing
  }

-- ** UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
-- | UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
-- Represents a liquidity pool daily snapshot for Uniswap V3.
data UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO = UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
  { uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOBlock :: !(Maybe Int) -- ^ "block_" - The Ethereum block number associated with the liquidity pool daily snapshot.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: (smart contract address of the pool)-(# of days since Unix epoch time).
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODay :: !(Maybe Int) -- ^ "day" - Number of days since Unix epoch time.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - Protocol associated with the liquidity pool.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOPool :: !(Maybe Text) -- ^ "pool" - Pool this snapshot belongs to.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTick :: !(Maybe Text) -- ^ "tick" - Current tick representing the price of token0/token1.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of this pool.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalLiquidity :: !(Maybe Text) -- ^ "total_liquidity" - The sum of all active and non-active liquidity for this pool.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalLiquidityUsd :: !(Maybe Text) -- ^ "total_liquidity_usd" - Sum of all active and non-active liquidity in USD for this pool.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOActiveLiquidity :: !(Maybe Text) -- ^ "active_liquidity" - All liquidity &#x60;k&#x60; that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOActiveLiquidityUsd :: !(Maybe Text) -- ^ "active_liquidity_usd" - All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedProtocolSideTokenAmounts :: !(Maybe [Text]) -- ^ "uncollected_protocol_side_token_amounts" - All protocol-side value locked in token amounts that remains uncollected and unused in the pool.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedProtocolSideValuesUsd :: !(Maybe [Text]) -- ^ "uncollected_protocol_side_values_usd" - All protocol-side value locking in USD that remains uncollected and unused in the pool.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedSupplySideTokenAmounts :: !(Maybe [Text]) -- ^ "uncollected_supply_side_token_amounts" - All supply-side value locked in token amounts that remains uncollected and unused in the pool.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedSupplySideValuesUsd :: !(Maybe [Text]) -- ^ "uncollected_supply_side_values_usd" - All supply-side value locked in USD that remains uncollected and unused in the pool.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the supply side.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailySupplySideRevenueUsd :: !(Maybe Text) -- ^ "daily_supply_side_revenue_usd" - Daily revenue generated by the liquidity pool, accrued to the supply side.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the protocol.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "daily_protocol_side_revenue_usd" - Daily revenue generated by the liquidity pool, accrued to the protocol.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" - All revenue generated by the liquidity pool.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyTotalRevenueUsd :: !(Maybe Text) -- ^ "daily_total_revenue_usd" - Daily revenue generated by the liquidity pool.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All historical trade volume occurred in this pool, in USD.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeUsd :: !(Maybe Text) -- ^ "daily_volume_usd" - All trade volume occurred in a given day, in USD.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeByTokenAmount :: !(Maybe [Text]) -- ^ "cumulative_volume_by_token_amount" - All trade volume , in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenAmount :: !(Maybe [Text]) -- ^ "daily_volume_by_token_amount" - All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeByTokenUsd :: !(Maybe [Text]) -- ^ "cumulative_volume_by_token_usd" - All trade volume, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenUsd :: !(Maybe [Text]) -- ^ "daily_volume_by_token_usd" -  All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenBalances :: !(Maybe [Text]) -- ^ "input_token_balances" - Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenBalancesUsd :: !(Maybe [Text]) -- ^ "input_token_balances_usd" - Amount of input tokens in USD in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenWeights :: !(Maybe [Text]) -- ^ "input_token_weights" - Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOStakedOutputTokenAmount :: !(Maybe Text) -- ^ "staked_output_token_amount" - Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsAmount :: !(Maybe [Text]) -- ^ "reward_token_emissions_amount" - Per-block reward token emission as of the current block normalized to a day, in token&#39;s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsUsd :: !(Maybe [Text]) -- ^ "reward_token_emissions_usd" - Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeDepositCount :: !(Maybe Int) -- ^ "cumulative_deposit_count" - Total number of deposits (add liquidity).
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyDepositCount :: !(Maybe Int) -- ^ "daily_deposit_count" - Total number of deposits (add liquidity) in a day.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeWithdrawCount :: !(Maybe Int) -- ^ "cumulative_withdraw_count" - Total number of withdrawals (remove liquidity).
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyWithdrawCount :: !(Maybe Int) -- ^ "daily_withdraw_count" - Total number of withdrawals (remove liquidity) in a day.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeSwapCount :: !(Maybe Int) -- ^ "cumulative_swap_count" - Total number of trades (swaps).
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailySwapCount :: !(Maybe Int) -- ^ "daily_swap_count" - Total number of trades (swaps) in a day.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOPositionCount :: !(Maybe Int) -- ^ "position_count" - Number of positions in this market.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOOpenPositionCount :: !(Maybe Int) -- ^ "open_position_count" - Number of open positions in this market.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOClosedPositionCount :: !(Maybe Int) -- ^ "closed_position_count" - Number of closed positions in this market.
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed).
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
instance A.FromJSON UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO where
  parseJSON = A.withObject "UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO" $ \o ->
    UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_")
      <*> (o .:? "id")
      <*> (o .:? "day")
      <*> (o .:? "protocol")
      <*> (o .:? "pool")
      <*> (o .:? "tick")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "total_liquidity")
      <*> (o .:? "total_liquidity_usd")
      <*> (o .:? "active_liquidity")
      <*> (o .:? "active_liquidity_usd")
      <*> (o .:? "uncollected_protocol_side_token_amounts")
      <*> (o .:? "uncollected_protocol_side_values_usd")
      <*> (o .:? "uncollected_supply_side_token_amounts")
      <*> (o .:? "uncollected_supply_side_values_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "daily_supply_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "daily_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "daily_total_revenue_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "daily_volume_usd")
      <*> (o .:? "cumulative_volume_by_token_amount")
      <*> (o .:? "daily_volume_by_token_amount")
      <*> (o .:? "cumulative_volume_by_token_usd")
      <*> (o .:? "daily_volume_by_token_usd")
      <*> (o .:? "input_token_balances")
      <*> (o .:? "input_token_balances_usd")
      <*> (o .:? "input_token_weights")
      <*> (o .:? "staked_output_token_amount")
      <*> (o .:? "reward_token_emissions_amount")
      <*> (o .:? "reward_token_emissions_usd")
      <*> (o .:? "cumulative_deposit_count")
      <*> (o .:? "daily_deposit_count")
      <*> (o .:? "cumulative_withdraw_count")
      <*> (o .:? "daily_withdraw_count")
      <*> (o .:? "cumulative_swap_count")
      <*> (o .:? "daily_swap_count")
      <*> (o .:? "position_count")
      <*> (o .:? "open_position_count")
      <*> (o .:? "closed_position_count")
      <*> (o .:? "timestamp")

-- | ToJSON UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
instance A.ToJSON UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO where
  toJSON UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOEntryTime
      , "recv_time" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORecvTime
      , "block_number" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOBlockNumber
      , "block_" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOBlock
      , "id" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOId
      , "day" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODay
      , "protocol" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOProtocol
      , "pool" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOPool
      , "tick" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTick
      , "total_value_locked_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalValueLockedUsd
      , "total_liquidity" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalLiquidity
      , "total_liquidity_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalLiquidityUsd
      , "active_liquidity" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOActiveLiquidity
      , "active_liquidity_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOActiveLiquidityUsd
      , "uncollected_protocol_side_token_amounts" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedProtocolSideTokenAmounts
      , "uncollected_protocol_side_values_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedProtocolSideValuesUsd
      , "uncollected_supply_side_token_amounts" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedSupplySideTokenAmounts
      , "uncollected_supply_side_values_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedSupplySideValuesUsd
      , "cumulative_supply_side_revenue_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeSupplySideRevenueUsd
      , "daily_supply_side_revenue_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailySupplySideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeProtocolSideRevenueUsd
      , "daily_protocol_side_revenue_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyProtocolSideRevenueUsd
      , "cumulative_total_revenue_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeTotalRevenueUsd
      , "daily_total_revenue_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyTotalRevenueUsd
      , "cumulative_volume_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeUsd
      , "daily_volume_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeUsd
      , "cumulative_volume_by_token_amount" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeByTokenAmount
      , "daily_volume_by_token_amount" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenAmount
      , "cumulative_volume_by_token_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeByTokenUsd
      , "daily_volume_by_token_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenUsd
      , "input_token_balances" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenBalances
      , "input_token_balances_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenBalancesUsd
      , "input_token_weights" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenWeights
      , "staked_output_token_amount" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOStakedOutputTokenAmount
      , "reward_token_emissions_amount" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsAmount
      , "reward_token_emissions_usd" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsUsd
      , "cumulative_deposit_count" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeDepositCount
      , "daily_deposit_count" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyDepositCount
      , "cumulative_withdraw_count" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeWithdrawCount
      , "daily_withdraw_count" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyWithdrawCount
      , "cumulative_swap_count" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeSwapCount
      , "daily_swap_count" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailySwapCount
      , "position_count" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOPositionCount
      , "open_position_count" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOOpenPositionCount
      , "closed_position_count" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOClosedPositionCount
      , "timestamp" .= uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO' (by applying it's required fields, if any)
mkUNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
  :: UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
mkUNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO =
  UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO
  { uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOEntryTime = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORecvTime = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOBlockNumber = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOBlock = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOId = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODay = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOProtocol = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOPool = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTick = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalValueLockedUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalLiquidity = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTotalLiquidityUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOActiveLiquidity = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOActiveLiquidityUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedProtocolSideTokenAmounts = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedProtocolSideValuesUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedSupplySideTokenAmounts = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOUncollectedSupplySideValuesUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeSupplySideRevenueUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailySupplySideRevenueUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeProtocolSideRevenueUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyProtocolSideRevenueUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeTotalRevenueUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyTotalRevenueUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeByTokenAmount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenAmount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeVolumeByTokenUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyVolumeByTokenUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenBalances = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenBalancesUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOInputTokenWeights = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOStakedOutputTokenAmount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsAmount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTORewardTokenEmissionsUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeDepositCount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyDepositCount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeWithdrawCount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailyWithdrawCount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOCumulativeSwapCount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTODailySwapCount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOPositionCount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOOpenPositionCount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOClosedPositionCount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTOTimestamp = Nothing
  }

-- ** UNISWAPV3ETHEREUMLiquidityPoolFeeDTO
-- | UNISWAPV3ETHEREUMLiquidityPoolFeeDTO
-- 
data UNISWAPV3ETHEREUMLiquidityPoolFeeDTO = UNISWAPV3ETHEREUMLiquidityPoolFeeDTO
  { uNISWAPV3ETHEREUMLiquidityPoolFeeDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV3ETHEREUMLiquidityPoolFeeDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV3ETHEREUMLiquidityPoolFeeDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV3ETHEREUMLiquidityPoolFeeDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , uNISWAPV3ETHEREUMLiquidityPoolFeeDTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: (fee type)-(pool address)
  , uNISWAPV3ETHEREUMLiquidityPoolFeeDTOFeePercentage :: !(Maybe Text) -- ^ "fee_percentage" - Fee as a percentage of the trade (swap) amount. Does not always apply 
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV3ETHEREUMLiquidityPoolFeeDTO
instance A.FromJSON UNISWAPV3ETHEREUMLiquidityPoolFeeDTO where
  parseJSON = A.withObject "UNISWAPV3ETHEREUMLiquidityPoolFeeDTO" $ \o ->
    UNISWAPV3ETHEREUMLiquidityPoolFeeDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "fee_percentage")

-- | ToJSON UNISWAPV3ETHEREUMLiquidityPoolFeeDTO
instance A.ToJSON UNISWAPV3ETHEREUMLiquidityPoolFeeDTO where
  toJSON UNISWAPV3ETHEREUMLiquidityPoolFeeDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV3ETHEREUMLiquidityPoolFeeDTOEntryTime
      , "recv_time" .= uNISWAPV3ETHEREUMLiquidityPoolFeeDTORecvTime
      , "block_number" .= uNISWAPV3ETHEREUMLiquidityPoolFeeDTOBlockNumber
      , "block_range" .= uNISWAPV3ETHEREUMLiquidityPoolFeeDTOBlockRange
      , "id" .= uNISWAPV3ETHEREUMLiquidityPoolFeeDTOId
      , "fee_percentage" .= uNISWAPV3ETHEREUMLiquidityPoolFeeDTOFeePercentage
      ]


-- | Construct a value of type 'UNISWAPV3ETHEREUMLiquidityPoolFeeDTO' (by applying it's required fields, if any)
mkUNISWAPV3ETHEREUMLiquidityPoolFeeDTO
  :: UNISWAPV3ETHEREUMLiquidityPoolFeeDTO
mkUNISWAPV3ETHEREUMLiquidityPoolFeeDTO =
  UNISWAPV3ETHEREUMLiquidityPoolFeeDTO
  { uNISWAPV3ETHEREUMLiquidityPoolFeeDTOEntryTime = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolFeeDTORecvTime = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolFeeDTOBlockNumber = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolFeeDTOBlockRange = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolFeeDTOId = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolFeeDTOFeePercentage = Nothing
  }

-- ** UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
-- | UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
-- 
data UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO = UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
  { uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOId :: !(Maybe Text) -- ^ "id" - (Smart contract address of the pool)-( # of hours since Unix epoch time)
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHour :: !(Maybe Int) -- ^ "hour" - Number of hours since Unix epoch time
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - The protocol this snapshot belongs to
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOPool :: !(Maybe Text) -- ^ "pool" - The pool this snapshot belongs to
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTick :: !(Maybe Text) -- ^ "tick" - Current tick representing the price of token0/token1
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Current TVL (Total Value Locked) of this pool
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalLiquidity :: !(Maybe Text) -- ^ "total_liquidity" - The sum of all active and non-active liquidity for this pool.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalLiquidityUsd :: !(Maybe Text) -- ^ "total_liquidity_usd" - The sum of all active and non-active liquidity in USD for this pool.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOActiveLiquidity :: !(Maybe Text) -- ^ "active_liquidity" - All liquidity &#x60;k&#x60; that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pool&#39;s current tick.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOActiveLiquidityUsd :: !(Maybe Text) -- ^ "active_liquidity_usd" - All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pool&#39;s current tick.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedProtocolSideTokenAmounts :: !(Maybe [Text]) -- ^ "uncollected_protocol_side_token_amounts" - All protocol-side value locked in token amounts that remains uncollected and unused in the pool.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedProtocolSideValuesUsd :: !(Maybe [Text]) -- ^ "uncollected_protocol_side_values_usd" - All protocol-side value locking in USD that remains uncollected and unused in the pool.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedSupplySideTokenAmounts :: !(Maybe [Text]) -- ^ "uncollected_supply_side_token_amounts" - All supply-side value locked in token amounts that remains uncollected and unused in the pool.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedSupplySideValuesUsd :: !(Maybe [Text]) -- ^ "uncollected_supply_side_values_usd" - All supply-side value locked in USD that remains uncollected and unused in the pool.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeSupplySideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_supply_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the supply side.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlySupplySideRevenueUsd :: !(Maybe Text) -- ^ "hourly_supply_side_revenue_usd" - Hourly revenue generated by the liquidity pool, accrued to the supply side.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "cumulative_protocol_side_revenue_usd" - All revenue generated by the liquidity pool, accrued to the protocol.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyProtocolSideRevenueUsd :: !(Maybe Text) -- ^ "hourly_protocol_side_revenue_usd" - Hourly revenue generated by the liquidity pool, accrued to the protocol.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeTotalRevenueUsd :: !(Maybe Text) -- ^ "cumulative_total_revenue_usd" - All revenue generated by the liquidity pool.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyTotalRevenueUsd :: !(Maybe Text) -- ^ "hourly_total_revenue_usd" - Hourly revenue generated by the liquidity pool.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeUsd :: !(Maybe Text) -- ^ "cumulative_volume_usd" - All historical trade volume occurred in this pool, in USD.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeUsd :: !(Maybe Text) -- ^ "hourly_volume_usd" - All trade volume occurred in a given hour, in USD.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeByTokenAmount :: !(Maybe [Text]) -- ^ "cumulative_volume_by_token_amount" - All trade volume, in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenAmount :: !(Maybe [Text]) -- ^ "hourly_volume_by_token_amount" - All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeByTokenUsd :: !(Maybe [Text]) -- ^ "cumulative_volume_by_token_usd" - All trade volume, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenUsd :: !(Maybe [Text]) -- ^ "hourly_volume_by_token_usd" - All trade volume occurred in a given hour for a specific input token, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenBalances :: !(Maybe [Text]) -- ^ "input_token_balances" - Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenBalancesUsd :: !(Maybe [Text]) -- ^ "input_token_balances_usd" - Amount of input tokens in USD in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenWeights :: !(Maybe [Text]) -- ^ "input_token_weights" - Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOStakedOutputTokenAmount :: !(Maybe Text) -- ^ "staked_output_token_amount" - Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsAmount :: !(Maybe [Text]) -- ^ "reward_token_emissions_amount" - Per-block reward token emission as of the current block normalized to a day (not hour), in token&#39;s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsUsd :: !(Maybe [Text]) -- ^ "reward_token_emissions_usd" - Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeDepositCount :: !(Maybe Int) -- ^ "cumulative_deposit_count" - Total number of deposits (add liquidity)
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyDepositCount :: !(Maybe Int) -- ^ "hourly_deposit_count" - Total number of deposits (add liquidity) in an hour
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeWithdrawCount :: !(Maybe Int) -- ^ "cumulative_withdraw_count" - Total number of withdrawals (remove liquidity)
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyWithdrawCount :: !(Maybe Int) -- ^ "hourly_withdraw_count" - Total number of withdrawals (remove liquidity) in an hour
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeSwapCount :: !(Maybe Int) -- ^ "cumulative_swap_count" - Total number of trades (swaps)
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlySwapCount :: !(Maybe Int) -- ^ "hourly_swap_count" - Total number of trades (swaps) in an hour
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOPositionCount :: !(Maybe Int) -- ^ "position_count" - Number of positions in this market
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOOpenPositionCount :: !(Maybe Int) -- ^ "open_position_count" - Number of open positions in this market
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOClosedPositionCount :: !(Maybe Int) -- ^ "closed_position_count" - Number of closed positions in this market
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
instance A.FromJSON UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO where
  parseJSON = A.withObject "UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO" $ \o ->
    UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "hour")
      <*> (o .:? "protocol")
      <*> (o .:? "pool")
      <*> (o .:? "tick")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "total_liquidity")
      <*> (o .:? "total_liquidity_usd")
      <*> (o .:? "active_liquidity")
      <*> (o .:? "active_liquidity_usd")
      <*> (o .:? "uncollected_protocol_side_token_amounts")
      <*> (o .:? "uncollected_protocol_side_values_usd")
      <*> (o .:? "uncollected_supply_side_token_amounts")
      <*> (o .:? "uncollected_supply_side_values_usd")
      <*> (o .:? "cumulative_supply_side_revenue_usd")
      <*> (o .:? "hourly_supply_side_revenue_usd")
      <*> (o .:? "cumulative_protocol_side_revenue_usd")
      <*> (o .:? "hourly_protocol_side_revenue_usd")
      <*> (o .:? "cumulative_total_revenue_usd")
      <*> (o .:? "hourly_total_revenue_usd")
      <*> (o .:? "cumulative_volume_usd")
      <*> (o .:? "hourly_volume_usd")
      <*> (o .:? "cumulative_volume_by_token_amount")
      <*> (o .:? "hourly_volume_by_token_amount")
      <*> (o .:? "cumulative_volume_by_token_usd")
      <*> (o .:? "hourly_volume_by_token_usd")
      <*> (o .:? "input_token_balances")
      <*> (o .:? "input_token_balances_usd")
      <*> (o .:? "input_token_weights")
      <*> (o .:? "staked_output_token_amount")
      <*> (o .:? "reward_token_emissions_amount")
      <*> (o .:? "reward_token_emissions_usd")
      <*> (o .:? "cumulative_deposit_count")
      <*> (o .:? "hourly_deposit_count")
      <*> (o .:? "cumulative_withdraw_count")
      <*> (o .:? "hourly_withdraw_count")
      <*> (o .:? "cumulative_swap_count")
      <*> (o .:? "hourly_swap_count")
      <*> (o .:? "position_count")
      <*> (o .:? "open_position_count")
      <*> (o .:? "closed_position_count")
      <*> (o .:? "timestamp")

-- | ToJSON UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
instance A.ToJSON UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO where
  toJSON UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOEntryTime
      , "recv_time" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORecvTime
      , "block_number" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOBlockNumber
      , "id" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOId
      , "hour" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHour
      , "protocol" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOProtocol
      , "pool" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOPool
      , "tick" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTick
      , "total_value_locked_usd" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalValueLockedUsd
      , "total_liquidity" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalLiquidity
      , "total_liquidity_usd" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalLiquidityUsd
      , "active_liquidity" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOActiveLiquidity
      , "active_liquidity_usd" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOActiveLiquidityUsd
      , "uncollected_protocol_side_token_amounts" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedProtocolSideTokenAmounts
      , "uncollected_protocol_side_values_usd" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedProtocolSideValuesUsd
      , "uncollected_supply_side_token_amounts" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedSupplySideTokenAmounts
      , "uncollected_supply_side_values_usd" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedSupplySideValuesUsd
      , "cumulative_supply_side_revenue_usd" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeSupplySideRevenueUsd
      , "hourly_supply_side_revenue_usd" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlySupplySideRevenueUsd
      , "cumulative_protocol_side_revenue_usd" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeProtocolSideRevenueUsd
      , "hourly_protocol_side_revenue_usd" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyProtocolSideRevenueUsd
      , "cumulative_total_revenue_usd" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeTotalRevenueUsd
      , "hourly_total_revenue_usd" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyTotalRevenueUsd
      , "cumulative_volume_usd" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeUsd
      , "hourly_volume_usd" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeUsd
      , "cumulative_volume_by_token_amount" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeByTokenAmount
      , "hourly_volume_by_token_amount" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenAmount
      , "cumulative_volume_by_token_usd" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeByTokenUsd
      , "hourly_volume_by_token_usd" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenUsd
      , "input_token_balances" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenBalances
      , "input_token_balances_usd" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenBalancesUsd
      , "input_token_weights" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenWeights
      , "staked_output_token_amount" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOStakedOutputTokenAmount
      , "reward_token_emissions_amount" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsAmount
      , "reward_token_emissions_usd" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsUsd
      , "cumulative_deposit_count" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeDepositCount
      , "hourly_deposit_count" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyDepositCount
      , "cumulative_withdraw_count" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeWithdrawCount
      , "hourly_withdraw_count" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyWithdrawCount
      , "cumulative_swap_count" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeSwapCount
      , "hourly_swap_count" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlySwapCount
      , "position_count" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOPositionCount
      , "open_position_count" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOOpenPositionCount
      , "closed_position_count" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOClosedPositionCount
      , "timestamp" .= uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO' (by applying it's required fields, if any)
mkUNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
  :: UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
mkUNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO =
  UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO
  { uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOEntryTime = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORecvTime = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOBlockNumber = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOId = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHour = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOProtocol = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOPool = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTick = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalValueLockedUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalLiquidity = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTotalLiquidityUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOActiveLiquidity = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOActiveLiquidityUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedProtocolSideTokenAmounts = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedProtocolSideValuesUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedSupplySideTokenAmounts = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOUncollectedSupplySideValuesUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeSupplySideRevenueUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlySupplySideRevenueUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeProtocolSideRevenueUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyProtocolSideRevenueUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeTotalRevenueUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyTotalRevenueUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeByTokenAmount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenAmount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeVolumeByTokenUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyVolumeByTokenUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenBalances = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenBalancesUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOInputTokenWeights = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOStakedOutputTokenAmount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsAmount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTORewardTokenEmissionsUsd = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeDepositCount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyDepositCount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeWithdrawCount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlyWithdrawCount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOCumulativeSwapCount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOHourlySwapCount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOPositionCount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOOpenPositionCount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOClosedPositionCount = Nothing
  , uNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTOTimestamp = Nothing
  }

-- ** UNISWAPV3ETHEREUMPositionDTO
-- | UNISWAPV3ETHEREUMPositionDTO
-- 
data UNISWAPV3ETHEREUMPositionDTO = UNISWAPV3ETHEREUMPositionDTO
  { uNISWAPV3ETHEREUMPositionDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV3ETHEREUMPositionDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV3ETHEREUMPositionDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV3ETHEREUMPositionDTOId :: !(Maybe Text) -- ^ "id" - (account address)-(market address)-(count)
  , uNISWAPV3ETHEREUMPositionDTOAccount :: !(Maybe Text) -- ^ "account" - Account that owns this position
  , uNISWAPV3ETHEREUMPositionDTOPool :: !(Maybe Text) -- ^ "pool" - The liquidity pool in which this position was opened
  , uNISWAPV3ETHEREUMPositionDTOHashOpened :: !(Maybe Text) -- ^ "hash_opened" - The hash of the transaction that opened this position
  , uNISWAPV3ETHEREUMPositionDTOHashClosed :: !(Maybe Text) -- ^ "hash_closed" - The hash of the transaction that closed this position
  , uNISWAPV3ETHEREUMPositionDTOBlockNumberOpened :: !(Maybe Text) -- ^ "block_number_opened" - Block number of when the position was opened
  , uNISWAPV3ETHEREUMPositionDTOTimestampOpened :: !(Maybe Text) -- ^ "timestamp_opened" - Timestamp when the position was opened
  , uNISWAPV3ETHEREUMPositionDTOBlockNumberClosed :: !(Maybe Text) -- ^ "block_number_closed" - Block number of when the position was closed (0 if still open)
  , uNISWAPV3ETHEREUMPositionDTOTimestampClosed :: !(Maybe Text) -- ^ "timestamp_closed" - Timestamp when the position was closed (0 if still open)
  , uNISWAPV3ETHEREUMPositionDTOTickLower :: !(Maybe Text) -- ^ "tick_lower" - lower tick of the position
  , uNISWAPV3ETHEREUMPositionDTOTickUpper :: !(Maybe Text) -- ^ "tick_upper" - upper tick of the position
  , uNISWAPV3ETHEREUMPositionDTOLiquidityToken :: !(Maybe Text) -- ^ "liquidity_token" - Token that is to represent ownership of liquidity
  , uNISWAPV3ETHEREUMPositionDTOLiquidityTokenType :: !(Maybe Text) -- ^ "liquidity_token_type" - Type of token used to track liquidity
  , uNISWAPV3ETHEREUMPositionDTOLiquidity :: !(Maybe Text) -- ^ "liquidity" - total position liquidity
  , uNISWAPV3ETHEREUMPositionDTOLiquidityUsd :: !(Maybe Text) -- ^ "liquidity_usd" - total position liquidity in USD
  , uNISWAPV3ETHEREUMPositionDTOCumulativeDepositTokenAmounts :: !(Maybe [Text]) -- ^ "cumulative_deposit_token_amounts" - amount of tokens ever deposited to position
  , uNISWAPV3ETHEREUMPositionDTOCumulativeDepositUsd :: !(Maybe Text) -- ^ "cumulative_deposit_usd" - amount of tokens in USD deposited to position
  , uNISWAPV3ETHEREUMPositionDTOCumulativeWithdrawTokenAmounts :: !(Maybe [Text]) -- ^ "cumulative_withdraw_token_amounts" - amount of tokens ever withdrawn from position (without fees)
  , uNISWAPV3ETHEREUMPositionDTOCumulativeWithdrawUsd :: !(Maybe Text) -- ^ "cumulative_withdraw_usd" - amount of tokens in USD withdrawn from position (without fees)
  , uNISWAPV3ETHEREUMPositionDTOCumulativeRewardUsd :: !(Maybe [Text]) -- ^ "cumulative_reward_usd" - Total reward token accumulated under this position, in USD
  , uNISWAPV3ETHEREUMPositionDTODepositCount :: !(Maybe Int) -- ^ "deposit_count" - Number of deposits related to this position
  , uNISWAPV3ETHEREUMPositionDTOWithdrawCount :: !(Maybe Int) -- ^ "withdraw_count" - Number of withdrawals related to this position
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV3ETHEREUMPositionDTO
instance A.FromJSON UNISWAPV3ETHEREUMPositionDTO where
  parseJSON = A.withObject "UNISWAPV3ETHEREUMPositionDTO" $ \o ->
    UNISWAPV3ETHEREUMPositionDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "account")
      <*> (o .:? "pool")
      <*> (o .:? "hash_opened")
      <*> (o .:? "hash_closed")
      <*> (o .:? "block_number_opened")
      <*> (o .:? "timestamp_opened")
      <*> (o .:? "block_number_closed")
      <*> (o .:? "timestamp_closed")
      <*> (o .:? "tick_lower")
      <*> (o .:? "tick_upper")
      <*> (o .:? "liquidity_token")
      <*> (o .:? "liquidity_token_type")
      <*> (o .:? "liquidity")
      <*> (o .:? "liquidity_usd")
      <*> (o .:? "cumulative_deposit_token_amounts")
      <*> (o .:? "cumulative_deposit_usd")
      <*> (o .:? "cumulative_withdraw_token_amounts")
      <*> (o .:? "cumulative_withdraw_usd")
      <*> (o .:? "cumulative_reward_usd")
      <*> (o .:? "deposit_count")
      <*> (o .:? "withdraw_count")

-- | ToJSON UNISWAPV3ETHEREUMPositionDTO
instance A.ToJSON UNISWAPV3ETHEREUMPositionDTO where
  toJSON UNISWAPV3ETHEREUMPositionDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV3ETHEREUMPositionDTOEntryTime
      , "recv_time" .= uNISWAPV3ETHEREUMPositionDTORecvTime
      , "block_number" .= uNISWAPV3ETHEREUMPositionDTOBlockNumber
      , "id" .= uNISWAPV3ETHEREUMPositionDTOId
      , "account" .= uNISWAPV3ETHEREUMPositionDTOAccount
      , "pool" .= uNISWAPV3ETHEREUMPositionDTOPool
      , "hash_opened" .= uNISWAPV3ETHEREUMPositionDTOHashOpened
      , "hash_closed" .= uNISWAPV3ETHEREUMPositionDTOHashClosed
      , "block_number_opened" .= uNISWAPV3ETHEREUMPositionDTOBlockNumberOpened
      , "timestamp_opened" .= uNISWAPV3ETHEREUMPositionDTOTimestampOpened
      , "block_number_closed" .= uNISWAPV3ETHEREUMPositionDTOBlockNumberClosed
      , "timestamp_closed" .= uNISWAPV3ETHEREUMPositionDTOTimestampClosed
      , "tick_lower" .= uNISWAPV3ETHEREUMPositionDTOTickLower
      , "tick_upper" .= uNISWAPV3ETHEREUMPositionDTOTickUpper
      , "liquidity_token" .= uNISWAPV3ETHEREUMPositionDTOLiquidityToken
      , "liquidity_token_type" .= uNISWAPV3ETHEREUMPositionDTOLiquidityTokenType
      , "liquidity" .= uNISWAPV3ETHEREUMPositionDTOLiquidity
      , "liquidity_usd" .= uNISWAPV3ETHEREUMPositionDTOLiquidityUsd
      , "cumulative_deposit_token_amounts" .= uNISWAPV3ETHEREUMPositionDTOCumulativeDepositTokenAmounts
      , "cumulative_deposit_usd" .= uNISWAPV3ETHEREUMPositionDTOCumulativeDepositUsd
      , "cumulative_withdraw_token_amounts" .= uNISWAPV3ETHEREUMPositionDTOCumulativeWithdrawTokenAmounts
      , "cumulative_withdraw_usd" .= uNISWAPV3ETHEREUMPositionDTOCumulativeWithdrawUsd
      , "cumulative_reward_usd" .= uNISWAPV3ETHEREUMPositionDTOCumulativeRewardUsd
      , "deposit_count" .= uNISWAPV3ETHEREUMPositionDTODepositCount
      , "withdraw_count" .= uNISWAPV3ETHEREUMPositionDTOWithdrawCount
      ]


-- | Construct a value of type 'UNISWAPV3ETHEREUMPositionDTO' (by applying it's required fields, if any)
mkUNISWAPV3ETHEREUMPositionDTO
  :: UNISWAPV3ETHEREUMPositionDTO
mkUNISWAPV3ETHEREUMPositionDTO =
  UNISWAPV3ETHEREUMPositionDTO
  { uNISWAPV3ETHEREUMPositionDTOEntryTime = Nothing
  , uNISWAPV3ETHEREUMPositionDTORecvTime = Nothing
  , uNISWAPV3ETHEREUMPositionDTOBlockNumber = Nothing
  , uNISWAPV3ETHEREUMPositionDTOId = Nothing
  , uNISWAPV3ETHEREUMPositionDTOAccount = Nothing
  , uNISWAPV3ETHEREUMPositionDTOPool = Nothing
  , uNISWAPV3ETHEREUMPositionDTOHashOpened = Nothing
  , uNISWAPV3ETHEREUMPositionDTOHashClosed = Nothing
  , uNISWAPV3ETHEREUMPositionDTOBlockNumberOpened = Nothing
  , uNISWAPV3ETHEREUMPositionDTOTimestampOpened = Nothing
  , uNISWAPV3ETHEREUMPositionDTOBlockNumberClosed = Nothing
  , uNISWAPV3ETHEREUMPositionDTOTimestampClosed = Nothing
  , uNISWAPV3ETHEREUMPositionDTOTickLower = Nothing
  , uNISWAPV3ETHEREUMPositionDTOTickUpper = Nothing
  , uNISWAPV3ETHEREUMPositionDTOLiquidityToken = Nothing
  , uNISWAPV3ETHEREUMPositionDTOLiquidityTokenType = Nothing
  , uNISWAPV3ETHEREUMPositionDTOLiquidity = Nothing
  , uNISWAPV3ETHEREUMPositionDTOLiquidityUsd = Nothing
  , uNISWAPV3ETHEREUMPositionDTOCumulativeDepositTokenAmounts = Nothing
  , uNISWAPV3ETHEREUMPositionDTOCumulativeDepositUsd = Nothing
  , uNISWAPV3ETHEREUMPositionDTOCumulativeWithdrawTokenAmounts = Nothing
  , uNISWAPV3ETHEREUMPositionDTOCumulativeWithdrawUsd = Nothing
  , uNISWAPV3ETHEREUMPositionDTOCumulativeRewardUsd = Nothing
  , uNISWAPV3ETHEREUMPositionDTODepositCount = Nothing
  , uNISWAPV3ETHEREUMPositionDTOWithdrawCount = Nothing
  }

-- ** UNISWAPV3ETHEREUMPositionSnapshotDTO
-- | UNISWAPV3ETHEREUMPositionSnapshotDTO
-- 
data UNISWAPV3ETHEREUMPositionSnapshotDTO = UNISWAPV3ETHEREUMPositionSnapshotDTO
  { uNISWAPV3ETHEREUMPositionSnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV3ETHEREUMPositionSnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV3ETHEREUMPositionSnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV3ETHEREUMPositionSnapshotDTOId :: !(Maybe Text) -- ^ "id" -  (position id )-( transaction hash )-( log index ) 
  , uNISWAPV3ETHEREUMPositionSnapshotDTOHash :: !(Maybe Text) -- ^ "hash" - Transaction hash of the transaction that triggered this snapshot
  , uNISWAPV3ETHEREUMPositionSnapshotDTOLogIndex :: !(Maybe Int) -- ^ "log_index" - Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0
  , uNISWAPV3ETHEREUMPositionSnapshotDTONonce :: !(Maybe Text) -- ^ "nonce" - Nonce of the transaction that triggered this snapshot
  , uNISWAPV3ETHEREUMPositionSnapshotDTOPosition :: !(Maybe Text) -- ^ "position" - Position of this snapshot
  , uNISWAPV3ETHEREUMPositionSnapshotDTOLiquidityTokenType :: !(Maybe Text) -- ^ "liquidity_token_type" - Type of token used to track liquidity
  , uNISWAPV3ETHEREUMPositionSnapshotDTOLiquidity :: !(Maybe Text) -- ^ "liquidity" - total position liquidity
  , uNISWAPV3ETHEREUMPositionSnapshotDTOLiquidityUsd :: !(Maybe Text) -- ^ "liquidity_usd" - total position liquidity in USD
  , uNISWAPV3ETHEREUMPositionSnapshotDTOCumulativeDepositTokenAmounts :: !(Maybe [Text]) -- ^ "cumulative_deposit_token_amounts" - amount of tokens ever deposited to position
  , uNISWAPV3ETHEREUMPositionSnapshotDTOCumulativeDepositUsd :: !(Maybe Text) -- ^ "cumulative_deposit_usd" - amount of tokens in USD deposited to position
  , uNISWAPV3ETHEREUMPositionSnapshotDTOCumulativeWithdrawTokenAmounts :: !(Maybe [Text]) -- ^ "cumulative_withdraw_token_amounts" - amount of tokens ever withdrawn from position (without fees)
  , uNISWAPV3ETHEREUMPositionSnapshotDTOCumulativeWithdrawUsd :: !(Maybe Text) -- ^ "cumulative_withdraw_usd" - amount of tokens in USD withdrawn from position (without fees)
  , uNISWAPV3ETHEREUMPositionSnapshotDTOCumulativeRewardTokenAmounts :: !(Maybe [Text]) -- ^ "cumulative_reward_token_amounts" - Total reward token accumulated under this position, in native amounts
  , uNISWAPV3ETHEREUMPositionSnapshotDTOCumulativeRewardUsd :: !(Maybe [Text]) -- ^ "cumulative_reward_usd" - Total reward token accumulated under this position, in USD
  , uNISWAPV3ETHEREUMPositionSnapshotDTODepositCount :: !(Maybe Int) -- ^ "deposit_count" - Number of deposits related to this position
  , uNISWAPV3ETHEREUMPositionSnapshotDTOWithdrawCount :: !(Maybe Int) -- ^ "withdraw_count" - Number of withdrawals related to this position
  , uNISWAPV3ETHEREUMPositionSnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this snapshot
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV3ETHEREUMPositionSnapshotDTO
instance A.FromJSON UNISWAPV3ETHEREUMPositionSnapshotDTO where
  parseJSON = A.withObject "UNISWAPV3ETHEREUMPositionSnapshotDTO" $ \o ->
    UNISWAPV3ETHEREUMPositionSnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "hash")
      <*> (o .:? "log_index")
      <*> (o .:? "nonce")
      <*> (o .:? "position")
      <*> (o .:? "liquidity_token_type")
      <*> (o .:? "liquidity")
      <*> (o .:? "liquidity_usd")
      <*> (o .:? "cumulative_deposit_token_amounts")
      <*> (o .:? "cumulative_deposit_usd")
      <*> (o .:? "cumulative_withdraw_token_amounts")
      <*> (o .:? "cumulative_withdraw_usd")
      <*> (o .:? "cumulative_reward_token_amounts")
      <*> (o .:? "cumulative_reward_usd")
      <*> (o .:? "deposit_count")
      <*> (o .:? "withdraw_count")
      <*> (o .:? "timestamp")

-- | ToJSON UNISWAPV3ETHEREUMPositionSnapshotDTO
instance A.ToJSON UNISWAPV3ETHEREUMPositionSnapshotDTO where
  toJSON UNISWAPV3ETHEREUMPositionSnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV3ETHEREUMPositionSnapshotDTOEntryTime
      , "recv_time" .= uNISWAPV3ETHEREUMPositionSnapshotDTORecvTime
      , "block_number" .= uNISWAPV3ETHEREUMPositionSnapshotDTOBlockNumber
      , "id" .= uNISWAPV3ETHEREUMPositionSnapshotDTOId
      , "hash" .= uNISWAPV3ETHEREUMPositionSnapshotDTOHash
      , "log_index" .= uNISWAPV3ETHEREUMPositionSnapshotDTOLogIndex
      , "nonce" .= uNISWAPV3ETHEREUMPositionSnapshotDTONonce
      , "position" .= uNISWAPV3ETHEREUMPositionSnapshotDTOPosition
      , "liquidity_token_type" .= uNISWAPV3ETHEREUMPositionSnapshotDTOLiquidityTokenType
      , "liquidity" .= uNISWAPV3ETHEREUMPositionSnapshotDTOLiquidity
      , "liquidity_usd" .= uNISWAPV3ETHEREUMPositionSnapshotDTOLiquidityUsd
      , "cumulative_deposit_token_amounts" .= uNISWAPV3ETHEREUMPositionSnapshotDTOCumulativeDepositTokenAmounts
      , "cumulative_deposit_usd" .= uNISWAPV3ETHEREUMPositionSnapshotDTOCumulativeDepositUsd
      , "cumulative_withdraw_token_amounts" .= uNISWAPV3ETHEREUMPositionSnapshotDTOCumulativeWithdrawTokenAmounts
      , "cumulative_withdraw_usd" .= uNISWAPV3ETHEREUMPositionSnapshotDTOCumulativeWithdrawUsd
      , "cumulative_reward_token_amounts" .= uNISWAPV3ETHEREUMPositionSnapshotDTOCumulativeRewardTokenAmounts
      , "cumulative_reward_usd" .= uNISWAPV3ETHEREUMPositionSnapshotDTOCumulativeRewardUsd
      , "deposit_count" .= uNISWAPV3ETHEREUMPositionSnapshotDTODepositCount
      , "withdraw_count" .= uNISWAPV3ETHEREUMPositionSnapshotDTOWithdrawCount
      , "timestamp" .= uNISWAPV3ETHEREUMPositionSnapshotDTOTimestamp
      ]


-- | Construct a value of type 'UNISWAPV3ETHEREUMPositionSnapshotDTO' (by applying it's required fields, if any)
mkUNISWAPV3ETHEREUMPositionSnapshotDTO
  :: UNISWAPV3ETHEREUMPositionSnapshotDTO
mkUNISWAPV3ETHEREUMPositionSnapshotDTO =
  UNISWAPV3ETHEREUMPositionSnapshotDTO
  { uNISWAPV3ETHEREUMPositionSnapshotDTOEntryTime = Nothing
  , uNISWAPV3ETHEREUMPositionSnapshotDTORecvTime = Nothing
  , uNISWAPV3ETHEREUMPositionSnapshotDTOBlockNumber = Nothing
  , uNISWAPV3ETHEREUMPositionSnapshotDTOId = Nothing
  , uNISWAPV3ETHEREUMPositionSnapshotDTOHash = Nothing
  , uNISWAPV3ETHEREUMPositionSnapshotDTOLogIndex = Nothing
  , uNISWAPV3ETHEREUMPositionSnapshotDTONonce = Nothing
  , uNISWAPV3ETHEREUMPositionSnapshotDTOPosition = Nothing
  , uNISWAPV3ETHEREUMPositionSnapshotDTOLiquidityTokenType = Nothing
  , uNISWAPV3ETHEREUMPositionSnapshotDTOLiquidity = Nothing
  , uNISWAPV3ETHEREUMPositionSnapshotDTOLiquidityUsd = Nothing
  , uNISWAPV3ETHEREUMPositionSnapshotDTOCumulativeDepositTokenAmounts = Nothing
  , uNISWAPV3ETHEREUMPositionSnapshotDTOCumulativeDepositUsd = Nothing
  , uNISWAPV3ETHEREUMPositionSnapshotDTOCumulativeWithdrawTokenAmounts = Nothing
  , uNISWAPV3ETHEREUMPositionSnapshotDTOCumulativeWithdrawUsd = Nothing
  , uNISWAPV3ETHEREUMPositionSnapshotDTOCumulativeRewardTokenAmounts = Nothing
  , uNISWAPV3ETHEREUMPositionSnapshotDTOCumulativeRewardUsd = Nothing
  , uNISWAPV3ETHEREUMPositionSnapshotDTODepositCount = Nothing
  , uNISWAPV3ETHEREUMPositionSnapshotDTOWithdrawCount = Nothing
  , uNISWAPV3ETHEREUMPositionSnapshotDTOTimestamp = Nothing
  }

-- ** UNISWAPV3ETHEREUMRewardTokenDTO
-- | UNISWAPV3ETHEREUMRewardTokenDTO
-- Reward tokens awarded to lenders and borrowers.
data UNISWAPV3ETHEREUMRewardTokenDTO = UNISWAPV3ETHEREUMRewardTokenDTO
  { uNISWAPV3ETHEREUMRewardTokenDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV3ETHEREUMRewardTokenDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV3ETHEREUMRewardTokenDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV3ETHEREUMRewardTokenDTOId :: !(Maybe Text) -- ^ "id" - (reward token type)-(smart contract address of the reward token)
  , uNISWAPV3ETHEREUMRewardTokenDTOToken :: !(Maybe Text) -- ^ "token" - Reference to the actual token
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV3ETHEREUMRewardTokenDTO
instance A.FromJSON UNISWAPV3ETHEREUMRewardTokenDTO where
  parseJSON = A.withObject "UNISWAPV3ETHEREUMRewardTokenDTO" $ \o ->
    UNISWAPV3ETHEREUMRewardTokenDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "token")

-- | ToJSON UNISWAPV3ETHEREUMRewardTokenDTO
instance A.ToJSON UNISWAPV3ETHEREUMRewardTokenDTO where
  toJSON UNISWAPV3ETHEREUMRewardTokenDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV3ETHEREUMRewardTokenDTOEntryTime
      , "recv_time" .= uNISWAPV3ETHEREUMRewardTokenDTORecvTime
      , "block_number" .= uNISWAPV3ETHEREUMRewardTokenDTOBlockNumber
      , "id" .= uNISWAPV3ETHEREUMRewardTokenDTOId
      , "token" .= uNISWAPV3ETHEREUMRewardTokenDTOToken
      ]


-- | Construct a value of type 'UNISWAPV3ETHEREUMRewardTokenDTO' (by applying it's required fields, if any)
mkUNISWAPV3ETHEREUMRewardTokenDTO
  :: UNISWAPV3ETHEREUMRewardTokenDTO
mkUNISWAPV3ETHEREUMRewardTokenDTO =
  UNISWAPV3ETHEREUMRewardTokenDTO
  { uNISWAPV3ETHEREUMRewardTokenDTOEntryTime = Nothing
  , uNISWAPV3ETHEREUMRewardTokenDTORecvTime = Nothing
  , uNISWAPV3ETHEREUMRewardTokenDTOBlockNumber = Nothing
  , uNISWAPV3ETHEREUMRewardTokenDTOId = Nothing
  , uNISWAPV3ETHEREUMRewardTokenDTOToken = Nothing
  }

-- ** UNISWAPV3ETHEREUMSwapDTO
-- | UNISWAPV3ETHEREUMSwapDTO
-- Trade (swap) event which occurred in a pool.
data UNISWAPV3ETHEREUMSwapDTO = UNISWAPV3ETHEREUMSwapDTO
  { uNISWAPV3ETHEREUMSwapDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV3ETHEREUMSwapDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV3ETHEREUMSwapDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV3ETHEREUMSwapDTOBlock :: !(Maybe Int) -- ^ "block_" - Block number in which the swap operation was recorded.
  , uNISWAPV3ETHEREUMSwapDTOId :: !(Maybe Text) -- ^ "id" - Unique string identifier of the swap operation, format: (transaction hash)-(log index).
  , uNISWAPV3ETHEREUMSwapDTOHash :: !(Maybe Text) -- ^ "hash" - Transaction hash of the transaction that emitted this event.
  , uNISWAPV3ETHEREUMSwapDTONonce :: !(Maybe Text) -- ^ "nonce" - Nonce of the transaction that emitted this event.
  , uNISWAPV3ETHEREUMSwapDTOLogIndex :: !(Maybe Int) -- ^ "log_index" - Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0.
  , uNISWAPV3ETHEREUMSwapDTOGasLimit :: !(Maybe Text) -- ^ "gas_limit" - Gas limit of the transaction that emitted this event.
  , uNISWAPV3ETHEREUMSwapDTOGasUsed :: !(Maybe Text) -- ^ "gas_used" - Gas used in this transaction.
  , uNISWAPV3ETHEREUMSwapDTOGasPrice :: !(Maybe Text) -- ^ "gas_price" - Gas price of the transaction that emitted this event.
  , uNISWAPV3ETHEREUMSwapDTOProtocol :: !(Maybe Text) -- ^ "protocol" - The protocol this transaction belongs to.
  , uNISWAPV3ETHEREUMSwapDTOAccount :: !(Maybe Text) -- ^ "account" - Account that emitted this event.
  , uNISWAPV3ETHEREUMSwapDTOPool :: !(Maybe Text) -- ^ "pool" - The pool involving this event.
  , uNISWAPV3ETHEREUMSwapDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this event.
  , uNISWAPV3ETHEREUMSwapDTOTick :: !(Maybe Text) -- ^ "tick" - Tick of the swap operation.
  , uNISWAPV3ETHEREUMSwapDTOTokenIn :: !(Maybe Text) -- ^ "token_in" - Token deposited into pool.
  , uNISWAPV3ETHEREUMSwapDTOAmountIn :: !(Maybe Text) -- ^ "amount_in" - Amount of token deposited into pool in native units.
  , uNISWAPV3ETHEREUMSwapDTOAmountInUsd :: !(Maybe Text) -- ^ "amount_in_usd" - Amount of token deposited into pool in USD.
  , uNISWAPV3ETHEREUMSwapDTOTokenOut :: !(Maybe Text) -- ^ "token_out" - Token withdrawn from pool.
  , uNISWAPV3ETHEREUMSwapDTOAmountOut :: !(Maybe Text) -- ^ "amount_out" - Amount of token withdrawn from pool in native units.
  , uNISWAPV3ETHEREUMSwapDTOAmountOutUsd :: !(Maybe Text) -- ^ "amount_out_usd" - Amount of token withdrawn from pool in USD.
  , uNISWAPV3ETHEREUMSwapDTOReserveAmounts :: !(Maybe [Text]) -- ^ "reserve_amounts" - Amount of input tokens in the liquidity pool.
  , uNISWAPV3ETHEREUMSwapDTOPoolId :: !(Maybe Text) -- ^ /ReadOnly/ "pool_id"
  , uNISWAPV3ETHEREUMSwapDTOTransactionId :: !(Maybe Text) -- ^ /ReadOnly/ "transaction_id"
  , uNISWAPV3ETHEREUMSwapDTOEvaluatedPrice :: !(Maybe Double) -- ^ /ReadOnly/ "evaluated_price"
  , uNISWAPV3ETHEREUMSwapDTOEvaluatedAmount :: !(Maybe Double) -- ^ /ReadOnly/ "evaluated_amount"
  , uNISWAPV3ETHEREUMSwapDTOEvaluatedAggressor :: !(Maybe TransactionsETradeAggressiveSide) -- ^ "evaluated_aggressor"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV3ETHEREUMSwapDTO
instance A.FromJSON UNISWAPV3ETHEREUMSwapDTO where
  parseJSON = A.withObject "UNISWAPV3ETHEREUMSwapDTO" $ \o ->
    UNISWAPV3ETHEREUMSwapDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "block_")
      <*> (o .:? "id")
      <*> (o .:? "hash")
      <*> (o .:? "nonce")
      <*> (o .:? "log_index")
      <*> (o .:? "gas_limit")
      <*> (o .:? "gas_used")
      <*> (o .:? "gas_price")
      <*> (o .:? "protocol")
      <*> (o .:? "account")
      <*> (o .:? "pool")
      <*> (o .:? "timestamp")
      <*> (o .:? "tick")
      <*> (o .:? "token_in")
      <*> (o .:? "amount_in")
      <*> (o .:? "amount_in_usd")
      <*> (o .:? "token_out")
      <*> (o .:? "amount_out")
      <*> (o .:? "amount_out_usd")
      <*> (o .:? "reserve_amounts")
      <*> (o .:? "pool_id")
      <*> (o .:? "transaction_id")
      <*> (o .:? "evaluated_price")
      <*> (o .:? "evaluated_amount")
      <*> (o .:? "evaluated_aggressor")

-- | ToJSON UNISWAPV3ETHEREUMSwapDTO
instance A.ToJSON UNISWAPV3ETHEREUMSwapDTO where
  toJSON UNISWAPV3ETHEREUMSwapDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV3ETHEREUMSwapDTOEntryTime
      , "recv_time" .= uNISWAPV3ETHEREUMSwapDTORecvTime
      , "block_number" .= uNISWAPV3ETHEREUMSwapDTOBlockNumber
      , "block_" .= uNISWAPV3ETHEREUMSwapDTOBlock
      , "id" .= uNISWAPV3ETHEREUMSwapDTOId
      , "hash" .= uNISWAPV3ETHEREUMSwapDTOHash
      , "nonce" .= uNISWAPV3ETHEREUMSwapDTONonce
      , "log_index" .= uNISWAPV3ETHEREUMSwapDTOLogIndex
      , "gas_limit" .= uNISWAPV3ETHEREUMSwapDTOGasLimit
      , "gas_used" .= uNISWAPV3ETHEREUMSwapDTOGasUsed
      , "gas_price" .= uNISWAPV3ETHEREUMSwapDTOGasPrice
      , "protocol" .= uNISWAPV3ETHEREUMSwapDTOProtocol
      , "account" .= uNISWAPV3ETHEREUMSwapDTOAccount
      , "pool" .= uNISWAPV3ETHEREUMSwapDTOPool
      , "timestamp" .= uNISWAPV3ETHEREUMSwapDTOTimestamp
      , "tick" .= uNISWAPV3ETHEREUMSwapDTOTick
      , "token_in" .= uNISWAPV3ETHEREUMSwapDTOTokenIn
      , "amount_in" .= uNISWAPV3ETHEREUMSwapDTOAmountIn
      , "amount_in_usd" .= uNISWAPV3ETHEREUMSwapDTOAmountInUsd
      , "token_out" .= uNISWAPV3ETHEREUMSwapDTOTokenOut
      , "amount_out" .= uNISWAPV3ETHEREUMSwapDTOAmountOut
      , "amount_out_usd" .= uNISWAPV3ETHEREUMSwapDTOAmountOutUsd
      , "reserve_amounts" .= uNISWAPV3ETHEREUMSwapDTOReserveAmounts
      , "pool_id" .= uNISWAPV3ETHEREUMSwapDTOPoolId
      , "transaction_id" .= uNISWAPV3ETHEREUMSwapDTOTransactionId
      , "evaluated_price" .= uNISWAPV3ETHEREUMSwapDTOEvaluatedPrice
      , "evaluated_amount" .= uNISWAPV3ETHEREUMSwapDTOEvaluatedAmount
      , "evaluated_aggressor" .= uNISWAPV3ETHEREUMSwapDTOEvaluatedAggressor
      ]


-- | Construct a value of type 'UNISWAPV3ETHEREUMSwapDTO' (by applying it's required fields, if any)
mkUNISWAPV3ETHEREUMSwapDTO
  :: UNISWAPV3ETHEREUMSwapDTO
mkUNISWAPV3ETHEREUMSwapDTO =
  UNISWAPV3ETHEREUMSwapDTO
  { uNISWAPV3ETHEREUMSwapDTOEntryTime = Nothing
  , uNISWAPV3ETHEREUMSwapDTORecvTime = Nothing
  , uNISWAPV3ETHEREUMSwapDTOBlockNumber = Nothing
  , uNISWAPV3ETHEREUMSwapDTOBlock = Nothing
  , uNISWAPV3ETHEREUMSwapDTOId = Nothing
  , uNISWAPV3ETHEREUMSwapDTOHash = Nothing
  , uNISWAPV3ETHEREUMSwapDTONonce = Nothing
  , uNISWAPV3ETHEREUMSwapDTOLogIndex = Nothing
  , uNISWAPV3ETHEREUMSwapDTOGasLimit = Nothing
  , uNISWAPV3ETHEREUMSwapDTOGasUsed = Nothing
  , uNISWAPV3ETHEREUMSwapDTOGasPrice = Nothing
  , uNISWAPV3ETHEREUMSwapDTOProtocol = Nothing
  , uNISWAPV3ETHEREUMSwapDTOAccount = Nothing
  , uNISWAPV3ETHEREUMSwapDTOPool = Nothing
  , uNISWAPV3ETHEREUMSwapDTOTimestamp = Nothing
  , uNISWAPV3ETHEREUMSwapDTOTick = Nothing
  , uNISWAPV3ETHEREUMSwapDTOTokenIn = Nothing
  , uNISWAPV3ETHEREUMSwapDTOAmountIn = Nothing
  , uNISWAPV3ETHEREUMSwapDTOAmountInUsd = Nothing
  , uNISWAPV3ETHEREUMSwapDTOTokenOut = Nothing
  , uNISWAPV3ETHEREUMSwapDTOAmountOut = Nothing
  , uNISWAPV3ETHEREUMSwapDTOAmountOutUsd = Nothing
  , uNISWAPV3ETHEREUMSwapDTOReserveAmounts = Nothing
  , uNISWAPV3ETHEREUMSwapDTOPoolId = Nothing
  , uNISWAPV3ETHEREUMSwapDTOTransactionId = Nothing
  , uNISWAPV3ETHEREUMSwapDTOEvaluatedPrice = Nothing
  , uNISWAPV3ETHEREUMSwapDTOEvaluatedAmount = Nothing
  , uNISWAPV3ETHEREUMSwapDTOEvaluatedAggressor = Nothing
  }

-- ** UNISWAPV3ETHEREUMTickDTO
-- | UNISWAPV3ETHEREUMTickDTO
-- 
data UNISWAPV3ETHEREUMTickDTO = UNISWAPV3ETHEREUMTickDTO
  { uNISWAPV3ETHEREUMTickDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV3ETHEREUMTickDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV3ETHEREUMTickDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV3ETHEREUMTickDTOId :: !(Maybe Text) -- ^ "id" - (pool address)-(tick index)
  , uNISWAPV3ETHEREUMTickDTOIndex :: !(Maybe Text) -- ^ "index" - tick index
  , uNISWAPV3ETHEREUMTickDTOPool :: !(Maybe Text) -- ^ "pool" - Liquidity pool this tick belongs to
  , uNISWAPV3ETHEREUMTickDTOCreatedTimestamp :: !(Maybe Text) -- ^ "created_timestamp" - Creation timestamp
  , uNISWAPV3ETHEREUMTickDTOCreatedBlockNumber :: !(Maybe Text) -- ^ "created_block_number" - Creation block number
  , uNISWAPV3ETHEREUMTickDTOPrices :: !(Maybe [Text]) -- ^ "prices" - calculated price of token0 of tick within this pool - constant
  , uNISWAPV3ETHEREUMTickDTOLiquidityGross :: !(Maybe Text) -- ^ "liquidity_gross" - total liquidity pool has as tick lower or upper
  , uNISWAPV3ETHEREUMTickDTOLiquidityGrossUsd :: !(Maybe Text) -- ^ "liquidity_gross_usd" - total liquidity in USD pool has as tick lower or upper
  , uNISWAPV3ETHEREUMTickDTOLiquidityNet :: !(Maybe Text) -- ^ "liquidity_net" - how much liquidity changes when tick crossed
  , uNISWAPV3ETHEREUMTickDTOLiquidityNetUsd :: !(Maybe Text) -- ^ "liquidity_net_usd" - how much liquidity in USD changes when tick crossed
  , uNISWAPV3ETHEREUMTickDTOLastSnapshotDayId :: !(Maybe Int) -- ^ "last_snapshot_day_id" - Day ID of the most recent daily snapshot
  , uNISWAPV3ETHEREUMTickDTOLastSnapshotHourId :: !(Maybe Int) -- ^ "last_snapshot_hour_id" - Hour ID of the most recent hourly snapshot
  , uNISWAPV3ETHEREUMTickDTOLastUpdateTimestamp :: !(Maybe Text) -- ^ "last_update_timestamp" - Timestamp of the last time this entity was updated
  , uNISWAPV3ETHEREUMTickDTOLastUpdateBlockNumber :: !(Maybe Text) -- ^ "last_update_block_number" - Block number of the last time this entity was updated
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV3ETHEREUMTickDTO
instance A.FromJSON UNISWAPV3ETHEREUMTickDTO where
  parseJSON = A.withObject "UNISWAPV3ETHEREUMTickDTO" $ \o ->
    UNISWAPV3ETHEREUMTickDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "index")
      <*> (o .:? "pool")
      <*> (o .:? "created_timestamp")
      <*> (o .:? "created_block_number")
      <*> (o .:? "prices")
      <*> (o .:? "liquidity_gross")
      <*> (o .:? "liquidity_gross_usd")
      <*> (o .:? "liquidity_net")
      <*> (o .:? "liquidity_net_usd")
      <*> (o .:? "last_snapshot_day_id")
      <*> (o .:? "last_snapshot_hour_id")
      <*> (o .:? "last_update_timestamp")
      <*> (o .:? "last_update_block_number")

-- | ToJSON UNISWAPV3ETHEREUMTickDTO
instance A.ToJSON UNISWAPV3ETHEREUMTickDTO where
  toJSON UNISWAPV3ETHEREUMTickDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV3ETHEREUMTickDTOEntryTime
      , "recv_time" .= uNISWAPV3ETHEREUMTickDTORecvTime
      , "block_number" .= uNISWAPV3ETHEREUMTickDTOBlockNumber
      , "id" .= uNISWAPV3ETHEREUMTickDTOId
      , "index" .= uNISWAPV3ETHEREUMTickDTOIndex
      , "pool" .= uNISWAPV3ETHEREUMTickDTOPool
      , "created_timestamp" .= uNISWAPV3ETHEREUMTickDTOCreatedTimestamp
      , "created_block_number" .= uNISWAPV3ETHEREUMTickDTOCreatedBlockNumber
      , "prices" .= uNISWAPV3ETHEREUMTickDTOPrices
      , "liquidity_gross" .= uNISWAPV3ETHEREUMTickDTOLiquidityGross
      , "liquidity_gross_usd" .= uNISWAPV3ETHEREUMTickDTOLiquidityGrossUsd
      , "liquidity_net" .= uNISWAPV3ETHEREUMTickDTOLiquidityNet
      , "liquidity_net_usd" .= uNISWAPV3ETHEREUMTickDTOLiquidityNetUsd
      , "last_snapshot_day_id" .= uNISWAPV3ETHEREUMTickDTOLastSnapshotDayId
      , "last_snapshot_hour_id" .= uNISWAPV3ETHEREUMTickDTOLastSnapshotHourId
      , "last_update_timestamp" .= uNISWAPV3ETHEREUMTickDTOLastUpdateTimestamp
      , "last_update_block_number" .= uNISWAPV3ETHEREUMTickDTOLastUpdateBlockNumber
      ]


-- | Construct a value of type 'UNISWAPV3ETHEREUMTickDTO' (by applying it's required fields, if any)
mkUNISWAPV3ETHEREUMTickDTO
  :: UNISWAPV3ETHEREUMTickDTO
mkUNISWAPV3ETHEREUMTickDTO =
  UNISWAPV3ETHEREUMTickDTO
  { uNISWAPV3ETHEREUMTickDTOEntryTime = Nothing
  , uNISWAPV3ETHEREUMTickDTORecvTime = Nothing
  , uNISWAPV3ETHEREUMTickDTOBlockNumber = Nothing
  , uNISWAPV3ETHEREUMTickDTOId = Nothing
  , uNISWAPV3ETHEREUMTickDTOIndex = Nothing
  , uNISWAPV3ETHEREUMTickDTOPool = Nothing
  , uNISWAPV3ETHEREUMTickDTOCreatedTimestamp = Nothing
  , uNISWAPV3ETHEREUMTickDTOCreatedBlockNumber = Nothing
  , uNISWAPV3ETHEREUMTickDTOPrices = Nothing
  , uNISWAPV3ETHEREUMTickDTOLiquidityGross = Nothing
  , uNISWAPV3ETHEREUMTickDTOLiquidityGrossUsd = Nothing
  , uNISWAPV3ETHEREUMTickDTOLiquidityNet = Nothing
  , uNISWAPV3ETHEREUMTickDTOLiquidityNetUsd = Nothing
  , uNISWAPV3ETHEREUMTickDTOLastSnapshotDayId = Nothing
  , uNISWAPV3ETHEREUMTickDTOLastSnapshotHourId = Nothing
  , uNISWAPV3ETHEREUMTickDTOLastUpdateTimestamp = Nothing
  , uNISWAPV3ETHEREUMTickDTOLastUpdateBlockNumber = Nothing
  }

-- ** UNISWAPV3ETHEREUMTickDailySnapshotDTO
-- | UNISWAPV3ETHEREUMTickDailySnapshotDTO
-- 
data UNISWAPV3ETHEREUMTickDailySnapshotDTO = UNISWAPV3ETHEREUMTickDailySnapshotDTO
  { uNISWAPV3ETHEREUMTickDailySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV3ETHEREUMTickDailySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV3ETHEREUMTickDailySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV3ETHEREUMTickDailySnapshotDTOId :: !(Maybe Text) -- ^ "id" - Identifier, format: (pool address)-(tick index)-(day ID)
  , uNISWAPV3ETHEREUMTickDailySnapshotDTODayId :: !(Maybe Int) -- ^ "day_id" - Number of days since Unix epoch time
  , uNISWAPV3ETHEREUMTickDailySnapshotDTOTick :: !(Maybe Text) -- ^ "tick" - tick index
  , uNISWAPV3ETHEREUMTickDailySnapshotDTOPool :: !(Maybe Text) -- ^ "pool" - liquidity pool this tick belongs to
  , uNISWAPV3ETHEREUMTickDailySnapshotDTOLiquidityGross :: !(Maybe Text) -- ^ "liquidity_gross" - total liquidity pool has as tick lower or upper
  , uNISWAPV3ETHEREUMTickDailySnapshotDTOLiquidityGrossUsd :: !(Maybe Text) -- ^ "liquidity_gross_usd" - total liquidity in USD pool has as tick lower or upper
  , uNISWAPV3ETHEREUMTickDailySnapshotDTOLiquidityNet :: !(Maybe Text) -- ^ "liquidity_net" - how much liquidity changes when tick crossed
  , uNISWAPV3ETHEREUMTickDailySnapshotDTOLiquidityNetUsd :: !(Maybe Text) -- ^ "liquidity_net_usd" - how much liquidity in USD changes when tick crossed
  , uNISWAPV3ETHEREUMTickDailySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV3ETHEREUMTickDailySnapshotDTO
instance A.FromJSON UNISWAPV3ETHEREUMTickDailySnapshotDTO where
  parseJSON = A.withObject "UNISWAPV3ETHEREUMTickDailySnapshotDTO" $ \o ->
    UNISWAPV3ETHEREUMTickDailySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "day_id")
      <*> (o .:? "tick")
      <*> (o .:? "pool")
      <*> (o .:? "liquidity_gross")
      <*> (o .:? "liquidity_gross_usd")
      <*> (o .:? "liquidity_net")
      <*> (o .:? "liquidity_net_usd")
      <*> (o .:? "timestamp")

-- | ToJSON UNISWAPV3ETHEREUMTickDailySnapshotDTO
instance A.ToJSON UNISWAPV3ETHEREUMTickDailySnapshotDTO where
  toJSON UNISWAPV3ETHEREUMTickDailySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV3ETHEREUMTickDailySnapshotDTOEntryTime
      , "recv_time" .= uNISWAPV3ETHEREUMTickDailySnapshotDTORecvTime
      , "block_number" .= uNISWAPV3ETHEREUMTickDailySnapshotDTOBlockNumber
      , "id" .= uNISWAPV3ETHEREUMTickDailySnapshotDTOId
      , "day_id" .= uNISWAPV3ETHEREUMTickDailySnapshotDTODayId
      , "tick" .= uNISWAPV3ETHEREUMTickDailySnapshotDTOTick
      , "pool" .= uNISWAPV3ETHEREUMTickDailySnapshotDTOPool
      , "liquidity_gross" .= uNISWAPV3ETHEREUMTickDailySnapshotDTOLiquidityGross
      , "liquidity_gross_usd" .= uNISWAPV3ETHEREUMTickDailySnapshotDTOLiquidityGrossUsd
      , "liquidity_net" .= uNISWAPV3ETHEREUMTickDailySnapshotDTOLiquidityNet
      , "liquidity_net_usd" .= uNISWAPV3ETHEREUMTickDailySnapshotDTOLiquidityNetUsd
      , "timestamp" .= uNISWAPV3ETHEREUMTickDailySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'UNISWAPV3ETHEREUMTickDailySnapshotDTO' (by applying it's required fields, if any)
mkUNISWAPV3ETHEREUMTickDailySnapshotDTO
  :: UNISWAPV3ETHEREUMTickDailySnapshotDTO
mkUNISWAPV3ETHEREUMTickDailySnapshotDTO =
  UNISWAPV3ETHEREUMTickDailySnapshotDTO
  { uNISWAPV3ETHEREUMTickDailySnapshotDTOEntryTime = Nothing
  , uNISWAPV3ETHEREUMTickDailySnapshotDTORecvTime = Nothing
  , uNISWAPV3ETHEREUMTickDailySnapshotDTOBlockNumber = Nothing
  , uNISWAPV3ETHEREUMTickDailySnapshotDTOId = Nothing
  , uNISWAPV3ETHEREUMTickDailySnapshotDTODayId = Nothing
  , uNISWAPV3ETHEREUMTickDailySnapshotDTOTick = Nothing
  , uNISWAPV3ETHEREUMTickDailySnapshotDTOPool = Nothing
  , uNISWAPV3ETHEREUMTickDailySnapshotDTOLiquidityGross = Nothing
  , uNISWAPV3ETHEREUMTickDailySnapshotDTOLiquidityGrossUsd = Nothing
  , uNISWAPV3ETHEREUMTickDailySnapshotDTOLiquidityNet = Nothing
  , uNISWAPV3ETHEREUMTickDailySnapshotDTOLiquidityNetUsd = Nothing
  , uNISWAPV3ETHEREUMTickDailySnapshotDTOTimestamp = Nothing
  }

-- ** UNISWAPV3ETHEREUMTickHourlySnapshotDTO
-- | UNISWAPV3ETHEREUMTickHourlySnapshotDTO
-- 
data UNISWAPV3ETHEREUMTickHourlySnapshotDTO = UNISWAPV3ETHEREUMTickHourlySnapshotDTO
  { uNISWAPV3ETHEREUMTickHourlySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV3ETHEREUMTickHourlySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV3ETHEREUMTickHourlySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV3ETHEREUMTickHourlySnapshotDTOId :: !(Maybe Text) -- ^ "id" - (pool address)-(tick index)-(hour ID)
  , uNISWAPV3ETHEREUMTickHourlySnapshotDTOHourId :: !(Maybe Int) -- ^ "hour_id" - Number of hours since Unix epoch time
  , uNISWAPV3ETHEREUMTickHourlySnapshotDTOTick :: !(Maybe Text) -- ^ "tick" - tick index
  , uNISWAPV3ETHEREUMTickHourlySnapshotDTOPool :: !(Maybe Text) -- ^ "pool" - liquidity pool this tick belongs to
  , uNISWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityGross :: !(Maybe Text) -- ^ "liquidity_gross" - total liquidity pool has as tick lower or upper
  , uNISWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityGrossUsd :: !(Maybe Text) -- ^ "liquidity_gross_usd" - total liquidity in USD pool has as tick lower or upper
  , uNISWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityNet :: !(Maybe Text) -- ^ "liquidity_net" - how much liquidity changes when tick crossed
  , uNISWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityNetUsd :: !(Maybe Text) -- ^ "liquidity_net_usd" - how much liquidity in USD changes when tick crossed
  , uNISWAPV3ETHEREUMTickHourlySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV3ETHEREUMTickHourlySnapshotDTO
instance A.FromJSON UNISWAPV3ETHEREUMTickHourlySnapshotDTO where
  parseJSON = A.withObject "UNISWAPV3ETHEREUMTickHourlySnapshotDTO" $ \o ->
    UNISWAPV3ETHEREUMTickHourlySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "hour_id")
      <*> (o .:? "tick")
      <*> (o .:? "pool")
      <*> (o .:? "liquidity_gross")
      <*> (o .:? "liquidity_gross_usd")
      <*> (o .:? "liquidity_net")
      <*> (o .:? "liquidity_net_usd")
      <*> (o .:? "timestamp")

-- | ToJSON UNISWAPV3ETHEREUMTickHourlySnapshotDTO
instance A.ToJSON UNISWAPV3ETHEREUMTickHourlySnapshotDTO where
  toJSON UNISWAPV3ETHEREUMTickHourlySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV3ETHEREUMTickHourlySnapshotDTOEntryTime
      , "recv_time" .= uNISWAPV3ETHEREUMTickHourlySnapshotDTORecvTime
      , "block_number" .= uNISWAPV3ETHEREUMTickHourlySnapshotDTOBlockNumber
      , "id" .= uNISWAPV3ETHEREUMTickHourlySnapshotDTOId
      , "hour_id" .= uNISWAPV3ETHEREUMTickHourlySnapshotDTOHourId
      , "tick" .= uNISWAPV3ETHEREUMTickHourlySnapshotDTOTick
      , "pool" .= uNISWAPV3ETHEREUMTickHourlySnapshotDTOPool
      , "liquidity_gross" .= uNISWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityGross
      , "liquidity_gross_usd" .= uNISWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityGrossUsd
      , "liquidity_net" .= uNISWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityNet
      , "liquidity_net_usd" .= uNISWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityNetUsd
      , "timestamp" .= uNISWAPV3ETHEREUMTickHourlySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'UNISWAPV3ETHEREUMTickHourlySnapshotDTO' (by applying it's required fields, if any)
mkUNISWAPV3ETHEREUMTickHourlySnapshotDTO
  :: UNISWAPV3ETHEREUMTickHourlySnapshotDTO
mkUNISWAPV3ETHEREUMTickHourlySnapshotDTO =
  UNISWAPV3ETHEREUMTickHourlySnapshotDTO
  { uNISWAPV3ETHEREUMTickHourlySnapshotDTOEntryTime = Nothing
  , uNISWAPV3ETHEREUMTickHourlySnapshotDTORecvTime = Nothing
  , uNISWAPV3ETHEREUMTickHourlySnapshotDTOBlockNumber = Nothing
  , uNISWAPV3ETHEREUMTickHourlySnapshotDTOId = Nothing
  , uNISWAPV3ETHEREUMTickHourlySnapshotDTOHourId = Nothing
  , uNISWAPV3ETHEREUMTickHourlySnapshotDTOTick = Nothing
  , uNISWAPV3ETHEREUMTickHourlySnapshotDTOPool = Nothing
  , uNISWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityGross = Nothing
  , uNISWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityGrossUsd = Nothing
  , uNISWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityNet = Nothing
  , uNISWAPV3ETHEREUMTickHourlySnapshotDTOLiquidityNetUsd = Nothing
  , uNISWAPV3ETHEREUMTickHourlySnapshotDTOTimestamp = Nothing
  }

-- ** UNISWAPV3ETHEREUMTokenDTO
-- | UNISWAPV3ETHEREUMTokenDTO
-- Stores aggregated information for a specific token across all pairs that token is included in.
data UNISWAPV3ETHEREUMTokenDTO = UNISWAPV3ETHEREUMTokenDTO
  { uNISWAPV3ETHEREUMTokenDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV3ETHEREUMTokenDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV3ETHEREUMTokenDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV3ETHEREUMTokenDTOVid :: !(Maybe Integer) -- ^ "vid" - .
  , uNISWAPV3ETHEREUMTokenDTOBlockRange :: !(Maybe Text) -- ^ "block_range" - 
  , uNISWAPV3ETHEREUMTokenDTOId :: !(Maybe Text) -- ^ "id" - Smart contract address of the token.
  , uNISWAPV3ETHEREUMTokenDTOName :: !(Maybe Text) -- ^ "name" - Name of the token, mirrored from the smart contract.
  , uNISWAPV3ETHEREUMTokenDTOSymbol :: !(Maybe Text) -- ^ "symbol" - Symbol of the token, mirrored from the smart contract.
  , uNISWAPV3ETHEREUMTokenDTODecimals :: !(Maybe Int) -- ^ "decimals" - The number of decimal places this token uses, default to 18.
  , uNISWAPV3ETHEREUMTokenDTOLastPriceUsd :: !(Maybe Text) -- ^ "last_price_usd" - Optional field to track the price of a token, mostly for caching purposes.
  , uNISWAPV3ETHEREUMTokenDTOLastPriceBlockNumber :: !(Maybe Text) -- ^ "last_price_block_number" - Optional field to track the block number of the last token price.
  , uNISWAPV3ETHEREUMTokenDTOLastPricePool :: !(Maybe Text) -- ^ "last_price_pool" - Last pool that gave this token a price.
  , uNISWAPV3ETHEREUMTokenDTOTotalSupply :: !(Maybe Text) -- ^ "total_supply" - Amount of tokens in the protocol.
  , uNISWAPV3ETHEREUMTokenDTOTotalValueLockedUsd :: !(Maybe Text) -- ^ "total_value_locked_usd" - Total value locked in the protocol.
  , uNISWAPV3ETHEREUMTokenDTOLargePriceChangeBuffer :: !(Maybe Int) -- ^ "large_price_change_buffer" - The buffer for detecting large price changes.
  , uNISWAPV3ETHEREUMTokenDTOLargeTvlImpactBuffer :: !(Maybe Int) -- ^ "large_tvl_impact_buffer" - The buffer for detecting large TVL (Total Value Locked) impact.
  , uNISWAPV3ETHEREUMTokenDTOTokenSymbol :: !(Maybe Text) -- ^ /ReadOnly/ "token_symbol"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV3ETHEREUMTokenDTO
instance A.FromJSON UNISWAPV3ETHEREUMTokenDTO where
  parseJSON = A.withObject "UNISWAPV3ETHEREUMTokenDTO" $ \o ->
    UNISWAPV3ETHEREUMTokenDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "vid")
      <*> (o .:? "block_range")
      <*> (o .:? "id")
      <*> (o .:? "name")
      <*> (o .:? "symbol")
      <*> (o .:? "decimals")
      <*> (o .:? "last_price_usd")
      <*> (o .:? "last_price_block_number")
      <*> (o .:? "last_price_pool")
      <*> (o .:? "total_supply")
      <*> (o .:? "total_value_locked_usd")
      <*> (o .:? "large_price_change_buffer")
      <*> (o .:? "large_tvl_impact_buffer")
      <*> (o .:? "token_symbol")

-- | ToJSON UNISWAPV3ETHEREUMTokenDTO
instance A.ToJSON UNISWAPV3ETHEREUMTokenDTO where
  toJSON UNISWAPV3ETHEREUMTokenDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV3ETHEREUMTokenDTOEntryTime
      , "recv_time" .= uNISWAPV3ETHEREUMTokenDTORecvTime
      , "block_number" .= uNISWAPV3ETHEREUMTokenDTOBlockNumber
      , "vid" .= uNISWAPV3ETHEREUMTokenDTOVid
      , "block_range" .= uNISWAPV3ETHEREUMTokenDTOBlockRange
      , "id" .= uNISWAPV3ETHEREUMTokenDTOId
      , "name" .= uNISWAPV3ETHEREUMTokenDTOName
      , "symbol" .= uNISWAPV3ETHEREUMTokenDTOSymbol
      , "decimals" .= uNISWAPV3ETHEREUMTokenDTODecimals
      , "last_price_usd" .= uNISWAPV3ETHEREUMTokenDTOLastPriceUsd
      , "last_price_block_number" .= uNISWAPV3ETHEREUMTokenDTOLastPriceBlockNumber
      , "last_price_pool" .= uNISWAPV3ETHEREUMTokenDTOLastPricePool
      , "total_supply" .= uNISWAPV3ETHEREUMTokenDTOTotalSupply
      , "total_value_locked_usd" .= uNISWAPV3ETHEREUMTokenDTOTotalValueLockedUsd
      , "large_price_change_buffer" .= uNISWAPV3ETHEREUMTokenDTOLargePriceChangeBuffer
      , "large_tvl_impact_buffer" .= uNISWAPV3ETHEREUMTokenDTOLargeTvlImpactBuffer
      , "token_symbol" .= uNISWAPV3ETHEREUMTokenDTOTokenSymbol
      ]


-- | Construct a value of type 'UNISWAPV3ETHEREUMTokenDTO' (by applying it's required fields, if any)
mkUNISWAPV3ETHEREUMTokenDTO
  :: UNISWAPV3ETHEREUMTokenDTO
mkUNISWAPV3ETHEREUMTokenDTO =
  UNISWAPV3ETHEREUMTokenDTO
  { uNISWAPV3ETHEREUMTokenDTOEntryTime = Nothing
  , uNISWAPV3ETHEREUMTokenDTORecvTime = Nothing
  , uNISWAPV3ETHEREUMTokenDTOBlockNumber = Nothing
  , uNISWAPV3ETHEREUMTokenDTOVid = Nothing
  , uNISWAPV3ETHEREUMTokenDTOBlockRange = Nothing
  , uNISWAPV3ETHEREUMTokenDTOId = Nothing
  , uNISWAPV3ETHEREUMTokenDTOName = Nothing
  , uNISWAPV3ETHEREUMTokenDTOSymbol = Nothing
  , uNISWAPV3ETHEREUMTokenDTODecimals = Nothing
  , uNISWAPV3ETHEREUMTokenDTOLastPriceUsd = Nothing
  , uNISWAPV3ETHEREUMTokenDTOLastPriceBlockNumber = Nothing
  , uNISWAPV3ETHEREUMTokenDTOLastPricePool = Nothing
  , uNISWAPV3ETHEREUMTokenDTOTotalSupply = Nothing
  , uNISWAPV3ETHEREUMTokenDTOTotalValueLockedUsd = Nothing
  , uNISWAPV3ETHEREUMTokenDTOLargePriceChangeBuffer = Nothing
  , uNISWAPV3ETHEREUMTokenDTOLargeTvlImpactBuffer = Nothing
  , uNISWAPV3ETHEREUMTokenDTOTokenSymbol = Nothing
  }

-- ** UNISWAPV3ETHEREUMTokenWhiteListDTO
-- | UNISWAPV3ETHEREUMTokenWhiteListDTO
-- 
data UNISWAPV3ETHEREUMTokenWhiteListDTO = UNISWAPV3ETHEREUMTokenWhiteListDTO
  { uNISWAPV3ETHEREUMTokenWhiteListDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV3ETHEREUMTokenWhiteListDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV3ETHEREUMTokenWhiteListDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV3ETHEREUMTokenWhiteListDTOId :: !(Maybe Text) -- ^ "id" - Token Address
  , uNISWAPV3ETHEREUMTokenWhiteListDTOWhitelistPools :: !(Maybe [Text]) -- ^ "whitelist_pools" - pools token is in that are white listed for USD pricing
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV3ETHEREUMTokenWhiteListDTO
instance A.FromJSON UNISWAPV3ETHEREUMTokenWhiteListDTO where
  parseJSON = A.withObject "UNISWAPV3ETHEREUMTokenWhiteListDTO" $ \o ->
    UNISWAPV3ETHEREUMTokenWhiteListDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "whitelist_pools")

-- | ToJSON UNISWAPV3ETHEREUMTokenWhiteListDTO
instance A.ToJSON UNISWAPV3ETHEREUMTokenWhiteListDTO where
  toJSON UNISWAPV3ETHEREUMTokenWhiteListDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV3ETHEREUMTokenWhiteListDTOEntryTime
      , "recv_time" .= uNISWAPV3ETHEREUMTokenWhiteListDTORecvTime
      , "block_number" .= uNISWAPV3ETHEREUMTokenWhiteListDTOBlockNumber
      , "id" .= uNISWAPV3ETHEREUMTokenWhiteListDTOId
      , "whitelist_pools" .= uNISWAPV3ETHEREUMTokenWhiteListDTOWhitelistPools
      ]


-- | Construct a value of type 'UNISWAPV3ETHEREUMTokenWhiteListDTO' (by applying it's required fields, if any)
mkUNISWAPV3ETHEREUMTokenWhiteListDTO
  :: UNISWAPV3ETHEREUMTokenWhiteListDTO
mkUNISWAPV3ETHEREUMTokenWhiteListDTO =
  UNISWAPV3ETHEREUMTokenWhiteListDTO
  { uNISWAPV3ETHEREUMTokenWhiteListDTOEntryTime = Nothing
  , uNISWAPV3ETHEREUMTokenWhiteListDTORecvTime = Nothing
  , uNISWAPV3ETHEREUMTokenWhiteListDTOBlockNumber = Nothing
  , uNISWAPV3ETHEREUMTokenWhiteListDTOId = Nothing
  , uNISWAPV3ETHEREUMTokenWhiteListDTOWhitelistPools = Nothing
  }

-- ** UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO
-- | UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO
-- 
data UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO = UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO
  { uNISWAPV3ETHEREUMTokenWhiteListSymbolDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV3ETHEREUMTokenWhiteListSymbolDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV3ETHEREUMTokenWhiteListSymbolDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV3ETHEREUMTokenWhiteListSymbolDTOId :: !(Maybe Text) -- ^ "id" - Whitelist Token Symbol
  , uNISWAPV3ETHEREUMTokenWhiteListSymbolDTOAddress :: !(Maybe Text) -- ^ "address" - Whitelist Token Address
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO
instance A.FromJSON UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO where
  parseJSON = A.withObject "UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO" $ \o ->
    UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "address")

-- | ToJSON UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO
instance A.ToJSON UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO where
  toJSON UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV3ETHEREUMTokenWhiteListSymbolDTOEntryTime
      , "recv_time" .= uNISWAPV3ETHEREUMTokenWhiteListSymbolDTORecvTime
      , "block_number" .= uNISWAPV3ETHEREUMTokenWhiteListSymbolDTOBlockNumber
      , "id" .= uNISWAPV3ETHEREUMTokenWhiteListSymbolDTOId
      , "address" .= uNISWAPV3ETHEREUMTokenWhiteListSymbolDTOAddress
      ]


-- | Construct a value of type 'UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO' (by applying it's required fields, if any)
mkUNISWAPV3ETHEREUMTokenWhiteListSymbolDTO
  :: UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO
mkUNISWAPV3ETHEREUMTokenWhiteListSymbolDTO =
  UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO
  { uNISWAPV3ETHEREUMTokenWhiteListSymbolDTOEntryTime = Nothing
  , uNISWAPV3ETHEREUMTokenWhiteListSymbolDTORecvTime = Nothing
  , uNISWAPV3ETHEREUMTokenWhiteListSymbolDTOBlockNumber = Nothing
  , uNISWAPV3ETHEREUMTokenWhiteListSymbolDTOId = Nothing
  , uNISWAPV3ETHEREUMTokenWhiteListSymbolDTOAddress = Nothing
  }

-- ** UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
-- | UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
-- 
data UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO = UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
  { uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOId :: !(Maybe Text) -- ^ "id" - ID is # of days since Unix epoch time
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODay :: !(Maybe Int) -- ^ "day" - Number of days since Unix epoch time
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - Protocol this snapshot is associated with
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyActiveUsers :: !(Maybe Int) -- ^ "daily_active_users" - Number of unique daily active users
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOCumulativeUniqueUsers :: !(Maybe Int) -- ^ "cumulative_unique_users" - Number of cumulative unique users
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyTransactionCount :: !(Maybe Int) -- ^ "daily_transaction_count" - Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface.
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOTotalPoolCount :: !(Maybe Int) -- ^ "total_pool_count" - Total number of pools
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyDepositCount :: !(Maybe Int) -- ^ "daily_deposit_count" - Total number of deposits (add liquidity) in an day
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyWithdrawCount :: !(Maybe Int) -- ^ "daily_withdraw_count" - Total number of withdrawals (remove liquidity) in an day
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailySwapCount :: !(Maybe Int) -- ^ "daily_swap_count" - Total number of trades (swaps) in an day
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
instance A.FromJSON UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO where
  parseJSON = A.withObject "UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO" $ \o ->
    UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "day")
      <*> (o .:? "protocol")
      <*> (o .:? "daily_active_users")
      <*> (o .:? "cumulative_unique_users")
      <*> (o .:? "daily_transaction_count")
      <*> (o .:? "total_pool_count")
      <*> (o .:? "daily_deposit_count")
      <*> (o .:? "daily_withdraw_count")
      <*> (o .:? "daily_swap_count")
      <*> (o .:? "timestamp")

-- | ToJSON UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
instance A.ToJSON UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO where
  toJSON UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOEntryTime
      , "recv_time" .= uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTORecvTime
      , "block_number" .= uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOBlockNumber
      , "id" .= uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOId
      , "day" .= uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODay
      , "protocol" .= uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOProtocol
      , "daily_active_users" .= uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyActiveUsers
      , "cumulative_unique_users" .= uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOCumulativeUniqueUsers
      , "daily_transaction_count" .= uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyTransactionCount
      , "total_pool_count" .= uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOTotalPoolCount
      , "daily_deposit_count" .= uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyDepositCount
      , "daily_withdraw_count" .= uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyWithdrawCount
      , "daily_swap_count" .= uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailySwapCount
      , "timestamp" .= uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO' (by applying it's required fields, if any)
mkUNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
  :: UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
mkUNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO =
  UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO
  { uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOEntryTime = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTORecvTime = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOBlockNumber = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOId = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODay = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOProtocol = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyActiveUsers = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOCumulativeUniqueUsers = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyTransactionCount = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOTotalPoolCount = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyDepositCount = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailyWithdrawCount = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTODailySwapCount = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTOTimestamp = Nothing
  }

-- ** UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
-- | UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
-- 
data UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO = UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
  { uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOId :: !(Maybe Text) -- ^ "id" - (# of hours since Unix epoch time)
  , uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHour :: !(Maybe Int) -- ^ "hour" - Number of hours since Unix epoch time
  , uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOProtocol :: !(Maybe Text) -- ^ "protocol" - Protocol this snapshot is associated with
  , uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyActiveUsers :: !(Maybe Int) -- ^ "hourly_active_users" - Number of unique hourly active users
  , uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOCumulativeUniqueUsers :: !(Maybe Int) -- ^ "cumulative_unique_users" - Number of cumulative unique users
  , uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyTransactionCount :: !(Maybe Int) -- ^ "hourly_transaction_count" - Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface.
  , uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyDepositCount :: !(Maybe Int) -- ^ "hourly_deposit_count" - Total number of deposits (add liquidity) in an hour
  , uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyWithdrawCount :: !(Maybe Int) -- ^ "hourly_withdraw_count" - Total number of withdrawals (remove liquidity) in an hour
  , uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlySwapCount :: !(Maybe Int) -- ^ "hourly_swap_count" - Total number of trades (swaps) in an hour
  , uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
instance A.FromJSON UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO where
  parseJSON = A.withObject "UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO" $ \o ->
    UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "hour")
      <*> (o .:? "protocol")
      <*> (o .:? "hourly_active_users")
      <*> (o .:? "cumulative_unique_users")
      <*> (o .:? "hourly_transaction_count")
      <*> (o .:? "hourly_deposit_count")
      <*> (o .:? "hourly_withdraw_count")
      <*> (o .:? "hourly_swap_count")
      <*> (o .:? "timestamp")

-- | ToJSON UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
instance A.ToJSON UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO where
  toJSON UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOEntryTime
      , "recv_time" .= uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTORecvTime
      , "block_number" .= uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOBlockNumber
      , "id" .= uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOId
      , "hour" .= uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHour
      , "protocol" .= uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOProtocol
      , "hourly_active_users" .= uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyActiveUsers
      , "cumulative_unique_users" .= uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOCumulativeUniqueUsers
      , "hourly_transaction_count" .= uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyTransactionCount
      , "hourly_deposit_count" .= uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyDepositCount
      , "hourly_withdraw_count" .= uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyWithdrawCount
      , "hourly_swap_count" .= uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlySwapCount
      , "timestamp" .= uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOTimestamp
      ]


-- | Construct a value of type 'UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO' (by applying it's required fields, if any)
mkUNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
  :: UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
mkUNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO =
  UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO
  { uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOEntryTime = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTORecvTime = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOBlockNumber = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOId = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHour = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOProtocol = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyActiveUsers = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOCumulativeUniqueUsers = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyTransactionCount = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyDepositCount = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlyWithdrawCount = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOHourlySwapCount = Nothing
  , uNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTOTimestamp = Nothing
  }

-- ** UNISWAPV3ETHEREUMWithdrawDTO
-- | UNISWAPV3ETHEREUMWithdrawDTO
-- 
data UNISWAPV3ETHEREUMWithdrawDTO = UNISWAPV3ETHEREUMWithdrawDTO
  { uNISWAPV3ETHEREUMWithdrawDTOEntryTime :: !(Maybe DateTime) -- ^ "entry_time"
  , uNISWAPV3ETHEREUMWithdrawDTORecvTime :: !(Maybe DateTime) -- ^ "recv_time"
  , uNISWAPV3ETHEREUMWithdrawDTOBlockNumber :: !(Maybe Integer) -- ^ "block_number" - Number of block in which entity was recorded.
  , uNISWAPV3ETHEREUMWithdrawDTOId :: !(Maybe Text) -- ^ "id" - (transaction hash)-(log index)
  , uNISWAPV3ETHEREUMWithdrawDTOHash :: !(Maybe Text) -- ^ "hash" - Transaction hash of the transaction that emitted this event
  , uNISWAPV3ETHEREUMWithdrawDTONonce :: !(Maybe Text) -- ^ "nonce" - Nonce of the transaction that emitted this event
  , uNISWAPV3ETHEREUMWithdrawDTOLogIndex :: !(Maybe Int) -- ^ "log_index" - Event log index. For transactions that don&#39;t emit event, create arbitrary index starting from 0
  , uNISWAPV3ETHEREUMWithdrawDTOGasLimit :: !(Maybe Text) -- ^ "gas_limit" - Gas limit of the transaction that emitted this event
  , uNISWAPV3ETHEREUMWithdrawDTOGasUsed :: !(Maybe Text) -- ^ "gas_used" - Gas used in this transaction. (Optional because not every chain will support this)
  , uNISWAPV3ETHEREUMWithdrawDTOGasPrice :: !(Maybe Text) -- ^ "gas_price" - Gas price of the transaction that emitted this event
  , uNISWAPV3ETHEREUMWithdrawDTOProtocol :: !(Maybe Text) -- ^ "protocol" - The protocol this transaction belongs to
  , uNISWAPV3ETHEREUMWithdrawDTOAccount :: !(Maybe Text) -- ^ "account" - Account that emitted this event
  , uNISWAPV3ETHEREUMWithdrawDTOPosition :: !(Maybe Text) -- ^ "position" - The user position changed by this event
  , uNISWAPV3ETHEREUMWithdrawDTOTickLower :: !(Maybe Text) -- ^ "tick_lower" - lower tick of position
  , uNISWAPV3ETHEREUMWithdrawDTOTickUpper :: !(Maybe Text) -- ^ "tick_upper" - upper tick of position
  , uNISWAPV3ETHEREUMWithdrawDTOPool :: !(Maybe Text) -- ^ "pool" - The pool involving this event
  , uNISWAPV3ETHEREUMWithdrawDTOTimestamp :: !(Maybe Text) -- ^ "timestamp" - Timestamp of this event
  , uNISWAPV3ETHEREUMWithdrawDTOLiquidity :: !(Maybe Text) -- ^ "liquidity" - Amount of liquidity burned
  , uNISWAPV3ETHEREUMWithdrawDTOInputTokens :: !(Maybe [Text]) -- ^ "input_tokens" - Input tokens of the pool (not input tokens of the event/transaction). E.g. WETH and USDC from a WETH-USDC pool
  , uNISWAPV3ETHEREUMWithdrawDTOInputTokenAmounts :: !(Maybe [Text]) -- ^ "input_token_amounts" - Amount of input tokens in the token&#39;s native unit
  , uNISWAPV3ETHEREUMWithdrawDTOReserveAmounts :: !(Maybe [Text]) -- ^ "reserve_amounts" - Amount of input tokens in the liquidity pool
  , uNISWAPV3ETHEREUMWithdrawDTOAmountUsd :: !(Maybe Text) -- ^ "amount_usd" - USD-normalized value of the transaction of the underlying (e.g. sum of tokens withdrawn from a pool)
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON UNISWAPV3ETHEREUMWithdrawDTO
instance A.FromJSON UNISWAPV3ETHEREUMWithdrawDTO where
  parseJSON = A.withObject "UNISWAPV3ETHEREUMWithdrawDTO" $ \o ->
    UNISWAPV3ETHEREUMWithdrawDTO
      <$> (o .:? "entry_time")
      <*> (o .:? "recv_time")
      <*> (o .:? "block_number")
      <*> (o .:? "id")
      <*> (o .:? "hash")
      <*> (o .:? "nonce")
      <*> (o .:? "log_index")
      <*> (o .:? "gas_limit")
      <*> (o .:? "gas_used")
      <*> (o .:? "gas_price")
      <*> (o .:? "protocol")
      <*> (o .:? "account")
      <*> (o .:? "position")
      <*> (o .:? "tick_lower")
      <*> (o .:? "tick_upper")
      <*> (o .:? "pool")
      <*> (o .:? "timestamp")
      <*> (o .:? "liquidity")
      <*> (o .:? "input_tokens")
      <*> (o .:? "input_token_amounts")
      <*> (o .:? "reserve_amounts")
      <*> (o .:? "amount_usd")

-- | ToJSON UNISWAPV3ETHEREUMWithdrawDTO
instance A.ToJSON UNISWAPV3ETHEREUMWithdrawDTO where
  toJSON UNISWAPV3ETHEREUMWithdrawDTO {..} =
   _omitNulls
      [ "entry_time" .= uNISWAPV3ETHEREUMWithdrawDTOEntryTime
      , "recv_time" .= uNISWAPV3ETHEREUMWithdrawDTORecvTime
      , "block_number" .= uNISWAPV3ETHEREUMWithdrawDTOBlockNumber
      , "id" .= uNISWAPV3ETHEREUMWithdrawDTOId
      , "hash" .= uNISWAPV3ETHEREUMWithdrawDTOHash
      , "nonce" .= uNISWAPV3ETHEREUMWithdrawDTONonce
      , "log_index" .= uNISWAPV3ETHEREUMWithdrawDTOLogIndex
      , "gas_limit" .= uNISWAPV3ETHEREUMWithdrawDTOGasLimit
      , "gas_used" .= uNISWAPV3ETHEREUMWithdrawDTOGasUsed
      , "gas_price" .= uNISWAPV3ETHEREUMWithdrawDTOGasPrice
      , "protocol" .= uNISWAPV3ETHEREUMWithdrawDTOProtocol
      , "account" .= uNISWAPV3ETHEREUMWithdrawDTOAccount
      , "position" .= uNISWAPV3ETHEREUMWithdrawDTOPosition
      , "tick_lower" .= uNISWAPV3ETHEREUMWithdrawDTOTickLower
      , "tick_upper" .= uNISWAPV3ETHEREUMWithdrawDTOTickUpper
      , "pool" .= uNISWAPV3ETHEREUMWithdrawDTOPool
      , "timestamp" .= uNISWAPV3ETHEREUMWithdrawDTOTimestamp
      , "liquidity" .= uNISWAPV3ETHEREUMWithdrawDTOLiquidity
      , "input_tokens" .= uNISWAPV3ETHEREUMWithdrawDTOInputTokens
      , "input_token_amounts" .= uNISWAPV3ETHEREUMWithdrawDTOInputTokenAmounts
      , "reserve_amounts" .= uNISWAPV3ETHEREUMWithdrawDTOReserveAmounts
      , "amount_usd" .= uNISWAPV3ETHEREUMWithdrawDTOAmountUsd
      ]


-- | Construct a value of type 'UNISWAPV3ETHEREUMWithdrawDTO' (by applying it's required fields, if any)
mkUNISWAPV3ETHEREUMWithdrawDTO
  :: UNISWAPV3ETHEREUMWithdrawDTO
mkUNISWAPV3ETHEREUMWithdrawDTO =
  UNISWAPV3ETHEREUMWithdrawDTO
  { uNISWAPV3ETHEREUMWithdrawDTOEntryTime = Nothing
  , uNISWAPV3ETHEREUMWithdrawDTORecvTime = Nothing
  , uNISWAPV3ETHEREUMWithdrawDTOBlockNumber = Nothing
  , uNISWAPV3ETHEREUMWithdrawDTOId = Nothing
  , uNISWAPV3ETHEREUMWithdrawDTOHash = Nothing
  , uNISWAPV3ETHEREUMWithdrawDTONonce = Nothing
  , uNISWAPV3ETHEREUMWithdrawDTOLogIndex = Nothing
  , uNISWAPV3ETHEREUMWithdrawDTOGasLimit = Nothing
  , uNISWAPV3ETHEREUMWithdrawDTOGasUsed = Nothing
  , uNISWAPV3ETHEREUMWithdrawDTOGasPrice = Nothing
  , uNISWAPV3ETHEREUMWithdrawDTOProtocol = Nothing
  , uNISWAPV3ETHEREUMWithdrawDTOAccount = Nothing
  , uNISWAPV3ETHEREUMWithdrawDTOPosition = Nothing
  , uNISWAPV3ETHEREUMWithdrawDTOTickLower = Nothing
  , uNISWAPV3ETHEREUMWithdrawDTOTickUpper = Nothing
  , uNISWAPV3ETHEREUMWithdrawDTOPool = Nothing
  , uNISWAPV3ETHEREUMWithdrawDTOTimestamp = Nothing
  , uNISWAPV3ETHEREUMWithdrawDTOLiquidity = Nothing
  , uNISWAPV3ETHEREUMWithdrawDTOInputTokens = Nothing
  , uNISWAPV3ETHEREUMWithdrawDTOInputTokenAmounts = Nothing
  , uNISWAPV3ETHEREUMWithdrawDTOReserveAmounts = Nothing
  , uNISWAPV3ETHEREUMWithdrawDTOAmountUsd = Nothing
  }


-- * Enums


-- ** TransactionsETradeAggressiveSide

-- | Enum of 'Text'
data TransactionsETradeAggressiveSide
  = TransactionsETradeAggressiveSide'Buy -- ^ @"Buy"@
  | TransactionsETradeAggressiveSide'Sell -- ^ @"Sell"@
  | TransactionsETradeAggressiveSide'EstimatedBuy -- ^ @"EstimatedBuy"@
  | TransactionsETradeAggressiveSide'EstimatedSell -- ^ @"EstimatedSell"@
  | TransactionsETradeAggressiveSide'Unknown -- ^ @"Unknown"@
  deriving (P.Show, P.Eq, P.Typeable, P.Ord, P.Bounded, P.Enum)

instance A.ToJSON TransactionsETradeAggressiveSide where toJSON = A.toJSON . fromTransactionsETradeAggressiveSide
instance A.FromJSON TransactionsETradeAggressiveSide where parseJSON o = P.either P.fail (pure . P.id) . toTransactionsETradeAggressiveSide =<< A.parseJSON o
instance WH.ToHttpApiData TransactionsETradeAggressiveSide where toQueryParam = WH.toQueryParam . fromTransactionsETradeAggressiveSide
instance WH.FromHttpApiData TransactionsETradeAggressiveSide where parseQueryParam o = WH.parseQueryParam o >>= P.left T.pack . toTransactionsETradeAggressiveSide
instance MimeRender MimeMultipartFormData TransactionsETradeAggressiveSide where mimeRender _ = mimeRenderDefaultMultipartFormData

-- | unwrap 'TransactionsETradeAggressiveSide' enum
fromTransactionsETradeAggressiveSide :: TransactionsETradeAggressiveSide -> Text
fromTransactionsETradeAggressiveSide = \case
  TransactionsETradeAggressiveSide'Buy -> "Buy"
  TransactionsETradeAggressiveSide'Sell -> "Sell"
  TransactionsETradeAggressiveSide'EstimatedBuy -> "EstimatedBuy"
  TransactionsETradeAggressiveSide'EstimatedSell -> "EstimatedSell"
  TransactionsETradeAggressiveSide'Unknown -> "Unknown"

-- | parse 'TransactionsETradeAggressiveSide' enum
toTransactionsETradeAggressiveSide :: Text -> P.Either String TransactionsETradeAggressiveSide
toTransactionsETradeAggressiveSide = \case
  "Buy" -> P.Right TransactionsETradeAggressiveSide'Buy
  "Sell" -> P.Right TransactionsETradeAggressiveSide'Sell
  "EstimatedBuy" -> P.Right TransactionsETradeAggressiveSide'EstimatedBuy
  "EstimatedSell" -> P.Right TransactionsETradeAggressiveSide'EstimatedSell
  "Unknown" -> P.Right TransactionsETradeAggressiveSide'Unknown
  s -> P.Left $ "toTransactionsETradeAggressiveSide: enum parse failure: " P.++ P.show s



