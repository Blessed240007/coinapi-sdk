//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.12

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

import 'package:openapi/api.dart';
import 'package:test/test.dart';

// tests for SUSHISWAPV3ETHEREUMDexAmmProtocolDTO
void main() {
  // final instance = SUSHISWAPV3ETHEREUMDexAmmProtocolDTO();

  group('test SUSHISWAPV3ETHEREUMDexAmmProtocolDTO', () {
    // DateTime entryTime
    test('to test the property `entryTime`', () async {
      // TODO
    });

    // DateTime recvTime
    test('to test the property `recvTime`', () async {
      // TODO
    });

    // Number of block in which entity was recorded.
    // int blockNumber
    test('to test the property `blockNumber`', () async {
      // TODO
    });

    // 
    // String blockRange
    test('to test the property `blockRange`', () async {
      // TODO
    });

    // Smart contract address of the protocol's main contract (Factory, Registry, etc).
    // String id
    test('to test the property `id`', () async {
      // TODO
    });

    // Name of the protocol, including version. e.g. Uniswap v3.
    // String name
    test('to test the property `name`', () async {
      // TODO
    });

    // Slug of protocol, including version. e.g. uniswap-v3.
    // String slug
    test('to test the property `slug`', () async {
      // TODO
    });

    // Version of the subgraph schema, in SemVer format (e.g. 1.0.0).
    // String schemaVersion
    test('to test the property `schemaVersion`', () async {
      // TODO
    });

    // Version of the subgraph implementation, in SemVer format (e.g. 1.0.0).
    // String subgraphVersion
    test('to test the property `subgraphVersion`', () async {
      // TODO
    });

    // Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0).
    // String methodologyVersion
    test('to test the property `methodologyVersion`', () async {
      // TODO
    });

    // Current TVL (Total Value Locked) of the entire protocol.
    // String totalValueLockedUsd
    test('to test the property `totalValueLockedUsd`', () async {
      // TODO
    });

    // The sum of all active and non-active liquidity in USD for this pool.
    // String totalLiquidityUsd
    test('to test the property `totalLiquidityUsd`', () async {
      // TODO
    });

    // All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
    // String activeLiquidityUsd
    test('to test the property `activeLiquidityUsd`', () async {
      // TODO
    });

    // All protocol-side value locking in USD that remains uncollected and unused in the protocol.
    // String uncollectedProtocolSideValueUsd
    test('to test the property `uncollectedProtocolSideValueUsd`', () async {
      // TODO
    });

    // All supply-side value locking in USD that remains uncollected and unused in the protocol.
    // String uncollectedSupplySideValueUsd
    test('to test the property `uncollectedSupplySideValueUsd`', () async {
      // TODO
    });

    // Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.
    // String protocolControlledValueUsd
    test('to test the property `protocolControlledValueUsd`', () async {
      // TODO
    });

    // All historical volume in USD.
    // String cumulativeVolumeUsd
    test('to test the property `cumulativeVolumeUsd`', () async {
      // TODO
    });

    // Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
    // String cumulativeSupplySideRevenueUsd
    test('to test the property `cumulativeSupplySideRevenueUsd`', () async {
      // TODO
    });

    // Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushiâ€™s 0.05%). OpenSea 10% sell fee.
    // String cumulativeProtocolSideRevenueUsd
    test('to test the property `cumulativeProtocolSideRevenueUsd`', () async {
      // TODO
    });

    // All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
    // String cumulativeTotalRevenueUsd
    test('to test the property `cumulativeTotalRevenueUsd`', () async {
      // TODO
    });

    // Number of cumulative unique users.
    // int cumulativeUniqueUsers
    test('to test the property `cumulativeUniqueUsers`', () async {
      // TODO
    });

    // Number of cumulative liquidity providers.
    // int cumulativeUniqueLPs
    test('to test the property `cumulativeUniqueLPs`', () async {
      // TODO
    });

    // Number of cumulative traders
    // int cumulativeUniqueTraders
    test('to test the property `cumulativeUniqueTraders`', () async {
      // TODO
    });

    // Total number of pools.
    // int totalPoolCount
    test('to test the property `totalPoolCount`', () async {
      // TODO
    });

    // Total number of open positions.
    // int openPositionCount
    test('to test the property `openPositionCount`', () async {
      // TODO
    });

    // Total number of positions (open and closed).
    // int cumulativePositionCount
    test('to test the property `cumulativePositionCount`', () async {
      // TODO
    });

    // Day ID of the most recent daily snapshot.
    // int lastSnapshotDayId
    test('to test the property `lastSnapshotDayId`', () async {
      // TODO
    });

    // Timestamp of the last time this entity was updated
    // String lastUpdateTimestamp
    test('to test the property `lastUpdateTimestamp`', () async {
      // TODO
    });

    // Block number of the last time this entity was updated.
    // String lastUpdateBlockNumber
    test('to test the property `lastUpdateBlockNumber`', () async {
      // TODO
    });

    // This is a boolean to indicate whether or not the pools have been instantiated the were initialized before Optimism regenesis.
    // bool regenesis
    test('to test the property `regenesis`', () async {
      // TODO
    });


  });

}
