//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.12

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

import 'package:openapi/api.dart';
import 'package:test/test.dart';

// tests for CURVEFINANCEETHEREUMLiquidityPoolDTO
void main() {
  // final instance = CURVEFINANCEETHEREUMLiquidityPoolDTO();

  group('test CURVEFINANCEETHEREUMLiquidityPoolDTO', () {
    // DateTime entryTime
    test('to test the property `entryTime`', () async {
      // TODO
    });

    // DateTime recvTime
    test('to test the property `recvTime`', () async {
      // TODO
    });

    // Number of block in which entity was recorded.
    // int blockNumber
    test('to test the property `blockNumber`', () async {
      // TODO
    });

    // 
    // int vid
    test('to test the property `vid`', () async {
      // TODO
    });

    // Smart contract address of the pool
    // String id
    test('to test the property `id`', () async {
      // TODO
    });

    // The protocol this pool belongs to
    // String protocol
    test('to test the property `protocol`', () async {
      // TODO
    });

    // Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT)
    // String name
    test('to test the property `name`', () async {
      // TODO
    });

    // Symbol of liquidity pool (e.g. 3CRV)
    // String symbol
    test('to test the property `symbol`', () async {
      // TODO
    });

    // Tokens that need to be deposited to take a position in protocol. e.g. WETH and USDC to deposit into the WETH-USDC pool. Array to account for multi-asset pools like Curve and Balancer
    // List<String> inputTokens (default value: const [])
    test('to test the property `inputTokens`', () async {
      // TODO
    });

    // inputTokens in native (contract) order
    // List<String> inputTokensOrdered (default value: const [])
    test('to test the property `inputTokensOrdered`', () async {
      // TODO
    });

    // Token that is minted to track ownership of position in protocol
    // String outputToken
    test('to test the property `outputToken`', () async {
      // TODO
    });

    // Aditional tokens that are given as reward for position in a protocol, usually in liquidity mining programs. e.g. SUSHI in the Onsen program, MATIC for Aave Polygon
    // List<String> rewardTokens (default value: const [])
    test('to test the property `rewardTokens`', () async {
      // TODO
    });

    // Fees per trade incurred to the user. Should include all fees that apply to a pool (e.g. Curve has a trading fee AND an admin fee, which is a portion of the trading fee. Uniswap only has a trading fee and no protocol fee.)
    // List<String> fees (default value: const [])
    test('to test the property `fees`', () async {
      // TODO
    });

    // Whether this pool is single-sided (e.g. Bancor, Platypus's Alternative Pool). The specifics of the implementation depends on the protocol.
    // bool isSingleSided
    test('to test the property `isSingleSided`', () async {
      // TODO
    });

    // Creation timestamp
    // String createdTimestamp
    test('to test the property `createdTimestamp`', () async {
      // TODO
    });

    // Creation block number
    // String createdBlockNumber
    test('to test the property `createdBlockNumber`', () async {
      // TODO
    });

    // Current TVL (Total Value Locked) of this pool in USD
    // String totalValueLockedUsd
    test('to test the property `totalValueLockedUsd`', () async {
      // TODO
    });

    // All revenue generated by the liquidity pool, accrued to the supply side.
    // String cumulativeSupplySideRevenueUsd
    test('to test the property `cumulativeSupplySideRevenueUsd`', () async {
      // TODO
    });

    // All revenue generated by the liquidity pool, accrued to the protocol.
    // String cumulativeProtocolSideRevenueUsd
    test('to test the property `cumulativeProtocolSideRevenueUsd`', () async {
      // TODO
    });

    // All revenue generated by the liquidity pool.
    // String cumulativeTotalRevenueUsd
    test('to test the property `cumulativeTotalRevenueUsd`', () async {
      // TODO
    });

    // All historical trade volume occurred in this pool, in USD
    // String cumulativeVolumeUsd
    test('to test the property `cumulativeVolumeUsd`', () async {
      // TODO
    });

    // Amount of input tokens in the pool. The ordering should be the same as the pool's `inputTokens` field.
    // List<String> inputTokenBalances (default value: const [])
    test('to test the property `inputTokenBalances`', () async {
      // TODO
    });

    // Weights of input tokens in the liquidity pool in percentage values.
    // List<String> inputTokenWeights (default value: const [])
    test('to test the property `inputTokenWeights`', () async {
      // TODO
    });

    // Total supply of output token.
    // String outputTokenSupply
    test('to test the property `outputTokenSupply`', () async {
      // TODO
    });

    // Price per share of output token in USD
    // String outputTokenPriceUsd
    test('to test the property `outputTokenPriceUsd`', () async {
      // TODO
    });

    // Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
    // String stakedOutputTokenAmount
    test('to test the property `stakedOutputTokenAmount`', () async {
      // TODO
    });

    // Per-block reward token emission as of the current block normalized to a day, in token's native amount.
    // List<String> rewardTokenEmissionsAmount (default value: const [])
    test('to test the property `rewardTokenEmissionsAmount`', () async {
      // TODO
    });

    // Per-block reward token emission as of the current block normalized to a day, in USD value.
    // List<String> rewardTokenEmissionsUsd (default value: const [])
    test('to test the property `rewardTokenEmissionsUsd`', () async {
      // TODO
    });

    // Registry that deployed this pool
    // String registryAddress
    test('to test the property `registryAddress`', () async {
      // TODO
    });

    // Liquidity Gauge assocaited with this pool
    // String gaugeAddress
    test('to test the property `gaugeAddress`', () async {
      // TODO
    });

    // double evaluatedAsk
    test('to test the property `evaluatedAsk`', () async {
      // TODO
    });


  });

}
