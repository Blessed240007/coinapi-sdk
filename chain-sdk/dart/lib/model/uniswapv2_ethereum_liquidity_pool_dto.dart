//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.12

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of openapi.api;

class UNISWAPV2ETHEREUMLiquidityPoolDTO {
  /// Returns a new [UNISWAPV2ETHEREUMLiquidityPoolDTO] instance.
  UNISWAPV2ETHEREUMLiquidityPoolDTO({
    this.entryTime,
    this.recvTime,
    this.blockNumber,
    this.vid,
    this.id,
    this.protocol,
    this.name,
    this.symbol,
    this.inputTokens = const [],
    this.outputToken,
    this.rewardTokens = const [],
    this.fees = const [],
    this.isSingleSided,
    this.createdTimestamp,
    this.createdBlockNumber,
    this.totalValueLockedUsd,
    this.cumulativeSupplySideRevenueUsd,
    this.cumulativeProtocolSideRevenueUsd,
    this.cumulativeTotalRevenueUsd,
    this.cumulativeVolumeUsd,
    this.inputTokenBalances = const [],
    this.inputTokenWeights = const [],
    this.outputTokenSupply,
    this.outputTokenPriceUsd,
    this.stakedOutputTokenAmount,
    this.rewardTokenEmissionsAmount = const [],
    this.rewardTokenEmissionsUsd = const [],
    this.evaluatedAsk,
  });

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  DateTime? entryTime;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  DateTime? recvTime;

  /// Number of block in which entity was recorded.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  int? blockNumber;

  /// .
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  int? vid;

  /// Smart contract address of the pool
  String? id;

  /// The protocol this pool belongs to
  String? protocol;

  /// Name of liquidity pool (e.g. Curve.fi DAI/USDC/USDT)
  String? name;

  /// Symbol of liquidity pool (e.g. 3CRV)
  String? symbol;

  /// Tokens that need to be deposited to take a position in the protocol
  List<String>? inputTokens;

  /// Token that is minted to track ownership of position in protocol
  String? outputToken;

  /// Aditional tokens that are given as reward for position in a protocol
  List<String>? rewardTokens;

  /// Fees per trade incurred to the user
  List<String>? fees;

  /// Whether this pool is single-sided
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  bool? isSingleSided;

  /// Creation timestamp
  String? createdTimestamp;

  /// Creation block number
  String? createdBlockNumber;

  /// Current TVL (Total Value Locked) of this pool in USD
  String? totalValueLockedUsd;

  /// All revenue generated by the liquidity pool, accrued to the supply side
  String? cumulativeSupplySideRevenueUsd;

  /// All revenue generated by the liquidity pool, accrued to the protocol
  String? cumulativeProtocolSideRevenueUsd;

  /// All revenue generated by the liquidity pool
  String? cumulativeTotalRevenueUsd;

  /// All historical trade volume occurred in this pool, in USD
  String? cumulativeVolumeUsd;

  /// Amount of input tokens in the pool
  List<String>? inputTokenBalances;

  /// Weights of input tokens in the liquidity pool in percentage values
  List<String>? inputTokenWeights;

  /// Total supply of output token
  String? outputTokenSupply;

  /// Price per share of output token in USD
  String? outputTokenPriceUsd;

  /// Total supply of output tokens that are staked
  String? stakedOutputTokenAmount;

  /// Per-block reward token emission as of the current block normalized to a day, in token's native amount
  List<String>? rewardTokenEmissionsAmount;

  /// Per-block reward token emission as of the current block normalized to a day, in USD value
  List<String>? rewardTokenEmissionsUsd;

  /// Evaluated ask value of the liquidity pool.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  double? evaluatedAsk;

  @override
  bool operator ==(Object other) => identical(this, other) || other is UNISWAPV2ETHEREUMLiquidityPoolDTO &&
     other.entryTime == entryTime &&
     other.recvTime == recvTime &&
     other.blockNumber == blockNumber &&
     other.vid == vid &&
     other.id == id &&
     other.protocol == protocol &&
     other.name == name &&
     other.symbol == symbol &&
     other.inputTokens == inputTokens &&
     other.outputToken == outputToken &&
     other.rewardTokens == rewardTokens &&
     other.fees == fees &&
     other.isSingleSided == isSingleSided &&
     other.createdTimestamp == createdTimestamp &&
     other.createdBlockNumber == createdBlockNumber &&
     other.totalValueLockedUsd == totalValueLockedUsd &&
     other.cumulativeSupplySideRevenueUsd == cumulativeSupplySideRevenueUsd &&
     other.cumulativeProtocolSideRevenueUsd == cumulativeProtocolSideRevenueUsd &&
     other.cumulativeTotalRevenueUsd == cumulativeTotalRevenueUsd &&
     other.cumulativeVolumeUsd == cumulativeVolumeUsd &&
     other.inputTokenBalances == inputTokenBalances &&
     other.inputTokenWeights == inputTokenWeights &&
     other.outputTokenSupply == outputTokenSupply &&
     other.outputTokenPriceUsd == outputTokenPriceUsd &&
     other.stakedOutputTokenAmount == stakedOutputTokenAmount &&
     other.rewardTokenEmissionsAmount == rewardTokenEmissionsAmount &&
     other.rewardTokenEmissionsUsd == rewardTokenEmissionsUsd &&
     other.evaluatedAsk == evaluatedAsk;

  @override
  int get hashCode =>
    // ignore: unnecessary_parenthesis
    (entryTime == null ? 0 : entryTime!.hashCode) +
    (recvTime == null ? 0 : recvTime!.hashCode) +
    (blockNumber == null ? 0 : blockNumber!.hashCode) +
    (vid == null ? 0 : vid!.hashCode) +
    (id == null ? 0 : id!.hashCode) +
    (protocol == null ? 0 : protocol!.hashCode) +
    (name == null ? 0 : name!.hashCode) +
    (symbol == null ? 0 : symbol!.hashCode) +
    (inputTokens == null ? 0 : inputTokens!.hashCode) +
    (outputToken == null ? 0 : outputToken!.hashCode) +
    (rewardTokens == null ? 0 : rewardTokens!.hashCode) +
    (fees == null ? 0 : fees!.hashCode) +
    (isSingleSided == null ? 0 : isSingleSided!.hashCode) +
    (createdTimestamp == null ? 0 : createdTimestamp!.hashCode) +
    (createdBlockNumber == null ? 0 : createdBlockNumber!.hashCode) +
    (totalValueLockedUsd == null ? 0 : totalValueLockedUsd!.hashCode) +
    (cumulativeSupplySideRevenueUsd == null ? 0 : cumulativeSupplySideRevenueUsd!.hashCode) +
    (cumulativeProtocolSideRevenueUsd == null ? 0 : cumulativeProtocolSideRevenueUsd!.hashCode) +
    (cumulativeTotalRevenueUsd == null ? 0 : cumulativeTotalRevenueUsd!.hashCode) +
    (cumulativeVolumeUsd == null ? 0 : cumulativeVolumeUsd!.hashCode) +
    (inputTokenBalances == null ? 0 : inputTokenBalances!.hashCode) +
    (inputTokenWeights == null ? 0 : inputTokenWeights!.hashCode) +
    (outputTokenSupply == null ? 0 : outputTokenSupply!.hashCode) +
    (outputTokenPriceUsd == null ? 0 : outputTokenPriceUsd!.hashCode) +
    (stakedOutputTokenAmount == null ? 0 : stakedOutputTokenAmount!.hashCode) +
    (rewardTokenEmissionsAmount == null ? 0 : rewardTokenEmissionsAmount!.hashCode) +
    (rewardTokenEmissionsUsd == null ? 0 : rewardTokenEmissionsUsd!.hashCode) +
    (evaluatedAsk == null ? 0 : evaluatedAsk!.hashCode);

  @override
  String toString() => 'UNISWAPV2ETHEREUMLiquidityPoolDTO[entryTime=$entryTime, recvTime=$recvTime, blockNumber=$blockNumber, vid=$vid, id=$id, protocol=$protocol, name=$name, symbol=$symbol, inputTokens=$inputTokens, outputToken=$outputToken, rewardTokens=$rewardTokens, fees=$fees, isSingleSided=$isSingleSided, createdTimestamp=$createdTimestamp, createdBlockNumber=$createdBlockNumber, totalValueLockedUsd=$totalValueLockedUsd, cumulativeSupplySideRevenueUsd=$cumulativeSupplySideRevenueUsd, cumulativeProtocolSideRevenueUsd=$cumulativeProtocolSideRevenueUsd, cumulativeTotalRevenueUsd=$cumulativeTotalRevenueUsd, cumulativeVolumeUsd=$cumulativeVolumeUsd, inputTokenBalances=$inputTokenBalances, inputTokenWeights=$inputTokenWeights, outputTokenSupply=$outputTokenSupply, outputTokenPriceUsd=$outputTokenPriceUsd, stakedOutputTokenAmount=$stakedOutputTokenAmount, rewardTokenEmissionsAmount=$rewardTokenEmissionsAmount, rewardTokenEmissionsUsd=$rewardTokenEmissionsUsd, evaluatedAsk=$evaluatedAsk]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
    if (this.entryTime != null) {
      json[r'entry_time'] = this.entryTime!.toUtc().toIso8601String();
    } else {
      json[r'entry_time'] = null;
    }
    if (this.recvTime != null) {
      json[r'recv_time'] = this.recvTime!.toUtc().toIso8601String();
    } else {
      json[r'recv_time'] = null;
    }
    if (this.blockNumber != null) {
      json[r'block_number'] = this.blockNumber;
    } else {
      json[r'block_number'] = null;
    }
    if (this.vid != null) {
      json[r'vid'] = this.vid;
    } else {
      json[r'vid'] = null;
    }
    if (this.id != null) {
      json[r'id'] = this.id;
    } else {
      json[r'id'] = null;
    }
    if (this.protocol != null) {
      json[r'protocol'] = this.protocol;
    } else {
      json[r'protocol'] = null;
    }
    if (this.name != null) {
      json[r'name'] = this.name;
    } else {
      json[r'name'] = null;
    }
    if (this.symbol != null) {
      json[r'symbol'] = this.symbol;
    } else {
      json[r'symbol'] = null;
    }
    if (this.inputTokens != null) {
      json[r'input_tokens'] = this.inputTokens;
    } else {
      json[r'input_tokens'] = null;
    }
    if (this.outputToken != null) {
      json[r'output_token'] = this.outputToken;
    } else {
      json[r'output_token'] = null;
    }
    if (this.rewardTokens != null) {
      json[r'reward_tokens'] = this.rewardTokens;
    } else {
      json[r'reward_tokens'] = null;
    }
    if (this.fees != null) {
      json[r'fees'] = this.fees;
    } else {
      json[r'fees'] = null;
    }
    if (this.isSingleSided != null) {
      json[r'is_single_sided'] = this.isSingleSided;
    } else {
      json[r'is_single_sided'] = null;
    }
    if (this.createdTimestamp != null) {
      json[r'created_timestamp'] = this.createdTimestamp;
    } else {
      json[r'created_timestamp'] = null;
    }
    if (this.createdBlockNumber != null) {
      json[r'created_block_number'] = this.createdBlockNumber;
    } else {
      json[r'created_block_number'] = null;
    }
    if (this.totalValueLockedUsd != null) {
      json[r'total_value_locked_usd'] = this.totalValueLockedUsd;
    } else {
      json[r'total_value_locked_usd'] = null;
    }
    if (this.cumulativeSupplySideRevenueUsd != null) {
      json[r'cumulative_supply_side_revenue_usd'] = this.cumulativeSupplySideRevenueUsd;
    } else {
      json[r'cumulative_supply_side_revenue_usd'] = null;
    }
    if (this.cumulativeProtocolSideRevenueUsd != null) {
      json[r'cumulative_protocol_side_revenue_usd'] = this.cumulativeProtocolSideRevenueUsd;
    } else {
      json[r'cumulative_protocol_side_revenue_usd'] = null;
    }
    if (this.cumulativeTotalRevenueUsd != null) {
      json[r'cumulative_total_revenue_usd'] = this.cumulativeTotalRevenueUsd;
    } else {
      json[r'cumulative_total_revenue_usd'] = null;
    }
    if (this.cumulativeVolumeUsd != null) {
      json[r'cumulative_volume_usd'] = this.cumulativeVolumeUsd;
    } else {
      json[r'cumulative_volume_usd'] = null;
    }
    if (this.inputTokenBalances != null) {
      json[r'input_token_balances'] = this.inputTokenBalances;
    } else {
      json[r'input_token_balances'] = null;
    }
    if (this.inputTokenWeights != null) {
      json[r'input_token_weights'] = this.inputTokenWeights;
    } else {
      json[r'input_token_weights'] = null;
    }
    if (this.outputTokenSupply != null) {
      json[r'output_token_supply'] = this.outputTokenSupply;
    } else {
      json[r'output_token_supply'] = null;
    }
    if (this.outputTokenPriceUsd != null) {
      json[r'output_token_price_usd'] = this.outputTokenPriceUsd;
    } else {
      json[r'output_token_price_usd'] = null;
    }
    if (this.stakedOutputTokenAmount != null) {
      json[r'staked_output_token_amount'] = this.stakedOutputTokenAmount;
    } else {
      json[r'staked_output_token_amount'] = null;
    }
    if (this.rewardTokenEmissionsAmount != null) {
      json[r'reward_token_emissions_amount'] = this.rewardTokenEmissionsAmount;
    } else {
      json[r'reward_token_emissions_amount'] = null;
    }
    if (this.rewardTokenEmissionsUsd != null) {
      json[r'reward_token_emissions_usd'] = this.rewardTokenEmissionsUsd;
    } else {
      json[r'reward_token_emissions_usd'] = null;
    }
    if (this.evaluatedAsk != null) {
      json[r'evaluated_ask'] = this.evaluatedAsk;
    } else {
      json[r'evaluated_ask'] = null;
    }
    return json;
  }

  /// Returns a new [UNISWAPV2ETHEREUMLiquidityPoolDTO] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static UNISWAPV2ETHEREUMLiquidityPoolDTO? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(() {
        requiredKeys.forEach((key) {
          assert(json.containsKey(key), 'Required key "UNISWAPV2ETHEREUMLiquidityPoolDTO[$key]" is missing from JSON.');
          assert(json[key] != null, 'Required key "UNISWAPV2ETHEREUMLiquidityPoolDTO[$key]" has a null value in JSON.');
        });
        return true;
      }());

      return UNISWAPV2ETHEREUMLiquidityPoolDTO(
        entryTime: mapDateTime(json, r'entry_time', ''),
        recvTime: mapDateTime(json, r'recv_time', ''),
        blockNumber: mapValueOfType<int>(json, r'block_number'),
        vid: mapValueOfType<int>(json, r'vid'),
        id: mapValueOfType<String>(json, r'id'),
        protocol: mapValueOfType<String>(json, r'protocol'),
        name: mapValueOfType<String>(json, r'name'),
        symbol: mapValueOfType<String>(json, r'symbol'),
        inputTokens: json[r'input_tokens'] is List
            ? (json[r'input_tokens'] as List).cast<String>()
            : const [],
        outputToken: mapValueOfType<String>(json, r'output_token'),
        rewardTokens: json[r'reward_tokens'] is List
            ? (json[r'reward_tokens'] as List).cast<String>()
            : const [],
        fees: json[r'fees'] is List
            ? (json[r'fees'] as List).cast<String>()
            : const [],
        isSingleSided: mapValueOfType<bool>(json, r'is_single_sided'),
        createdTimestamp: mapValueOfType<String>(json, r'created_timestamp'),
        createdBlockNumber: mapValueOfType<String>(json, r'created_block_number'),
        totalValueLockedUsd: mapValueOfType<String>(json, r'total_value_locked_usd'),
        cumulativeSupplySideRevenueUsd: mapValueOfType<String>(json, r'cumulative_supply_side_revenue_usd'),
        cumulativeProtocolSideRevenueUsd: mapValueOfType<String>(json, r'cumulative_protocol_side_revenue_usd'),
        cumulativeTotalRevenueUsd: mapValueOfType<String>(json, r'cumulative_total_revenue_usd'),
        cumulativeVolumeUsd: mapValueOfType<String>(json, r'cumulative_volume_usd'),
        inputTokenBalances: json[r'input_token_balances'] is List
            ? (json[r'input_token_balances'] as List).cast<String>()
            : const [],
        inputTokenWeights: json[r'input_token_weights'] is List
            ? (json[r'input_token_weights'] as List).cast<String>()
            : const [],
        outputTokenSupply: mapValueOfType<String>(json, r'output_token_supply'),
        outputTokenPriceUsd: mapValueOfType<String>(json, r'output_token_price_usd'),
        stakedOutputTokenAmount: mapValueOfType<String>(json, r'staked_output_token_amount'),
        rewardTokenEmissionsAmount: json[r'reward_token_emissions_amount'] is List
            ? (json[r'reward_token_emissions_amount'] as List).cast<String>()
            : const [],
        rewardTokenEmissionsUsd: json[r'reward_token_emissions_usd'] is List
            ? (json[r'reward_token_emissions_usd'] as List).cast<String>()
            : const [],
        evaluatedAsk: mapValueOfType<double>(json, r'evaluated_ask'),
      );
    }
    return null;
  }

  static List<UNISWAPV2ETHEREUMLiquidityPoolDTO> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <UNISWAPV2ETHEREUMLiquidityPoolDTO>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = UNISWAPV2ETHEREUMLiquidityPoolDTO.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  static Map<String, UNISWAPV2ETHEREUMLiquidityPoolDTO> mapFromJson(dynamic json) {
    final map = <String, UNISWAPV2ETHEREUMLiquidityPoolDTO>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = UNISWAPV2ETHEREUMLiquidityPoolDTO.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of UNISWAPV2ETHEREUMLiquidityPoolDTO-objects as value to a dart map
  static Map<String, List<UNISWAPV2ETHEREUMLiquidityPoolDTO>> mapListFromJson(dynamic json, {bool growable = false,}) {
    final map = <String, List<UNISWAPV2ETHEREUMLiquidityPoolDTO>>{};
    if (json is Map && json.isNotEmpty) {
      // ignore: parameter_assignments
      json = json.cast<String, dynamic>();
      for (final entry in json.entries) {
        map[entry.key] = UNISWAPV2ETHEREUMLiquidityPoolDTO.listFromJson(entry.value, growable: growable,);
      }
    }
    return map;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
  };
}

