//
// AUTO-GENERATED FILE, DO NOT MODIFY!
//
// @dart=2.12

// ignore_for_file: unused_element, unused_import
// ignore_for_file: always_put_required_named_parameters_first
// ignore_for_file: constant_identifier_names
// ignore_for_file: lines_longer_than_80_chars

part of openapi.api;

class UNISWAPV2ETHEREUMDexAmmProtocolDTO {
  /// Returns a new [UNISWAPV2ETHEREUMDexAmmProtocolDTO] instance.
  UNISWAPV2ETHEREUMDexAmmProtocolDTO({
    this.entryTime,
    this.recvTime,
    this.blockNumber,
    this.blockRange,
    this.id,
    this.name,
    this.slug,
    this.schemaVersion,
    this.subgraphVersion,
    this.methodologyVersion,
    this.totalValueLockedUsd,
    this.protocolControlledValueUsd,
    this.cumulativeVolumeUsd,
    this.cumulativeSupplySideRevenueUsd,
    this.cumulativeProtocolSideRevenueUsd,
    this.cumulativeTotalRevenueUsd,
    this.cumulativeUniqueUsers,
    this.totalPoolCount,
  });

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  DateTime? entryTime;

  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  DateTime? recvTime;

  /// Number of block in which entity was recorded.
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  int? blockNumber;

  /// 
  String? blockRange;

  /// Smart contract address of the protocol's main contract (Factory, Registry, etc)
  String? id;

  /// Name of the protocol, including version. e.g. Uniswap v3
  String? name;

  /// Slug of protocol, including version. e.g. uniswap-v3
  String? slug;

  ///  Version of the subgraph schema, in SemVer format (e.g. 1.0.0)
  String? schemaVersion;

  /// Version of the subgraph implementation, in SemVer format (e.g. 1.0.0)
  String? subgraphVersion;

  /// Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0)
  String? methodologyVersion;

  /// Current TVL (Total Value Locked) of the entire protocol
  String? totalValueLockedUsd;

  /// Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV
  String? protocolControlledValueUsd;

  /// All historical volume in USD
  String? cumulativeVolumeUsd;

  /// Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
  String? cumulativeSupplySideRevenueUsd;

  /// Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushiâ€™s 0.05%). OpenSea 10% sell fee.
  String? cumulativeProtocolSideRevenueUsd;

  /// All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
  String? cumulativeTotalRevenueUsd;

  /// Number of cumulative unique users
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  int? cumulativeUniqueUsers;

  /// Total number of pools
  ///
  /// Please note: This property should have been non-nullable! Since the specification file
  /// does not include a default value (using the "default:" property), however, the generated
  /// source code must fall back to having a nullable type.
  /// Consider adding a "default:" property in the specification file to hide this note.
  ///
  int? totalPoolCount;

  @override
  bool operator ==(Object other) => identical(this, other) || other is UNISWAPV2ETHEREUMDexAmmProtocolDTO &&
     other.entryTime == entryTime &&
     other.recvTime == recvTime &&
     other.blockNumber == blockNumber &&
     other.blockRange == blockRange &&
     other.id == id &&
     other.name == name &&
     other.slug == slug &&
     other.schemaVersion == schemaVersion &&
     other.subgraphVersion == subgraphVersion &&
     other.methodologyVersion == methodologyVersion &&
     other.totalValueLockedUsd == totalValueLockedUsd &&
     other.protocolControlledValueUsd == protocolControlledValueUsd &&
     other.cumulativeVolumeUsd == cumulativeVolumeUsd &&
     other.cumulativeSupplySideRevenueUsd == cumulativeSupplySideRevenueUsd &&
     other.cumulativeProtocolSideRevenueUsd == cumulativeProtocolSideRevenueUsd &&
     other.cumulativeTotalRevenueUsd == cumulativeTotalRevenueUsd &&
     other.cumulativeUniqueUsers == cumulativeUniqueUsers &&
     other.totalPoolCount == totalPoolCount;

  @override
  int get hashCode =>
    // ignore: unnecessary_parenthesis
    (entryTime == null ? 0 : entryTime!.hashCode) +
    (recvTime == null ? 0 : recvTime!.hashCode) +
    (blockNumber == null ? 0 : blockNumber!.hashCode) +
    (blockRange == null ? 0 : blockRange!.hashCode) +
    (id == null ? 0 : id!.hashCode) +
    (name == null ? 0 : name!.hashCode) +
    (slug == null ? 0 : slug!.hashCode) +
    (schemaVersion == null ? 0 : schemaVersion!.hashCode) +
    (subgraphVersion == null ? 0 : subgraphVersion!.hashCode) +
    (methodologyVersion == null ? 0 : methodologyVersion!.hashCode) +
    (totalValueLockedUsd == null ? 0 : totalValueLockedUsd!.hashCode) +
    (protocolControlledValueUsd == null ? 0 : protocolControlledValueUsd!.hashCode) +
    (cumulativeVolumeUsd == null ? 0 : cumulativeVolumeUsd!.hashCode) +
    (cumulativeSupplySideRevenueUsd == null ? 0 : cumulativeSupplySideRevenueUsd!.hashCode) +
    (cumulativeProtocolSideRevenueUsd == null ? 0 : cumulativeProtocolSideRevenueUsd!.hashCode) +
    (cumulativeTotalRevenueUsd == null ? 0 : cumulativeTotalRevenueUsd!.hashCode) +
    (cumulativeUniqueUsers == null ? 0 : cumulativeUniqueUsers!.hashCode) +
    (totalPoolCount == null ? 0 : totalPoolCount!.hashCode);

  @override
  String toString() => 'UNISWAPV2ETHEREUMDexAmmProtocolDTO[entryTime=$entryTime, recvTime=$recvTime, blockNumber=$blockNumber, blockRange=$blockRange, id=$id, name=$name, slug=$slug, schemaVersion=$schemaVersion, subgraphVersion=$subgraphVersion, methodologyVersion=$methodologyVersion, totalValueLockedUsd=$totalValueLockedUsd, protocolControlledValueUsd=$protocolControlledValueUsd, cumulativeVolumeUsd=$cumulativeVolumeUsd, cumulativeSupplySideRevenueUsd=$cumulativeSupplySideRevenueUsd, cumulativeProtocolSideRevenueUsd=$cumulativeProtocolSideRevenueUsd, cumulativeTotalRevenueUsd=$cumulativeTotalRevenueUsd, cumulativeUniqueUsers=$cumulativeUniqueUsers, totalPoolCount=$totalPoolCount]';

  Map<String, dynamic> toJson() {
    final json = <String, dynamic>{};
    if (this.entryTime != null) {
      json[r'entry_time'] = this.entryTime!.toUtc().toIso8601String();
    } else {
      json[r'entry_time'] = null;
    }
    if (this.recvTime != null) {
      json[r'recv_time'] = this.recvTime!.toUtc().toIso8601String();
    } else {
      json[r'recv_time'] = null;
    }
    if (this.blockNumber != null) {
      json[r'block_number'] = this.blockNumber;
    } else {
      json[r'block_number'] = null;
    }
    if (this.blockRange != null) {
      json[r'block_range'] = this.blockRange;
    } else {
      json[r'block_range'] = null;
    }
    if (this.id != null) {
      json[r'id'] = this.id;
    } else {
      json[r'id'] = null;
    }
    if (this.name != null) {
      json[r'name'] = this.name;
    } else {
      json[r'name'] = null;
    }
    if (this.slug != null) {
      json[r'slug'] = this.slug;
    } else {
      json[r'slug'] = null;
    }
    if (this.schemaVersion != null) {
      json[r'schema_version'] = this.schemaVersion;
    } else {
      json[r'schema_version'] = null;
    }
    if (this.subgraphVersion != null) {
      json[r'subgraph_version'] = this.subgraphVersion;
    } else {
      json[r'subgraph_version'] = null;
    }
    if (this.methodologyVersion != null) {
      json[r'methodology_version'] = this.methodologyVersion;
    } else {
      json[r'methodology_version'] = null;
    }
    if (this.totalValueLockedUsd != null) {
      json[r'total_value_locked_usd'] = this.totalValueLockedUsd;
    } else {
      json[r'total_value_locked_usd'] = null;
    }
    if (this.protocolControlledValueUsd != null) {
      json[r'protocol_controlled_value_usd'] = this.protocolControlledValueUsd;
    } else {
      json[r'protocol_controlled_value_usd'] = null;
    }
    if (this.cumulativeVolumeUsd != null) {
      json[r'cumulative_volume_usd'] = this.cumulativeVolumeUsd;
    } else {
      json[r'cumulative_volume_usd'] = null;
    }
    if (this.cumulativeSupplySideRevenueUsd != null) {
      json[r'cumulative_supply_side_revenue_usd'] = this.cumulativeSupplySideRevenueUsd;
    } else {
      json[r'cumulative_supply_side_revenue_usd'] = null;
    }
    if (this.cumulativeProtocolSideRevenueUsd != null) {
      json[r'cumulative_protocol_side_revenue_usd'] = this.cumulativeProtocolSideRevenueUsd;
    } else {
      json[r'cumulative_protocol_side_revenue_usd'] = null;
    }
    if (this.cumulativeTotalRevenueUsd != null) {
      json[r'cumulative_total_revenue_usd'] = this.cumulativeTotalRevenueUsd;
    } else {
      json[r'cumulative_total_revenue_usd'] = null;
    }
    if (this.cumulativeUniqueUsers != null) {
      json[r'cumulative_unique_users'] = this.cumulativeUniqueUsers;
    } else {
      json[r'cumulative_unique_users'] = null;
    }
    if (this.totalPoolCount != null) {
      json[r'total_pool_count'] = this.totalPoolCount;
    } else {
      json[r'total_pool_count'] = null;
    }
    return json;
  }

  /// Returns a new [UNISWAPV2ETHEREUMDexAmmProtocolDTO] instance and imports its values from
  /// [value] if it's a [Map], null otherwise.
  // ignore: prefer_constructors_over_static_methods
  static UNISWAPV2ETHEREUMDexAmmProtocolDTO? fromJson(dynamic value) {
    if (value is Map) {
      final json = value.cast<String, dynamic>();

      // Ensure that the map contains the required keys.
      // Note 1: the values aren't checked for validity beyond being non-null.
      // Note 2: this code is stripped in release mode!
      assert(() {
        requiredKeys.forEach((key) {
          assert(json.containsKey(key), 'Required key "UNISWAPV2ETHEREUMDexAmmProtocolDTO[$key]" is missing from JSON.');
          assert(json[key] != null, 'Required key "UNISWAPV2ETHEREUMDexAmmProtocolDTO[$key]" has a null value in JSON.');
        });
        return true;
      }());

      return UNISWAPV2ETHEREUMDexAmmProtocolDTO(
        entryTime: mapDateTime(json, r'entry_time', ''),
        recvTime: mapDateTime(json, r'recv_time', ''),
        blockNumber: mapValueOfType<int>(json, r'block_number'),
        blockRange: mapValueOfType<String>(json, r'block_range'),
        id: mapValueOfType<String>(json, r'id'),
        name: mapValueOfType<String>(json, r'name'),
        slug: mapValueOfType<String>(json, r'slug'),
        schemaVersion: mapValueOfType<String>(json, r'schema_version'),
        subgraphVersion: mapValueOfType<String>(json, r'subgraph_version'),
        methodologyVersion: mapValueOfType<String>(json, r'methodology_version'),
        totalValueLockedUsd: mapValueOfType<String>(json, r'total_value_locked_usd'),
        protocolControlledValueUsd: mapValueOfType<String>(json, r'protocol_controlled_value_usd'),
        cumulativeVolumeUsd: mapValueOfType<String>(json, r'cumulative_volume_usd'),
        cumulativeSupplySideRevenueUsd: mapValueOfType<String>(json, r'cumulative_supply_side_revenue_usd'),
        cumulativeProtocolSideRevenueUsd: mapValueOfType<String>(json, r'cumulative_protocol_side_revenue_usd'),
        cumulativeTotalRevenueUsd: mapValueOfType<String>(json, r'cumulative_total_revenue_usd'),
        cumulativeUniqueUsers: mapValueOfType<int>(json, r'cumulative_unique_users'),
        totalPoolCount: mapValueOfType<int>(json, r'total_pool_count'),
      );
    }
    return null;
  }

  static List<UNISWAPV2ETHEREUMDexAmmProtocolDTO> listFromJson(dynamic json, {bool growable = false,}) {
    final result = <UNISWAPV2ETHEREUMDexAmmProtocolDTO>[];
    if (json is List && json.isNotEmpty) {
      for (final row in json) {
        final value = UNISWAPV2ETHEREUMDexAmmProtocolDTO.fromJson(row);
        if (value != null) {
          result.add(value);
        }
      }
    }
    return result.toList(growable: growable);
  }

  static Map<String, UNISWAPV2ETHEREUMDexAmmProtocolDTO> mapFromJson(dynamic json) {
    final map = <String, UNISWAPV2ETHEREUMDexAmmProtocolDTO>{};
    if (json is Map && json.isNotEmpty) {
      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
      for (final entry in json.entries) {
        final value = UNISWAPV2ETHEREUMDexAmmProtocolDTO.fromJson(entry.value);
        if (value != null) {
          map[entry.key] = value;
        }
      }
    }
    return map;
  }

  // maps a json object with a list of UNISWAPV2ETHEREUMDexAmmProtocolDTO-objects as value to a dart map
  static Map<String, List<UNISWAPV2ETHEREUMDexAmmProtocolDTO>> mapListFromJson(dynamic json, {bool growable = false,}) {
    final map = <String, List<UNISWAPV2ETHEREUMDexAmmProtocolDTO>>{};
    if (json is Map && json.isNotEmpty) {
      // ignore: parameter_assignments
      json = json.cast<String, dynamic>();
      for (final entry in json.entries) {
        map[entry.key] = UNISWAPV2ETHEREUMDexAmmProtocolDTO.listFromJson(entry.value, growable: growable,);
      }
    }
    return map;
  }

  /// The list of required keys that must be present in a JSON.
  static const requiredKeys = <String>{
  };
}

