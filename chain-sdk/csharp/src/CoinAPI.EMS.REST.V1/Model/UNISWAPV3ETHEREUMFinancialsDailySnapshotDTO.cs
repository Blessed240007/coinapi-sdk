/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.EMS.REST.V1.Client.OpenAPIDateConverter;

namespace CoinAPI.EMS.REST.V1.Model
{
    /// <summary>
    /// Daily financial metrics for Uniswap V3.
    /// </summary>
    [DataContract]
    public partial class UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO :  IEquatable<UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO" /> class.
        /// </summary>
        /// <param name="entryTime">entryTime.</param>
        /// <param name="recvTime">recvTime.</param>
        /// <param name="blockNumber">Block number of when this snapshot was taken/last modified.).</param>
        /// <param name="id">ID is # of days since Unix epoch time..</param>
        /// <param name="day">Number of days since Unix epoch time..</param>
        /// <param name="protocol">Protocol this snapshot is associated with..</param>
        /// <param name="totalValueLockedUsd">Current TVL (Total Value Locked) of the entire protocol..</param>
        /// <param name="totalLiquidityUsd">The sum of all active and non-active liquidity in USD for this pool..</param>
        /// <param name="activeLiquidityUsd">All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pool&#39;s current tick..</param>
        /// <param name="uncollectedProtocolSideValueUsd">All protocol-side value locking in USD that remains uncollected and unused in the protocol..</param>
        /// <param name="uncollectedSupplySideValueUsd">All supply-side value locking in USD that remains uncollected and unused in the protocol..</param>
        /// <param name="protocolControlledValueUsd">Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV..</param>
        /// <param name="dailyVolumeUsd">All trade volume occurred in a given day, in USD.</param>
        /// <param name="cumulativeVolumeUsd">All historical trade volume in USD.</param>
        /// <param name="dailySupplySideRevenueUsd">Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea..</param>
        /// <param name="cumulativeSupplySideRevenueUsd">Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea..</param>
        /// <param name="dailyProtocolSideRevenueUsd">Gross revenue for the protocol (revenue claimed by the protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee..</param>
        /// <param name="cumulativeProtocolSideRevenueUsd">Gross revenue for the protocol (revenue claimed by the protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee..</param>
        /// <param name="dailyTotalRevenueUsd">All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn..</param>
        /// <param name="cumulativeTotalRevenueUsd">All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn..</param>
        /// <param name="timestamp">Timestamp of when this snapshot was taken/last modified (May be taken after the interval has passed)..</param>
        public UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO(DateTime entryTime = default(DateTime), DateTime recvTime = default(DateTime), int blockNumber = default(int), string id = default(string), int day = default(int), string protocol = default(string), string totalValueLockedUsd = default(string), string totalLiquidityUsd = default(string), string activeLiquidityUsd = default(string), string uncollectedProtocolSideValueUsd = default(string), string uncollectedSupplySideValueUsd = default(string), string protocolControlledValueUsd = default(string), string dailyVolumeUsd = default(string), string cumulativeVolumeUsd = default(string), string dailySupplySideRevenueUsd = default(string), string cumulativeSupplySideRevenueUsd = default(string), string dailyProtocolSideRevenueUsd = default(string), string cumulativeProtocolSideRevenueUsd = default(string), string dailyTotalRevenueUsd = default(string), string cumulativeTotalRevenueUsd = default(string), string timestamp = default(string))
        {
            this.Id = id;
            this.Protocol = protocol;
            this.TotalValueLockedUsd = totalValueLockedUsd;
            this.TotalLiquidityUsd = totalLiquidityUsd;
            this.ActiveLiquidityUsd = activeLiquidityUsd;
            this.UncollectedProtocolSideValueUsd = uncollectedProtocolSideValueUsd;
            this.UncollectedSupplySideValueUsd = uncollectedSupplySideValueUsd;
            this.ProtocolControlledValueUsd = protocolControlledValueUsd;
            this.DailyVolumeUsd = dailyVolumeUsd;
            this.CumulativeVolumeUsd = cumulativeVolumeUsd;
            this.DailySupplySideRevenueUsd = dailySupplySideRevenueUsd;
            this.CumulativeSupplySideRevenueUsd = cumulativeSupplySideRevenueUsd;
            this.DailyProtocolSideRevenueUsd = dailyProtocolSideRevenueUsd;
            this.CumulativeProtocolSideRevenueUsd = cumulativeProtocolSideRevenueUsd;
            this.DailyTotalRevenueUsd = dailyTotalRevenueUsd;
            this.CumulativeTotalRevenueUsd = cumulativeTotalRevenueUsd;
            this.Timestamp = timestamp;
            this.EntryTime = entryTime;
            this.RecvTime = recvTime;
            this.BlockNumber = blockNumber;
            this.Id = id;
            this.Day = day;
            this.Protocol = protocol;
            this.TotalValueLockedUsd = totalValueLockedUsd;
            this.TotalLiquidityUsd = totalLiquidityUsd;
            this.ActiveLiquidityUsd = activeLiquidityUsd;
            this.UncollectedProtocolSideValueUsd = uncollectedProtocolSideValueUsd;
            this.UncollectedSupplySideValueUsd = uncollectedSupplySideValueUsd;
            this.ProtocolControlledValueUsd = protocolControlledValueUsd;
            this.DailyVolumeUsd = dailyVolumeUsd;
            this.CumulativeVolumeUsd = cumulativeVolumeUsd;
            this.DailySupplySideRevenueUsd = dailySupplySideRevenueUsd;
            this.CumulativeSupplySideRevenueUsd = cumulativeSupplySideRevenueUsd;
            this.DailyProtocolSideRevenueUsd = dailyProtocolSideRevenueUsd;
            this.CumulativeProtocolSideRevenueUsd = cumulativeProtocolSideRevenueUsd;
            this.DailyTotalRevenueUsd = dailyTotalRevenueUsd;
            this.CumulativeTotalRevenueUsd = cumulativeTotalRevenueUsd;
            this.Timestamp = timestamp;
        }

        /// <summary>
        /// Gets or Sets EntryTime
        /// </summary>
        [DataMember(Name="entry_time", EmitDefaultValue=false)]
        public DateTime EntryTime { get; set; }

        /// <summary>
        /// Gets or Sets RecvTime
        /// </summary>
        [DataMember(Name="recv_time", EmitDefaultValue=false)]
        public DateTime RecvTime { get; set; }

        /// <summary>
        /// Block number of when this snapshot was taken/last modified.)
        /// </summary>
        /// <value>Block number of when this snapshot was taken/last modified.)</value>
        [DataMember(Name="block_number", EmitDefaultValue=false)]
        public int BlockNumber { get; set; }

        /// <summary>
        /// ID is # of days since Unix epoch time.
        /// </summary>
        /// <value>ID is # of days since Unix epoch time.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Number of days since Unix epoch time.
        /// </summary>
        /// <value>Number of days since Unix epoch time.</value>
        [DataMember(Name="day", EmitDefaultValue=false)]
        public int Day { get; set; }

        /// <summary>
        /// Protocol this snapshot is associated with.
        /// </summary>
        /// <value>Protocol this snapshot is associated with.</value>
        [DataMember(Name="protocol", EmitDefaultValue=true)]
        public string Protocol { get; set; }

        /// <summary>
        /// Current TVL (Total Value Locked) of the entire protocol.
        /// </summary>
        /// <value>Current TVL (Total Value Locked) of the entire protocol.</value>
        [DataMember(Name="total_value_locked_usd", EmitDefaultValue=true)]
        public string TotalValueLockedUsd { get; set; }

        /// <summary>
        /// The sum of all active and non-active liquidity in USD for this pool.
        /// </summary>
        /// <value>The sum of all active and non-active liquidity in USD for this pool.</value>
        [DataMember(Name="total_liquidity_usd", EmitDefaultValue=true)]
        public string TotalLiquidityUsd { get; set; }

        /// <summary>
        /// All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pool&#39;s current tick.
        /// </summary>
        /// <value>All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pool&#39;s current tick.</value>
        [DataMember(Name="active_liquidity_usd", EmitDefaultValue=true)]
        public string ActiveLiquidityUsd { get; set; }

        /// <summary>
        /// All protocol-side value locking in USD that remains uncollected and unused in the protocol.
        /// </summary>
        /// <value>All protocol-side value locking in USD that remains uncollected and unused in the protocol.</value>
        [DataMember(Name="uncollected_protocol_side_value_usd", EmitDefaultValue=true)]
        public string UncollectedProtocolSideValueUsd { get; set; }

        /// <summary>
        /// All supply-side value locking in USD that remains uncollected and unused in the protocol.
        /// </summary>
        /// <value>All supply-side value locking in USD that remains uncollected and unused in the protocol.</value>
        [DataMember(Name="uncollected_supply_side_value_usd", EmitDefaultValue=true)]
        public string UncollectedSupplySideValueUsd { get; set; }

        /// <summary>
        /// Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.
        /// </summary>
        /// <value>Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.</value>
        [DataMember(Name="protocol_controlled_value_usd", EmitDefaultValue=true)]
        public string ProtocolControlledValueUsd { get; set; }

        /// <summary>
        /// All trade volume occurred in a given day, in USD
        /// </summary>
        /// <value>All trade volume occurred in a given day, in USD</value>
        [DataMember(Name="daily_volume_usd", EmitDefaultValue=true)]
        public string DailyVolumeUsd { get; set; }

        /// <summary>
        /// All historical trade volume in USD
        /// </summary>
        /// <value>All historical trade volume in USD</value>
        [DataMember(Name="cumulative_volume_usd", EmitDefaultValue=true)]
        public string CumulativeVolumeUsd { get; set; }

        /// <summary>
        /// Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
        /// </summary>
        /// <value>Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.</value>
        [DataMember(Name="daily_supply_side_revenue_usd", EmitDefaultValue=true)]
        public string DailySupplySideRevenueUsd { get; set; }

        /// <summary>
        /// Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
        /// </summary>
        /// <value>Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.</value>
        [DataMember(Name="cumulative_supply_side_revenue_usd", EmitDefaultValue=true)]
        public string CumulativeSupplySideRevenueUsd { get; set; }

        /// <summary>
        /// Gross revenue for the protocol (revenue claimed by the protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
        /// </summary>
        /// <value>Gross revenue for the protocol (revenue claimed by the protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.</value>
        [DataMember(Name="daily_protocol_side_revenue_usd", EmitDefaultValue=true)]
        public string DailyProtocolSideRevenueUsd { get; set; }

        /// <summary>
        /// Gross revenue for the protocol (revenue claimed by the protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
        /// </summary>
        /// <value>Gross revenue for the protocol (revenue claimed by the protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.</value>
        [DataMember(Name="cumulative_protocol_side_revenue_usd", EmitDefaultValue=true)]
        public string CumulativeProtocolSideRevenueUsd { get; set; }

        /// <summary>
        /// All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
        /// </summary>
        /// <value>All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.</value>
        [DataMember(Name="daily_total_revenue_usd", EmitDefaultValue=true)]
        public string DailyTotalRevenueUsd { get; set; }

        /// <summary>
        /// All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
        /// </summary>
        /// <value>All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.</value>
        [DataMember(Name="cumulative_total_revenue_usd", EmitDefaultValue=true)]
        public string CumulativeTotalRevenueUsd { get; set; }

        /// <summary>
        /// Timestamp of when this snapshot was taken/last modified (May be taken after the interval has passed).
        /// </summary>
        /// <value>Timestamp of when this snapshot was taken/last modified (May be taken after the interval has passed).</value>
        [DataMember(Name="timestamp", EmitDefaultValue=true)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO {\n");
            sb.Append("  EntryTime: ").Append(EntryTime).Append("\n");
            sb.Append("  RecvTime: ").Append(RecvTime).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  TotalValueLockedUsd: ").Append(TotalValueLockedUsd).Append("\n");
            sb.Append("  TotalLiquidityUsd: ").Append(TotalLiquidityUsd).Append("\n");
            sb.Append("  ActiveLiquidityUsd: ").Append(ActiveLiquidityUsd).Append("\n");
            sb.Append("  UncollectedProtocolSideValueUsd: ").Append(UncollectedProtocolSideValueUsd).Append("\n");
            sb.Append("  UncollectedSupplySideValueUsd: ").Append(UncollectedSupplySideValueUsd).Append("\n");
            sb.Append("  ProtocolControlledValueUsd: ").Append(ProtocolControlledValueUsd).Append("\n");
            sb.Append("  DailyVolumeUsd: ").Append(DailyVolumeUsd).Append("\n");
            sb.Append("  CumulativeVolumeUsd: ").Append(CumulativeVolumeUsd).Append("\n");
            sb.Append("  DailySupplySideRevenueUsd: ").Append(DailySupplySideRevenueUsd).Append("\n");
            sb.Append("  CumulativeSupplySideRevenueUsd: ").Append(CumulativeSupplySideRevenueUsd).Append("\n");
            sb.Append("  DailyProtocolSideRevenueUsd: ").Append(DailyProtocolSideRevenueUsd).Append("\n");
            sb.Append("  CumulativeProtocolSideRevenueUsd: ").Append(CumulativeProtocolSideRevenueUsd).Append("\n");
            sb.Append("  DailyTotalRevenueUsd: ").Append(DailyTotalRevenueUsd).Append("\n");
            sb.Append("  CumulativeTotalRevenueUsd: ").Append(CumulativeTotalRevenueUsd).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO);
        }

        /// <summary>
        /// Returns true if UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntryTime == input.EntryTime ||
                    (this.EntryTime != null &&
                    this.EntryTime.Equals(input.EntryTime))
                ) && 
                (
                    this.RecvTime == input.RecvTime ||
                    (this.RecvTime != null &&
                    this.RecvTime.Equals(input.RecvTime))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    (this.BlockNumber != null &&
                    this.BlockNumber.Equals(input.BlockNumber))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Day == input.Day ||
                    (this.Day != null &&
                    this.Day.Equals(input.Day))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.TotalValueLockedUsd == input.TotalValueLockedUsd ||
                    (this.TotalValueLockedUsd != null &&
                    this.TotalValueLockedUsd.Equals(input.TotalValueLockedUsd))
                ) && 
                (
                    this.TotalLiquidityUsd == input.TotalLiquidityUsd ||
                    (this.TotalLiquidityUsd != null &&
                    this.TotalLiquidityUsd.Equals(input.TotalLiquidityUsd))
                ) && 
                (
                    this.ActiveLiquidityUsd == input.ActiveLiquidityUsd ||
                    (this.ActiveLiquidityUsd != null &&
                    this.ActiveLiquidityUsd.Equals(input.ActiveLiquidityUsd))
                ) && 
                (
                    this.UncollectedProtocolSideValueUsd == input.UncollectedProtocolSideValueUsd ||
                    (this.UncollectedProtocolSideValueUsd != null &&
                    this.UncollectedProtocolSideValueUsd.Equals(input.UncollectedProtocolSideValueUsd))
                ) && 
                (
                    this.UncollectedSupplySideValueUsd == input.UncollectedSupplySideValueUsd ||
                    (this.UncollectedSupplySideValueUsd != null &&
                    this.UncollectedSupplySideValueUsd.Equals(input.UncollectedSupplySideValueUsd))
                ) && 
                (
                    this.ProtocolControlledValueUsd == input.ProtocolControlledValueUsd ||
                    (this.ProtocolControlledValueUsd != null &&
                    this.ProtocolControlledValueUsd.Equals(input.ProtocolControlledValueUsd))
                ) && 
                (
                    this.DailyVolumeUsd == input.DailyVolumeUsd ||
                    (this.DailyVolumeUsd != null &&
                    this.DailyVolumeUsd.Equals(input.DailyVolumeUsd))
                ) && 
                (
                    this.CumulativeVolumeUsd == input.CumulativeVolumeUsd ||
                    (this.CumulativeVolumeUsd != null &&
                    this.CumulativeVolumeUsd.Equals(input.CumulativeVolumeUsd))
                ) && 
                (
                    this.DailySupplySideRevenueUsd == input.DailySupplySideRevenueUsd ||
                    (this.DailySupplySideRevenueUsd != null &&
                    this.DailySupplySideRevenueUsd.Equals(input.DailySupplySideRevenueUsd))
                ) && 
                (
                    this.CumulativeSupplySideRevenueUsd == input.CumulativeSupplySideRevenueUsd ||
                    (this.CumulativeSupplySideRevenueUsd != null &&
                    this.CumulativeSupplySideRevenueUsd.Equals(input.CumulativeSupplySideRevenueUsd))
                ) && 
                (
                    this.DailyProtocolSideRevenueUsd == input.DailyProtocolSideRevenueUsd ||
                    (this.DailyProtocolSideRevenueUsd != null &&
                    this.DailyProtocolSideRevenueUsd.Equals(input.DailyProtocolSideRevenueUsd))
                ) && 
                (
                    this.CumulativeProtocolSideRevenueUsd == input.CumulativeProtocolSideRevenueUsd ||
                    (this.CumulativeProtocolSideRevenueUsd != null &&
                    this.CumulativeProtocolSideRevenueUsd.Equals(input.CumulativeProtocolSideRevenueUsd))
                ) && 
                (
                    this.DailyTotalRevenueUsd == input.DailyTotalRevenueUsd ||
                    (this.DailyTotalRevenueUsd != null &&
                    this.DailyTotalRevenueUsd.Equals(input.DailyTotalRevenueUsd))
                ) && 
                (
                    this.CumulativeTotalRevenueUsd == input.CumulativeTotalRevenueUsd ||
                    (this.CumulativeTotalRevenueUsd != null &&
                    this.CumulativeTotalRevenueUsd.Equals(input.CumulativeTotalRevenueUsd))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntryTime != null)
                    hashCode = hashCode * 59 + this.EntryTime.GetHashCode();
                if (this.RecvTime != null)
                    hashCode = hashCode * 59 + this.RecvTime.GetHashCode();
                if (this.BlockNumber != null)
                    hashCode = hashCode * 59 + this.BlockNumber.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Day != null)
                    hashCode = hashCode * 59 + this.Day.GetHashCode();
                if (this.Protocol != null)
                    hashCode = hashCode * 59 + this.Protocol.GetHashCode();
                if (this.TotalValueLockedUsd != null)
                    hashCode = hashCode * 59 + this.TotalValueLockedUsd.GetHashCode();
                if (this.TotalLiquidityUsd != null)
                    hashCode = hashCode * 59 + this.TotalLiquidityUsd.GetHashCode();
                if (this.ActiveLiquidityUsd != null)
                    hashCode = hashCode * 59 + this.ActiveLiquidityUsd.GetHashCode();
                if (this.UncollectedProtocolSideValueUsd != null)
                    hashCode = hashCode * 59 + this.UncollectedProtocolSideValueUsd.GetHashCode();
                if (this.UncollectedSupplySideValueUsd != null)
                    hashCode = hashCode * 59 + this.UncollectedSupplySideValueUsd.GetHashCode();
                if (this.ProtocolControlledValueUsd != null)
                    hashCode = hashCode * 59 + this.ProtocolControlledValueUsd.GetHashCode();
                if (this.DailyVolumeUsd != null)
                    hashCode = hashCode * 59 + this.DailyVolumeUsd.GetHashCode();
                if (this.CumulativeVolumeUsd != null)
                    hashCode = hashCode * 59 + this.CumulativeVolumeUsd.GetHashCode();
                if (this.DailySupplySideRevenueUsd != null)
                    hashCode = hashCode * 59 + this.DailySupplySideRevenueUsd.GetHashCode();
                if (this.CumulativeSupplySideRevenueUsd != null)
                    hashCode = hashCode * 59 + this.CumulativeSupplySideRevenueUsd.GetHashCode();
                if (this.DailyProtocolSideRevenueUsd != null)
                    hashCode = hashCode * 59 + this.DailyProtocolSideRevenueUsd.GetHashCode();
                if (this.CumulativeProtocolSideRevenueUsd != null)
                    hashCode = hashCode * 59 + this.CumulativeProtocolSideRevenueUsd.GetHashCode();
                if (this.DailyTotalRevenueUsd != null)
                    hashCode = hashCode * 59 + this.DailyTotalRevenueUsd.GetHashCode();
                if (this.CumulativeTotalRevenueUsd != null)
                    hashCode = hashCode * 59 + this.CumulativeTotalRevenueUsd.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
