/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.EMS.REST.V1.Client.OpenAPIDateConverter;

namespace CoinAPI.EMS.REST.V1.Model
{
    /// <summary>
    /// Daily financial metrics for Uniswap V2.
    /// </summary>
    [DataContract]
    public partial class UNISWAPV2ETHEREUMFinancialsDailySnapshotDTO :  IEquatable<UNISWAPV2ETHEREUMFinancialsDailySnapshotDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UNISWAPV2ETHEREUMFinancialsDailySnapshotDTO" /> class.
        /// </summary>
        /// <param name="entryTime">entryTime.</param>
        /// <param name="recvTime">recvTime.</param>
        /// <param name="blockNumber">Number of block in which entity was recorded..</param>
        /// <param name="blockRange">blockRange.</param>
        /// <param name="id">ID is # of days since Unix epoch time.</param>
        /// <param name="protocol">Protocol this snapshot is associated with.</param>
        /// <param name="totalValueLockedUsd">Current TVL (Total Value Locked) of the entire protocol.</param>
        /// <param name="protocolControlledValueUsd">Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV..</param>
        /// <param name="dailyVolumeUsd">All trade volume occurred in a given day, in USD.</param>
        /// <param name="cumulativeVolumeUsd">All historical trade volume in USD.</param>
        /// <param name="dailySupplySideRevenueUsd">Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea..</param>
        /// <param name="cumulativeSupplySideRevenueUsd">Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea..</param>
        /// <param name="dailyProtocolSideRevenueUsd">Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee..</param>
        /// <param name="cumulativeProtocolSideRevenueUsd">Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee..</param>
        /// <param name="dailyTotalRevenueUsd">ll revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn..</param>
        /// <param name="cumulativeTotalRevenueUsd">All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn..</param>
        /// <param name="timestamp">Timestamp of this snapshot.</param>
        public UNISWAPV2ETHEREUMFinancialsDailySnapshotDTO(DateTime entryTime = default(DateTime), DateTime recvTime = default(DateTime), long blockNumber = default(long), string blockRange = default(string), string id = default(string), string protocol = default(string), string totalValueLockedUsd = default(string), string protocolControlledValueUsd = default(string), string dailyVolumeUsd = default(string), string cumulativeVolumeUsd = default(string), string dailySupplySideRevenueUsd = default(string), string cumulativeSupplySideRevenueUsd = default(string), string dailyProtocolSideRevenueUsd = default(string), string cumulativeProtocolSideRevenueUsd = default(string), string dailyTotalRevenueUsd = default(string), string cumulativeTotalRevenueUsd = default(string), string timestamp = default(string))
        {
            this.BlockRange = blockRange;
            this.Id = id;
            this.Protocol = protocol;
            this.TotalValueLockedUsd = totalValueLockedUsd;
            this.ProtocolControlledValueUsd = protocolControlledValueUsd;
            this.DailyVolumeUsd = dailyVolumeUsd;
            this.CumulativeVolumeUsd = cumulativeVolumeUsd;
            this.DailySupplySideRevenueUsd = dailySupplySideRevenueUsd;
            this.CumulativeSupplySideRevenueUsd = cumulativeSupplySideRevenueUsd;
            this.DailyProtocolSideRevenueUsd = dailyProtocolSideRevenueUsd;
            this.CumulativeProtocolSideRevenueUsd = cumulativeProtocolSideRevenueUsd;
            this.DailyTotalRevenueUsd = dailyTotalRevenueUsd;
            this.CumulativeTotalRevenueUsd = cumulativeTotalRevenueUsd;
            this.Timestamp = timestamp;
            this.EntryTime = entryTime;
            this.RecvTime = recvTime;
            this.BlockNumber = blockNumber;
            this.BlockRange = blockRange;
            this.Id = id;
            this.Protocol = protocol;
            this.TotalValueLockedUsd = totalValueLockedUsd;
            this.ProtocolControlledValueUsd = protocolControlledValueUsd;
            this.DailyVolumeUsd = dailyVolumeUsd;
            this.CumulativeVolumeUsd = cumulativeVolumeUsd;
            this.DailySupplySideRevenueUsd = dailySupplySideRevenueUsd;
            this.CumulativeSupplySideRevenueUsd = cumulativeSupplySideRevenueUsd;
            this.DailyProtocolSideRevenueUsd = dailyProtocolSideRevenueUsd;
            this.CumulativeProtocolSideRevenueUsd = cumulativeProtocolSideRevenueUsd;
            this.DailyTotalRevenueUsd = dailyTotalRevenueUsd;
            this.CumulativeTotalRevenueUsd = cumulativeTotalRevenueUsd;
            this.Timestamp = timestamp;
        }

        /// <summary>
        /// Gets or Sets EntryTime
        /// </summary>
        [DataMember(Name="entry_time", EmitDefaultValue=false)]
        public DateTime EntryTime { get; set; }

        /// <summary>
        /// Gets or Sets RecvTime
        /// </summary>
        [DataMember(Name="recv_time", EmitDefaultValue=false)]
        public DateTime RecvTime { get; set; }

        /// <summary>
        /// Number of block in which entity was recorded.
        /// </summary>
        /// <value>Number of block in which entity was recorded.</value>
        [DataMember(Name="block_number", EmitDefaultValue=false)]
        public long BlockNumber { get; set; }

        /// <summary>
        /// Gets or Sets BlockRange
        /// </summary>
        [DataMember(Name="block_range", EmitDefaultValue=true)]
        public string BlockRange { get; set; }

        /// <summary>
        /// ID is # of days since Unix epoch time
        /// </summary>
        /// <value>ID is # of days since Unix epoch time</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Protocol this snapshot is associated with
        /// </summary>
        /// <value>Protocol this snapshot is associated with</value>
        [DataMember(Name="protocol", EmitDefaultValue=true)]
        public string Protocol { get; set; }

        /// <summary>
        /// Current TVL (Total Value Locked) of the entire protocol
        /// </summary>
        /// <value>Current TVL (Total Value Locked) of the entire protocol</value>
        [DataMember(Name="total_value_locked_usd", EmitDefaultValue=true)]
        public string TotalValueLockedUsd { get; set; }

        /// <summary>
        /// Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.
        /// </summary>
        /// <value>Current PCV (Protocol Controlled Value). Only relevant for protocols with PCV.</value>
        [DataMember(Name="protocol_controlled_value_usd", EmitDefaultValue=true)]
        public string ProtocolControlledValueUsd { get; set; }

        /// <summary>
        /// All trade volume occurred in a given day, in USD
        /// </summary>
        /// <value>All trade volume occurred in a given day, in USD</value>
        [DataMember(Name="daily_volume_usd", EmitDefaultValue=true)]
        public string DailyVolumeUsd { get; set; }

        /// <summary>
        /// All historical trade volume in USD
        /// </summary>
        /// <value>All historical trade volume in USD</value>
        [DataMember(Name="cumulative_volume_usd", EmitDefaultValue=true)]
        public string CumulativeVolumeUsd { get; set; }

        /// <summary>
        /// Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
        /// </summary>
        /// <value>Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.</value>
        [DataMember(Name="daily_supply_side_revenue_usd", EmitDefaultValue=true)]
        public string DailySupplySideRevenueUsd { get; set; }

        /// <summary>
        /// Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.
        /// </summary>
        /// <value>Revenue claimed by suppliers to the protocol. LPs on DEXs (e.g. 0.25% of the swap fee in Sushiswap). Depositors on Lending Protocols. NFT sellers on OpenSea.</value>
        [DataMember(Name="cumulative_supply_side_revenue_usd", EmitDefaultValue=true)]
        public string CumulativeSupplySideRevenueUsd { get; set; }

        /// <summary>
        /// Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
        /// </summary>
        /// <value>Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.</value>
        [DataMember(Name="daily_protocol_side_revenue_usd", EmitDefaultValue=true)]
        public string DailyProtocolSideRevenueUsd { get; set; }

        /// <summary>
        /// Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.
        /// </summary>
        /// <value>Gross revenue for the protocol (revenue claimed by protocol). Examples: AMM protocol fee (Sushi’s 0.05%). OpenSea 10% sell fee.</value>
        [DataMember(Name="cumulative_protocol_side_revenue_usd", EmitDefaultValue=true)]
        public string CumulativeProtocolSideRevenueUsd { get; set; }

        /// <summary>
        /// ll revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
        /// </summary>
        /// <value>ll revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.</value>
        [DataMember(Name="daily_total_revenue_usd", EmitDefaultValue=true)]
        public string DailyTotalRevenueUsd { get; set; }

        /// <summary>
        /// All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.
        /// </summary>
        /// <value>All revenue generated by the protocol. e.g. 0.30% of swap fee in Sushiswap, all yield generated by Yearn.</value>
        [DataMember(Name="cumulative_total_revenue_usd", EmitDefaultValue=true)]
        public string CumulativeTotalRevenueUsd { get; set; }

        /// <summary>
        /// Timestamp of this snapshot
        /// </summary>
        /// <value>Timestamp of this snapshot</value>
        [DataMember(Name="timestamp", EmitDefaultValue=true)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UNISWAPV2ETHEREUMFinancialsDailySnapshotDTO {\n");
            sb.Append("  EntryTime: ").Append(EntryTime).Append("\n");
            sb.Append("  RecvTime: ").Append(RecvTime).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  BlockRange: ").Append(BlockRange).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  TotalValueLockedUsd: ").Append(TotalValueLockedUsd).Append("\n");
            sb.Append("  ProtocolControlledValueUsd: ").Append(ProtocolControlledValueUsd).Append("\n");
            sb.Append("  DailyVolumeUsd: ").Append(DailyVolumeUsd).Append("\n");
            sb.Append("  CumulativeVolumeUsd: ").Append(CumulativeVolumeUsd).Append("\n");
            sb.Append("  DailySupplySideRevenueUsd: ").Append(DailySupplySideRevenueUsd).Append("\n");
            sb.Append("  CumulativeSupplySideRevenueUsd: ").Append(CumulativeSupplySideRevenueUsd).Append("\n");
            sb.Append("  DailyProtocolSideRevenueUsd: ").Append(DailyProtocolSideRevenueUsd).Append("\n");
            sb.Append("  CumulativeProtocolSideRevenueUsd: ").Append(CumulativeProtocolSideRevenueUsd).Append("\n");
            sb.Append("  DailyTotalRevenueUsd: ").Append(DailyTotalRevenueUsd).Append("\n");
            sb.Append("  CumulativeTotalRevenueUsd: ").Append(CumulativeTotalRevenueUsd).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UNISWAPV2ETHEREUMFinancialsDailySnapshotDTO);
        }

        /// <summary>
        /// Returns true if UNISWAPV2ETHEREUMFinancialsDailySnapshotDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of UNISWAPV2ETHEREUMFinancialsDailySnapshotDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UNISWAPV2ETHEREUMFinancialsDailySnapshotDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntryTime == input.EntryTime ||
                    (this.EntryTime != null &&
                    this.EntryTime.Equals(input.EntryTime))
                ) && 
                (
                    this.RecvTime == input.RecvTime ||
                    (this.RecvTime != null &&
                    this.RecvTime.Equals(input.RecvTime))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    (this.BlockNumber != null &&
                    this.BlockNumber.Equals(input.BlockNumber))
                ) && 
                (
                    this.BlockRange == input.BlockRange ||
                    (this.BlockRange != null &&
                    this.BlockRange.Equals(input.BlockRange))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.TotalValueLockedUsd == input.TotalValueLockedUsd ||
                    (this.TotalValueLockedUsd != null &&
                    this.TotalValueLockedUsd.Equals(input.TotalValueLockedUsd))
                ) && 
                (
                    this.ProtocolControlledValueUsd == input.ProtocolControlledValueUsd ||
                    (this.ProtocolControlledValueUsd != null &&
                    this.ProtocolControlledValueUsd.Equals(input.ProtocolControlledValueUsd))
                ) && 
                (
                    this.DailyVolumeUsd == input.DailyVolumeUsd ||
                    (this.DailyVolumeUsd != null &&
                    this.DailyVolumeUsd.Equals(input.DailyVolumeUsd))
                ) && 
                (
                    this.CumulativeVolumeUsd == input.CumulativeVolumeUsd ||
                    (this.CumulativeVolumeUsd != null &&
                    this.CumulativeVolumeUsd.Equals(input.CumulativeVolumeUsd))
                ) && 
                (
                    this.DailySupplySideRevenueUsd == input.DailySupplySideRevenueUsd ||
                    (this.DailySupplySideRevenueUsd != null &&
                    this.DailySupplySideRevenueUsd.Equals(input.DailySupplySideRevenueUsd))
                ) && 
                (
                    this.CumulativeSupplySideRevenueUsd == input.CumulativeSupplySideRevenueUsd ||
                    (this.CumulativeSupplySideRevenueUsd != null &&
                    this.CumulativeSupplySideRevenueUsd.Equals(input.CumulativeSupplySideRevenueUsd))
                ) && 
                (
                    this.DailyProtocolSideRevenueUsd == input.DailyProtocolSideRevenueUsd ||
                    (this.DailyProtocolSideRevenueUsd != null &&
                    this.DailyProtocolSideRevenueUsd.Equals(input.DailyProtocolSideRevenueUsd))
                ) && 
                (
                    this.CumulativeProtocolSideRevenueUsd == input.CumulativeProtocolSideRevenueUsd ||
                    (this.CumulativeProtocolSideRevenueUsd != null &&
                    this.CumulativeProtocolSideRevenueUsd.Equals(input.CumulativeProtocolSideRevenueUsd))
                ) && 
                (
                    this.DailyTotalRevenueUsd == input.DailyTotalRevenueUsd ||
                    (this.DailyTotalRevenueUsd != null &&
                    this.DailyTotalRevenueUsd.Equals(input.DailyTotalRevenueUsd))
                ) && 
                (
                    this.CumulativeTotalRevenueUsd == input.CumulativeTotalRevenueUsd ||
                    (this.CumulativeTotalRevenueUsd != null &&
                    this.CumulativeTotalRevenueUsd.Equals(input.CumulativeTotalRevenueUsd))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntryTime != null)
                    hashCode = hashCode * 59 + this.EntryTime.GetHashCode();
                if (this.RecvTime != null)
                    hashCode = hashCode * 59 + this.RecvTime.GetHashCode();
                if (this.BlockNumber != null)
                    hashCode = hashCode * 59 + this.BlockNumber.GetHashCode();
                if (this.BlockRange != null)
                    hashCode = hashCode * 59 + this.BlockRange.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Protocol != null)
                    hashCode = hashCode * 59 + this.Protocol.GetHashCode();
                if (this.TotalValueLockedUsd != null)
                    hashCode = hashCode * 59 + this.TotalValueLockedUsd.GetHashCode();
                if (this.ProtocolControlledValueUsd != null)
                    hashCode = hashCode * 59 + this.ProtocolControlledValueUsd.GetHashCode();
                if (this.DailyVolumeUsd != null)
                    hashCode = hashCode * 59 + this.DailyVolumeUsd.GetHashCode();
                if (this.CumulativeVolumeUsd != null)
                    hashCode = hashCode * 59 + this.CumulativeVolumeUsd.GetHashCode();
                if (this.DailySupplySideRevenueUsd != null)
                    hashCode = hashCode * 59 + this.DailySupplySideRevenueUsd.GetHashCode();
                if (this.CumulativeSupplySideRevenueUsd != null)
                    hashCode = hashCode * 59 + this.CumulativeSupplySideRevenueUsd.GetHashCode();
                if (this.DailyProtocolSideRevenueUsd != null)
                    hashCode = hashCode * 59 + this.DailyProtocolSideRevenueUsd.GetHashCode();
                if (this.CumulativeProtocolSideRevenueUsd != null)
                    hashCode = hashCode * 59 + this.CumulativeProtocolSideRevenueUsd.GetHashCode();
                if (this.DailyTotalRevenueUsd != null)
                    hashCode = hashCode * 59 + this.DailyTotalRevenueUsd.GetHashCode();
                if (this.CumulativeTotalRevenueUsd != null)
                    hashCode = hashCode * 59 + this.CumulativeTotalRevenueUsd.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
