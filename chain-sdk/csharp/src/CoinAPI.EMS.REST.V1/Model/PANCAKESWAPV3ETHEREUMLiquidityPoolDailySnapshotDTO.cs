/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.EMS.REST.V1.Client.OpenAPIDateConverter;

namespace CoinAPI.EMS.REST.V1.Model
{
    /// <summary>
    /// Represents a liquidity pool daily snapshot for PancakeSwap V3.
    /// </summary>
    [DataContract]
    public partial class PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO :  IEquatable<PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO" /> class.
        /// </summary>
        /// <param name="entryTime">entryTime.</param>
        /// <param name="recvTime">recvTime.</param>
        /// <param name="blockNumber">Number of block in which entity was recorded..</param>
        /// <param name="vid">..</param>
        /// <param name="block">The Ethereum block number associated with the liquidity pool daily snapshot..</param>
        /// <param name="id">Identifier, format: (smart contract address of the pool)-(# of days since Unix epoch time)..</param>
        /// <param name="day">Number of days since Unix epoch time..</param>
        /// <param name="protocol">Protocol associated with the liquidity pool..</param>
        /// <param name="pool">Pool this snapshot belongs to..</param>
        /// <param name="tick">Current tick representing the price of token0/token1..</param>
        /// <param name="totalValueLockedUsd">Current TVL (Total Value Locked) of this pool..</param>
        /// <param name="totalLiquidity">The sum of all active and non-active liquidity for this pool..</param>
        /// <param name="totalLiquidityUsd">Sum of all active and non-active liquidity in USD for this pool..</param>
        /// <param name="activeLiquidity">All liquidity &#x60;k&#x60; that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick..</param>
        /// <param name="activeLiquidityUsd">All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick..</param>
        /// <param name="uncollectedProtocolSideTokenAmounts">All protocol-side value locked in token amounts that remains uncollected and unused in the pool..</param>
        /// <param name="uncollectedProtocolSideValuesUsd">All protocol-side value locking in USD that remains uncollected and unused in the pool..</param>
        /// <param name="uncollectedSupplySideTokenAmounts">All supply-side value locked in token amounts that remains uncollected and unused in the pool..</param>
        /// <param name="uncollectedSupplySideValuesUsd">All supply-side value locked in USD that remains uncollected and unused in the pool..</param>
        /// <param name="cumulativeSupplySideRevenueUsd">All revenue generated by the liquidity pool, accrued to the supply side..</param>
        /// <param name="dailySupplySideRevenueUsd">Daily revenue generated by the liquidity pool, accrued to the supply side..</param>
        /// <param name="cumulativeProtocolSideRevenueUsd">All revenue generated by the liquidity pool, accrued to the protocol..</param>
        /// <param name="dailyProtocolSideRevenueUsd">Daily revenue generated by the liquidity pool, accrued to the protocol..</param>
        /// <param name="cumulativeTotalRevenueUsd">All revenue generated by the liquidity pool..</param>
        /// <param name="dailyTotalRevenueUsd">Daily revenue generated by the liquidity pool..</param>
        /// <param name="cumulativeVolumeUsd">All historical trade volume occurred in this pool, in USD..</param>
        /// <param name="dailyVolumeUsd">All trade volume occurred in a given day, in USD..</param>
        /// <param name="cumulativeVolumeByTokenAmount">All trade volume , in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field..</param>
        /// <param name="dailyVolumeByTokenAmount">All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field..</param>
        /// <param name="cumulativeVolumeByTokenUsd">All trade volume, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field..</param>
        /// <param name="dailyVolumeByTokenUsd"> All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field..</param>
        /// <param name="inputTokenBalances">Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field..</param>
        /// <param name="inputTokenBalancesUsd">Amount of input tokens in USD in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field..</param>
        /// <param name="inputTokenWeights">Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool..</param>
        /// <param name="stakedOutputTokenAmount">Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY..</param>
        /// <param name="rewardTokenEmissionsAmount">Per-block reward token emission as of the current block normalized to a day, in token&#39;s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount..</param>
        /// <param name="rewardTokenEmissionsUsd">Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount..</param>
        /// <param name="cumulativeDepositCount">Total number of deposits (add liquidity)..</param>
        /// <param name="dailyDepositCount">Total number of deposits (add liquidity) in a day..</param>
        /// <param name="cumulativeWithdrawCount">Total number of withdrawals (remove liquidity)..</param>
        /// <param name="dailyWithdrawCount">Total number of withdrawals (remove liquidity) in a day..</param>
        /// <param name="cumulativeSwapCount">Total number of trades (swaps)..</param>
        /// <param name="dailySwapCount">Total number of trades (swaps) in a day..</param>
        /// <param name="positionCount">Number of positions in this market..</param>
        /// <param name="openPositionCount">Number of open positions in this market..</param>
        /// <param name="closedPositionCount">Number of closed positions in this market..</param>
        /// <param name="timestamp">Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed)..</param>
        public PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO(DateTime entryTime = default(DateTime), DateTime recvTime = default(DateTime), long blockNumber = default(long), long vid = default(long), int block = default(int), string id = default(string), int day = default(int), string protocol = default(string), string pool = default(string), string tick = default(string), string totalValueLockedUsd = default(string), string totalLiquidity = default(string), string totalLiquidityUsd = default(string), string activeLiquidity = default(string), string activeLiquidityUsd = default(string), List<string> uncollectedProtocolSideTokenAmounts = default(List<string>), List<string> uncollectedProtocolSideValuesUsd = default(List<string>), List<string> uncollectedSupplySideTokenAmounts = default(List<string>), List<string> uncollectedSupplySideValuesUsd = default(List<string>), string cumulativeSupplySideRevenueUsd = default(string), string dailySupplySideRevenueUsd = default(string), string cumulativeProtocolSideRevenueUsd = default(string), string dailyProtocolSideRevenueUsd = default(string), string cumulativeTotalRevenueUsd = default(string), string dailyTotalRevenueUsd = default(string), string cumulativeVolumeUsd = default(string), string dailyVolumeUsd = default(string), List<string> cumulativeVolumeByTokenAmount = default(List<string>), List<string> dailyVolumeByTokenAmount = default(List<string>), List<string> cumulativeVolumeByTokenUsd = default(List<string>), List<string> dailyVolumeByTokenUsd = default(List<string>), List<string> inputTokenBalances = default(List<string>), List<string> inputTokenBalancesUsd = default(List<string>), List<string> inputTokenWeights = default(List<string>), string stakedOutputTokenAmount = default(string), List<string> rewardTokenEmissionsAmount = default(List<string>), List<string> rewardTokenEmissionsUsd = default(List<string>), int cumulativeDepositCount = default(int), int dailyDepositCount = default(int), int cumulativeWithdrawCount = default(int), int dailyWithdrawCount = default(int), int cumulativeSwapCount = default(int), int dailySwapCount = default(int), int positionCount = default(int), int openPositionCount = default(int), int closedPositionCount = default(int), string timestamp = default(string))
        {
            this.Id = id;
            this.Protocol = protocol;
            this.Pool = pool;
            this.Tick = tick;
            this.TotalValueLockedUsd = totalValueLockedUsd;
            this.TotalLiquidity = totalLiquidity;
            this.TotalLiquidityUsd = totalLiquidityUsd;
            this.ActiveLiquidity = activeLiquidity;
            this.ActiveLiquidityUsd = activeLiquidityUsd;
            this.UncollectedProtocolSideTokenAmounts = uncollectedProtocolSideTokenAmounts;
            this.UncollectedProtocolSideValuesUsd = uncollectedProtocolSideValuesUsd;
            this.UncollectedSupplySideTokenAmounts = uncollectedSupplySideTokenAmounts;
            this.UncollectedSupplySideValuesUsd = uncollectedSupplySideValuesUsd;
            this.CumulativeSupplySideRevenueUsd = cumulativeSupplySideRevenueUsd;
            this.DailySupplySideRevenueUsd = dailySupplySideRevenueUsd;
            this.CumulativeProtocolSideRevenueUsd = cumulativeProtocolSideRevenueUsd;
            this.DailyProtocolSideRevenueUsd = dailyProtocolSideRevenueUsd;
            this.CumulativeTotalRevenueUsd = cumulativeTotalRevenueUsd;
            this.DailyTotalRevenueUsd = dailyTotalRevenueUsd;
            this.CumulativeVolumeUsd = cumulativeVolumeUsd;
            this.DailyVolumeUsd = dailyVolumeUsd;
            this.CumulativeVolumeByTokenAmount = cumulativeVolumeByTokenAmount;
            this.DailyVolumeByTokenAmount = dailyVolumeByTokenAmount;
            this.CumulativeVolumeByTokenUsd = cumulativeVolumeByTokenUsd;
            this.DailyVolumeByTokenUsd = dailyVolumeByTokenUsd;
            this.InputTokenBalances = inputTokenBalances;
            this.InputTokenBalancesUsd = inputTokenBalancesUsd;
            this.InputTokenWeights = inputTokenWeights;
            this.StakedOutputTokenAmount = stakedOutputTokenAmount;
            this.RewardTokenEmissionsAmount = rewardTokenEmissionsAmount;
            this.RewardTokenEmissionsUsd = rewardTokenEmissionsUsd;
            this.Timestamp = timestamp;
            this.EntryTime = entryTime;
            this.RecvTime = recvTime;
            this.BlockNumber = blockNumber;
            this.Vid = vid;
            this.Block = block;
            this.Id = id;
            this.Day = day;
            this.Protocol = protocol;
            this.Pool = pool;
            this.Tick = tick;
            this.TotalValueLockedUsd = totalValueLockedUsd;
            this.TotalLiquidity = totalLiquidity;
            this.TotalLiquidityUsd = totalLiquidityUsd;
            this.ActiveLiquidity = activeLiquidity;
            this.ActiveLiquidityUsd = activeLiquidityUsd;
            this.UncollectedProtocolSideTokenAmounts = uncollectedProtocolSideTokenAmounts;
            this.UncollectedProtocolSideValuesUsd = uncollectedProtocolSideValuesUsd;
            this.UncollectedSupplySideTokenAmounts = uncollectedSupplySideTokenAmounts;
            this.UncollectedSupplySideValuesUsd = uncollectedSupplySideValuesUsd;
            this.CumulativeSupplySideRevenueUsd = cumulativeSupplySideRevenueUsd;
            this.DailySupplySideRevenueUsd = dailySupplySideRevenueUsd;
            this.CumulativeProtocolSideRevenueUsd = cumulativeProtocolSideRevenueUsd;
            this.DailyProtocolSideRevenueUsd = dailyProtocolSideRevenueUsd;
            this.CumulativeTotalRevenueUsd = cumulativeTotalRevenueUsd;
            this.DailyTotalRevenueUsd = dailyTotalRevenueUsd;
            this.CumulativeVolumeUsd = cumulativeVolumeUsd;
            this.DailyVolumeUsd = dailyVolumeUsd;
            this.CumulativeVolumeByTokenAmount = cumulativeVolumeByTokenAmount;
            this.DailyVolumeByTokenAmount = dailyVolumeByTokenAmount;
            this.CumulativeVolumeByTokenUsd = cumulativeVolumeByTokenUsd;
            this.DailyVolumeByTokenUsd = dailyVolumeByTokenUsd;
            this.InputTokenBalances = inputTokenBalances;
            this.InputTokenBalancesUsd = inputTokenBalancesUsd;
            this.InputTokenWeights = inputTokenWeights;
            this.StakedOutputTokenAmount = stakedOutputTokenAmount;
            this.RewardTokenEmissionsAmount = rewardTokenEmissionsAmount;
            this.RewardTokenEmissionsUsd = rewardTokenEmissionsUsd;
            this.CumulativeDepositCount = cumulativeDepositCount;
            this.DailyDepositCount = dailyDepositCount;
            this.CumulativeWithdrawCount = cumulativeWithdrawCount;
            this.DailyWithdrawCount = dailyWithdrawCount;
            this.CumulativeSwapCount = cumulativeSwapCount;
            this.DailySwapCount = dailySwapCount;
            this.PositionCount = positionCount;
            this.OpenPositionCount = openPositionCount;
            this.ClosedPositionCount = closedPositionCount;
            this.Timestamp = timestamp;
        }

        /// <summary>
        /// Gets or Sets EntryTime
        /// </summary>
        [DataMember(Name="entry_time", EmitDefaultValue=false)]
        public DateTime EntryTime { get; set; }

        /// <summary>
        /// Gets or Sets RecvTime
        /// </summary>
        [DataMember(Name="recv_time", EmitDefaultValue=false)]
        public DateTime RecvTime { get; set; }

        /// <summary>
        /// Number of block in which entity was recorded.
        /// </summary>
        /// <value>Number of block in which entity was recorded.</value>
        [DataMember(Name="block_number", EmitDefaultValue=false)]
        public long BlockNumber { get; set; }

        /// <summary>
        /// .
        /// </summary>
        /// <value>.</value>
        [DataMember(Name="vid", EmitDefaultValue=false)]
        public long Vid { get; set; }

        /// <summary>
        /// The Ethereum block number associated with the liquidity pool daily snapshot.
        /// </summary>
        /// <value>The Ethereum block number associated with the liquidity pool daily snapshot.</value>
        [DataMember(Name="block_", EmitDefaultValue=false)]
        public int Block { get; set; }

        /// <summary>
        /// Identifier, format: (smart contract address of the pool)-(# of days since Unix epoch time).
        /// </summary>
        /// <value>Identifier, format: (smart contract address of the pool)-(# of days since Unix epoch time).</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Number of days since Unix epoch time.
        /// </summary>
        /// <value>Number of days since Unix epoch time.</value>
        [DataMember(Name="day", EmitDefaultValue=false)]
        public int Day { get; set; }

        /// <summary>
        /// Protocol associated with the liquidity pool.
        /// </summary>
        /// <value>Protocol associated with the liquidity pool.</value>
        [DataMember(Name="protocol", EmitDefaultValue=true)]
        public string Protocol { get; set; }

        /// <summary>
        /// Pool this snapshot belongs to.
        /// </summary>
        /// <value>Pool this snapshot belongs to.</value>
        [DataMember(Name="pool", EmitDefaultValue=true)]
        public string Pool { get; set; }

        /// <summary>
        /// Current tick representing the price of token0/token1.
        /// </summary>
        /// <value>Current tick representing the price of token0/token1.</value>
        [DataMember(Name="tick", EmitDefaultValue=true)]
        public string Tick { get; set; }

        /// <summary>
        /// Current TVL (Total Value Locked) of this pool.
        /// </summary>
        /// <value>Current TVL (Total Value Locked) of this pool.</value>
        [DataMember(Name="total_value_locked_usd", EmitDefaultValue=true)]
        public string TotalValueLockedUsd { get; set; }

        /// <summary>
        /// The sum of all active and non-active liquidity for this pool.
        /// </summary>
        /// <value>The sum of all active and non-active liquidity for this pool.</value>
        [DataMember(Name="total_liquidity", EmitDefaultValue=true)]
        public string TotalLiquidity { get; set; }

        /// <summary>
        /// Sum of all active and non-active liquidity in USD for this pool.
        /// </summary>
        /// <value>Sum of all active and non-active liquidity in USD for this pool.</value>
        [DataMember(Name="total_liquidity_usd", EmitDefaultValue=true)]
        public string TotalLiquidityUsd { get; set; }

        /// <summary>
        /// All liquidity &#x60;k&#x60; that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
        /// </summary>
        /// <value>All liquidity &#x60;k&#x60; that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.</value>
        [DataMember(Name="active_liquidity", EmitDefaultValue=true)]
        public string ActiveLiquidity { get; set; }

        /// <summary>
        /// All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.
        /// </summary>
        /// <value>All liquidity in USD that is active. Will be equal to totalLiquidity except for in concentrated liquidity - where activeLiquidity is all liquidity positions that contain the pools current tick.</value>
        [DataMember(Name="active_liquidity_usd", EmitDefaultValue=true)]
        public string ActiveLiquidityUsd { get; set; }

        /// <summary>
        /// All protocol-side value locked in token amounts that remains uncollected and unused in the pool.
        /// </summary>
        /// <value>All protocol-side value locked in token amounts that remains uncollected and unused in the pool.</value>
        [DataMember(Name="uncollected_protocol_side_token_amounts", EmitDefaultValue=true)]
        public List<string> UncollectedProtocolSideTokenAmounts { get; set; }

        /// <summary>
        /// All protocol-side value locking in USD that remains uncollected and unused in the pool.
        /// </summary>
        /// <value>All protocol-side value locking in USD that remains uncollected and unused in the pool.</value>
        [DataMember(Name="uncollected_protocol_side_values_usd", EmitDefaultValue=true)]
        public List<string> UncollectedProtocolSideValuesUsd { get; set; }

        /// <summary>
        /// All supply-side value locked in token amounts that remains uncollected and unused in the pool.
        /// </summary>
        /// <value>All supply-side value locked in token amounts that remains uncollected and unused in the pool.</value>
        [DataMember(Name="uncollected_supply_side_token_amounts", EmitDefaultValue=true)]
        public List<string> UncollectedSupplySideTokenAmounts { get; set; }

        /// <summary>
        /// All supply-side value locked in USD that remains uncollected and unused in the pool.
        /// </summary>
        /// <value>All supply-side value locked in USD that remains uncollected and unused in the pool.</value>
        [DataMember(Name="uncollected_supply_side_values_usd", EmitDefaultValue=true)]
        public List<string> UncollectedSupplySideValuesUsd { get; set; }

        /// <summary>
        /// All revenue generated by the liquidity pool, accrued to the supply side.
        /// </summary>
        /// <value>All revenue generated by the liquidity pool, accrued to the supply side.</value>
        [DataMember(Name="cumulative_supply_side_revenue_usd", EmitDefaultValue=true)]
        public string CumulativeSupplySideRevenueUsd { get; set; }

        /// <summary>
        /// Daily revenue generated by the liquidity pool, accrued to the supply side.
        /// </summary>
        /// <value>Daily revenue generated by the liquidity pool, accrued to the supply side.</value>
        [DataMember(Name="daily_supply_side_revenue_usd", EmitDefaultValue=true)]
        public string DailySupplySideRevenueUsd { get; set; }

        /// <summary>
        /// All revenue generated by the liquidity pool, accrued to the protocol.
        /// </summary>
        /// <value>All revenue generated by the liquidity pool, accrued to the protocol.</value>
        [DataMember(Name="cumulative_protocol_side_revenue_usd", EmitDefaultValue=true)]
        public string CumulativeProtocolSideRevenueUsd { get; set; }

        /// <summary>
        /// Daily revenue generated by the liquidity pool, accrued to the protocol.
        /// </summary>
        /// <value>Daily revenue generated by the liquidity pool, accrued to the protocol.</value>
        [DataMember(Name="daily_protocol_side_revenue_usd", EmitDefaultValue=true)]
        public string DailyProtocolSideRevenueUsd { get; set; }

        /// <summary>
        /// All revenue generated by the liquidity pool.
        /// </summary>
        /// <value>All revenue generated by the liquidity pool.</value>
        [DataMember(Name="cumulative_total_revenue_usd", EmitDefaultValue=true)]
        public string CumulativeTotalRevenueUsd { get; set; }

        /// <summary>
        /// Daily revenue generated by the liquidity pool.
        /// </summary>
        /// <value>Daily revenue generated by the liquidity pool.</value>
        [DataMember(Name="daily_total_revenue_usd", EmitDefaultValue=true)]
        public string DailyTotalRevenueUsd { get; set; }

        /// <summary>
        /// All historical trade volume occurred in this pool, in USD.
        /// </summary>
        /// <value>All historical trade volume occurred in this pool, in USD.</value>
        [DataMember(Name="cumulative_volume_usd", EmitDefaultValue=true)]
        public string CumulativeVolumeUsd { get; set; }

        /// <summary>
        /// All trade volume occurred in a given day, in USD.
        /// </summary>
        /// <value>All trade volume occurred in a given day, in USD.</value>
        [DataMember(Name="daily_volume_usd", EmitDefaultValue=true)]
        public string DailyVolumeUsd { get; set; }

        /// <summary>
        /// All trade volume , in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
        /// </summary>
        /// <value>All trade volume , in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.</value>
        [DataMember(Name="cumulative_volume_by_token_amount", EmitDefaultValue=true)]
        public List<string> CumulativeVolumeByTokenAmount { get; set; }

        /// <summary>
        /// All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
        /// </summary>
        /// <value>All trade volume occurred in a given day for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.</value>
        [DataMember(Name="daily_volume_by_token_amount", EmitDefaultValue=true)]
        public List<string> DailyVolumeByTokenAmount { get; set; }

        /// <summary>
        /// All trade volume, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
        /// </summary>
        /// <value>All trade volume, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.</value>
        [DataMember(Name="cumulative_volume_by_token_usd", EmitDefaultValue=true)]
        public List<string> CumulativeVolumeByTokenUsd { get; set; }

        /// <summary>
        ///  All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
        /// </summary>
        /// <value> All trade volume occurred in a given day for a specific input token, in USD. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.</value>
        [DataMember(Name="daily_volume_by_token_usd", EmitDefaultValue=true)]
        public List<string> DailyVolumeByTokenUsd { get; set; }

        /// <summary>
        /// Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
        /// </summary>
        /// <value>Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.</value>
        [DataMember(Name="input_token_balances", EmitDefaultValue=true)]
        public List<string> InputTokenBalances { get; set; }

        /// <summary>
        /// Amount of input tokens in USD in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.
        /// </summary>
        /// <value>Amount of input tokens in USD in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.</value>
        [DataMember(Name="input_token_balances_usd", EmitDefaultValue=true)]
        public List<string> InputTokenBalancesUsd { get; set; }

        /// <summary>
        /// Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.
        /// </summary>
        /// <value>Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.</value>
        [DataMember(Name="input_token_weights", EmitDefaultValue=true)]
        public List<string> InputTokenWeights { get; set; }

        /// <summary>
        /// Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
        /// </summary>
        /// <value>Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.</value>
        [DataMember(Name="staked_output_token_amount", EmitDefaultValue=true)]
        public string StakedOutputTokenAmount { get; set; }

        /// <summary>
        /// Per-block reward token emission as of the current block normalized to a day, in token&#39;s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
        /// </summary>
        /// <value>Per-block reward token emission as of the current block normalized to a day, in token&#39;s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.</value>
        [DataMember(Name="reward_token_emissions_amount", EmitDefaultValue=true)]
        public List<string> RewardTokenEmissionsAmount { get; set; }

        /// <summary>
        /// Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
        /// </summary>
        /// <value>Per-block reward token emission as of the current block normalized to a day, in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.</value>
        [DataMember(Name="reward_token_emissions_usd", EmitDefaultValue=true)]
        public List<string> RewardTokenEmissionsUsd { get; set; }

        /// <summary>
        /// Total number of deposits (add liquidity).
        /// </summary>
        /// <value>Total number of deposits (add liquidity).</value>
        [DataMember(Name="cumulative_deposit_count", EmitDefaultValue=false)]
        public int CumulativeDepositCount { get; set; }

        /// <summary>
        /// Total number of deposits (add liquidity) in a day.
        /// </summary>
        /// <value>Total number of deposits (add liquidity) in a day.</value>
        [DataMember(Name="daily_deposit_count", EmitDefaultValue=false)]
        public int DailyDepositCount { get; set; }

        /// <summary>
        /// Total number of withdrawals (remove liquidity).
        /// </summary>
        /// <value>Total number of withdrawals (remove liquidity).</value>
        [DataMember(Name="cumulative_withdraw_count", EmitDefaultValue=false)]
        public int CumulativeWithdrawCount { get; set; }

        /// <summary>
        /// Total number of withdrawals (remove liquidity) in a day.
        /// </summary>
        /// <value>Total number of withdrawals (remove liquidity) in a day.</value>
        [DataMember(Name="daily_withdraw_count", EmitDefaultValue=false)]
        public int DailyWithdrawCount { get; set; }

        /// <summary>
        /// Total number of trades (swaps).
        /// </summary>
        /// <value>Total number of trades (swaps).</value>
        [DataMember(Name="cumulative_swap_count", EmitDefaultValue=false)]
        public int CumulativeSwapCount { get; set; }

        /// <summary>
        /// Total number of trades (swaps) in a day.
        /// </summary>
        /// <value>Total number of trades (swaps) in a day.</value>
        [DataMember(Name="daily_swap_count", EmitDefaultValue=false)]
        public int DailySwapCount { get; set; }

        /// <summary>
        /// Number of positions in this market.
        /// </summary>
        /// <value>Number of positions in this market.</value>
        [DataMember(Name="position_count", EmitDefaultValue=false)]
        public int PositionCount { get; set; }

        /// <summary>
        /// Number of open positions in this market.
        /// </summary>
        /// <value>Number of open positions in this market.</value>
        [DataMember(Name="open_position_count", EmitDefaultValue=false)]
        public int OpenPositionCount { get; set; }

        /// <summary>
        /// Number of closed positions in this market.
        /// </summary>
        /// <value>Number of closed positions in this market.</value>
        [DataMember(Name="closed_position_count", EmitDefaultValue=false)]
        public int ClosedPositionCount { get; set; }

        /// <summary>
        /// Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed).
        /// </summary>
        /// <value>Timestamp of when this snapshot was taken/last modified (May be taken after interval has passed).</value>
        [DataMember(Name="timestamp", EmitDefaultValue=true)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO {\n");
            sb.Append("  EntryTime: ").Append(EntryTime).Append("\n");
            sb.Append("  RecvTime: ").Append(RecvTime).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  Vid: ").Append(Vid).Append("\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  Pool: ").Append(Pool).Append("\n");
            sb.Append("  Tick: ").Append(Tick).Append("\n");
            sb.Append("  TotalValueLockedUsd: ").Append(TotalValueLockedUsd).Append("\n");
            sb.Append("  TotalLiquidity: ").Append(TotalLiquidity).Append("\n");
            sb.Append("  TotalLiquidityUsd: ").Append(TotalLiquidityUsd).Append("\n");
            sb.Append("  ActiveLiquidity: ").Append(ActiveLiquidity).Append("\n");
            sb.Append("  ActiveLiquidityUsd: ").Append(ActiveLiquidityUsd).Append("\n");
            sb.Append("  UncollectedProtocolSideTokenAmounts: ").Append(UncollectedProtocolSideTokenAmounts).Append("\n");
            sb.Append("  UncollectedProtocolSideValuesUsd: ").Append(UncollectedProtocolSideValuesUsd).Append("\n");
            sb.Append("  UncollectedSupplySideTokenAmounts: ").Append(UncollectedSupplySideTokenAmounts).Append("\n");
            sb.Append("  UncollectedSupplySideValuesUsd: ").Append(UncollectedSupplySideValuesUsd).Append("\n");
            sb.Append("  CumulativeSupplySideRevenueUsd: ").Append(CumulativeSupplySideRevenueUsd).Append("\n");
            sb.Append("  DailySupplySideRevenueUsd: ").Append(DailySupplySideRevenueUsd).Append("\n");
            sb.Append("  CumulativeProtocolSideRevenueUsd: ").Append(CumulativeProtocolSideRevenueUsd).Append("\n");
            sb.Append("  DailyProtocolSideRevenueUsd: ").Append(DailyProtocolSideRevenueUsd).Append("\n");
            sb.Append("  CumulativeTotalRevenueUsd: ").Append(CumulativeTotalRevenueUsd).Append("\n");
            sb.Append("  DailyTotalRevenueUsd: ").Append(DailyTotalRevenueUsd).Append("\n");
            sb.Append("  CumulativeVolumeUsd: ").Append(CumulativeVolumeUsd).Append("\n");
            sb.Append("  DailyVolumeUsd: ").Append(DailyVolumeUsd).Append("\n");
            sb.Append("  CumulativeVolumeByTokenAmount: ").Append(CumulativeVolumeByTokenAmount).Append("\n");
            sb.Append("  DailyVolumeByTokenAmount: ").Append(DailyVolumeByTokenAmount).Append("\n");
            sb.Append("  CumulativeVolumeByTokenUsd: ").Append(CumulativeVolumeByTokenUsd).Append("\n");
            sb.Append("  DailyVolumeByTokenUsd: ").Append(DailyVolumeByTokenUsd).Append("\n");
            sb.Append("  InputTokenBalances: ").Append(InputTokenBalances).Append("\n");
            sb.Append("  InputTokenBalancesUsd: ").Append(InputTokenBalancesUsd).Append("\n");
            sb.Append("  InputTokenWeights: ").Append(InputTokenWeights).Append("\n");
            sb.Append("  StakedOutputTokenAmount: ").Append(StakedOutputTokenAmount).Append("\n");
            sb.Append("  RewardTokenEmissionsAmount: ").Append(RewardTokenEmissionsAmount).Append("\n");
            sb.Append("  RewardTokenEmissionsUsd: ").Append(RewardTokenEmissionsUsd).Append("\n");
            sb.Append("  CumulativeDepositCount: ").Append(CumulativeDepositCount).Append("\n");
            sb.Append("  DailyDepositCount: ").Append(DailyDepositCount).Append("\n");
            sb.Append("  CumulativeWithdrawCount: ").Append(CumulativeWithdrawCount).Append("\n");
            sb.Append("  DailyWithdrawCount: ").Append(DailyWithdrawCount).Append("\n");
            sb.Append("  CumulativeSwapCount: ").Append(CumulativeSwapCount).Append("\n");
            sb.Append("  DailySwapCount: ").Append(DailySwapCount).Append("\n");
            sb.Append("  PositionCount: ").Append(PositionCount).Append("\n");
            sb.Append("  OpenPositionCount: ").Append(OpenPositionCount).Append("\n");
            sb.Append("  ClosedPositionCount: ").Append(ClosedPositionCount).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO);
        }

        /// <summary>
        /// Returns true if PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PANCAKESWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntryTime == input.EntryTime ||
                    (this.EntryTime != null &&
                    this.EntryTime.Equals(input.EntryTime))
                ) && 
                (
                    this.RecvTime == input.RecvTime ||
                    (this.RecvTime != null &&
                    this.RecvTime.Equals(input.RecvTime))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    (this.BlockNumber != null &&
                    this.BlockNumber.Equals(input.BlockNumber))
                ) && 
                (
                    this.Vid == input.Vid ||
                    (this.Vid != null &&
                    this.Vid.Equals(input.Vid))
                ) && 
                (
                    this.Block == input.Block ||
                    (this.Block != null &&
                    this.Block.Equals(input.Block))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Day == input.Day ||
                    (this.Day != null &&
                    this.Day.Equals(input.Day))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.Pool == input.Pool ||
                    (this.Pool != null &&
                    this.Pool.Equals(input.Pool))
                ) && 
                (
                    this.Tick == input.Tick ||
                    (this.Tick != null &&
                    this.Tick.Equals(input.Tick))
                ) && 
                (
                    this.TotalValueLockedUsd == input.TotalValueLockedUsd ||
                    (this.TotalValueLockedUsd != null &&
                    this.TotalValueLockedUsd.Equals(input.TotalValueLockedUsd))
                ) && 
                (
                    this.TotalLiquidity == input.TotalLiquidity ||
                    (this.TotalLiquidity != null &&
                    this.TotalLiquidity.Equals(input.TotalLiquidity))
                ) && 
                (
                    this.TotalLiquidityUsd == input.TotalLiquidityUsd ||
                    (this.TotalLiquidityUsd != null &&
                    this.TotalLiquidityUsd.Equals(input.TotalLiquidityUsd))
                ) && 
                (
                    this.ActiveLiquidity == input.ActiveLiquidity ||
                    (this.ActiveLiquidity != null &&
                    this.ActiveLiquidity.Equals(input.ActiveLiquidity))
                ) && 
                (
                    this.ActiveLiquidityUsd == input.ActiveLiquidityUsd ||
                    (this.ActiveLiquidityUsd != null &&
                    this.ActiveLiquidityUsd.Equals(input.ActiveLiquidityUsd))
                ) && 
                (
                    this.UncollectedProtocolSideTokenAmounts == input.UncollectedProtocolSideTokenAmounts ||
                    this.UncollectedProtocolSideTokenAmounts != null &&
                    input.UncollectedProtocolSideTokenAmounts != null &&
                    this.UncollectedProtocolSideTokenAmounts.SequenceEqual(input.UncollectedProtocolSideTokenAmounts)
                ) && 
                (
                    this.UncollectedProtocolSideValuesUsd == input.UncollectedProtocolSideValuesUsd ||
                    this.UncollectedProtocolSideValuesUsd != null &&
                    input.UncollectedProtocolSideValuesUsd != null &&
                    this.UncollectedProtocolSideValuesUsd.SequenceEqual(input.UncollectedProtocolSideValuesUsd)
                ) && 
                (
                    this.UncollectedSupplySideTokenAmounts == input.UncollectedSupplySideTokenAmounts ||
                    this.UncollectedSupplySideTokenAmounts != null &&
                    input.UncollectedSupplySideTokenAmounts != null &&
                    this.UncollectedSupplySideTokenAmounts.SequenceEqual(input.UncollectedSupplySideTokenAmounts)
                ) && 
                (
                    this.UncollectedSupplySideValuesUsd == input.UncollectedSupplySideValuesUsd ||
                    this.UncollectedSupplySideValuesUsd != null &&
                    input.UncollectedSupplySideValuesUsd != null &&
                    this.UncollectedSupplySideValuesUsd.SequenceEqual(input.UncollectedSupplySideValuesUsd)
                ) && 
                (
                    this.CumulativeSupplySideRevenueUsd == input.CumulativeSupplySideRevenueUsd ||
                    (this.CumulativeSupplySideRevenueUsd != null &&
                    this.CumulativeSupplySideRevenueUsd.Equals(input.CumulativeSupplySideRevenueUsd))
                ) && 
                (
                    this.DailySupplySideRevenueUsd == input.DailySupplySideRevenueUsd ||
                    (this.DailySupplySideRevenueUsd != null &&
                    this.DailySupplySideRevenueUsd.Equals(input.DailySupplySideRevenueUsd))
                ) && 
                (
                    this.CumulativeProtocolSideRevenueUsd == input.CumulativeProtocolSideRevenueUsd ||
                    (this.CumulativeProtocolSideRevenueUsd != null &&
                    this.CumulativeProtocolSideRevenueUsd.Equals(input.CumulativeProtocolSideRevenueUsd))
                ) && 
                (
                    this.DailyProtocolSideRevenueUsd == input.DailyProtocolSideRevenueUsd ||
                    (this.DailyProtocolSideRevenueUsd != null &&
                    this.DailyProtocolSideRevenueUsd.Equals(input.DailyProtocolSideRevenueUsd))
                ) && 
                (
                    this.CumulativeTotalRevenueUsd == input.CumulativeTotalRevenueUsd ||
                    (this.CumulativeTotalRevenueUsd != null &&
                    this.CumulativeTotalRevenueUsd.Equals(input.CumulativeTotalRevenueUsd))
                ) && 
                (
                    this.DailyTotalRevenueUsd == input.DailyTotalRevenueUsd ||
                    (this.DailyTotalRevenueUsd != null &&
                    this.DailyTotalRevenueUsd.Equals(input.DailyTotalRevenueUsd))
                ) && 
                (
                    this.CumulativeVolumeUsd == input.CumulativeVolumeUsd ||
                    (this.CumulativeVolumeUsd != null &&
                    this.CumulativeVolumeUsd.Equals(input.CumulativeVolumeUsd))
                ) && 
                (
                    this.DailyVolumeUsd == input.DailyVolumeUsd ||
                    (this.DailyVolumeUsd != null &&
                    this.DailyVolumeUsd.Equals(input.DailyVolumeUsd))
                ) && 
                (
                    this.CumulativeVolumeByTokenAmount == input.CumulativeVolumeByTokenAmount ||
                    this.CumulativeVolumeByTokenAmount != null &&
                    input.CumulativeVolumeByTokenAmount != null &&
                    this.CumulativeVolumeByTokenAmount.SequenceEqual(input.CumulativeVolumeByTokenAmount)
                ) && 
                (
                    this.DailyVolumeByTokenAmount == input.DailyVolumeByTokenAmount ||
                    this.DailyVolumeByTokenAmount != null &&
                    input.DailyVolumeByTokenAmount != null &&
                    this.DailyVolumeByTokenAmount.SequenceEqual(input.DailyVolumeByTokenAmount)
                ) && 
                (
                    this.CumulativeVolumeByTokenUsd == input.CumulativeVolumeByTokenUsd ||
                    this.CumulativeVolumeByTokenUsd != null &&
                    input.CumulativeVolumeByTokenUsd != null &&
                    this.CumulativeVolumeByTokenUsd.SequenceEqual(input.CumulativeVolumeByTokenUsd)
                ) && 
                (
                    this.DailyVolumeByTokenUsd == input.DailyVolumeByTokenUsd ||
                    this.DailyVolumeByTokenUsd != null &&
                    input.DailyVolumeByTokenUsd != null &&
                    this.DailyVolumeByTokenUsd.SequenceEqual(input.DailyVolumeByTokenUsd)
                ) && 
                (
                    this.InputTokenBalances == input.InputTokenBalances ||
                    this.InputTokenBalances != null &&
                    input.InputTokenBalances != null &&
                    this.InputTokenBalances.SequenceEqual(input.InputTokenBalances)
                ) && 
                (
                    this.InputTokenBalancesUsd == input.InputTokenBalancesUsd ||
                    this.InputTokenBalancesUsd != null &&
                    input.InputTokenBalancesUsd != null &&
                    this.InputTokenBalancesUsd.SequenceEqual(input.InputTokenBalancesUsd)
                ) && 
                (
                    this.InputTokenWeights == input.InputTokenWeights ||
                    this.InputTokenWeights != null &&
                    input.InputTokenWeights != null &&
                    this.InputTokenWeights.SequenceEqual(input.InputTokenWeights)
                ) && 
                (
                    this.StakedOutputTokenAmount == input.StakedOutputTokenAmount ||
                    (this.StakedOutputTokenAmount != null &&
                    this.StakedOutputTokenAmount.Equals(input.StakedOutputTokenAmount))
                ) && 
                (
                    this.RewardTokenEmissionsAmount == input.RewardTokenEmissionsAmount ||
                    this.RewardTokenEmissionsAmount != null &&
                    input.RewardTokenEmissionsAmount != null &&
                    this.RewardTokenEmissionsAmount.SequenceEqual(input.RewardTokenEmissionsAmount)
                ) && 
                (
                    this.RewardTokenEmissionsUsd == input.RewardTokenEmissionsUsd ||
                    this.RewardTokenEmissionsUsd != null &&
                    input.RewardTokenEmissionsUsd != null &&
                    this.RewardTokenEmissionsUsd.SequenceEqual(input.RewardTokenEmissionsUsd)
                ) && 
                (
                    this.CumulativeDepositCount == input.CumulativeDepositCount ||
                    (this.CumulativeDepositCount != null &&
                    this.CumulativeDepositCount.Equals(input.CumulativeDepositCount))
                ) && 
                (
                    this.DailyDepositCount == input.DailyDepositCount ||
                    (this.DailyDepositCount != null &&
                    this.DailyDepositCount.Equals(input.DailyDepositCount))
                ) && 
                (
                    this.CumulativeWithdrawCount == input.CumulativeWithdrawCount ||
                    (this.CumulativeWithdrawCount != null &&
                    this.CumulativeWithdrawCount.Equals(input.CumulativeWithdrawCount))
                ) && 
                (
                    this.DailyWithdrawCount == input.DailyWithdrawCount ||
                    (this.DailyWithdrawCount != null &&
                    this.DailyWithdrawCount.Equals(input.DailyWithdrawCount))
                ) && 
                (
                    this.CumulativeSwapCount == input.CumulativeSwapCount ||
                    (this.CumulativeSwapCount != null &&
                    this.CumulativeSwapCount.Equals(input.CumulativeSwapCount))
                ) && 
                (
                    this.DailySwapCount == input.DailySwapCount ||
                    (this.DailySwapCount != null &&
                    this.DailySwapCount.Equals(input.DailySwapCount))
                ) && 
                (
                    this.PositionCount == input.PositionCount ||
                    (this.PositionCount != null &&
                    this.PositionCount.Equals(input.PositionCount))
                ) && 
                (
                    this.OpenPositionCount == input.OpenPositionCount ||
                    (this.OpenPositionCount != null &&
                    this.OpenPositionCount.Equals(input.OpenPositionCount))
                ) && 
                (
                    this.ClosedPositionCount == input.ClosedPositionCount ||
                    (this.ClosedPositionCount != null &&
                    this.ClosedPositionCount.Equals(input.ClosedPositionCount))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntryTime != null)
                    hashCode = hashCode * 59 + this.EntryTime.GetHashCode();
                if (this.RecvTime != null)
                    hashCode = hashCode * 59 + this.RecvTime.GetHashCode();
                if (this.BlockNumber != null)
                    hashCode = hashCode * 59 + this.BlockNumber.GetHashCode();
                if (this.Vid != null)
                    hashCode = hashCode * 59 + this.Vid.GetHashCode();
                if (this.Block != null)
                    hashCode = hashCode * 59 + this.Block.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Day != null)
                    hashCode = hashCode * 59 + this.Day.GetHashCode();
                if (this.Protocol != null)
                    hashCode = hashCode * 59 + this.Protocol.GetHashCode();
                if (this.Pool != null)
                    hashCode = hashCode * 59 + this.Pool.GetHashCode();
                if (this.Tick != null)
                    hashCode = hashCode * 59 + this.Tick.GetHashCode();
                if (this.TotalValueLockedUsd != null)
                    hashCode = hashCode * 59 + this.TotalValueLockedUsd.GetHashCode();
                if (this.TotalLiquidity != null)
                    hashCode = hashCode * 59 + this.TotalLiquidity.GetHashCode();
                if (this.TotalLiquidityUsd != null)
                    hashCode = hashCode * 59 + this.TotalLiquidityUsd.GetHashCode();
                if (this.ActiveLiquidity != null)
                    hashCode = hashCode * 59 + this.ActiveLiquidity.GetHashCode();
                if (this.ActiveLiquidityUsd != null)
                    hashCode = hashCode * 59 + this.ActiveLiquidityUsd.GetHashCode();
                if (this.UncollectedProtocolSideTokenAmounts != null)
                    hashCode = hashCode * 59 + this.UncollectedProtocolSideTokenAmounts.GetHashCode();
                if (this.UncollectedProtocolSideValuesUsd != null)
                    hashCode = hashCode * 59 + this.UncollectedProtocolSideValuesUsd.GetHashCode();
                if (this.UncollectedSupplySideTokenAmounts != null)
                    hashCode = hashCode * 59 + this.UncollectedSupplySideTokenAmounts.GetHashCode();
                if (this.UncollectedSupplySideValuesUsd != null)
                    hashCode = hashCode * 59 + this.UncollectedSupplySideValuesUsd.GetHashCode();
                if (this.CumulativeSupplySideRevenueUsd != null)
                    hashCode = hashCode * 59 + this.CumulativeSupplySideRevenueUsd.GetHashCode();
                if (this.DailySupplySideRevenueUsd != null)
                    hashCode = hashCode * 59 + this.DailySupplySideRevenueUsd.GetHashCode();
                if (this.CumulativeProtocolSideRevenueUsd != null)
                    hashCode = hashCode * 59 + this.CumulativeProtocolSideRevenueUsd.GetHashCode();
                if (this.DailyProtocolSideRevenueUsd != null)
                    hashCode = hashCode * 59 + this.DailyProtocolSideRevenueUsd.GetHashCode();
                if (this.CumulativeTotalRevenueUsd != null)
                    hashCode = hashCode * 59 + this.CumulativeTotalRevenueUsd.GetHashCode();
                if (this.DailyTotalRevenueUsd != null)
                    hashCode = hashCode * 59 + this.DailyTotalRevenueUsd.GetHashCode();
                if (this.CumulativeVolumeUsd != null)
                    hashCode = hashCode * 59 + this.CumulativeVolumeUsd.GetHashCode();
                if (this.DailyVolumeUsd != null)
                    hashCode = hashCode * 59 + this.DailyVolumeUsd.GetHashCode();
                if (this.CumulativeVolumeByTokenAmount != null)
                    hashCode = hashCode * 59 + this.CumulativeVolumeByTokenAmount.GetHashCode();
                if (this.DailyVolumeByTokenAmount != null)
                    hashCode = hashCode * 59 + this.DailyVolumeByTokenAmount.GetHashCode();
                if (this.CumulativeVolumeByTokenUsd != null)
                    hashCode = hashCode * 59 + this.CumulativeVolumeByTokenUsd.GetHashCode();
                if (this.DailyVolumeByTokenUsd != null)
                    hashCode = hashCode * 59 + this.DailyVolumeByTokenUsd.GetHashCode();
                if (this.InputTokenBalances != null)
                    hashCode = hashCode * 59 + this.InputTokenBalances.GetHashCode();
                if (this.InputTokenBalancesUsd != null)
                    hashCode = hashCode * 59 + this.InputTokenBalancesUsd.GetHashCode();
                if (this.InputTokenWeights != null)
                    hashCode = hashCode * 59 + this.InputTokenWeights.GetHashCode();
                if (this.StakedOutputTokenAmount != null)
                    hashCode = hashCode * 59 + this.StakedOutputTokenAmount.GetHashCode();
                if (this.RewardTokenEmissionsAmount != null)
                    hashCode = hashCode * 59 + this.RewardTokenEmissionsAmount.GetHashCode();
                if (this.RewardTokenEmissionsUsd != null)
                    hashCode = hashCode * 59 + this.RewardTokenEmissionsUsd.GetHashCode();
                if (this.CumulativeDepositCount != null)
                    hashCode = hashCode * 59 + this.CumulativeDepositCount.GetHashCode();
                if (this.DailyDepositCount != null)
                    hashCode = hashCode * 59 + this.DailyDepositCount.GetHashCode();
                if (this.CumulativeWithdrawCount != null)
                    hashCode = hashCode * 59 + this.CumulativeWithdrawCount.GetHashCode();
                if (this.DailyWithdrawCount != null)
                    hashCode = hashCode * 59 + this.DailyWithdrawCount.GetHashCode();
                if (this.CumulativeSwapCount != null)
                    hashCode = hashCode * 59 + this.CumulativeSwapCount.GetHashCode();
                if (this.DailySwapCount != null)
                    hashCode = hashCode * 59 + this.DailySwapCount.GetHashCode();
                if (this.PositionCount != null)
                    hashCode = hashCode * 59 + this.PositionCount.GetHashCode();
                if (this.OpenPositionCount != null)
                    hashCode = hashCode * 59 + this.OpenPositionCount.GetHashCode();
                if (this.ClosedPositionCount != null)
                    hashCode = hashCode * 59 + this.ClosedPositionCount.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
