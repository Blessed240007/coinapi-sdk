/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoinAPI.EMS.REST.V1.Client.OpenAPIDateConverter;

namespace CoinAPI.EMS.REST.V1.Model
{
    /// <summary>
    /// UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO
    /// </summary>
    [DataContract]
    public partial class UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO :  IEquatable<UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO" /> class.
        /// </summary>
        /// <param name="entryTime">entryTime.</param>
        /// <param name="recvTime">recvTime.</param>
        /// <param name="blockNumber">Number of block in which entity was recorded..</param>
        /// <param name="blockRange">blockRange.</param>
        /// <param name="id">(smart contract address of the pool)-(# of hours since Unix epoch time).</param>
        /// <param name="protocol">The protocol this snapshot belongs to.</param>
        /// <param name="pool">The pool this snapshot belongs to.</param>
        /// <param name="timestamp">Timestamp of this snapshot.</param>
        /// <param name="totalValueLockedUsd">Current TVL (Total Value Locked) of this pool.</param>
        /// <param name="cumulativeSupplySideRevenueUsd">All revenue generated by the liquidity pool, accrued to the supply side..</param>
        /// <param name="hourlySupplySideRevenueUsd">Hourly revenue generated by the liquidity pool, accrued to the supply side..</param>
        /// <param name="cumulativeProtocolSideRevenueUsd">All revenue generated by the liquidity pool, accrued to the protocol..</param>
        /// <param name="hourlyProtocolSideRevenueUsd">Hourly revenue generated by the liquidity pool, accrued to the protocol..</param>
        /// <param name="cumulativeTotalRevenueUsd">All revenue generated by the liquidity pool..</param>
        /// <param name="hourlyTotalRevenueUsd">Hourly revenue generated by the liquidity pool..</param>
        /// <param name="hourlyVolumeUsd">All trade volume occurred in a given hour, in USD.</param>
        /// <param name="hourlyVolumeByTokenAmount">All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#39;inputTokens&#39; field..</param>
        /// <param name="hourlyVolumeByTokenUsd">All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#39;inputTokens&#39; field..</param>
        /// <param name="cumulativeVolumeUsd">All historical trade volume occurred in this pool, in USD.</param>
        /// <param name="inputTokenBalances">Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field.</param>
        /// <param name="inputTokenWeights">Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool.</param>
        /// <param name="outputTokenSupply">Total supply of output token. Note that certain DEXes don&#39;t have an output token (e.g. Bancor).</param>
        /// <param name="outputTokenPriceUsd">Price per share of output token in USD.</param>
        /// <param name="stakedOutputTokenAmount">Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY..</param>
        /// <param name="rewardTokenEmissionsAmount">Per-block reward token emission as of the current block normalized to a day (not hour), in token&#39;s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount..</param>
        /// <param name="rewardTokenEmissionsUsd">Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount..</param>
        public UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO(DateTime entryTime = default(DateTime), DateTime recvTime = default(DateTime), long blockNumber = default(long), string blockRange = default(string), string id = default(string), string protocol = default(string), string pool = default(string), string timestamp = default(string), string totalValueLockedUsd = default(string), string cumulativeSupplySideRevenueUsd = default(string), string hourlySupplySideRevenueUsd = default(string), string cumulativeProtocolSideRevenueUsd = default(string), string hourlyProtocolSideRevenueUsd = default(string), string cumulativeTotalRevenueUsd = default(string), string hourlyTotalRevenueUsd = default(string), string hourlyVolumeUsd = default(string), List<string> hourlyVolumeByTokenAmount = default(List<string>), List<string> hourlyVolumeByTokenUsd = default(List<string>), string cumulativeVolumeUsd = default(string), List<string> inputTokenBalances = default(List<string>), List<string> inputTokenWeights = default(List<string>), string outputTokenSupply = default(string), string outputTokenPriceUsd = default(string), string stakedOutputTokenAmount = default(string), List<string> rewardTokenEmissionsAmount = default(List<string>), List<string> rewardTokenEmissionsUsd = default(List<string>))
        {
            this.BlockRange = blockRange;
            this.Id = id;
            this.Protocol = protocol;
            this.Pool = pool;
            this.Timestamp = timestamp;
            this.TotalValueLockedUsd = totalValueLockedUsd;
            this.CumulativeSupplySideRevenueUsd = cumulativeSupplySideRevenueUsd;
            this.HourlySupplySideRevenueUsd = hourlySupplySideRevenueUsd;
            this.CumulativeProtocolSideRevenueUsd = cumulativeProtocolSideRevenueUsd;
            this.HourlyProtocolSideRevenueUsd = hourlyProtocolSideRevenueUsd;
            this.CumulativeTotalRevenueUsd = cumulativeTotalRevenueUsd;
            this.HourlyTotalRevenueUsd = hourlyTotalRevenueUsd;
            this.HourlyVolumeUsd = hourlyVolumeUsd;
            this.HourlyVolumeByTokenAmount = hourlyVolumeByTokenAmount;
            this.HourlyVolumeByTokenUsd = hourlyVolumeByTokenUsd;
            this.CumulativeVolumeUsd = cumulativeVolumeUsd;
            this.InputTokenBalances = inputTokenBalances;
            this.InputTokenWeights = inputTokenWeights;
            this.OutputTokenSupply = outputTokenSupply;
            this.OutputTokenPriceUsd = outputTokenPriceUsd;
            this.StakedOutputTokenAmount = stakedOutputTokenAmount;
            this.RewardTokenEmissionsAmount = rewardTokenEmissionsAmount;
            this.RewardTokenEmissionsUsd = rewardTokenEmissionsUsd;
            this.EntryTime = entryTime;
            this.RecvTime = recvTime;
            this.BlockNumber = blockNumber;
            this.BlockRange = blockRange;
            this.Id = id;
            this.Protocol = protocol;
            this.Pool = pool;
            this.Timestamp = timestamp;
            this.TotalValueLockedUsd = totalValueLockedUsd;
            this.CumulativeSupplySideRevenueUsd = cumulativeSupplySideRevenueUsd;
            this.HourlySupplySideRevenueUsd = hourlySupplySideRevenueUsd;
            this.CumulativeProtocolSideRevenueUsd = cumulativeProtocolSideRevenueUsd;
            this.HourlyProtocolSideRevenueUsd = hourlyProtocolSideRevenueUsd;
            this.CumulativeTotalRevenueUsd = cumulativeTotalRevenueUsd;
            this.HourlyTotalRevenueUsd = hourlyTotalRevenueUsd;
            this.HourlyVolumeUsd = hourlyVolumeUsd;
            this.HourlyVolumeByTokenAmount = hourlyVolumeByTokenAmount;
            this.HourlyVolumeByTokenUsd = hourlyVolumeByTokenUsd;
            this.CumulativeVolumeUsd = cumulativeVolumeUsd;
            this.InputTokenBalances = inputTokenBalances;
            this.InputTokenWeights = inputTokenWeights;
            this.OutputTokenSupply = outputTokenSupply;
            this.OutputTokenPriceUsd = outputTokenPriceUsd;
            this.StakedOutputTokenAmount = stakedOutputTokenAmount;
            this.RewardTokenEmissionsAmount = rewardTokenEmissionsAmount;
            this.RewardTokenEmissionsUsd = rewardTokenEmissionsUsd;
        }

        /// <summary>
        /// Gets or Sets EntryTime
        /// </summary>
        [DataMember(Name="entry_time", EmitDefaultValue=false)]
        public DateTime EntryTime { get; set; }

        /// <summary>
        /// Gets or Sets RecvTime
        /// </summary>
        [DataMember(Name="recv_time", EmitDefaultValue=false)]
        public DateTime RecvTime { get; set; }

        /// <summary>
        /// Number of block in which entity was recorded.
        /// </summary>
        /// <value>Number of block in which entity was recorded.</value>
        [DataMember(Name="block_number", EmitDefaultValue=false)]
        public long BlockNumber { get; set; }

        /// <summary>
        /// Gets or Sets BlockRange
        /// </summary>
        [DataMember(Name="block_range", EmitDefaultValue=true)]
        public string BlockRange { get; set; }

        /// <summary>
        /// (smart contract address of the pool)-(# of hours since Unix epoch time)
        /// </summary>
        /// <value>(smart contract address of the pool)-(# of hours since Unix epoch time)</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// The protocol this snapshot belongs to
        /// </summary>
        /// <value>The protocol this snapshot belongs to</value>
        [DataMember(Name="protocol", EmitDefaultValue=true)]
        public string Protocol { get; set; }

        /// <summary>
        /// The pool this snapshot belongs to
        /// </summary>
        /// <value>The pool this snapshot belongs to</value>
        [DataMember(Name="pool", EmitDefaultValue=true)]
        public string Pool { get; set; }

        /// <summary>
        /// Timestamp of this snapshot
        /// </summary>
        /// <value>Timestamp of this snapshot</value>
        [DataMember(Name="timestamp", EmitDefaultValue=true)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Current TVL (Total Value Locked) of this pool
        /// </summary>
        /// <value>Current TVL (Total Value Locked) of this pool</value>
        [DataMember(Name="total_value_locked_usd", EmitDefaultValue=true)]
        public string TotalValueLockedUsd { get; set; }

        /// <summary>
        /// All revenue generated by the liquidity pool, accrued to the supply side.
        /// </summary>
        /// <value>All revenue generated by the liquidity pool, accrued to the supply side.</value>
        [DataMember(Name="cumulative_supply_side_revenue_usd", EmitDefaultValue=true)]
        public string CumulativeSupplySideRevenueUsd { get; set; }

        /// <summary>
        /// Hourly revenue generated by the liquidity pool, accrued to the supply side.
        /// </summary>
        /// <value>Hourly revenue generated by the liquidity pool, accrued to the supply side.</value>
        [DataMember(Name="hourly_supply_side_revenue_usd", EmitDefaultValue=true)]
        public string HourlySupplySideRevenueUsd { get; set; }

        /// <summary>
        /// All revenue generated by the liquidity pool, accrued to the protocol.
        /// </summary>
        /// <value>All revenue generated by the liquidity pool, accrued to the protocol.</value>
        [DataMember(Name="cumulative_protocol_side_revenue_usd", EmitDefaultValue=true)]
        public string CumulativeProtocolSideRevenueUsd { get; set; }

        /// <summary>
        /// Hourly revenue generated by the liquidity pool, accrued to the protocol.
        /// </summary>
        /// <value>Hourly revenue generated by the liquidity pool, accrued to the protocol.</value>
        [DataMember(Name="hourly_protocol_side_revenue_usd", EmitDefaultValue=true)]
        public string HourlyProtocolSideRevenueUsd { get; set; }

        /// <summary>
        /// All revenue generated by the liquidity pool.
        /// </summary>
        /// <value>All revenue generated by the liquidity pool.</value>
        [DataMember(Name="cumulative_total_revenue_usd", EmitDefaultValue=true)]
        public string CumulativeTotalRevenueUsd { get; set; }

        /// <summary>
        /// Hourly revenue generated by the liquidity pool.
        /// </summary>
        /// <value>Hourly revenue generated by the liquidity pool.</value>
        [DataMember(Name="hourly_total_revenue_usd", EmitDefaultValue=true)]
        public string HourlyTotalRevenueUsd { get; set; }

        /// <summary>
        /// All trade volume occurred in a given hour, in USD
        /// </summary>
        /// <value>All trade volume occurred in a given hour, in USD</value>
        [DataMember(Name="hourly_volume_usd", EmitDefaultValue=true)]
        public string HourlyVolumeUsd { get; set; }

        /// <summary>
        /// All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#39;inputTokens&#39; field.
        /// </summary>
        /// <value>All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#39;inputTokens&#39; field.</value>
        [DataMember(Name="hourly_volume_by_token_amount", EmitDefaultValue=true)]
        public List<string> HourlyVolumeByTokenAmount { get; set; }

        /// <summary>
        /// All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#39;inputTokens&#39; field.
        /// </summary>
        /// <value>All trade volume occurred in a given hour for a specific input token, in native amount. The ordering should be the same as the pool&#39;s &#39;inputTokens&#39; field.</value>
        [DataMember(Name="hourly_volume_by_token_usd", EmitDefaultValue=true)]
        public List<string> HourlyVolumeByTokenUsd { get; set; }

        /// <summary>
        /// All historical trade volume occurred in this pool, in USD
        /// </summary>
        /// <value>All historical trade volume occurred in this pool, in USD</value>
        [DataMember(Name="cumulative_volume_usd", EmitDefaultValue=true)]
        public string CumulativeVolumeUsd { get; set; }

        /// <summary>
        /// Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field
        /// </summary>
        /// <value>Amount of input tokens in the pool. The ordering should be the same as the pool&#39;s &#x60;inputTokens&#x60; field</value>
        [DataMember(Name="input_token_balances", EmitDefaultValue=true)]
        public List<string> InputTokenBalances { get; set; }

        /// <summary>
        /// Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool
        /// </summary>
        /// <value>Weights of input tokens in the liquidity pool in percentage values. For example, 50/50 for Uniswap pools, 48.2/51.8 for a Curve pool, 10/10/80 for a Balancer pool</value>
        [DataMember(Name="input_token_weights", EmitDefaultValue=true)]
        public List<string> InputTokenWeights { get; set; }

        /// <summary>
        /// Total supply of output token. Note that certain DEXes don&#39;t have an output token (e.g. Bancor)
        /// </summary>
        /// <value>Total supply of output token. Note that certain DEXes don&#39;t have an output token (e.g. Bancor)</value>
        [DataMember(Name="output_token_supply", EmitDefaultValue=true)]
        public string OutputTokenSupply { get; set; }

        /// <summary>
        /// Price per share of output token in USD
        /// </summary>
        /// <value>Price per share of output token in USD</value>
        [DataMember(Name="output_token_price_usd", EmitDefaultValue=true)]
        public string OutputTokenPriceUsd { get; set; }

        /// <summary>
        /// Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.
        /// </summary>
        /// <value>Total supply of output tokens that are staked (usually in the MasterChef contract). Used to calculate reward APY.</value>
        [DataMember(Name="staked_output_token_amount", EmitDefaultValue=true)]
        public string StakedOutputTokenAmount { get; set; }

        /// <summary>
        /// Per-block reward token emission as of the current block normalized to a day (not hour), in token&#39;s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.
        /// </summary>
        /// <value>Per-block reward token emission as of the current block normalized to a day (not hour), in token&#39;s native amount. This should be ideally calculated as the theoretical rate instead of the realized amount.</value>
        [DataMember(Name="reward_token_emissions_amount", EmitDefaultValue=true)]
        public List<string> RewardTokenEmissionsAmount { get; set; }

        /// <summary>
        /// Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.
        /// </summary>
        /// <value>Per-block reward token emission as of the current block normalized to a day (not hour), in USD value. This should be ideally calculated as the theoretical rate instead of the realized amount.</value>
        [DataMember(Name="reward_token_emissions_usd", EmitDefaultValue=true)]
        public List<string> RewardTokenEmissionsUsd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO {\n");
            sb.Append("  EntryTime: ").Append(EntryTime).Append("\n");
            sb.Append("  RecvTime: ").Append(RecvTime).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  BlockRange: ").Append(BlockRange).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  Pool: ").Append(Pool).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  TotalValueLockedUsd: ").Append(TotalValueLockedUsd).Append("\n");
            sb.Append("  CumulativeSupplySideRevenueUsd: ").Append(CumulativeSupplySideRevenueUsd).Append("\n");
            sb.Append("  HourlySupplySideRevenueUsd: ").Append(HourlySupplySideRevenueUsd).Append("\n");
            sb.Append("  CumulativeProtocolSideRevenueUsd: ").Append(CumulativeProtocolSideRevenueUsd).Append("\n");
            sb.Append("  HourlyProtocolSideRevenueUsd: ").Append(HourlyProtocolSideRevenueUsd).Append("\n");
            sb.Append("  CumulativeTotalRevenueUsd: ").Append(CumulativeTotalRevenueUsd).Append("\n");
            sb.Append("  HourlyTotalRevenueUsd: ").Append(HourlyTotalRevenueUsd).Append("\n");
            sb.Append("  HourlyVolumeUsd: ").Append(HourlyVolumeUsd).Append("\n");
            sb.Append("  HourlyVolumeByTokenAmount: ").Append(HourlyVolumeByTokenAmount).Append("\n");
            sb.Append("  HourlyVolumeByTokenUsd: ").Append(HourlyVolumeByTokenUsd).Append("\n");
            sb.Append("  CumulativeVolumeUsd: ").Append(CumulativeVolumeUsd).Append("\n");
            sb.Append("  InputTokenBalances: ").Append(InputTokenBalances).Append("\n");
            sb.Append("  InputTokenWeights: ").Append(InputTokenWeights).Append("\n");
            sb.Append("  OutputTokenSupply: ").Append(OutputTokenSupply).Append("\n");
            sb.Append("  OutputTokenPriceUsd: ").Append(OutputTokenPriceUsd).Append("\n");
            sb.Append("  StakedOutputTokenAmount: ").Append(StakedOutputTokenAmount).Append("\n");
            sb.Append("  RewardTokenEmissionsAmount: ").Append(RewardTokenEmissionsAmount).Append("\n");
            sb.Append("  RewardTokenEmissionsUsd: ").Append(RewardTokenEmissionsUsd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO);
        }

        /// <summary>
        /// Returns true if UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UNISWAPV2ETHEREUMLiquidityPoolHourlySnapshotDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntryTime == input.EntryTime ||
                    (this.EntryTime != null &&
                    this.EntryTime.Equals(input.EntryTime))
                ) && 
                (
                    this.RecvTime == input.RecvTime ||
                    (this.RecvTime != null &&
                    this.RecvTime.Equals(input.RecvTime))
                ) && 
                (
                    this.BlockNumber == input.BlockNumber ||
                    (this.BlockNumber != null &&
                    this.BlockNumber.Equals(input.BlockNumber))
                ) && 
                (
                    this.BlockRange == input.BlockRange ||
                    (this.BlockRange != null &&
                    this.BlockRange.Equals(input.BlockRange))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Protocol == input.Protocol ||
                    (this.Protocol != null &&
                    this.Protocol.Equals(input.Protocol))
                ) && 
                (
                    this.Pool == input.Pool ||
                    (this.Pool != null &&
                    this.Pool.Equals(input.Pool))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.TotalValueLockedUsd == input.TotalValueLockedUsd ||
                    (this.TotalValueLockedUsd != null &&
                    this.TotalValueLockedUsd.Equals(input.TotalValueLockedUsd))
                ) && 
                (
                    this.CumulativeSupplySideRevenueUsd == input.CumulativeSupplySideRevenueUsd ||
                    (this.CumulativeSupplySideRevenueUsd != null &&
                    this.CumulativeSupplySideRevenueUsd.Equals(input.CumulativeSupplySideRevenueUsd))
                ) && 
                (
                    this.HourlySupplySideRevenueUsd == input.HourlySupplySideRevenueUsd ||
                    (this.HourlySupplySideRevenueUsd != null &&
                    this.HourlySupplySideRevenueUsd.Equals(input.HourlySupplySideRevenueUsd))
                ) && 
                (
                    this.CumulativeProtocolSideRevenueUsd == input.CumulativeProtocolSideRevenueUsd ||
                    (this.CumulativeProtocolSideRevenueUsd != null &&
                    this.CumulativeProtocolSideRevenueUsd.Equals(input.CumulativeProtocolSideRevenueUsd))
                ) && 
                (
                    this.HourlyProtocolSideRevenueUsd == input.HourlyProtocolSideRevenueUsd ||
                    (this.HourlyProtocolSideRevenueUsd != null &&
                    this.HourlyProtocolSideRevenueUsd.Equals(input.HourlyProtocolSideRevenueUsd))
                ) && 
                (
                    this.CumulativeTotalRevenueUsd == input.CumulativeTotalRevenueUsd ||
                    (this.CumulativeTotalRevenueUsd != null &&
                    this.CumulativeTotalRevenueUsd.Equals(input.CumulativeTotalRevenueUsd))
                ) && 
                (
                    this.HourlyTotalRevenueUsd == input.HourlyTotalRevenueUsd ||
                    (this.HourlyTotalRevenueUsd != null &&
                    this.HourlyTotalRevenueUsd.Equals(input.HourlyTotalRevenueUsd))
                ) && 
                (
                    this.HourlyVolumeUsd == input.HourlyVolumeUsd ||
                    (this.HourlyVolumeUsd != null &&
                    this.HourlyVolumeUsd.Equals(input.HourlyVolumeUsd))
                ) && 
                (
                    this.HourlyVolumeByTokenAmount == input.HourlyVolumeByTokenAmount ||
                    this.HourlyVolumeByTokenAmount != null &&
                    input.HourlyVolumeByTokenAmount != null &&
                    this.HourlyVolumeByTokenAmount.SequenceEqual(input.HourlyVolumeByTokenAmount)
                ) && 
                (
                    this.HourlyVolumeByTokenUsd == input.HourlyVolumeByTokenUsd ||
                    this.HourlyVolumeByTokenUsd != null &&
                    input.HourlyVolumeByTokenUsd != null &&
                    this.HourlyVolumeByTokenUsd.SequenceEqual(input.HourlyVolumeByTokenUsd)
                ) && 
                (
                    this.CumulativeVolumeUsd == input.CumulativeVolumeUsd ||
                    (this.CumulativeVolumeUsd != null &&
                    this.CumulativeVolumeUsd.Equals(input.CumulativeVolumeUsd))
                ) && 
                (
                    this.InputTokenBalances == input.InputTokenBalances ||
                    this.InputTokenBalances != null &&
                    input.InputTokenBalances != null &&
                    this.InputTokenBalances.SequenceEqual(input.InputTokenBalances)
                ) && 
                (
                    this.InputTokenWeights == input.InputTokenWeights ||
                    this.InputTokenWeights != null &&
                    input.InputTokenWeights != null &&
                    this.InputTokenWeights.SequenceEqual(input.InputTokenWeights)
                ) && 
                (
                    this.OutputTokenSupply == input.OutputTokenSupply ||
                    (this.OutputTokenSupply != null &&
                    this.OutputTokenSupply.Equals(input.OutputTokenSupply))
                ) && 
                (
                    this.OutputTokenPriceUsd == input.OutputTokenPriceUsd ||
                    (this.OutputTokenPriceUsd != null &&
                    this.OutputTokenPriceUsd.Equals(input.OutputTokenPriceUsd))
                ) && 
                (
                    this.StakedOutputTokenAmount == input.StakedOutputTokenAmount ||
                    (this.StakedOutputTokenAmount != null &&
                    this.StakedOutputTokenAmount.Equals(input.StakedOutputTokenAmount))
                ) && 
                (
                    this.RewardTokenEmissionsAmount == input.RewardTokenEmissionsAmount ||
                    this.RewardTokenEmissionsAmount != null &&
                    input.RewardTokenEmissionsAmount != null &&
                    this.RewardTokenEmissionsAmount.SequenceEqual(input.RewardTokenEmissionsAmount)
                ) && 
                (
                    this.RewardTokenEmissionsUsd == input.RewardTokenEmissionsUsd ||
                    this.RewardTokenEmissionsUsd != null &&
                    input.RewardTokenEmissionsUsd != null &&
                    this.RewardTokenEmissionsUsd.SequenceEqual(input.RewardTokenEmissionsUsd)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntryTime != null)
                    hashCode = hashCode * 59 + this.EntryTime.GetHashCode();
                if (this.RecvTime != null)
                    hashCode = hashCode * 59 + this.RecvTime.GetHashCode();
                if (this.BlockNumber != null)
                    hashCode = hashCode * 59 + this.BlockNumber.GetHashCode();
                if (this.BlockRange != null)
                    hashCode = hashCode * 59 + this.BlockRange.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Protocol != null)
                    hashCode = hashCode * 59 + this.Protocol.GetHashCode();
                if (this.Pool != null)
                    hashCode = hashCode * 59 + this.Pool.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.TotalValueLockedUsd != null)
                    hashCode = hashCode * 59 + this.TotalValueLockedUsd.GetHashCode();
                if (this.CumulativeSupplySideRevenueUsd != null)
                    hashCode = hashCode * 59 + this.CumulativeSupplySideRevenueUsd.GetHashCode();
                if (this.HourlySupplySideRevenueUsd != null)
                    hashCode = hashCode * 59 + this.HourlySupplySideRevenueUsd.GetHashCode();
                if (this.CumulativeProtocolSideRevenueUsd != null)
                    hashCode = hashCode * 59 + this.CumulativeProtocolSideRevenueUsd.GetHashCode();
                if (this.HourlyProtocolSideRevenueUsd != null)
                    hashCode = hashCode * 59 + this.HourlyProtocolSideRevenueUsd.GetHashCode();
                if (this.CumulativeTotalRevenueUsd != null)
                    hashCode = hashCode * 59 + this.CumulativeTotalRevenueUsd.GetHashCode();
                if (this.HourlyTotalRevenueUsd != null)
                    hashCode = hashCode * 59 + this.HourlyTotalRevenueUsd.GetHashCode();
                if (this.HourlyVolumeUsd != null)
                    hashCode = hashCode * 59 + this.HourlyVolumeUsd.GetHashCode();
                if (this.HourlyVolumeByTokenAmount != null)
                    hashCode = hashCode * 59 + this.HourlyVolumeByTokenAmount.GetHashCode();
                if (this.HourlyVolumeByTokenUsd != null)
                    hashCode = hashCode * 59 + this.HourlyVolumeByTokenUsd.GetHashCode();
                if (this.CumulativeVolumeUsd != null)
                    hashCode = hashCode * 59 + this.CumulativeVolumeUsd.GetHashCode();
                if (this.InputTokenBalances != null)
                    hashCode = hashCode * 59 + this.InputTokenBalances.GetHashCode();
                if (this.InputTokenWeights != null)
                    hashCode = hashCode * 59 + this.InputTokenWeights.GetHashCode();
                if (this.OutputTokenSupply != null)
                    hashCode = hashCode * 59 + this.OutputTokenSupply.GetHashCode();
                if (this.OutputTokenPriceUsd != null)
                    hashCode = hashCode * 59 + this.OutputTokenPriceUsd.GetHashCode();
                if (this.StakedOutputTokenAmount != null)
                    hashCode = hashCode * 59 + this.StakedOutputTokenAmount.GetHashCode();
                if (this.RewardTokenEmissionsAmount != null)
                    hashCode = hashCode * 59 + this.RewardTokenEmissionsAmount.GetHashCode();
                if (this.RewardTokenEmissionsUsd != null)
                    hashCode = hashCode * 59 + this.RewardTokenEmissionsUsd.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
