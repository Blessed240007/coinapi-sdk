/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using CoinAPI.EMS.REST.V1.Client;
using CoinAPI.EMS.REST.V1.Model;

namespace CoinAPI.EMS.REST.V1.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICRYPTOPUNKSETHEREUMApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Bids (current)
        /// </summary>
        /// <remarks>
        /// Gets bids.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<CRYPTOPUNKSBidDTO></returns>
        List<CRYPTOPUNKSBidDTO> CRYPTOPUNKSETHEREUMBidsCurrent ();

        /// <summary>
        /// Bids (current)
        /// </summary>
        /// <remarks>
        /// Gets bids.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<CRYPTOPUNKSBidDTO></returns>
        ApiResponse<List<CRYPTOPUNKSBidDTO>> CRYPTOPUNKSETHEREUMBidsCurrentWithHttpInfo ();
        /// <summary>
        /// CollectionDailySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets collectionDailySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<CRYPTOPUNKSCollectionDailySnapshotDTO></returns>
        List<CRYPTOPUNKSCollectionDailySnapshotDTO> CRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrent ();

        /// <summary>
        /// CollectionDailySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets collectionDailySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<CRYPTOPUNKSCollectionDailySnapshotDTO></returns>
        ApiResponse<List<CRYPTOPUNKSCollectionDailySnapshotDTO>> CRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentWithHttpInfo ();
        /// <summary>
        /// Collections (current)
        /// </summary>
        /// <remarks>
        /// Gets collections.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<CRYPTOPUNKSCollectionDTO></returns>
        List<CRYPTOPUNKSCollectionDTO> CRYPTOPUNKSETHEREUMCollectionsCurrent ();

        /// <summary>
        /// Collections (current)
        /// </summary>
        /// <remarks>
        /// Gets collections.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<CRYPTOPUNKSCollectionDTO></returns>
        ApiResponse<List<CRYPTOPUNKSCollectionDTO>> CRYPTOPUNKSETHEREUMCollectionsCurrentWithHttpInfo ();
        /// <summary>
        /// DataSources (current)
        /// </summary>
        /// <remarks>
        /// Gets dataSources.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<CRYPTOPUNKSDataSourcesDTO></returns>
        List<CRYPTOPUNKSDataSourcesDTO> CRYPTOPUNKSETHEREUMDataSourcesCurrent ();

        /// <summary>
        /// DataSources (current)
        /// </summary>
        /// <remarks>
        /// Gets dataSources.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<CRYPTOPUNKSDataSourcesDTO></returns>
        ApiResponse<List<CRYPTOPUNKSDataSourcesDTO>> CRYPTOPUNKSETHEREUMDataSourcesCurrentWithHttpInfo ();
        /// <summary>
        /// Items (current)
        /// </summary>
        /// <remarks>
        /// Gets items.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<CRYPTOPUNKSItemDTO></returns>
        List<CRYPTOPUNKSItemDTO> CRYPTOPUNKSETHEREUMItemsCurrent ();

        /// <summary>
        /// Items (current)
        /// </summary>
        /// <remarks>
        /// Gets items.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<CRYPTOPUNKSItemDTO></returns>
        ApiResponse<List<CRYPTOPUNKSItemDTO>> CRYPTOPUNKSETHEREUMItemsCurrentWithHttpInfo ();
        /// <summary>
        /// MarketPlaces (current)
        /// </summary>
        /// <remarks>
        /// Gets marketPlaces.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<CRYPTOPUNKSMarketPlaceDTO></returns>
        List<CRYPTOPUNKSMarketPlaceDTO> CRYPTOPUNKSETHEREUMMarketPlacesCurrent ();

        /// <summary>
        /// MarketPlaces (current)
        /// </summary>
        /// <remarks>
        /// Gets marketPlaces.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<CRYPTOPUNKSMarketPlaceDTO></returns>
        ApiResponse<List<CRYPTOPUNKSMarketPlaceDTO>> CRYPTOPUNKSETHEREUMMarketPlacesCurrentWithHttpInfo ();
        /// <summary>
        /// MarketplaceDailySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets marketplaceDailySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<CRYPTOPUNKSMarketplaceDailySnapshotDTO></returns>
        List<CRYPTOPUNKSMarketplaceDailySnapshotDTO> CRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrent ();

        /// <summary>
        /// MarketplaceDailySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets marketplaceDailySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<CRYPTOPUNKSMarketplaceDailySnapshotDTO></returns>
        ApiResponse<List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>> CRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentWithHttpInfo ();
        /// <summary>
        /// Trades (current)
        /// </summary>
        /// <remarks>
        /// Gets trades.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<CRYPTOPUNKSTradeDTO></returns>
        List<CRYPTOPUNKSTradeDTO> CRYPTOPUNKSETHEREUMTradesCurrent ();

        /// <summary>
        /// Trades (current)
        /// </summary>
        /// <remarks>
        /// Gets trades.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<CRYPTOPUNKSTradeDTO></returns>
        ApiResponse<List<CRYPTOPUNKSTradeDTO>> CRYPTOPUNKSETHEREUMTradesCurrentWithHttpInfo ();
        /// <summary>
        /// Users (current)
        /// </summary>
        /// <remarks>
        /// Gets users.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<CRYPTOPUNKSUserDTO></returns>
        List<CRYPTOPUNKSUserDTO> CRYPTOPUNKSETHEREUMUsersCurrent ();

        /// <summary>
        /// Users (current)
        /// </summary>
        /// <remarks>
        /// Gets users.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<CRYPTOPUNKSUserDTO></returns>
        ApiResponse<List<CRYPTOPUNKSUserDTO>> CRYPTOPUNKSETHEREUMUsersCurrentWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Bids (current)
        /// </summary>
        /// <remarks>
        /// Gets bids.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CRYPTOPUNKSBidDTO></returns>
        System.Threading.Tasks.Task<List<CRYPTOPUNKSBidDTO>> CRYPTOPUNKSETHEREUMBidsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Bids (current)
        /// </summary>
        /// <remarks>
        /// Gets bids.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CRYPTOPUNKSBidDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CRYPTOPUNKSBidDTO>>> CRYPTOPUNKSETHEREUMBidsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// CollectionDailySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets collectionDailySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CRYPTOPUNKSCollectionDailySnapshotDTO></returns>
        System.Threading.Tasks.Task<List<CRYPTOPUNKSCollectionDailySnapshotDTO>> CRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// CollectionDailySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets collectionDailySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CRYPTOPUNKSCollectionDailySnapshotDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CRYPTOPUNKSCollectionDailySnapshotDTO>>> CRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Collections (current)
        /// </summary>
        /// <remarks>
        /// Gets collections.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CRYPTOPUNKSCollectionDTO></returns>
        System.Threading.Tasks.Task<List<CRYPTOPUNKSCollectionDTO>> CRYPTOPUNKSETHEREUMCollectionsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Collections (current)
        /// </summary>
        /// <remarks>
        /// Gets collections.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CRYPTOPUNKSCollectionDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CRYPTOPUNKSCollectionDTO>>> CRYPTOPUNKSETHEREUMCollectionsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// DataSources (current)
        /// </summary>
        /// <remarks>
        /// Gets dataSources.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CRYPTOPUNKSDataSourcesDTO></returns>
        System.Threading.Tasks.Task<List<CRYPTOPUNKSDataSourcesDTO>> CRYPTOPUNKSETHEREUMDataSourcesCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// DataSources (current)
        /// </summary>
        /// <remarks>
        /// Gets dataSources.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CRYPTOPUNKSDataSourcesDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CRYPTOPUNKSDataSourcesDTO>>> CRYPTOPUNKSETHEREUMDataSourcesCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Items (current)
        /// </summary>
        /// <remarks>
        /// Gets items.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CRYPTOPUNKSItemDTO></returns>
        System.Threading.Tasks.Task<List<CRYPTOPUNKSItemDTO>> CRYPTOPUNKSETHEREUMItemsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Items (current)
        /// </summary>
        /// <remarks>
        /// Gets items.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CRYPTOPUNKSItemDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CRYPTOPUNKSItemDTO>>> CRYPTOPUNKSETHEREUMItemsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// MarketPlaces (current)
        /// </summary>
        /// <remarks>
        /// Gets marketPlaces.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CRYPTOPUNKSMarketPlaceDTO></returns>
        System.Threading.Tasks.Task<List<CRYPTOPUNKSMarketPlaceDTO>> CRYPTOPUNKSETHEREUMMarketPlacesCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// MarketPlaces (current)
        /// </summary>
        /// <remarks>
        /// Gets marketPlaces.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CRYPTOPUNKSMarketPlaceDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CRYPTOPUNKSMarketPlaceDTO>>> CRYPTOPUNKSETHEREUMMarketPlacesCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// MarketplaceDailySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets marketplaceDailySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CRYPTOPUNKSMarketplaceDailySnapshotDTO></returns>
        System.Threading.Tasks.Task<List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>> CRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// MarketplaceDailySnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets marketplaceDailySnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CRYPTOPUNKSMarketplaceDailySnapshotDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>>> CRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Trades (current)
        /// </summary>
        /// <remarks>
        /// Gets trades.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CRYPTOPUNKSTradeDTO></returns>
        System.Threading.Tasks.Task<List<CRYPTOPUNKSTradeDTO>> CRYPTOPUNKSETHEREUMTradesCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Trades (current)
        /// </summary>
        /// <remarks>
        /// Gets trades.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CRYPTOPUNKSTradeDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CRYPTOPUNKSTradeDTO>>> CRYPTOPUNKSETHEREUMTradesCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Users (current)
        /// </summary>
        /// <remarks>
        /// Gets users.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CRYPTOPUNKSUserDTO></returns>
        System.Threading.Tasks.Task<List<CRYPTOPUNKSUserDTO>> CRYPTOPUNKSETHEREUMUsersCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Users (current)
        /// </summary>
        /// <remarks>
        /// Gets users.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CRYPTOPUNKSUserDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CRYPTOPUNKSUserDTO>>> CRYPTOPUNKSETHEREUMUsersCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CRYPTOPUNKSETHEREUMApi : ICRYPTOPUNKSETHEREUMApi
    {
        private CoinAPI.EMS.REST.V1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CRYPTOPUNKSETHEREUMApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CRYPTOPUNKSETHEREUMApi(String basePath)
        {
            this.Configuration = new CoinAPI.EMS.REST.V1.Client.Configuration { BasePath = basePath };

            ExceptionFactory = CoinAPI.EMS.REST.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CRYPTOPUNKSETHEREUMApi"/> class
        /// </summary>
        /// <returns></returns>
        public CRYPTOPUNKSETHEREUMApi()
        {
            this.Configuration = CoinAPI.EMS.REST.V1.Client.Configuration.Default;

            ExceptionFactory = CoinAPI.EMS.REST.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CRYPTOPUNKSETHEREUMApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CRYPTOPUNKSETHEREUMApi(CoinAPI.EMS.REST.V1.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = CoinAPI.EMS.REST.V1.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CoinAPI.EMS.REST.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CoinAPI.EMS.REST.V1.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CoinAPI.EMS.REST.V1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Bids (current) Gets bids.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<CRYPTOPUNKSBidDTO></returns>
        public List<CRYPTOPUNKSBidDTO> CRYPTOPUNKSETHEREUMBidsCurrent ()
        {
             ApiResponse<List<CRYPTOPUNKSBidDTO>> localVarResponse = CRYPTOPUNKSETHEREUMBidsCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bids (current) Gets bids.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<CRYPTOPUNKSBidDTO></returns>
        public ApiResponse<List<CRYPTOPUNKSBidDTO>> CRYPTOPUNKSETHEREUMBidsCurrentWithHttpInfo ()
        {

            var localVarPath = "/v1/dapps/cryptopunks-ethereum/bids/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CRYPTOPUNKSETHEREUMBidsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CRYPTOPUNKSBidDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CRYPTOPUNKSBidDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CRYPTOPUNKSBidDTO>)));
        }

        /// <summary>
        /// Bids (current) Gets bids.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CRYPTOPUNKSBidDTO></returns>
        public async System.Threading.Tasks.Task<List<CRYPTOPUNKSBidDTO>> CRYPTOPUNKSETHEREUMBidsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<CRYPTOPUNKSBidDTO>> localVarResponse = await CRYPTOPUNKSETHEREUMBidsCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bids (current) Gets bids.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CRYPTOPUNKSBidDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CRYPTOPUNKSBidDTO>>> CRYPTOPUNKSETHEREUMBidsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/dapps/cryptopunks-ethereum/bids/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CRYPTOPUNKSETHEREUMBidsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CRYPTOPUNKSBidDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CRYPTOPUNKSBidDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CRYPTOPUNKSBidDTO>)));
        }

        /// <summary>
        /// CollectionDailySnapshots (current) Gets collectionDailySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<CRYPTOPUNKSCollectionDailySnapshotDTO></returns>
        public List<CRYPTOPUNKSCollectionDailySnapshotDTO> CRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrent ()
        {
             ApiResponse<List<CRYPTOPUNKSCollectionDailySnapshotDTO>> localVarResponse = CRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// CollectionDailySnapshots (current) Gets collectionDailySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<CRYPTOPUNKSCollectionDailySnapshotDTO></returns>
        public ApiResponse<List<CRYPTOPUNKSCollectionDailySnapshotDTO>> CRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentWithHttpInfo ()
        {

            var localVarPath = "/v1/dapps/cryptopunks-ethereum/collectionDailySnapshots/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CRYPTOPUNKSCollectionDailySnapshotDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CRYPTOPUNKSCollectionDailySnapshotDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CRYPTOPUNKSCollectionDailySnapshotDTO>)));
        }

        /// <summary>
        /// CollectionDailySnapshots (current) Gets collectionDailySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CRYPTOPUNKSCollectionDailySnapshotDTO></returns>
        public async System.Threading.Tasks.Task<List<CRYPTOPUNKSCollectionDailySnapshotDTO>> CRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<CRYPTOPUNKSCollectionDailySnapshotDTO>> localVarResponse = await CRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// CollectionDailySnapshots (current) Gets collectionDailySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CRYPTOPUNKSCollectionDailySnapshotDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CRYPTOPUNKSCollectionDailySnapshotDTO>>> CRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/dapps/cryptopunks-ethereum/collectionDailySnapshots/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CRYPTOPUNKSETHEREUMCollectionDailySnapshotsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CRYPTOPUNKSCollectionDailySnapshotDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CRYPTOPUNKSCollectionDailySnapshotDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CRYPTOPUNKSCollectionDailySnapshotDTO>)));
        }

        /// <summary>
        /// Collections (current) Gets collections.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<CRYPTOPUNKSCollectionDTO></returns>
        public List<CRYPTOPUNKSCollectionDTO> CRYPTOPUNKSETHEREUMCollectionsCurrent ()
        {
             ApiResponse<List<CRYPTOPUNKSCollectionDTO>> localVarResponse = CRYPTOPUNKSETHEREUMCollectionsCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Collections (current) Gets collections.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<CRYPTOPUNKSCollectionDTO></returns>
        public ApiResponse<List<CRYPTOPUNKSCollectionDTO>> CRYPTOPUNKSETHEREUMCollectionsCurrentWithHttpInfo ()
        {

            var localVarPath = "/v1/dapps/cryptopunks-ethereum/collections/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CRYPTOPUNKSETHEREUMCollectionsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CRYPTOPUNKSCollectionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CRYPTOPUNKSCollectionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CRYPTOPUNKSCollectionDTO>)));
        }

        /// <summary>
        /// Collections (current) Gets collections.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CRYPTOPUNKSCollectionDTO></returns>
        public async System.Threading.Tasks.Task<List<CRYPTOPUNKSCollectionDTO>> CRYPTOPUNKSETHEREUMCollectionsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<CRYPTOPUNKSCollectionDTO>> localVarResponse = await CRYPTOPUNKSETHEREUMCollectionsCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Collections (current) Gets collections.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CRYPTOPUNKSCollectionDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CRYPTOPUNKSCollectionDTO>>> CRYPTOPUNKSETHEREUMCollectionsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/dapps/cryptopunks-ethereum/collections/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CRYPTOPUNKSETHEREUMCollectionsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CRYPTOPUNKSCollectionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CRYPTOPUNKSCollectionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CRYPTOPUNKSCollectionDTO>)));
        }

        /// <summary>
        /// DataSources (current) Gets dataSources.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<CRYPTOPUNKSDataSourcesDTO></returns>
        public List<CRYPTOPUNKSDataSourcesDTO> CRYPTOPUNKSETHEREUMDataSourcesCurrent ()
        {
             ApiResponse<List<CRYPTOPUNKSDataSourcesDTO>> localVarResponse = CRYPTOPUNKSETHEREUMDataSourcesCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// DataSources (current) Gets dataSources.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<CRYPTOPUNKSDataSourcesDTO></returns>
        public ApiResponse<List<CRYPTOPUNKSDataSourcesDTO>> CRYPTOPUNKSETHEREUMDataSourcesCurrentWithHttpInfo ()
        {

            var localVarPath = "/v1/dapps/cryptopunks-ethereum/dataSources/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CRYPTOPUNKSETHEREUMDataSourcesCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CRYPTOPUNKSDataSourcesDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CRYPTOPUNKSDataSourcesDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CRYPTOPUNKSDataSourcesDTO>)));
        }

        /// <summary>
        /// DataSources (current) Gets dataSources.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CRYPTOPUNKSDataSourcesDTO></returns>
        public async System.Threading.Tasks.Task<List<CRYPTOPUNKSDataSourcesDTO>> CRYPTOPUNKSETHEREUMDataSourcesCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<CRYPTOPUNKSDataSourcesDTO>> localVarResponse = await CRYPTOPUNKSETHEREUMDataSourcesCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// DataSources (current) Gets dataSources.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CRYPTOPUNKSDataSourcesDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CRYPTOPUNKSDataSourcesDTO>>> CRYPTOPUNKSETHEREUMDataSourcesCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/dapps/cryptopunks-ethereum/dataSources/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CRYPTOPUNKSETHEREUMDataSourcesCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CRYPTOPUNKSDataSourcesDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CRYPTOPUNKSDataSourcesDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CRYPTOPUNKSDataSourcesDTO>)));
        }

        /// <summary>
        /// Items (current) Gets items.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<CRYPTOPUNKSItemDTO></returns>
        public List<CRYPTOPUNKSItemDTO> CRYPTOPUNKSETHEREUMItemsCurrent ()
        {
             ApiResponse<List<CRYPTOPUNKSItemDTO>> localVarResponse = CRYPTOPUNKSETHEREUMItemsCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Items (current) Gets items.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<CRYPTOPUNKSItemDTO></returns>
        public ApiResponse<List<CRYPTOPUNKSItemDTO>> CRYPTOPUNKSETHEREUMItemsCurrentWithHttpInfo ()
        {

            var localVarPath = "/v1/dapps/cryptopunks-ethereum/items/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CRYPTOPUNKSETHEREUMItemsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CRYPTOPUNKSItemDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CRYPTOPUNKSItemDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CRYPTOPUNKSItemDTO>)));
        }

        /// <summary>
        /// Items (current) Gets items.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CRYPTOPUNKSItemDTO></returns>
        public async System.Threading.Tasks.Task<List<CRYPTOPUNKSItemDTO>> CRYPTOPUNKSETHEREUMItemsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<CRYPTOPUNKSItemDTO>> localVarResponse = await CRYPTOPUNKSETHEREUMItemsCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Items (current) Gets items.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CRYPTOPUNKSItemDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CRYPTOPUNKSItemDTO>>> CRYPTOPUNKSETHEREUMItemsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/dapps/cryptopunks-ethereum/items/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CRYPTOPUNKSETHEREUMItemsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CRYPTOPUNKSItemDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CRYPTOPUNKSItemDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CRYPTOPUNKSItemDTO>)));
        }

        /// <summary>
        /// MarketPlaces (current) Gets marketPlaces.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<CRYPTOPUNKSMarketPlaceDTO></returns>
        public List<CRYPTOPUNKSMarketPlaceDTO> CRYPTOPUNKSETHEREUMMarketPlacesCurrent ()
        {
             ApiResponse<List<CRYPTOPUNKSMarketPlaceDTO>> localVarResponse = CRYPTOPUNKSETHEREUMMarketPlacesCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// MarketPlaces (current) Gets marketPlaces.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<CRYPTOPUNKSMarketPlaceDTO></returns>
        public ApiResponse<List<CRYPTOPUNKSMarketPlaceDTO>> CRYPTOPUNKSETHEREUMMarketPlacesCurrentWithHttpInfo ()
        {

            var localVarPath = "/v1/dapps/cryptopunks-ethereum/marketPlaces/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CRYPTOPUNKSETHEREUMMarketPlacesCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CRYPTOPUNKSMarketPlaceDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CRYPTOPUNKSMarketPlaceDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CRYPTOPUNKSMarketPlaceDTO>)));
        }

        /// <summary>
        /// MarketPlaces (current) Gets marketPlaces.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CRYPTOPUNKSMarketPlaceDTO></returns>
        public async System.Threading.Tasks.Task<List<CRYPTOPUNKSMarketPlaceDTO>> CRYPTOPUNKSETHEREUMMarketPlacesCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<CRYPTOPUNKSMarketPlaceDTO>> localVarResponse = await CRYPTOPUNKSETHEREUMMarketPlacesCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MarketPlaces (current) Gets marketPlaces.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CRYPTOPUNKSMarketPlaceDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CRYPTOPUNKSMarketPlaceDTO>>> CRYPTOPUNKSETHEREUMMarketPlacesCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/dapps/cryptopunks-ethereum/marketPlaces/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CRYPTOPUNKSETHEREUMMarketPlacesCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CRYPTOPUNKSMarketPlaceDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CRYPTOPUNKSMarketPlaceDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CRYPTOPUNKSMarketPlaceDTO>)));
        }

        /// <summary>
        /// MarketplaceDailySnapshots (current) Gets marketplaceDailySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<CRYPTOPUNKSMarketplaceDailySnapshotDTO></returns>
        public List<CRYPTOPUNKSMarketplaceDailySnapshotDTO> CRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrent ()
        {
             ApiResponse<List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>> localVarResponse = CRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// MarketplaceDailySnapshots (current) Gets marketplaceDailySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<CRYPTOPUNKSMarketplaceDailySnapshotDTO></returns>
        public ApiResponse<List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>> CRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentWithHttpInfo ()
        {

            var localVarPath = "/v1/dapps/cryptopunks-ethereum/marketplaceDailySnapshots/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>)));
        }

        /// <summary>
        /// MarketplaceDailySnapshots (current) Gets marketplaceDailySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CRYPTOPUNKSMarketplaceDailySnapshotDTO></returns>
        public async System.Threading.Tasks.Task<List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>> CRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>> localVarResponse = await CRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// MarketplaceDailySnapshots (current) Gets marketplaceDailySnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CRYPTOPUNKSMarketplaceDailySnapshotDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>>> CRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/dapps/cryptopunks-ethereum/marketplaceDailySnapshots/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CRYPTOPUNKSETHEREUMMarketplaceDailySnapshotsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>)));
        }

        /// <summary>
        /// Trades (current) Gets trades.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<CRYPTOPUNKSTradeDTO></returns>
        public List<CRYPTOPUNKSTradeDTO> CRYPTOPUNKSETHEREUMTradesCurrent ()
        {
             ApiResponse<List<CRYPTOPUNKSTradeDTO>> localVarResponse = CRYPTOPUNKSETHEREUMTradesCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Trades (current) Gets trades.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<CRYPTOPUNKSTradeDTO></returns>
        public ApiResponse<List<CRYPTOPUNKSTradeDTO>> CRYPTOPUNKSETHEREUMTradesCurrentWithHttpInfo ()
        {

            var localVarPath = "/v1/dapps/cryptopunks-ethereum/trades/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CRYPTOPUNKSETHEREUMTradesCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CRYPTOPUNKSTradeDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CRYPTOPUNKSTradeDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CRYPTOPUNKSTradeDTO>)));
        }

        /// <summary>
        /// Trades (current) Gets trades.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CRYPTOPUNKSTradeDTO></returns>
        public async System.Threading.Tasks.Task<List<CRYPTOPUNKSTradeDTO>> CRYPTOPUNKSETHEREUMTradesCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<CRYPTOPUNKSTradeDTO>> localVarResponse = await CRYPTOPUNKSETHEREUMTradesCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Trades (current) Gets trades.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CRYPTOPUNKSTradeDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CRYPTOPUNKSTradeDTO>>> CRYPTOPUNKSETHEREUMTradesCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/dapps/cryptopunks-ethereum/trades/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CRYPTOPUNKSETHEREUMTradesCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CRYPTOPUNKSTradeDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CRYPTOPUNKSTradeDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CRYPTOPUNKSTradeDTO>)));
        }

        /// <summary>
        /// Users (current) Gets users.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<CRYPTOPUNKSUserDTO></returns>
        public List<CRYPTOPUNKSUserDTO> CRYPTOPUNKSETHEREUMUsersCurrent ()
        {
             ApiResponse<List<CRYPTOPUNKSUserDTO>> localVarResponse = CRYPTOPUNKSETHEREUMUsersCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Users (current) Gets users.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<CRYPTOPUNKSUserDTO></returns>
        public ApiResponse<List<CRYPTOPUNKSUserDTO>> CRYPTOPUNKSETHEREUMUsersCurrentWithHttpInfo ()
        {

            var localVarPath = "/v1/dapps/cryptopunks-ethereum/users/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CRYPTOPUNKSETHEREUMUsersCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CRYPTOPUNKSUserDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CRYPTOPUNKSUserDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CRYPTOPUNKSUserDTO>)));
        }

        /// <summary>
        /// Users (current) Gets users.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<CRYPTOPUNKSUserDTO></returns>
        public async System.Threading.Tasks.Task<List<CRYPTOPUNKSUserDTO>> CRYPTOPUNKSETHEREUMUsersCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<CRYPTOPUNKSUserDTO>> localVarResponse = await CRYPTOPUNKSETHEREUMUsersCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Users (current) Gets users.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;CRYPTOPUNKSUserDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CRYPTOPUNKSUserDTO>>> CRYPTOPUNKSETHEREUMUsersCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/dapps/cryptopunks-ethereum/users/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/x-msgpack"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CRYPTOPUNKSETHEREUMUsersCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CRYPTOPUNKSUserDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<CRYPTOPUNKSUserDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CRYPTOPUNKSUserDTO>)));
        }

    }
}
