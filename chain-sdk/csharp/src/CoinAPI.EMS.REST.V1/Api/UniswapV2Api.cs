/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using CoinAPI.EMS.REST.V1.Client;
using CoinAPI.EMS.REST.V1.Model;

namespace CoinAPI.EMS.REST.V1.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUniswapV2Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Bundles (current)
        /// </summary>
        /// <remarks>
        /// Gets bundles.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2BundleDTO></returns>
        List<UniswapV2BundleDTO> UniswapV2BundlesCurrent ();

        /// <summary>
        /// Bundles (current)
        /// </summary>
        /// <remarks>
        /// Gets bundles.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2BundleDTO></returns>
        ApiResponse<List<UniswapV2BundleDTO>> UniswapV2BundlesCurrentWithHttpInfo ();
        /// <summary>
        /// Burns (current)
        /// </summary>
        /// <remarks>
        /// Gets burns.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2BurnDTO></returns>
        List<UniswapV2BurnDTO> UniswapV2BurnsCurrent ();

        /// <summary>
        /// Burns (current)
        /// </summary>
        /// <remarks>
        /// Gets burns.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2BurnDTO></returns>
        ApiResponse<List<UniswapV2BurnDTO>> UniswapV2BurnsCurrentWithHttpInfo ();
        /// <summary>
        /// LiquidityPositionSnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPositionSnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2LiquidityPositionSnapshotDTO></returns>
        List<UniswapV2LiquidityPositionSnapshotDTO> UniswapV2LiquidityPositionSnapshotsCurrent ();

        /// <summary>
        /// LiquidityPositionSnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPositionSnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2LiquidityPositionSnapshotDTO></returns>
        ApiResponse<List<UniswapV2LiquidityPositionSnapshotDTO>> UniswapV2LiquidityPositionSnapshotsCurrentWithHttpInfo ();
        /// <summary>
        /// LiquidityPositions (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPositions.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2LiquidityPositionDTO></returns>
        List<UniswapV2LiquidityPositionDTO> UniswapV2LiquidityPositionsCurrent ();

        /// <summary>
        /// LiquidityPositions (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPositions.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2LiquidityPositionDTO></returns>
        ApiResponse<List<UniswapV2LiquidityPositionDTO>> UniswapV2LiquidityPositionsCurrentWithHttpInfo ();
        /// <summary>
        /// Mints (current)
        /// </summary>
        /// <remarks>
        /// Gets mints.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2MintDTO></returns>
        List<UniswapV2MintDTO> UniswapV2MintsCurrent ();

        /// <summary>
        /// Mints (current)
        /// </summary>
        /// <remarks>
        /// Gets mints.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2MintDTO></returns>
        ApiResponse<List<UniswapV2MintDTO>> UniswapV2MintsCurrentWithHttpInfo ();
        /// <summary>
        /// PairDayData (current)
        /// </summary>
        /// <remarks>
        /// Gets pairDayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2PairDayDataDTO></returns>
        List<UniswapV2PairDayDataDTO> UniswapV2PairDayDataCurrent ();

        /// <summary>
        /// PairDayData (current)
        /// </summary>
        /// <remarks>
        /// Gets pairDayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2PairDayDataDTO></returns>
        ApiResponse<List<UniswapV2PairDayDataDTO>> UniswapV2PairDayDataCurrentWithHttpInfo ();
        /// <summary>
        /// PairHourData (current)
        /// </summary>
        /// <remarks>
        /// Gets pairHourData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2PairHourDataDTO></returns>
        List<UniswapV2PairHourDataDTO> UniswapV2PairHourDataCurrent ();

        /// <summary>
        /// PairHourData (current)
        /// </summary>
        /// <remarks>
        /// Gets pairHourData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2PairHourDataDTO></returns>
        ApiResponse<List<UniswapV2PairHourDataDTO>> UniswapV2PairHourDataCurrentWithHttpInfo ();
        /// <summary>
        /// Pairs (current)
        /// </summary>
        /// <remarks>
        /// Gets pairs.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pair contract address. (optional)</param>
        /// <returns>List<UniswapV2PairDTO></returns>
        List<UniswapV2PairDTO> UniswapV2PairsCurrent (string id = default(string));

        /// <summary>
        /// Pairs (current)
        /// </summary>
        /// <remarks>
        /// Gets pairs.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pair contract address. (optional)</param>
        /// <returns>ApiResponse of List<UniswapV2PairDTO></returns>
        ApiResponse<List<UniswapV2PairDTO>> UniswapV2PairsCurrentWithHttpInfo (string id = default(string));
        /// <summary>
        /// Swaps (current)
        /// </summary>
        /// <remarks>
        /// Gets swaps.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pair">Reference to pair. (optional)</param>
        /// <returns>List<UniswapV2SwapDTO></returns>
        List<UniswapV2SwapDTO> UniswapV2SwapsCurrent (string pair = default(string));

        /// <summary>
        /// Swaps (current)
        /// </summary>
        /// <remarks>
        /// Gets swaps.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pair">Reference to pair. (optional)</param>
        /// <returns>ApiResponse of List<UniswapV2SwapDTO></returns>
        ApiResponse<List<UniswapV2SwapDTO>> UniswapV2SwapsCurrentWithHttpInfo (string pair = default(string));
        /// <summary>
        /// TokenDayData (current)
        /// </summary>
        /// <remarks>
        /// Gets tokenDayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2TokenDayDataDTO></returns>
        List<UniswapV2TokenDayDataDTO> UniswapV2TokenDayDataCurrent ();

        /// <summary>
        /// TokenDayData (current)
        /// </summary>
        /// <remarks>
        /// Gets tokenDayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2TokenDayDataDTO></returns>
        ApiResponse<List<UniswapV2TokenDayDataDTO>> UniswapV2TokenDayDataCurrentWithHttpInfo ();
        /// <summary>
        /// Tokens (current)
        /// </summary>
        /// <remarks>
        /// Gets tokens.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2TokenDTO></returns>
        List<UniswapV2TokenDTO> UniswapV2TokensCurrent ();

        /// <summary>
        /// Tokens (current)
        /// </summary>
        /// <remarks>
        /// Gets tokens.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2TokenDTO></returns>
        ApiResponse<List<UniswapV2TokenDTO>> UniswapV2TokensCurrentWithHttpInfo ();
        /// <summary>
        /// Transactions (current)
        /// </summary>
        /// <remarks>
        /// Gets transactions.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2TransactionDTO></returns>
        List<UniswapV2TransactionDTO> UniswapV2TransactionsCurrent ();

        /// <summary>
        /// Transactions (current)
        /// </summary>
        /// <remarks>
        /// Gets transactions.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2TransactionDTO></returns>
        ApiResponse<List<UniswapV2TransactionDTO>> UniswapV2TransactionsCurrentWithHttpInfo ();
        /// <summary>
        /// UniswapDayData (current)
        /// </summary>
        /// <remarks>
        /// Gets uniswapDayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2UniswapDayDataDTO></returns>
        List<UniswapV2UniswapDayDataDTO> UniswapV2UniswapDayDataCurrent ();

        /// <summary>
        /// UniswapDayData (current)
        /// </summary>
        /// <remarks>
        /// Gets uniswapDayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2UniswapDayDataDTO></returns>
        ApiResponse<List<UniswapV2UniswapDayDataDTO>> UniswapV2UniswapDayDataCurrentWithHttpInfo ();
        /// <summary>
        /// UniswapFactories (current)
        /// </summary>
        /// <remarks>
        /// Gets uniswapFactories.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2UniswapFactoryDTO></returns>
        List<UniswapV2UniswapFactoryDTO> UniswapV2UniswapFactoriesCurrent ();

        /// <summary>
        /// UniswapFactories (current)
        /// </summary>
        /// <remarks>
        /// Gets uniswapFactories.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2UniswapFactoryDTO></returns>
        ApiResponse<List<UniswapV2UniswapFactoryDTO>> UniswapV2UniswapFactoriesCurrentWithHttpInfo ();
        /// <summary>
        /// Users (current)
        /// </summary>
        /// <remarks>
        /// Gets users.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2UserDTO></returns>
        List<UniswapV2UserDTO> UniswapV2UsersCurrent ();

        /// <summary>
        /// Users (current)
        /// </summary>
        /// <remarks>
        /// Gets users.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2UserDTO></returns>
        ApiResponse<List<UniswapV2UserDTO>> UniswapV2UsersCurrentWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Bundles (current)
        /// </summary>
        /// <remarks>
        /// Gets bundles.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2BundleDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV2BundleDTO>> UniswapV2BundlesCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Bundles (current)
        /// </summary>
        /// <remarks>
        /// Gets bundles.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2BundleDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV2BundleDTO>>> UniswapV2BundlesCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Burns (current)
        /// </summary>
        /// <remarks>
        /// Gets burns.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2BurnDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV2BurnDTO>> UniswapV2BurnsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Burns (current)
        /// </summary>
        /// <remarks>
        /// Gets burns.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2BurnDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV2BurnDTO>>> UniswapV2BurnsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// LiquidityPositionSnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPositionSnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2LiquidityPositionSnapshotDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV2LiquidityPositionSnapshotDTO>> UniswapV2LiquidityPositionSnapshotsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// LiquidityPositionSnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPositionSnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2LiquidityPositionSnapshotDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV2LiquidityPositionSnapshotDTO>>> UniswapV2LiquidityPositionSnapshotsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// LiquidityPositions (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPositions.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2LiquidityPositionDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV2LiquidityPositionDTO>> UniswapV2LiquidityPositionsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// LiquidityPositions (current)
        /// </summary>
        /// <remarks>
        /// Gets liquidityPositions.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2LiquidityPositionDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV2LiquidityPositionDTO>>> UniswapV2LiquidityPositionsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Mints (current)
        /// </summary>
        /// <remarks>
        /// Gets mints.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2MintDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV2MintDTO>> UniswapV2MintsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Mints (current)
        /// </summary>
        /// <remarks>
        /// Gets mints.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2MintDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV2MintDTO>>> UniswapV2MintsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// PairDayData (current)
        /// </summary>
        /// <remarks>
        /// Gets pairDayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2PairDayDataDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV2PairDayDataDTO>> UniswapV2PairDayDataCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// PairDayData (current)
        /// </summary>
        /// <remarks>
        /// Gets pairDayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2PairDayDataDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV2PairDayDataDTO>>> UniswapV2PairDayDataCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// PairHourData (current)
        /// </summary>
        /// <remarks>
        /// Gets pairHourData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2PairHourDataDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV2PairHourDataDTO>> UniswapV2PairHourDataCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// PairHourData (current)
        /// </summary>
        /// <remarks>
        /// Gets pairHourData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2PairHourDataDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV2PairHourDataDTO>>> UniswapV2PairHourDataCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Pairs (current)
        /// </summary>
        /// <remarks>
        /// Gets pairs.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pair contract address. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2PairDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV2PairDTO>> UniswapV2PairsCurrentAsync (string id = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Pairs (current)
        /// </summary>
        /// <remarks>
        /// Gets pairs.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pair contract address. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2PairDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV2PairDTO>>> UniswapV2PairsCurrentWithHttpInfoAsync (string id = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Swaps (current)
        /// </summary>
        /// <remarks>
        /// Gets swaps.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pair">Reference to pair. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2SwapDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV2SwapDTO>> UniswapV2SwapsCurrentAsync (string pair = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Swaps (current)
        /// </summary>
        /// <remarks>
        /// Gets swaps.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pair">Reference to pair. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2SwapDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV2SwapDTO>>> UniswapV2SwapsCurrentWithHttpInfoAsync (string pair = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// TokenDayData (current)
        /// </summary>
        /// <remarks>
        /// Gets tokenDayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2TokenDayDataDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV2TokenDayDataDTO>> UniswapV2TokenDayDataCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// TokenDayData (current)
        /// </summary>
        /// <remarks>
        /// Gets tokenDayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2TokenDayDataDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV2TokenDayDataDTO>>> UniswapV2TokenDayDataCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Tokens (current)
        /// </summary>
        /// <remarks>
        /// Gets tokens.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2TokenDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV2TokenDTO>> UniswapV2TokensCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Tokens (current)
        /// </summary>
        /// <remarks>
        /// Gets tokens.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2TokenDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV2TokenDTO>>> UniswapV2TokensCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Transactions (current)
        /// </summary>
        /// <remarks>
        /// Gets transactions.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2TransactionDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV2TransactionDTO>> UniswapV2TransactionsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Transactions (current)
        /// </summary>
        /// <remarks>
        /// Gets transactions.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2TransactionDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV2TransactionDTO>>> UniswapV2TransactionsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// UniswapDayData (current)
        /// </summary>
        /// <remarks>
        /// Gets uniswapDayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2UniswapDayDataDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV2UniswapDayDataDTO>> UniswapV2UniswapDayDataCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// UniswapDayData (current)
        /// </summary>
        /// <remarks>
        /// Gets uniswapDayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2UniswapDayDataDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV2UniswapDayDataDTO>>> UniswapV2UniswapDayDataCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// UniswapFactories (current)
        /// </summary>
        /// <remarks>
        /// Gets uniswapFactories.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2UniswapFactoryDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV2UniswapFactoryDTO>> UniswapV2UniswapFactoriesCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// UniswapFactories (current)
        /// </summary>
        /// <remarks>
        /// Gets uniswapFactories.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2UniswapFactoryDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV2UniswapFactoryDTO>>> UniswapV2UniswapFactoriesCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Users (current)
        /// </summary>
        /// <remarks>
        /// Gets users.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2UserDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV2UserDTO>> UniswapV2UsersCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Users (current)
        /// </summary>
        /// <remarks>
        /// Gets users.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2UserDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV2UserDTO>>> UniswapV2UsersCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UniswapV2Api : IUniswapV2Api
    {
        private CoinAPI.EMS.REST.V1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UniswapV2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public UniswapV2Api(String basePath)
        {
            this.Configuration = new CoinAPI.EMS.REST.V1.Client.Configuration { BasePath = basePath };

            ExceptionFactory = CoinAPI.EMS.REST.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UniswapV2Api"/> class
        /// </summary>
        /// <returns></returns>
        public UniswapV2Api()
        {
            this.Configuration = CoinAPI.EMS.REST.V1.Client.Configuration.Default;

            ExceptionFactory = CoinAPI.EMS.REST.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UniswapV2Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UniswapV2Api(CoinAPI.EMS.REST.V1.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = CoinAPI.EMS.REST.V1.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CoinAPI.EMS.REST.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CoinAPI.EMS.REST.V1.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CoinAPI.EMS.REST.V1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Bundles (current) Gets bundles.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2BundleDTO></returns>
        public List<UniswapV2BundleDTO> UniswapV2BundlesCurrent ()
        {
             ApiResponse<List<UniswapV2BundleDTO>> localVarResponse = UniswapV2BundlesCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bundles (current) Gets bundles.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2BundleDTO></returns>
        public ApiResponse<List<UniswapV2BundleDTO>> UniswapV2BundlesCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv2/bundles/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2BundlesCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2BundleDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2BundleDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2BundleDTO>)));
        }

        /// <summary>
        /// Bundles (current) Gets bundles.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2BundleDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV2BundleDTO>> UniswapV2BundlesCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV2BundleDTO>> localVarResponse = await UniswapV2BundlesCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bundles (current) Gets bundles.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2BundleDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV2BundleDTO>>> UniswapV2BundlesCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv2/bundles/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2BundlesCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2BundleDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2BundleDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2BundleDTO>)));
        }

        /// <summary>
        /// Burns (current) Gets burns.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2BurnDTO></returns>
        public List<UniswapV2BurnDTO> UniswapV2BurnsCurrent ()
        {
             ApiResponse<List<UniswapV2BurnDTO>> localVarResponse = UniswapV2BurnsCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Burns (current) Gets burns.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2BurnDTO></returns>
        public ApiResponse<List<UniswapV2BurnDTO>> UniswapV2BurnsCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv2/burns/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2BurnsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2BurnDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2BurnDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2BurnDTO>)));
        }

        /// <summary>
        /// Burns (current) Gets burns.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2BurnDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV2BurnDTO>> UniswapV2BurnsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV2BurnDTO>> localVarResponse = await UniswapV2BurnsCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Burns (current) Gets burns.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2BurnDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV2BurnDTO>>> UniswapV2BurnsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv2/burns/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2BurnsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2BurnDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2BurnDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2BurnDTO>)));
        }

        /// <summary>
        /// LiquidityPositionSnapshots (current) Gets liquidityPositionSnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2LiquidityPositionSnapshotDTO></returns>
        public List<UniswapV2LiquidityPositionSnapshotDTO> UniswapV2LiquidityPositionSnapshotsCurrent ()
        {
             ApiResponse<List<UniswapV2LiquidityPositionSnapshotDTO>> localVarResponse = UniswapV2LiquidityPositionSnapshotsCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// LiquidityPositionSnapshots (current) Gets liquidityPositionSnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2LiquidityPositionSnapshotDTO></returns>
        public ApiResponse<List<UniswapV2LiquidityPositionSnapshotDTO>> UniswapV2LiquidityPositionSnapshotsCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv2/liquidityPositionSnapshots/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2LiquidityPositionSnapshotsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2LiquidityPositionSnapshotDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2LiquidityPositionSnapshotDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2LiquidityPositionSnapshotDTO>)));
        }

        /// <summary>
        /// LiquidityPositionSnapshots (current) Gets liquidityPositionSnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2LiquidityPositionSnapshotDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV2LiquidityPositionSnapshotDTO>> UniswapV2LiquidityPositionSnapshotsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV2LiquidityPositionSnapshotDTO>> localVarResponse = await UniswapV2LiquidityPositionSnapshotsCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// LiquidityPositionSnapshots (current) Gets liquidityPositionSnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2LiquidityPositionSnapshotDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV2LiquidityPositionSnapshotDTO>>> UniswapV2LiquidityPositionSnapshotsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv2/liquidityPositionSnapshots/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2LiquidityPositionSnapshotsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2LiquidityPositionSnapshotDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2LiquidityPositionSnapshotDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2LiquidityPositionSnapshotDTO>)));
        }

        /// <summary>
        /// LiquidityPositions (current) Gets liquidityPositions.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2LiquidityPositionDTO></returns>
        public List<UniswapV2LiquidityPositionDTO> UniswapV2LiquidityPositionsCurrent ()
        {
             ApiResponse<List<UniswapV2LiquidityPositionDTO>> localVarResponse = UniswapV2LiquidityPositionsCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// LiquidityPositions (current) Gets liquidityPositions.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2LiquidityPositionDTO></returns>
        public ApiResponse<List<UniswapV2LiquidityPositionDTO>> UniswapV2LiquidityPositionsCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv2/liquidityPositions/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2LiquidityPositionsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2LiquidityPositionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2LiquidityPositionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2LiquidityPositionDTO>)));
        }

        /// <summary>
        /// LiquidityPositions (current) Gets liquidityPositions.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2LiquidityPositionDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV2LiquidityPositionDTO>> UniswapV2LiquidityPositionsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV2LiquidityPositionDTO>> localVarResponse = await UniswapV2LiquidityPositionsCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// LiquidityPositions (current) Gets liquidityPositions.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2LiquidityPositionDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV2LiquidityPositionDTO>>> UniswapV2LiquidityPositionsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv2/liquidityPositions/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2LiquidityPositionsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2LiquidityPositionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2LiquidityPositionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2LiquidityPositionDTO>)));
        }

        /// <summary>
        /// Mints (current) Gets mints.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2MintDTO></returns>
        public List<UniswapV2MintDTO> UniswapV2MintsCurrent ()
        {
             ApiResponse<List<UniswapV2MintDTO>> localVarResponse = UniswapV2MintsCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mints (current) Gets mints.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2MintDTO></returns>
        public ApiResponse<List<UniswapV2MintDTO>> UniswapV2MintsCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv2/mints/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2MintsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2MintDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2MintDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2MintDTO>)));
        }

        /// <summary>
        /// Mints (current) Gets mints.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2MintDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV2MintDTO>> UniswapV2MintsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV2MintDTO>> localVarResponse = await UniswapV2MintsCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mints (current) Gets mints.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2MintDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV2MintDTO>>> UniswapV2MintsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv2/mints/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2MintsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2MintDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2MintDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2MintDTO>)));
        }

        /// <summary>
        /// PairDayData (current) Gets pairDayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2PairDayDataDTO></returns>
        public List<UniswapV2PairDayDataDTO> UniswapV2PairDayDataCurrent ()
        {
             ApiResponse<List<UniswapV2PairDayDataDTO>> localVarResponse = UniswapV2PairDayDataCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// PairDayData (current) Gets pairDayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2PairDayDataDTO></returns>
        public ApiResponse<List<UniswapV2PairDayDataDTO>> UniswapV2PairDayDataCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv2/pairDayData/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2PairDayDataCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2PairDayDataDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2PairDayDataDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2PairDayDataDTO>)));
        }

        /// <summary>
        /// PairDayData (current) Gets pairDayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2PairDayDataDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV2PairDayDataDTO>> UniswapV2PairDayDataCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV2PairDayDataDTO>> localVarResponse = await UniswapV2PairDayDataCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PairDayData (current) Gets pairDayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2PairDayDataDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV2PairDayDataDTO>>> UniswapV2PairDayDataCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv2/pairDayData/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2PairDayDataCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2PairDayDataDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2PairDayDataDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2PairDayDataDTO>)));
        }

        /// <summary>
        /// PairHourData (current) Gets pairHourData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2PairHourDataDTO></returns>
        public List<UniswapV2PairHourDataDTO> UniswapV2PairHourDataCurrent ()
        {
             ApiResponse<List<UniswapV2PairHourDataDTO>> localVarResponse = UniswapV2PairHourDataCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// PairHourData (current) Gets pairHourData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2PairHourDataDTO></returns>
        public ApiResponse<List<UniswapV2PairHourDataDTO>> UniswapV2PairHourDataCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv2/pairHourData/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2PairHourDataCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2PairHourDataDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2PairHourDataDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2PairHourDataDTO>)));
        }

        /// <summary>
        /// PairHourData (current) Gets pairHourData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2PairHourDataDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV2PairHourDataDTO>> UniswapV2PairHourDataCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV2PairHourDataDTO>> localVarResponse = await UniswapV2PairHourDataCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PairHourData (current) Gets pairHourData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2PairHourDataDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV2PairHourDataDTO>>> UniswapV2PairHourDataCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv2/pairHourData/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2PairHourDataCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2PairHourDataDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2PairHourDataDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2PairHourDataDTO>)));
        }

        /// <summary>
        /// Pairs (current) Gets pairs.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pair contract address. (optional)</param>
        /// <returns>List<UniswapV2PairDTO></returns>
        public List<UniswapV2PairDTO> UniswapV2PairsCurrent (string id = default(string))
        {
             ApiResponse<List<UniswapV2PairDTO>> localVarResponse = UniswapV2PairsCurrentWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pairs (current) Gets pairs.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pair contract address. (optional)</param>
        /// <returns>ApiResponse of List<UniswapV2PairDTO></returns>
        public ApiResponse<List<UniswapV2PairDTO>> UniswapV2PairsCurrentWithHttpInfo (string id = default(string))
        {

            var localVarPath = "/dapps/uniswapv2/pairs/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2PairsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2PairDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2PairDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2PairDTO>)));
        }

        /// <summary>
        /// Pairs (current) Gets pairs.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pair contract address. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2PairDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV2PairDTO>> UniswapV2PairsCurrentAsync (string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV2PairDTO>> localVarResponse = await UniswapV2PairsCurrentWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pairs (current) Gets pairs.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pair contract address. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2PairDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV2PairDTO>>> UniswapV2PairsCurrentWithHttpInfoAsync (string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv2/pairs/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2PairsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2PairDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2PairDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2PairDTO>)));
        }

        /// <summary>
        /// Swaps (current) Gets swaps.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pair">Reference to pair. (optional)</param>
        /// <returns>List<UniswapV2SwapDTO></returns>
        public List<UniswapV2SwapDTO> UniswapV2SwapsCurrent (string pair = default(string))
        {
             ApiResponse<List<UniswapV2SwapDTO>> localVarResponse = UniswapV2SwapsCurrentWithHttpInfo(pair);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Swaps (current) Gets swaps.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pair">Reference to pair. (optional)</param>
        /// <returns>ApiResponse of List<UniswapV2SwapDTO></returns>
        public ApiResponse<List<UniswapV2SwapDTO>> UniswapV2SwapsCurrentWithHttpInfo (string pair = default(string))
        {

            var localVarPath = "/dapps/uniswapv2/swaps/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pair != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pair", pair)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2SwapsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2SwapDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2SwapDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2SwapDTO>)));
        }

        /// <summary>
        /// Swaps (current) Gets swaps.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pair">Reference to pair. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2SwapDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV2SwapDTO>> UniswapV2SwapsCurrentAsync (string pair = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV2SwapDTO>> localVarResponse = await UniswapV2SwapsCurrentWithHttpInfoAsync(pair, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Swaps (current) Gets swaps.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pair">Reference to pair. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2SwapDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV2SwapDTO>>> UniswapV2SwapsCurrentWithHttpInfoAsync (string pair = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv2/swaps/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pair != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pair", pair)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2SwapsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2SwapDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2SwapDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2SwapDTO>)));
        }

        /// <summary>
        /// TokenDayData (current) Gets tokenDayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2TokenDayDataDTO></returns>
        public List<UniswapV2TokenDayDataDTO> UniswapV2TokenDayDataCurrent ()
        {
             ApiResponse<List<UniswapV2TokenDayDataDTO>> localVarResponse = UniswapV2TokenDayDataCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// TokenDayData (current) Gets tokenDayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2TokenDayDataDTO></returns>
        public ApiResponse<List<UniswapV2TokenDayDataDTO>> UniswapV2TokenDayDataCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv2/tokenDayData/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2TokenDayDataCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2TokenDayDataDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2TokenDayDataDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2TokenDayDataDTO>)));
        }

        /// <summary>
        /// TokenDayData (current) Gets tokenDayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2TokenDayDataDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV2TokenDayDataDTO>> UniswapV2TokenDayDataCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV2TokenDayDataDTO>> localVarResponse = await UniswapV2TokenDayDataCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// TokenDayData (current) Gets tokenDayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2TokenDayDataDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV2TokenDayDataDTO>>> UniswapV2TokenDayDataCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv2/tokenDayData/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2TokenDayDataCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2TokenDayDataDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2TokenDayDataDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2TokenDayDataDTO>)));
        }

        /// <summary>
        /// Tokens (current) Gets tokens.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2TokenDTO></returns>
        public List<UniswapV2TokenDTO> UniswapV2TokensCurrent ()
        {
             ApiResponse<List<UniswapV2TokenDTO>> localVarResponse = UniswapV2TokensCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tokens (current) Gets tokens.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2TokenDTO></returns>
        public ApiResponse<List<UniswapV2TokenDTO>> UniswapV2TokensCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv2/tokens/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2TokensCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2TokenDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2TokenDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2TokenDTO>)));
        }

        /// <summary>
        /// Tokens (current) Gets tokens.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2TokenDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV2TokenDTO>> UniswapV2TokensCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV2TokenDTO>> localVarResponse = await UniswapV2TokensCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tokens (current) Gets tokens.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2TokenDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV2TokenDTO>>> UniswapV2TokensCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv2/tokens/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2TokensCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2TokenDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2TokenDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2TokenDTO>)));
        }

        /// <summary>
        /// Transactions (current) Gets transactions.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2TransactionDTO></returns>
        public List<UniswapV2TransactionDTO> UniswapV2TransactionsCurrent ()
        {
             ApiResponse<List<UniswapV2TransactionDTO>> localVarResponse = UniswapV2TransactionsCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transactions (current) Gets transactions.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2TransactionDTO></returns>
        public ApiResponse<List<UniswapV2TransactionDTO>> UniswapV2TransactionsCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv2/transactions/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2TransactionsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2TransactionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2TransactionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2TransactionDTO>)));
        }

        /// <summary>
        /// Transactions (current) Gets transactions.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2TransactionDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV2TransactionDTO>> UniswapV2TransactionsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV2TransactionDTO>> localVarResponse = await UniswapV2TransactionsCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transactions (current) Gets transactions.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2TransactionDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV2TransactionDTO>>> UniswapV2TransactionsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv2/transactions/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2TransactionsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2TransactionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2TransactionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2TransactionDTO>)));
        }

        /// <summary>
        /// UniswapDayData (current) Gets uniswapDayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2UniswapDayDataDTO></returns>
        public List<UniswapV2UniswapDayDataDTO> UniswapV2UniswapDayDataCurrent ()
        {
             ApiResponse<List<UniswapV2UniswapDayDataDTO>> localVarResponse = UniswapV2UniswapDayDataCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// UniswapDayData (current) Gets uniswapDayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2UniswapDayDataDTO></returns>
        public ApiResponse<List<UniswapV2UniswapDayDataDTO>> UniswapV2UniswapDayDataCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv2/uniswapDayData/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2UniswapDayDataCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2UniswapDayDataDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2UniswapDayDataDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2UniswapDayDataDTO>)));
        }

        /// <summary>
        /// UniswapDayData (current) Gets uniswapDayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2UniswapDayDataDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV2UniswapDayDataDTO>> UniswapV2UniswapDayDataCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV2UniswapDayDataDTO>> localVarResponse = await UniswapV2UniswapDayDataCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UniswapDayData (current) Gets uniswapDayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2UniswapDayDataDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV2UniswapDayDataDTO>>> UniswapV2UniswapDayDataCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv2/uniswapDayData/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2UniswapDayDataCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2UniswapDayDataDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2UniswapDayDataDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2UniswapDayDataDTO>)));
        }

        /// <summary>
        /// UniswapFactories (current) Gets uniswapFactories.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2UniswapFactoryDTO></returns>
        public List<UniswapV2UniswapFactoryDTO> UniswapV2UniswapFactoriesCurrent ()
        {
             ApiResponse<List<UniswapV2UniswapFactoryDTO>> localVarResponse = UniswapV2UniswapFactoriesCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// UniswapFactories (current) Gets uniswapFactories.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2UniswapFactoryDTO></returns>
        public ApiResponse<List<UniswapV2UniswapFactoryDTO>> UniswapV2UniswapFactoriesCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv2/uniswapFactories/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2UniswapFactoriesCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2UniswapFactoryDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2UniswapFactoryDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2UniswapFactoryDTO>)));
        }

        /// <summary>
        /// UniswapFactories (current) Gets uniswapFactories.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2UniswapFactoryDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV2UniswapFactoryDTO>> UniswapV2UniswapFactoriesCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV2UniswapFactoryDTO>> localVarResponse = await UniswapV2UniswapFactoriesCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UniswapFactories (current) Gets uniswapFactories.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2UniswapFactoryDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV2UniswapFactoryDTO>>> UniswapV2UniswapFactoriesCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv2/uniswapFactories/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2UniswapFactoriesCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2UniswapFactoryDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2UniswapFactoryDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2UniswapFactoryDTO>)));
        }

        /// <summary>
        /// Users (current) Gets users.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV2UserDTO></returns>
        public List<UniswapV2UserDTO> UniswapV2UsersCurrent ()
        {
             ApiResponse<List<UniswapV2UserDTO>> localVarResponse = UniswapV2UsersCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Users (current) Gets users.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV2UserDTO></returns>
        public ApiResponse<List<UniswapV2UserDTO>> UniswapV2UsersCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv2/users/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2UsersCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2UserDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2UserDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2UserDTO>)));
        }

        /// <summary>
        /// Users (current) Gets users.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV2UserDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV2UserDTO>> UniswapV2UsersCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV2UserDTO>> localVarResponse = await UniswapV2UsersCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Users (current) Gets users.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV2UserDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV2UserDTO>>> UniswapV2UsersCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv2/users/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV2UsersCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV2UserDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV2UserDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV2UserDTO>)));
        }

    }
}
