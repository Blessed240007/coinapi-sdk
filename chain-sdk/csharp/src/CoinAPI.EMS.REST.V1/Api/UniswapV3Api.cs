/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using CoinAPI.EMS.REST.V1.Client;
using CoinAPI.EMS.REST.V1.Model;

namespace CoinAPI.EMS.REST.V1.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUniswapV3Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Bundles (current)
        /// </summary>
        /// <remarks>
        /// Gets bundles.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3BundleDTO></returns>
        List<UniswapV3BundleDTO> UniswapV3BundlesCurrent ();

        /// <summary>
        /// Bundles (current)
        /// </summary>
        /// <remarks>
        /// Gets bundles.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3BundleDTO></returns>
        ApiResponse<List<UniswapV3BundleDTO>> UniswapV3BundlesCurrentWithHttpInfo ();
        /// <summary>
        /// Burns (current)
        /// </summary>
        /// <remarks>
        /// Gets burns.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3BurnDTO></returns>
        List<UniswapV3BurnDTO> UniswapV3BurnsCurrent ();

        /// <summary>
        /// Burns (current)
        /// </summary>
        /// <remarks>
        /// Gets burns.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3BurnDTO></returns>
        ApiResponse<List<UniswapV3BurnDTO>> UniswapV3BurnsCurrentWithHttpInfo ();
        /// <summary>
        /// Factories (current)
        /// </summary>
        /// <remarks>
        /// Gets factories.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3FactoryDTO></returns>
        List<UniswapV3FactoryDTO> UniswapV3FactoriesCurrent ();

        /// <summary>
        /// Factories (current)
        /// </summary>
        /// <remarks>
        /// Gets factories.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3FactoryDTO></returns>
        ApiResponse<List<UniswapV3FactoryDTO>> UniswapV3FactoriesCurrentWithHttpInfo ();
        /// <summary>
        /// Mints (current)
        /// </summary>
        /// <remarks>
        /// Gets mints.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3MintDTO></returns>
        List<UniswapV3MintDTO> UniswapV3MintsCurrent ();

        /// <summary>
        /// Mints (current)
        /// </summary>
        /// <remarks>
        /// Gets mints.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3MintDTO></returns>
        ApiResponse<List<UniswapV3MintDTO>> UniswapV3MintsCurrentWithHttpInfo ();
        /// <summary>
        /// PoolDayData (current)
        /// </summary>
        /// <remarks>
        /// Gets poolDayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3PoolDayDataDTO></returns>
        List<UniswapV3PoolDayDataDTO> UniswapV3PoolDayDataCurrent ();

        /// <summary>
        /// PoolDayData (current)
        /// </summary>
        /// <remarks>
        /// Gets poolDayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3PoolDayDataDTO></returns>
        ApiResponse<List<UniswapV3PoolDayDataDTO>> UniswapV3PoolDayDataCurrentWithHttpInfo ();
        /// <summary>
        /// PoolHourData (current)
        /// </summary>
        /// <remarks>
        /// Gets poolHourData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3PoolHourDataDTO></returns>
        List<UniswapV3PoolHourDataDTO> UniswapV3PoolHourDataCurrent ();

        /// <summary>
        /// PoolHourData (current)
        /// </summary>
        /// <remarks>
        /// Gets poolHourData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3PoolHourDataDTO></returns>
        ApiResponse<List<UniswapV3PoolHourDataDTO>> UniswapV3PoolHourDataCurrentWithHttpInfo ();
        /// <summary>
        /// Pools (current)
        /// </summary>
        /// <remarks>
        /// Gets pools.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pool address. (optional)</param>
        /// <returns>List<UniswapV3PoolDTO></returns>
        List<UniswapV3PoolDTO> UniswapV3PoolsCurrent (string id = default(string));

        /// <summary>
        /// Pools (current)
        /// </summary>
        /// <remarks>
        /// Gets pools.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pool address. (optional)</param>
        /// <returns>ApiResponse of List<UniswapV3PoolDTO></returns>
        ApiResponse<List<UniswapV3PoolDTO>> UniswapV3PoolsCurrentWithHttpInfo (string id = default(string));
        /// <summary>
        /// PositionSnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets positionSnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3PositionSnapshotDTO></returns>
        List<UniswapV3PositionSnapshotDTO> UniswapV3PositionSnapshotsCurrent ();

        /// <summary>
        /// PositionSnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets positionSnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3PositionSnapshotDTO></returns>
        ApiResponse<List<UniswapV3PositionSnapshotDTO>> UniswapV3PositionSnapshotsCurrentWithHttpInfo ();
        /// <summary>
        /// Positions (current)
        /// </summary>
        /// <remarks>
        /// Gets positions.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3PositionDTO></returns>
        List<UniswapV3PositionDTO> UniswapV3PositionsCurrent ();

        /// <summary>
        /// Positions (current)
        /// </summary>
        /// <remarks>
        /// Gets positions.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3PositionDTO></returns>
        ApiResponse<List<UniswapV3PositionDTO>> UniswapV3PositionsCurrentWithHttpInfo ();
        /// <summary>
        /// Swaps (current)
        /// </summary>
        /// <remarks>
        /// Gets swaps.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Pool swap occured within. (optional)</param>
        /// <returns>List<UniswapV3SwapDTO></returns>
        List<UniswapV3SwapDTO> UniswapV3SwapsCurrent (string pool = default(string));

        /// <summary>
        /// Swaps (current)
        /// </summary>
        /// <remarks>
        /// Gets swaps.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Pool swap occured within. (optional)</param>
        /// <returns>ApiResponse of List<UniswapV3SwapDTO></returns>
        ApiResponse<List<UniswapV3SwapDTO>> UniswapV3SwapsCurrentWithHttpInfo (string pool = default(string));
        /// <summary>
        /// TickDayData (current)
        /// </summary>
        /// <remarks>
        /// Gets tickDayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3TickDayDataDTO></returns>
        List<UniswapV3TickDayDataDTO> UniswapV3TickDayDataCurrent ();

        /// <summary>
        /// TickDayData (current)
        /// </summary>
        /// <remarks>
        /// Gets tickDayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3TickDayDataDTO></returns>
        ApiResponse<List<UniswapV3TickDayDataDTO>> UniswapV3TickDayDataCurrentWithHttpInfo ();
        /// <summary>
        /// Ticks (current)
        /// </summary>
        /// <remarks>
        /// Gets ticks.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3TickDTO></returns>
        List<UniswapV3TickDTO> UniswapV3TicksCurrent ();

        /// <summary>
        /// Ticks (current)
        /// </summary>
        /// <remarks>
        /// Gets ticks.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3TickDTO></returns>
        ApiResponse<List<UniswapV3TickDTO>> UniswapV3TicksCurrentWithHttpInfo ();
        /// <summary>
        /// TokenHourData (current)
        /// </summary>
        /// <remarks>
        /// Gets tokenHourData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3TokenHourDataDTO></returns>
        List<UniswapV3TokenHourDataDTO> UniswapV3TokenHourDataCurrent ();

        /// <summary>
        /// TokenHourData (current)
        /// </summary>
        /// <remarks>
        /// Gets tokenHourData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3TokenHourDataDTO></returns>
        ApiResponse<List<UniswapV3TokenHourDataDTO>> UniswapV3TokenHourDataCurrentWithHttpInfo ();
        /// <summary>
        /// TokenV3DayData (current)
        /// </summary>
        /// <remarks>
        /// Gets tokenV3DayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3TokenV3DayDataDTO></returns>
        List<UniswapV3TokenV3DayDataDTO> UniswapV3TokenV3DayDataCurrent ();

        /// <summary>
        /// TokenV3DayData (current)
        /// </summary>
        /// <remarks>
        /// Gets tokenV3DayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3TokenV3DayDataDTO></returns>
        ApiResponse<List<UniswapV3TokenV3DayDataDTO>> UniswapV3TokenV3DayDataCurrentWithHttpInfo ();
        /// <summary>
        /// Tokens (current)
        /// </summary>
        /// <remarks>
        /// Gets tokens.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3TokenDTO></returns>
        List<UniswapV3TokenDTO> UniswapV3TokensCurrent ();

        /// <summary>
        /// Tokens (current)
        /// </summary>
        /// <remarks>
        /// Gets tokens.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3TokenDTO></returns>
        ApiResponse<List<UniswapV3TokenDTO>> UniswapV3TokensCurrentWithHttpInfo ();
        /// <summary>
        /// Transactions (current)
        /// </summary>
        /// <remarks>
        /// Gets transactions.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3TransactionDTO></returns>
        List<UniswapV3TransactionDTO> UniswapV3TransactionsCurrent ();

        /// <summary>
        /// Transactions (current)
        /// </summary>
        /// <remarks>
        /// Gets transactions.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3TransactionDTO></returns>
        ApiResponse<List<UniswapV3TransactionDTO>> UniswapV3TransactionsCurrentWithHttpInfo ();
        /// <summary>
        /// UniswapDayData (current)
        /// </summary>
        /// <remarks>
        /// Gets uniswapDayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3UniswapDayDataDTO></returns>
        List<UniswapV3UniswapDayDataDTO> UniswapV3UniswapDayDataCurrent ();

        /// <summary>
        /// UniswapDayData (current)
        /// </summary>
        /// <remarks>
        /// Gets uniswapDayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3UniswapDayDataDTO></returns>
        ApiResponse<List<UniswapV3UniswapDayDataDTO>> UniswapV3UniswapDayDataCurrentWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Bundles (current)
        /// </summary>
        /// <remarks>
        /// Gets bundles.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3BundleDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV3BundleDTO>> UniswapV3BundlesCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Bundles (current)
        /// </summary>
        /// <remarks>
        /// Gets bundles.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3BundleDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV3BundleDTO>>> UniswapV3BundlesCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Burns (current)
        /// </summary>
        /// <remarks>
        /// Gets burns.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3BurnDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV3BurnDTO>> UniswapV3BurnsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Burns (current)
        /// </summary>
        /// <remarks>
        /// Gets burns.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3BurnDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV3BurnDTO>>> UniswapV3BurnsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Factories (current)
        /// </summary>
        /// <remarks>
        /// Gets factories.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3FactoryDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV3FactoryDTO>> UniswapV3FactoriesCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Factories (current)
        /// </summary>
        /// <remarks>
        /// Gets factories.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3FactoryDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV3FactoryDTO>>> UniswapV3FactoriesCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Mints (current)
        /// </summary>
        /// <remarks>
        /// Gets mints.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3MintDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV3MintDTO>> UniswapV3MintsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Mints (current)
        /// </summary>
        /// <remarks>
        /// Gets mints.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3MintDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV3MintDTO>>> UniswapV3MintsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// PoolDayData (current)
        /// </summary>
        /// <remarks>
        /// Gets poolDayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3PoolDayDataDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV3PoolDayDataDTO>> UniswapV3PoolDayDataCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// PoolDayData (current)
        /// </summary>
        /// <remarks>
        /// Gets poolDayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3PoolDayDataDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV3PoolDayDataDTO>>> UniswapV3PoolDayDataCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// PoolHourData (current)
        /// </summary>
        /// <remarks>
        /// Gets poolHourData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3PoolHourDataDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV3PoolHourDataDTO>> UniswapV3PoolHourDataCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// PoolHourData (current)
        /// </summary>
        /// <remarks>
        /// Gets poolHourData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3PoolHourDataDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV3PoolHourDataDTO>>> UniswapV3PoolHourDataCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Pools (current)
        /// </summary>
        /// <remarks>
        /// Gets pools.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pool address. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3PoolDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV3PoolDTO>> UniswapV3PoolsCurrentAsync (string id = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Pools (current)
        /// </summary>
        /// <remarks>
        /// Gets pools.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pool address. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3PoolDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV3PoolDTO>>> UniswapV3PoolsCurrentWithHttpInfoAsync (string id = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// PositionSnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets positionSnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3PositionSnapshotDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV3PositionSnapshotDTO>> UniswapV3PositionSnapshotsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// PositionSnapshots (current)
        /// </summary>
        /// <remarks>
        /// Gets positionSnapshots.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3PositionSnapshotDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV3PositionSnapshotDTO>>> UniswapV3PositionSnapshotsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Positions (current)
        /// </summary>
        /// <remarks>
        /// Gets positions.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3PositionDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV3PositionDTO>> UniswapV3PositionsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Positions (current)
        /// </summary>
        /// <remarks>
        /// Gets positions.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3PositionDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV3PositionDTO>>> UniswapV3PositionsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Swaps (current)
        /// </summary>
        /// <remarks>
        /// Gets swaps.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Pool swap occured within. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3SwapDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV3SwapDTO>> UniswapV3SwapsCurrentAsync (string pool = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Swaps (current)
        /// </summary>
        /// <remarks>
        /// Gets swaps.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Pool swap occured within. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3SwapDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV3SwapDTO>>> UniswapV3SwapsCurrentWithHttpInfoAsync (string pool = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// TickDayData (current)
        /// </summary>
        /// <remarks>
        /// Gets tickDayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3TickDayDataDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV3TickDayDataDTO>> UniswapV3TickDayDataCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// TickDayData (current)
        /// </summary>
        /// <remarks>
        /// Gets tickDayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3TickDayDataDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV3TickDayDataDTO>>> UniswapV3TickDayDataCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Ticks (current)
        /// </summary>
        /// <remarks>
        /// Gets ticks.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3TickDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV3TickDTO>> UniswapV3TicksCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Ticks (current)
        /// </summary>
        /// <remarks>
        /// Gets ticks.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3TickDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV3TickDTO>>> UniswapV3TicksCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// TokenHourData (current)
        /// </summary>
        /// <remarks>
        /// Gets tokenHourData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3TokenHourDataDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV3TokenHourDataDTO>> UniswapV3TokenHourDataCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// TokenHourData (current)
        /// </summary>
        /// <remarks>
        /// Gets tokenHourData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3TokenHourDataDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV3TokenHourDataDTO>>> UniswapV3TokenHourDataCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// TokenV3DayData (current)
        /// </summary>
        /// <remarks>
        /// Gets tokenV3DayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3TokenV3DayDataDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV3TokenV3DayDataDTO>> UniswapV3TokenV3DayDataCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// TokenV3DayData (current)
        /// </summary>
        /// <remarks>
        /// Gets tokenV3DayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3TokenV3DayDataDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV3TokenV3DayDataDTO>>> UniswapV3TokenV3DayDataCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Tokens (current)
        /// </summary>
        /// <remarks>
        /// Gets tokens.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3TokenDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV3TokenDTO>> UniswapV3TokensCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Tokens (current)
        /// </summary>
        /// <remarks>
        /// Gets tokens.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3TokenDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV3TokenDTO>>> UniswapV3TokensCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Transactions (current)
        /// </summary>
        /// <remarks>
        /// Gets transactions.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3TransactionDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV3TransactionDTO>> UniswapV3TransactionsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Transactions (current)
        /// </summary>
        /// <remarks>
        /// Gets transactions.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3TransactionDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV3TransactionDTO>>> UniswapV3TransactionsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// UniswapDayData (current)
        /// </summary>
        /// <remarks>
        /// Gets uniswapDayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3UniswapDayDataDTO></returns>
        System.Threading.Tasks.Task<List<UniswapV3UniswapDayDataDTO>> UniswapV3UniswapDayDataCurrentAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// UniswapDayData (current)
        /// </summary>
        /// <remarks>
        /// Gets uniswapDayData.
        /// </remarks>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3UniswapDayDataDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UniswapV3UniswapDayDataDTO>>> UniswapV3UniswapDayDataCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UniswapV3Api : IUniswapV3Api
    {
        private CoinAPI.EMS.REST.V1.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UniswapV3Api"/> class.
        /// </summary>
        /// <returns></returns>
        public UniswapV3Api(String basePath)
        {
            this.Configuration = new CoinAPI.EMS.REST.V1.Client.Configuration { BasePath = basePath };

            ExceptionFactory = CoinAPI.EMS.REST.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UniswapV3Api"/> class
        /// </summary>
        /// <returns></returns>
        public UniswapV3Api()
        {
            this.Configuration = CoinAPI.EMS.REST.V1.Client.Configuration.Default;

            ExceptionFactory = CoinAPI.EMS.REST.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UniswapV3Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UniswapV3Api(CoinAPI.EMS.REST.V1.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = CoinAPI.EMS.REST.V1.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CoinAPI.EMS.REST.V1.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CoinAPI.EMS.REST.V1.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CoinAPI.EMS.REST.V1.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Bundles (current) Gets bundles.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3BundleDTO></returns>
        public List<UniswapV3BundleDTO> UniswapV3BundlesCurrent ()
        {
             ApiResponse<List<UniswapV3BundleDTO>> localVarResponse = UniswapV3BundlesCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bundles (current) Gets bundles.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3BundleDTO></returns>
        public ApiResponse<List<UniswapV3BundleDTO>> UniswapV3BundlesCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv3/bundles/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3BundlesCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3BundleDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3BundleDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3BundleDTO>)));
        }

        /// <summary>
        /// Bundles (current) Gets bundles.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3BundleDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV3BundleDTO>> UniswapV3BundlesCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV3BundleDTO>> localVarResponse = await UniswapV3BundlesCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bundles (current) Gets bundles.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3BundleDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV3BundleDTO>>> UniswapV3BundlesCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv3/bundles/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3BundlesCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3BundleDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3BundleDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3BundleDTO>)));
        }

        /// <summary>
        /// Burns (current) Gets burns.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3BurnDTO></returns>
        public List<UniswapV3BurnDTO> UniswapV3BurnsCurrent ()
        {
             ApiResponse<List<UniswapV3BurnDTO>> localVarResponse = UniswapV3BurnsCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Burns (current) Gets burns.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3BurnDTO></returns>
        public ApiResponse<List<UniswapV3BurnDTO>> UniswapV3BurnsCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv3/burns/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3BurnsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3BurnDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3BurnDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3BurnDTO>)));
        }

        /// <summary>
        /// Burns (current) Gets burns.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3BurnDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV3BurnDTO>> UniswapV3BurnsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV3BurnDTO>> localVarResponse = await UniswapV3BurnsCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Burns (current) Gets burns.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3BurnDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV3BurnDTO>>> UniswapV3BurnsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv3/burns/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3BurnsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3BurnDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3BurnDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3BurnDTO>)));
        }

        /// <summary>
        /// Factories (current) Gets factories.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3FactoryDTO></returns>
        public List<UniswapV3FactoryDTO> UniswapV3FactoriesCurrent ()
        {
             ApiResponse<List<UniswapV3FactoryDTO>> localVarResponse = UniswapV3FactoriesCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Factories (current) Gets factories.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3FactoryDTO></returns>
        public ApiResponse<List<UniswapV3FactoryDTO>> UniswapV3FactoriesCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv3/factories/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3FactoriesCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3FactoryDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3FactoryDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3FactoryDTO>)));
        }

        /// <summary>
        /// Factories (current) Gets factories.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3FactoryDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV3FactoryDTO>> UniswapV3FactoriesCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV3FactoryDTO>> localVarResponse = await UniswapV3FactoriesCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Factories (current) Gets factories.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3FactoryDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV3FactoryDTO>>> UniswapV3FactoriesCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv3/factories/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3FactoriesCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3FactoryDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3FactoryDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3FactoryDTO>)));
        }

        /// <summary>
        /// Mints (current) Gets mints.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3MintDTO></returns>
        public List<UniswapV3MintDTO> UniswapV3MintsCurrent ()
        {
             ApiResponse<List<UniswapV3MintDTO>> localVarResponse = UniswapV3MintsCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mints (current) Gets mints.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3MintDTO></returns>
        public ApiResponse<List<UniswapV3MintDTO>> UniswapV3MintsCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv3/mints/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3MintsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3MintDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3MintDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3MintDTO>)));
        }

        /// <summary>
        /// Mints (current) Gets mints.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3MintDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV3MintDTO>> UniswapV3MintsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV3MintDTO>> localVarResponse = await UniswapV3MintsCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mints (current) Gets mints.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3MintDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV3MintDTO>>> UniswapV3MintsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv3/mints/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3MintsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3MintDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3MintDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3MintDTO>)));
        }

        /// <summary>
        /// PoolDayData (current) Gets poolDayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3PoolDayDataDTO></returns>
        public List<UniswapV3PoolDayDataDTO> UniswapV3PoolDayDataCurrent ()
        {
             ApiResponse<List<UniswapV3PoolDayDataDTO>> localVarResponse = UniswapV3PoolDayDataCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// PoolDayData (current) Gets poolDayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3PoolDayDataDTO></returns>
        public ApiResponse<List<UniswapV3PoolDayDataDTO>> UniswapV3PoolDayDataCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv3/poolDayData/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3PoolDayDataCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3PoolDayDataDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3PoolDayDataDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3PoolDayDataDTO>)));
        }

        /// <summary>
        /// PoolDayData (current) Gets poolDayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3PoolDayDataDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV3PoolDayDataDTO>> UniswapV3PoolDayDataCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV3PoolDayDataDTO>> localVarResponse = await UniswapV3PoolDayDataCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PoolDayData (current) Gets poolDayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3PoolDayDataDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV3PoolDayDataDTO>>> UniswapV3PoolDayDataCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv3/poolDayData/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3PoolDayDataCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3PoolDayDataDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3PoolDayDataDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3PoolDayDataDTO>)));
        }

        /// <summary>
        /// PoolHourData (current) Gets poolHourData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3PoolHourDataDTO></returns>
        public List<UniswapV3PoolHourDataDTO> UniswapV3PoolHourDataCurrent ()
        {
             ApiResponse<List<UniswapV3PoolHourDataDTO>> localVarResponse = UniswapV3PoolHourDataCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// PoolHourData (current) Gets poolHourData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3PoolHourDataDTO></returns>
        public ApiResponse<List<UniswapV3PoolHourDataDTO>> UniswapV3PoolHourDataCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv3/poolHourData/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3PoolHourDataCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3PoolHourDataDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3PoolHourDataDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3PoolHourDataDTO>)));
        }

        /// <summary>
        /// PoolHourData (current) Gets poolHourData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3PoolHourDataDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV3PoolHourDataDTO>> UniswapV3PoolHourDataCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV3PoolHourDataDTO>> localVarResponse = await UniswapV3PoolHourDataCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PoolHourData (current) Gets poolHourData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3PoolHourDataDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV3PoolHourDataDTO>>> UniswapV3PoolHourDataCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv3/poolHourData/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3PoolHourDataCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3PoolHourDataDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3PoolHourDataDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3PoolHourDataDTO>)));
        }

        /// <summary>
        /// Pools (current) Gets pools.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pool address. (optional)</param>
        /// <returns>List<UniswapV3PoolDTO></returns>
        public List<UniswapV3PoolDTO> UniswapV3PoolsCurrent (string id = default(string))
        {
             ApiResponse<List<UniswapV3PoolDTO>> localVarResponse = UniswapV3PoolsCurrentWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pools (current) Gets pools.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pool address. (optional)</param>
        /// <returns>ApiResponse of List<UniswapV3PoolDTO></returns>
        public ApiResponse<List<UniswapV3PoolDTO>> UniswapV3PoolsCurrentWithHttpInfo (string id = default(string))
        {

            var localVarPath = "/dapps/uniswapv3/pools/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3PoolsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3PoolDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3PoolDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3PoolDTO>)));
        }

        /// <summary>
        /// Pools (current) Gets pools.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pool address. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3PoolDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV3PoolDTO>> UniswapV3PoolsCurrentAsync (string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV3PoolDTO>> localVarResponse = await UniswapV3PoolsCurrentWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pools (current) Gets pools.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Pool address. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3PoolDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV3PoolDTO>>> UniswapV3PoolsCurrentWithHttpInfoAsync (string id = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv3/pools/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3PoolsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3PoolDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3PoolDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3PoolDTO>)));
        }

        /// <summary>
        /// PositionSnapshots (current) Gets positionSnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3PositionSnapshotDTO></returns>
        public List<UniswapV3PositionSnapshotDTO> UniswapV3PositionSnapshotsCurrent ()
        {
             ApiResponse<List<UniswapV3PositionSnapshotDTO>> localVarResponse = UniswapV3PositionSnapshotsCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// PositionSnapshots (current) Gets positionSnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3PositionSnapshotDTO></returns>
        public ApiResponse<List<UniswapV3PositionSnapshotDTO>> UniswapV3PositionSnapshotsCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv3/positionSnapshots/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3PositionSnapshotsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3PositionSnapshotDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3PositionSnapshotDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3PositionSnapshotDTO>)));
        }

        /// <summary>
        /// PositionSnapshots (current) Gets positionSnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3PositionSnapshotDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV3PositionSnapshotDTO>> UniswapV3PositionSnapshotsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV3PositionSnapshotDTO>> localVarResponse = await UniswapV3PositionSnapshotsCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PositionSnapshots (current) Gets positionSnapshots.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3PositionSnapshotDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV3PositionSnapshotDTO>>> UniswapV3PositionSnapshotsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv3/positionSnapshots/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3PositionSnapshotsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3PositionSnapshotDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3PositionSnapshotDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3PositionSnapshotDTO>)));
        }

        /// <summary>
        /// Positions (current) Gets positions.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3PositionDTO></returns>
        public List<UniswapV3PositionDTO> UniswapV3PositionsCurrent ()
        {
             ApiResponse<List<UniswapV3PositionDTO>> localVarResponse = UniswapV3PositionsCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Positions (current) Gets positions.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3PositionDTO></returns>
        public ApiResponse<List<UniswapV3PositionDTO>> UniswapV3PositionsCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv3/positions/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3PositionsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3PositionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3PositionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3PositionDTO>)));
        }

        /// <summary>
        /// Positions (current) Gets positions.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3PositionDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV3PositionDTO>> UniswapV3PositionsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV3PositionDTO>> localVarResponse = await UniswapV3PositionsCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Positions (current) Gets positions.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3PositionDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV3PositionDTO>>> UniswapV3PositionsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv3/positions/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3PositionsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3PositionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3PositionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3PositionDTO>)));
        }

        /// <summary>
        /// Swaps (current) Gets swaps.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Pool swap occured within. (optional)</param>
        /// <returns>List<UniswapV3SwapDTO></returns>
        public List<UniswapV3SwapDTO> UniswapV3SwapsCurrent (string pool = default(string))
        {
             ApiResponse<List<UniswapV3SwapDTO>> localVarResponse = UniswapV3SwapsCurrentWithHttpInfo(pool);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Swaps (current) Gets swaps.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Pool swap occured within. (optional)</param>
        /// <returns>ApiResponse of List<UniswapV3SwapDTO></returns>
        public ApiResponse<List<UniswapV3SwapDTO>> UniswapV3SwapsCurrentWithHttpInfo (string pool = default(string))
        {

            var localVarPath = "/dapps/uniswapv3/swaps/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pool != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pool", pool)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3SwapsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3SwapDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3SwapDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3SwapDTO>)));
        }

        /// <summary>
        /// Swaps (current) Gets swaps.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Pool swap occured within. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3SwapDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV3SwapDTO>> UniswapV3SwapsCurrentAsync (string pool = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV3SwapDTO>> localVarResponse = await UniswapV3SwapsCurrentWithHttpInfoAsync(pool, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Swaps (current) Gets swaps.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pool">Pool swap occured within. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3SwapDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV3SwapDTO>>> UniswapV3SwapsCurrentWithHttpInfoAsync (string pool = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv3/swaps/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pool != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pool", pool)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3SwapsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3SwapDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3SwapDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3SwapDTO>)));
        }

        /// <summary>
        /// TickDayData (current) Gets tickDayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3TickDayDataDTO></returns>
        public List<UniswapV3TickDayDataDTO> UniswapV3TickDayDataCurrent ()
        {
             ApiResponse<List<UniswapV3TickDayDataDTO>> localVarResponse = UniswapV3TickDayDataCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// TickDayData (current) Gets tickDayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3TickDayDataDTO></returns>
        public ApiResponse<List<UniswapV3TickDayDataDTO>> UniswapV3TickDayDataCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv3/tickDayData/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3TickDayDataCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3TickDayDataDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3TickDayDataDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3TickDayDataDTO>)));
        }

        /// <summary>
        /// TickDayData (current) Gets tickDayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3TickDayDataDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV3TickDayDataDTO>> UniswapV3TickDayDataCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV3TickDayDataDTO>> localVarResponse = await UniswapV3TickDayDataCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// TickDayData (current) Gets tickDayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3TickDayDataDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV3TickDayDataDTO>>> UniswapV3TickDayDataCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv3/tickDayData/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3TickDayDataCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3TickDayDataDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3TickDayDataDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3TickDayDataDTO>)));
        }

        /// <summary>
        /// Ticks (current) Gets ticks.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3TickDTO></returns>
        public List<UniswapV3TickDTO> UniswapV3TicksCurrent ()
        {
             ApiResponse<List<UniswapV3TickDTO>> localVarResponse = UniswapV3TicksCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Ticks (current) Gets ticks.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3TickDTO></returns>
        public ApiResponse<List<UniswapV3TickDTO>> UniswapV3TicksCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv3/ticks/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3TicksCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3TickDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3TickDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3TickDTO>)));
        }

        /// <summary>
        /// Ticks (current) Gets ticks.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3TickDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV3TickDTO>> UniswapV3TicksCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV3TickDTO>> localVarResponse = await UniswapV3TicksCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Ticks (current) Gets ticks.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3TickDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV3TickDTO>>> UniswapV3TicksCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv3/ticks/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3TicksCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3TickDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3TickDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3TickDTO>)));
        }

        /// <summary>
        /// TokenHourData (current) Gets tokenHourData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3TokenHourDataDTO></returns>
        public List<UniswapV3TokenHourDataDTO> UniswapV3TokenHourDataCurrent ()
        {
             ApiResponse<List<UniswapV3TokenHourDataDTO>> localVarResponse = UniswapV3TokenHourDataCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// TokenHourData (current) Gets tokenHourData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3TokenHourDataDTO></returns>
        public ApiResponse<List<UniswapV3TokenHourDataDTO>> UniswapV3TokenHourDataCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv3/tokenHourData/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3TokenHourDataCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3TokenHourDataDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3TokenHourDataDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3TokenHourDataDTO>)));
        }

        /// <summary>
        /// TokenHourData (current) Gets tokenHourData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3TokenHourDataDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV3TokenHourDataDTO>> UniswapV3TokenHourDataCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV3TokenHourDataDTO>> localVarResponse = await UniswapV3TokenHourDataCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// TokenHourData (current) Gets tokenHourData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3TokenHourDataDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV3TokenHourDataDTO>>> UniswapV3TokenHourDataCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv3/tokenHourData/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3TokenHourDataCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3TokenHourDataDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3TokenHourDataDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3TokenHourDataDTO>)));
        }

        /// <summary>
        /// TokenV3DayData (current) Gets tokenV3DayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3TokenV3DayDataDTO></returns>
        public List<UniswapV3TokenV3DayDataDTO> UniswapV3TokenV3DayDataCurrent ()
        {
             ApiResponse<List<UniswapV3TokenV3DayDataDTO>> localVarResponse = UniswapV3TokenV3DayDataCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// TokenV3DayData (current) Gets tokenV3DayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3TokenV3DayDataDTO></returns>
        public ApiResponse<List<UniswapV3TokenV3DayDataDTO>> UniswapV3TokenV3DayDataCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv3/tokenV3DayData/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3TokenV3DayDataCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3TokenV3DayDataDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3TokenV3DayDataDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3TokenV3DayDataDTO>)));
        }

        /// <summary>
        /// TokenV3DayData (current) Gets tokenV3DayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3TokenV3DayDataDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV3TokenV3DayDataDTO>> UniswapV3TokenV3DayDataCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV3TokenV3DayDataDTO>> localVarResponse = await UniswapV3TokenV3DayDataCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// TokenV3DayData (current) Gets tokenV3DayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3TokenV3DayDataDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV3TokenV3DayDataDTO>>> UniswapV3TokenV3DayDataCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv3/tokenV3DayData/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3TokenV3DayDataCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3TokenV3DayDataDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3TokenV3DayDataDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3TokenV3DayDataDTO>)));
        }

        /// <summary>
        /// Tokens (current) Gets tokens.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3TokenDTO></returns>
        public List<UniswapV3TokenDTO> UniswapV3TokensCurrent ()
        {
             ApiResponse<List<UniswapV3TokenDTO>> localVarResponse = UniswapV3TokensCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tokens (current) Gets tokens.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3TokenDTO></returns>
        public ApiResponse<List<UniswapV3TokenDTO>> UniswapV3TokensCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv3/tokens/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3TokensCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3TokenDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3TokenDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3TokenDTO>)));
        }

        /// <summary>
        /// Tokens (current) Gets tokens.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3TokenDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV3TokenDTO>> UniswapV3TokensCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV3TokenDTO>> localVarResponse = await UniswapV3TokensCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tokens (current) Gets tokens.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3TokenDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV3TokenDTO>>> UniswapV3TokensCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv3/tokens/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3TokensCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3TokenDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3TokenDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3TokenDTO>)));
        }

        /// <summary>
        /// Transactions (current) Gets transactions.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3TransactionDTO></returns>
        public List<UniswapV3TransactionDTO> UniswapV3TransactionsCurrent ()
        {
             ApiResponse<List<UniswapV3TransactionDTO>> localVarResponse = UniswapV3TransactionsCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transactions (current) Gets transactions.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3TransactionDTO></returns>
        public ApiResponse<List<UniswapV3TransactionDTO>> UniswapV3TransactionsCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv3/transactions/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3TransactionsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3TransactionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3TransactionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3TransactionDTO>)));
        }

        /// <summary>
        /// Transactions (current) Gets transactions.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3TransactionDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV3TransactionDTO>> UniswapV3TransactionsCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV3TransactionDTO>> localVarResponse = await UniswapV3TransactionsCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transactions (current) Gets transactions.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3TransactionDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV3TransactionDTO>>> UniswapV3TransactionsCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv3/transactions/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3TransactionsCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3TransactionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3TransactionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3TransactionDTO>)));
        }

        /// <summary>
        /// UniswapDayData (current) Gets uniswapDayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List<UniswapV3UniswapDayDataDTO></returns>
        public List<UniswapV3UniswapDayDataDTO> UniswapV3UniswapDayDataCurrent ()
        {
             ApiResponse<List<UniswapV3UniswapDayDataDTO>> localVarResponse = UniswapV3UniswapDayDataCurrentWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// UniswapDayData (current) Gets uniswapDayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List<UniswapV3UniswapDayDataDTO></returns>
        public ApiResponse<List<UniswapV3UniswapDayDataDTO>> UniswapV3UniswapDayDataCurrentWithHttpInfo ()
        {

            var localVarPath = "/dapps/uniswapv3/uniswapDayData/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3UniswapDayDataCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3UniswapDayDataDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3UniswapDayDataDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3UniswapDayDataDTO>)));
        }

        /// <summary>
        /// UniswapDayData (current) Gets uniswapDayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List<UniswapV3UniswapDayDataDTO></returns>
        public async System.Threading.Tasks.Task<List<UniswapV3UniswapDayDataDTO>> UniswapV3UniswapDayDataCurrentAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<UniswapV3UniswapDayDataDTO>> localVarResponse = await UniswapV3UniswapDayDataCurrentWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// UniswapDayData (current) Gets uniswapDayData.
        /// </summary>
        /// <exception cref="CoinAPI.EMS.REST.V1.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;UniswapV3UniswapDayDataDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UniswapV3UniswapDayDataDTO>>> UniswapV3UniswapDayDataCurrentWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/dapps/uniswapv3/uniswapDayData/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UniswapV3UniswapDayDataCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<UniswapV3UniswapDayDataDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<UniswapV3UniswapDayDataDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<UniswapV3UniswapDayDataDTO>)));
        }

    }
}
