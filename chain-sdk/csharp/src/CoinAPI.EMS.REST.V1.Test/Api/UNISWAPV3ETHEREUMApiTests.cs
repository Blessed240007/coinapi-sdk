/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using CoinAPI.EMS.REST.V1.Client;
using CoinAPI.EMS.REST.V1.Api;
using CoinAPI.EMS.REST.V1.Model;

namespace CoinAPI.EMS.REST.V1.Test
{
    /// <summary>
    ///  Class for testing UNISWAPV3ETHEREUMApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UNISWAPV3ETHEREUMApiTests
    {
        private UNISWAPV3ETHEREUMApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UNISWAPV3ETHEREUMApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UNISWAPV3ETHEREUMApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' UNISWAPV3ETHEREUMApi
            //Assert.IsInstanceOf(typeof(UNISWAPV3ETHEREUMApi), instance);
        }

        
        /// <summary>
        /// Test UNISWAPV3ETHEREUMAccountsCurrent
        /// </summary>
        [Test]
        public void UNISWAPV3ETHEREUMAccountsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UNISWAPV3ETHEREUMAccountsCurrent();
            //Assert.IsInstanceOf(typeof(List<UNISWAPV3ETHEREUMAccountDTO>), response, "response is List<UNISWAPV3ETHEREUMAccountDTO>");
        }
        
        /// <summary>
        /// Test UNISWAPV3ETHEREUMActiveAccountsCurrent
        /// </summary>
        [Test]
        public void UNISWAPV3ETHEREUMActiveAccountsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UNISWAPV3ETHEREUMActiveAccountsCurrent();
            //Assert.IsInstanceOf(typeof(List<UNISWAPV3ETHEREUMActiveAccountDTO>), response, "response is List<UNISWAPV3ETHEREUMActiveAccountDTO>");
        }
        
        /// <summary>
        /// Test UNISWAPV3ETHEREUMDepositsCurrent
        /// </summary>
        [Test]
        public void UNISWAPV3ETHEREUMDepositsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UNISWAPV3ETHEREUMDepositsCurrent();
            //Assert.IsInstanceOf(typeof(List<UNISWAPV3ETHEREUMDepositDTO>), response, "response is List<UNISWAPV3ETHEREUMDepositDTO>");
        }
        
        /// <summary>
        /// Test UNISWAPV3ETHEREUMDexAmmProtocolsCurrent
        /// </summary>
        [Test]
        public void UNISWAPV3ETHEREUMDexAmmProtocolsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UNISWAPV3ETHEREUMDexAmmProtocolsCurrent();
            //Assert.IsInstanceOf(typeof(List<UNISWAPV3ETHEREUMDexAmmProtocolDTO>), response, "response is List<UNISWAPV3ETHEREUMDexAmmProtocolDTO>");
        }
        
        /// <summary>
        /// Test UNISWAPV3ETHEREUMFinancialsDailySnapshotsCurrent
        /// </summary>
        [Test]
        public void UNISWAPV3ETHEREUMFinancialsDailySnapshotsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UNISWAPV3ETHEREUMFinancialsDailySnapshotsCurrent();
            //Assert.IsInstanceOf(typeof(List<UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO>), response, "response is List<UNISWAPV3ETHEREUMFinancialsDailySnapshotDTO>");
        }
        
        /// <summary>
        /// Test UNISWAPV3ETHEREUMLiquidityPoolAmountsCurrent
        /// </summary>
        [Test]
        public void UNISWAPV3ETHEREUMLiquidityPoolAmountsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.UNISWAPV3ETHEREUMLiquidityPoolAmountsCurrent(id);
            //Assert.IsInstanceOf(typeof(List<UNISWAPV3ETHEREUMLiquidityPoolAmountDTO>), response, "response is List<UNISWAPV3ETHEREUMLiquidityPoolAmountDTO>");
        }
        
        /// <summary>
        /// Test UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrent
        /// </summary>
        [Test]
        public void UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pool = null;
            //var response = instance.UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotsCurrent(pool);
            //Assert.IsInstanceOf(typeof(List<UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO>), response, "response is List<UNISWAPV3ETHEREUMLiquidityPoolDailySnapshotDTO>");
        }
        
        /// <summary>
        /// Test UNISWAPV3ETHEREUMLiquidityPoolFeesCurrent
        /// </summary>
        [Test]
        public void UNISWAPV3ETHEREUMLiquidityPoolFeesCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UNISWAPV3ETHEREUMLiquidityPoolFeesCurrent();
            //Assert.IsInstanceOf(typeof(List<UNISWAPV3ETHEREUMLiquidityPoolFeeDTO>), response, "response is List<UNISWAPV3ETHEREUMLiquidityPoolFeeDTO>");
        }
        
        /// <summary>
        /// Test UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrent
        /// </summary>
        [Test]
        public void UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pool = null;
            //var response = instance.UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotsCurrent(pool);
            //Assert.IsInstanceOf(typeof(List<UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO>), response, "response is List<UNISWAPV3ETHEREUMLiquidityPoolHourlySnapshotDTO>");
        }
        
        /// <summary>
        /// Test UNISWAPV3ETHEREUMLiquidityPoolsCurrent
        /// </summary>
        [Test]
        public void UNISWAPV3ETHEREUMLiquidityPoolsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.UNISWAPV3ETHEREUMLiquidityPoolsCurrent(id);
            //Assert.IsInstanceOf(typeof(List<UNISWAPV3ETHEREUMLiquidityPoolDTO>), response, "response is List<UNISWAPV3ETHEREUMLiquidityPoolDTO>");
        }
        
        /// <summary>
        /// Test UNISWAPV3ETHEREUMPositionSnapshotsCurrent
        /// </summary>
        [Test]
        public void UNISWAPV3ETHEREUMPositionSnapshotsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UNISWAPV3ETHEREUMPositionSnapshotsCurrent();
            //Assert.IsInstanceOf(typeof(List<UNISWAPV3ETHEREUMPositionSnapshotDTO>), response, "response is List<UNISWAPV3ETHEREUMPositionSnapshotDTO>");
        }
        
        /// <summary>
        /// Test UNISWAPV3ETHEREUMPositionsCurrent
        /// </summary>
        [Test]
        public void UNISWAPV3ETHEREUMPositionsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pool = null;
            //var response = instance.UNISWAPV3ETHEREUMPositionsCurrent(pool);
            //Assert.IsInstanceOf(typeof(List<UNISWAPV3ETHEREUMPositionDTO>), response, "response is List<UNISWAPV3ETHEREUMPositionDTO>");
        }
        
        /// <summary>
        /// Test UNISWAPV3ETHEREUMRewardTokensCurrent
        /// </summary>
        [Test]
        public void UNISWAPV3ETHEREUMRewardTokensCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UNISWAPV3ETHEREUMRewardTokensCurrent();
            //Assert.IsInstanceOf(typeof(List<UNISWAPV3ETHEREUMRewardTokenDTO>), response, "response is List<UNISWAPV3ETHEREUMRewardTokenDTO>");
        }
        
        /// <summary>
        /// Test UNISWAPV3ETHEREUMSwapsCurrent
        /// </summary>
        [Test]
        public void UNISWAPV3ETHEREUMSwapsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UNISWAPV3ETHEREUMSwapsCurrent();
            //Assert.IsInstanceOf(typeof(List<UNISWAPV3ETHEREUMSwapDTO>), response, "response is List<UNISWAPV3ETHEREUMSwapDTO>");
        }
        
        /// <summary>
        /// Test UNISWAPV3ETHEREUMTickDailySnapshotsCurrent
        /// </summary>
        [Test]
        public void UNISWAPV3ETHEREUMTickDailySnapshotsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pool = null;
            //var response = instance.UNISWAPV3ETHEREUMTickDailySnapshotsCurrent(pool);
            //Assert.IsInstanceOf(typeof(List<UNISWAPV3ETHEREUMTickDailySnapshotDTO>), response, "response is List<UNISWAPV3ETHEREUMTickDailySnapshotDTO>");
        }
        
        /// <summary>
        /// Test UNISWAPV3ETHEREUMTickHourlySnapshotsCurrent
        /// </summary>
        [Test]
        public void UNISWAPV3ETHEREUMTickHourlySnapshotsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pool = null;
            //var response = instance.UNISWAPV3ETHEREUMTickHourlySnapshotsCurrent(pool);
            //Assert.IsInstanceOf(typeof(List<UNISWAPV3ETHEREUMTickHourlySnapshotDTO>), response, "response is List<UNISWAPV3ETHEREUMTickHourlySnapshotDTO>");
        }
        
        /// <summary>
        /// Test UNISWAPV3ETHEREUMTicksCurrent
        /// </summary>
        [Test]
        public void UNISWAPV3ETHEREUMTicksCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pool = null;
            //var response = instance.UNISWAPV3ETHEREUMTicksCurrent(pool);
            //Assert.IsInstanceOf(typeof(List<UNISWAPV3ETHEREUMTickDTO>), response, "response is List<UNISWAPV3ETHEREUMTickDTO>");
        }
        
        /// <summary>
        /// Test UNISWAPV3ETHEREUMTokenWhiteListSymbolsCurrent
        /// </summary>
        [Test]
        public void UNISWAPV3ETHEREUMTokenWhiteListSymbolsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UNISWAPV3ETHEREUMTokenWhiteListSymbolsCurrent();
            //Assert.IsInstanceOf(typeof(List<UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO>), response, "response is List<UNISWAPV3ETHEREUMTokenWhiteListSymbolDTO>");
        }
        
        /// <summary>
        /// Test UNISWAPV3ETHEREUMTokenWhiteListsCurrent
        /// </summary>
        [Test]
        public void UNISWAPV3ETHEREUMTokenWhiteListsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UNISWAPV3ETHEREUMTokenWhiteListsCurrent();
            //Assert.IsInstanceOf(typeof(List<UNISWAPV3ETHEREUMTokenWhiteListDTO>), response, "response is List<UNISWAPV3ETHEREUMTokenWhiteListDTO>");
        }
        
        /// <summary>
        /// Test UNISWAPV3ETHEREUMTokensCurrent
        /// </summary>
        [Test]
        public void UNISWAPV3ETHEREUMTokensCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.UNISWAPV3ETHEREUMTokensCurrent(id);
            //Assert.IsInstanceOf(typeof(List<UNISWAPV3ETHEREUMTokenDTO>), response, "response is List<UNISWAPV3ETHEREUMTokenDTO>");
        }
        
        /// <summary>
        /// Test UNISWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrent
        /// </summary>
        [Test]
        public void UNISWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UNISWAPV3ETHEREUMUsageMetricsDailySnapshotsCurrent();
            //Assert.IsInstanceOf(typeof(List<UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO>), response, "response is List<UNISWAPV3ETHEREUMUsageMetricsDailySnapshotDTO>");
        }
        
        /// <summary>
        /// Test UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrent
        /// </summary>
        [Test]
        public void UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotsCurrent();
            //Assert.IsInstanceOf(typeof(List<UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO>), response, "response is List<UNISWAPV3ETHEREUMUsageMetricsHourlySnapshotDTO>");
        }
        
        /// <summary>
        /// Test UNISWAPV3ETHEREUMWithdrawsCurrent
        /// </summary>
        [Test]
        public void UNISWAPV3ETHEREUMWithdrawsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UNISWAPV3ETHEREUMWithdrawsCurrent();
            //Assert.IsInstanceOf(typeof(List<UNISWAPV3ETHEREUMWithdrawDTO>), response, "response is List<UNISWAPV3ETHEREUMWithdrawDTO>");
        }
        
    }

}
