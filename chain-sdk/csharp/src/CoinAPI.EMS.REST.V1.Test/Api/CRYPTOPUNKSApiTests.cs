/*
 * On Chain Dapps - REST API
 *
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using CoinAPI.EMS.REST.V1.Client;
using CoinAPI.EMS.REST.V1.Api;
using CoinAPI.EMS.REST.V1.Model;

namespace CoinAPI.EMS.REST.V1.Test
{
    /// <summary>
    ///  Class for testing CRYPTOPUNKSApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CRYPTOPUNKSApiTests
    {
        private CRYPTOPUNKSApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CRYPTOPUNKSApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CRYPTOPUNKSApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' CRYPTOPUNKSApi
            //Assert.IsInstanceOf(typeof(CRYPTOPUNKSApi), instance);
        }

        
        /// <summary>
        /// Test CRYPTOPUNKSBidsCurrent
        /// </summary>
        [Test]
        public void CRYPTOPUNKSBidsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CRYPTOPUNKSBidsCurrent();
            //Assert.IsInstanceOf(typeof(List<CRYPTOPUNKSBidDTO>), response, "response is List<CRYPTOPUNKSBidDTO>");
        }
        
        /// <summary>
        /// Test CRYPTOPUNKSCollectionDailySnapshotsCurrent
        /// </summary>
        [Test]
        public void CRYPTOPUNKSCollectionDailySnapshotsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CRYPTOPUNKSCollectionDailySnapshotsCurrent();
            //Assert.IsInstanceOf(typeof(List<CRYPTOPUNKSCollectionDailySnapshotDTO>), response, "response is List<CRYPTOPUNKSCollectionDailySnapshotDTO>");
        }
        
        /// <summary>
        /// Test CRYPTOPUNKSCollectionsCurrent
        /// </summary>
        [Test]
        public void CRYPTOPUNKSCollectionsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CRYPTOPUNKSCollectionsCurrent();
            //Assert.IsInstanceOf(typeof(List<CRYPTOPUNKSCollectionDTO>), response, "response is List<CRYPTOPUNKSCollectionDTO>");
        }
        
        /// <summary>
        /// Test CRYPTOPUNKSDataSourcesCurrent
        /// </summary>
        [Test]
        public void CRYPTOPUNKSDataSourcesCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CRYPTOPUNKSDataSourcesCurrent();
            //Assert.IsInstanceOf(typeof(List<CRYPTOPUNKSDataSourcesDTO>), response, "response is List<CRYPTOPUNKSDataSourcesDTO>");
        }
        
        /// <summary>
        /// Test CRYPTOPUNKSItemsCurrent
        /// </summary>
        [Test]
        public void CRYPTOPUNKSItemsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CRYPTOPUNKSItemsCurrent();
            //Assert.IsInstanceOf(typeof(List<CRYPTOPUNKSItemDTO>), response, "response is List<CRYPTOPUNKSItemDTO>");
        }
        
        /// <summary>
        /// Test CRYPTOPUNKSMarketPlacesCurrent
        /// </summary>
        [Test]
        public void CRYPTOPUNKSMarketPlacesCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CRYPTOPUNKSMarketPlacesCurrent();
            //Assert.IsInstanceOf(typeof(List<CRYPTOPUNKSMarketPlaceDTO>), response, "response is List<CRYPTOPUNKSMarketPlaceDTO>");
        }
        
        /// <summary>
        /// Test CRYPTOPUNKSMarketplaceDailySnapshotsCurrent
        /// </summary>
        [Test]
        public void CRYPTOPUNKSMarketplaceDailySnapshotsCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CRYPTOPUNKSMarketplaceDailySnapshotsCurrent();
            //Assert.IsInstanceOf(typeof(List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>), response, "response is List<CRYPTOPUNKSMarketplaceDailySnapshotDTO>");
        }
        
        /// <summary>
        /// Test CRYPTOPUNKSTradesCurrent
        /// </summary>
        [Test]
        public void CRYPTOPUNKSTradesCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CRYPTOPUNKSTradesCurrent();
            //Assert.IsInstanceOf(typeof(List<CRYPTOPUNKSTradeDTO>), response, "response is List<CRYPTOPUNKSTradeDTO>");
        }
        
        /// <summary>
        /// Test CRYPTOPUNKSUsersCurrent
        /// </summary>
        [Test]
        public void CRYPTOPUNKSUsersCurrentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CRYPTOPUNKSUsersCurrent();
            //Assert.IsInstanceOf(typeof(List<CRYPTOPUNKSUserDTO>), response, "response is List<CRYPTOPUNKSUserDTO>");
        }
        
    }

}
