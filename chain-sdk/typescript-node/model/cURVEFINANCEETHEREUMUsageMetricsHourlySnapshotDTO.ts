/**
 * On Chain Dapps - REST API
 *  This section will provide necessary information about the `OnChain API` protocol.  <br/><br/> Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.                             
 *
 * The version of the OpenAPI document: v1
 * Contact: support@coinapi.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* 
*/
export class CURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTO {
    'entryTime'?: Date;
    'recvTime'?: Date;
    /**
    * Number of block in which entity was recorded.
    */
    'blockNumber'?: number;
    /**
    * 
    */
    'blockRange'?: string | null;
    /**
    * ID is # of days since Unix epoch time
    */
    'id'?: string | null;
    /**
    * Protocol this snapshot is associated with
    */
    'protocol'?: string | null;
    /**
    * Number of unique daily active users
    */
    'hourlyActiveUsers'?: number;
    /**
    * Number of cumulative unique users
    */
    'cumulativeUniqueUsers'?: number;
    /**
    * Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface.
    */
    'hourlyTransactionCount'?: number;
    /**
    * Total number of deposits (add liquidity) in an hour
    */
    'hourlyDepositCount'?: number;
    /**
    * Total number of withdrawals (remove liquidity) in an hour
    */
    'hourlyWithdrawCount'?: number;
    /**
    * Total number of trades (swaps) in an hour
    */
    'hourlySwapCount'?: number;
    /**
    * Timestamp of this snapshot
    */
    'timestamp'?: string | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "entryTime",
            "baseName": "entry_time",
            "type": "Date"
        },
        {
            "name": "recvTime",
            "baseName": "recv_time",
            "type": "Date"
        },
        {
            "name": "blockNumber",
            "baseName": "block_number",
            "type": "number"
        },
        {
            "name": "blockRange",
            "baseName": "block_range",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "protocol",
            "baseName": "protocol",
            "type": "string"
        },
        {
            "name": "hourlyActiveUsers",
            "baseName": "hourly_active_users",
            "type": "number"
        },
        {
            "name": "cumulativeUniqueUsers",
            "baseName": "cumulative_unique_users",
            "type": "number"
        },
        {
            "name": "hourlyTransactionCount",
            "baseName": "hourly_transaction_count",
            "type": "number"
        },
        {
            "name": "hourlyDepositCount",
            "baseName": "hourly_deposit_count",
            "type": "number"
        },
        {
            "name": "hourlyWithdrawCount",
            "baseName": "hourly_withdraw_count",
            "type": "number"
        },
        {
            "name": "hourlySwapCount",
            "baseName": "hourly_swap_count",
            "type": "number"
        },
        {
            "name": "timestamp",
            "baseName": "timestamp",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return CURVEFINANCEETHEREUMUsageMetricsHourlySnapshotDTO.attributeTypeMap;
    }
}

